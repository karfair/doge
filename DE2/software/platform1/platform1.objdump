
platform1.elf:     file format elf32-littlenios2
platform1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000e9cc memsz 0x0000e9cc flags r-x
    LOAD off    0x0000f9ec vaddr 0x0100e9ec paddr 0x0101062c align 2**12
         filesz 0x00001c40 memsz 0x00001c40 flags rw-
    LOAD off    0x0001226c vaddr 0x0101226c paddr 0x0101226c align 2**12
         filesz 0x00000000 memsz 0x00000810 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e388  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004ac  0100e540  0100e540  0000f540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c40  0100e9ec  0101062c  0000f9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000810  0101226c  0101226c  0001226c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001162c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  00011658  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000019e7  00000000  00000000  000123b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027437  00000000  00000000  00013d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000848e  00000000  00000000  0003b1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001583c  00000000  00000000  0004365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e30  00000000  00000000  00058e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000265f  00000000  00000000  0005acc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d026  00000000  00000000  0005d327  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ad0  00000000  00000000  0006a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e7d3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0006e7d6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e7e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e7e6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006e7e7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006e7f0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006e7f9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006e802  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  0006e80d  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a68  00000000  00000000  0006e834  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a385c  00000000  00000000  0007429c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100e540 l    d  .rodata	00000000 .rodata
0100e9ec l    d  .rwdata	00000000 .rwdata
0101226c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bomb.c
00000000 l    df *ABS*	00000000 rs232com.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01000c94 l     F .text	00000058 __sprint_r
0100e64e l     O .rodata	00000010 blanks.3452
0100e63e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002cf8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010046f4 l     F .text	00000058 std
01004800 l     F .text	00000008 __fp_lock
01004808 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100e9ec l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
010105f8 l     O .rwdata	00000004 charset
0100e684 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100e7cc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01008ccc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009df8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a66c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a6cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a7cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100aaac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100ab8c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100ace8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100af14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01010620 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100b1b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100f3a8 l     O .rwdata	00001060 jtag_uart
01010408 l     O .rwdata	00000030 av_config
01010438 l     O .rwdata	00000030 audio
01010468 l     O .rwdata	0000002c character_lcd_0
01010494 l     O .rwdata	0000002c push_button
010104c0 l     O .rwdata	00000038 ps2_0
010104f8 l     O .rwdata	0000002c rs232_0
01010524 l     O .rwdata	00000048 char_drawer
0101056c l     O .rwdata	00000054 pixel_buffer_dma
010105c0 l     O .rwdata	0000002c sd_card
0100b5bc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100b7f4 l     F .text	0000022c altera_avalon_jtag_uart_irq
0100ba20 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100c09c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100d6b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100d89c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100d9d8 l     F .text	000000dc alt_file_locked
0100dc3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100e2bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100e470 l     F .text	00000040 alt_sim_halt
01000b48 g     F .text	0000001c putchar
010064b0 g     F .text	00000094 _mprec_log10
0100659c g     F .text	00000088 __any_on
01007fe0 g     F .text	00000070 _isatty_r
0100e7a4 g     O .rodata	00000028 __mprec_tinytens
0100ad48 g     F .text	0000006c alt_main
01000b6c g     F .text	000000a0 _puts_r
0100c914 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
010127ec g     O .bss	00000100 alt_irq
01008050 g     F .text	00000078 _lseek_r
0101062c g       *ABS*	00000000 __flash_rwdata_start
0100c214 g     F .text	00000034 alt_up_character_lcd_send_cmd
010097ec g     F .text	00000088 __eqdf2
01012a7c g       *ABS*	00000000 __alt_heap_start
01000ad0 g     F .text	00000044 printf
01007960 g     F .text	00000068 __sseek
0100475c g     F .text	000000a4 __sinit
0100d2f4 g     F .text	00000114 alt_up_char_buffer_string
01007b60 g     F .text	00000130 __swbuf_r
0100c72c g     F .text	00000034 read_CE_bit
010122e4 g     O .bss	00000088 p
01005434 g     F .text	00000084 _setlocale_r
0100485c g     F .text	00000068 __sfmoreglue
0100add4 g     F .text	00000020 __malloc_unlock
0100cac0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0100cffc g     F .text	00000090 alt_up_rs232_read_fd
0100d224 g     F .text	000000d0 alt_up_char_buffer_draw
01005f2c g     F .text	000000e0 memmove
0100484c g     F .text	00000010 _cleanup
01006624 g     F .text	000000bc _Balloc
010098fc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100c198 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01012274 g     O .bss	00000001 dataType
01007f6c g     F .text	00000074 _fstat_r
010122a0 g     O .bss	00000004 errno
010122ac g     O .bss	00000004 alt_argv
010185ec g       *ABS*	00000000 _gp
0100f228 g     O .rwdata	00000180 alt_fd_list
01000b64 g     F .text	00000008 _putchar_r
0100d7d8 g     F .text	00000094 alt_find_dev
01005e8c g     F .text	000000a0 memcpy
0100c3ac g     F .text	0000004c alt_up_character_lcd_write_fd
0100d408 g     F .text	0000005c alt_up_char_buffer_clear
01004840 g     F .text	0000000c _cleanup_r
01009a94 g     F .text	000000f8 __floatsidf
0100d960 g     F .text	00000078 alt_io_redirect
01009a0c g     F .text	00000088 __ltdf2
0100e540 g       *ABS*	00000000 __DTOR_END__
0100cf88 g     F .text	00000074 alt_up_rs232_read_data
01000c0c g     F .text	00000014 puts
01006400 g     F .text	000000b0 __ratio
0100bc38 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01000b14 g     F .text	00000034 _printf_r
01009f34 g     F .text	00000008 __udivsi3
0100a9ec g     F .text	000000c0 isatty
0100e6b4 g     O .rodata	000000c8 __mprec_tens
01005410 g     F .text	00000008 __locale_charset
0100e038 g     F .text	00000090 alt_icache_flush
01012294 g     O .bss	00000004 __malloc_top_pad
010105f4 g     O .rwdata	00000004 __mb_cur_max
01005418 g     F .text	0000000c _localeconv_r
01006d1c g     F .text	0000003c __i2b
01004df4 g     F .text	0000049c __sfvwrite_r
010078e8 g     F .text	00000070 _sbrk_r
010080c8 g     F .text	00000078 _read_r
0100edec g     O .rwdata	0000000c __lc_ctype
01010614 g     O .rwdata	00000004 alt_max_fd
0100cef0 g     F .text	00000050 alt_up_rs232_check_parity
0100a370 g     F .text	00000138 __unpack_d
01007e48 g     F .text	00000110 _fclose_r
0100c760 g     F .text	00000034 read_num_bytes_available
010046c0 g     F .text	00000034 fflush
01012298 g     O .bss	00000004 __malloc_max_sbrked_mem
01012278 g     O .bss	00000004 End
0100a82c g     F .text	000001c0 alt_irq_register
0100c6c8 g     F .text	00000034 read_RI_bit
0100915c g     F .text	00000074 __adddf3
010062e0 g     F .text	00000120 __b2d
0100871c g     F .text	000005b0 __umoddi3
0100abf8 g     F .text	000000f0 lseek
010105f0 g     O .rwdata	00000004 _global_impure_ptr
01007284 g     F .text	000005f4 _realloc_r
01012a7c g       *ABS*	00000000 __bss_end
0100dd34 g     F .text	0000010c alt_tick
01008140 g     F .text	000005dc __udivdi3
0101236c g     O .bss	00000400 send
0100e77c g     O .rodata	00000028 __mprec_bigtens
01006f78 g     F .text	00000120 __s2b
01009c64 g     F .text	00000194 __floatunsidf
01006200 g     F .text	00000060 __mcmp
0100c7c8 g     F .text	0000002c read_data_byte
01004828 g     F .text	00000018 __fp_lock_all
0100dc9c g     F .text	00000098 alt_alarm_stop
0100c6fc g     F .text	00000030 read_RE_bit
010003d0 g     F .text	00000024 get_buffer_space
010122a4 g     O .bss	00000004 alt_irq_active
0101227c g     O .bss	00000001 id
010000ec g     F .exceptions	000000cc alt_irq_handler
0100f200 g     O .rwdata	00000028 alt_dev_null
0101226c g     O .bss	00000004 set_name_i
0100c694 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100c96c g     F .text	00000078 alt_up_ps2_write_data_byte
0100d5b8 g     F .text	00000044 alt_dcache_flush_all
010060cc g     F .text	00000070 __hi0bits
01009b8c g     F .text	000000d8 __fixdfsi
0101062c g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0101060c g     O .rwdata	00000008 alt_dev_list
0100b090 g     F .text	00000120 write
0100719c g     F .text	000000e8 _putc_r
010006f8 g     F .text	000003d8 uart_isr
0100e9ec g       *ABS*	00000000 __ram_rodata_end
0100a6f8 g     F .text	000000d4 fstat
0100d08c g     F .text	00000094 alt_up_rs232_write_fd
01006e58 g     F .text	00000120 __pow5mult
01012288 g     O .bss	00000004 __nlocale_changed
01009f3c g     F .text	00000008 __umodsi3
01012a7c g       *ABS*	00000000 end
0100cce0 g     F .text	000000a8 alt_up_ps2_write_fd
0100d160 g     F .text	00000084 alt_up_char_buffer_init
0100b73c g     F .text	000000b8 altera_avalon_jtag_uart_init
0100e53c g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100c110 g     F .text	00000088 alt_avalon_timer_sc_init
01009fdc g     F .text	00000080 __clzsi2
0100be5c g     F .text	00000240 altera_avalon_jtag_uart_write
0100061c g     F .text	0000009c uart_init
0100474c g     F .text	00000004 __sfp_lock_acquire
01005da8 g     F .text	000000e4 memchr
0100c2bc g     F .text	00000078 alt_up_character_lcd_write
01000cec g     F .text	00001eac ___vfprintf_internal_r
01004ae0 g     F .text	00000314 _free_r
0100e2c0 g     F .text	000001b0 __call_exitprocs
0101228c g     O .bss	00000004 __mlocale_changed
01010600 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
010122b4 g     O .bss	00000004 _alt_tick_rate
010069e8 g     F .text	0000014c __lshift
010122b8 g     O .bss	00000004 _alt_nticks
0100adf4 g     F .text	00000120 read
0100b244 g     F .text	00000378 alt_sys_init
0100c520 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100e188 g     F .text	00000134 __register_exitproc
0101276c g     O .bss	00000080 buffer
0100cbec g     F .text	00000058 alt_up_ps2_clear_fifo
0100ceb0 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
01006b34 g     F .text	000001e8 __multiply
0100c5d0 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100bad0 g     F .text	00000074 altera_avalon_jtag_uart_close
0100e9ec g       *ABS*	00000000 __ram_rwdata_start
0100e540 g       *ABS*	00000000 __ram_rodata_start
010122bc g     O .bss	00000028 __malloc_current_mallinfo
010066e0 g     F .text	0000017c __d2b
0100b5f4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100df80 g     F .text	000000b8 alt_get_fd
0100a4a8 g     F .text	000000c8 __fpcmp_parts_d
01007dd8 g     F .text	00000070 _close_r
0100e114 g     F .text	00000074 memcmp
0100b6a4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01012a7c g       *ABS*	00000000 __alt_stack_base
0100b6ec g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002bbc g     F .text	0000013c __swsetup_r
01000204 g     F .text	00000034 sendNameAll
01009594 g     F .text	00000258 __divdf3
010048c4 g     F .text	000000f0 __sfp
01006544 g     F .text	00000058 __copybits
0100edf8 g     O .rwdata	00000408 __malloc_av_
01004758 g     F .text	00000004 __sinit_lock_release
010091d0 g     F .text	000003c4 __muldf3
01007a44 g     F .text	00000060 __sread
0100ce1c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0100de60 g     F .text	00000120 alt_find_file
0100d5fc g     F .text	000000b4 alt_dev_llist_insert
0100adb4 g     F .text	00000020 __malloc_lock
01012270 g     O .bss	00000001 hasReadHeader
0100afd4 g     F .text	000000bc sbrk
010044c4 g     F .text	000001fc _fflush_r
01007d24 g     F .text	000000b4 _calloc_r
0101226c g       *ABS*	00000000 __bss_start
0100600c g     F .text	00000098 memset
010006b8 g     F .text	00000040 main
010122b0 g     O .bss	00000004 alt_envp
0101229c g     O .bss	00000004 __malloc_max_total_mem
0100d1e4 g     F .text	00000040 alt_up_char_buffer_open_dev
0100b64c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01007c90 g     F .text	0000001c __swbuf
0100c470 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01007958 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01007f58 g     F .text	00000014 fclose
0100cb70 g     F .text	0000007c alt_up_ps2_read_data_byte
0101227d g     O .bss	00000001 size
010128ec g     O .bss	00000190 _atexit0
01002f10 g     F .text	000015b4 _dtoa_r
01005668 g     F .text	00000740 _malloc_r
01010618 g     O .rwdata	00000004 alt_errno
01005358 g     F .text	000000b8 _fwalk
0100cd88 g     F .text	00000040 alt_up_ps2_open_dev
01007098 g     F .text	00000104 putc
01009e74 g     F .text	00000060 __divsi3
0100e7d8 g     O .rodata	00000014 __thenan_df
0100c27c g     F .text	00000040 alt_up_character_lcd_open_dev
010049b4 g     F .text	0000012c _malloc_trim_r
0100c8c0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0100e540 g       *ABS*	00000000 __CTOR_END__
0100c248 g     F .text	00000034 alt_up_character_lcd_init
01007aa4 g     F .text	000000bc strcmp
0100e540 g       *ABS*	00000000 __flash_rodata_start
0100e540 g       *ABS*	00000000 __DTOR_LIST__
0100d120 g     F .text	00000040 alt_up_rs232_open_dev
01009874 g     F .text	00000088 __nedf2
0100b210 g     F .text	00000034 alt_irq_init
0100af74 g     F .text	00000060 alt_release_fd
0100c794 g     F .text	00000034 read_data_valid
0100c660 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100e7ec g     O .rodata	00000100 __clz_tab
01012290 g     O .bss	00000004 _PathLocale
0100ca54 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0100e0c8 g     F .text	00000014 atexit
01007cac g     F .text	00000078 _write_r
010054b8 g     F .text	0000001c setlocale
010105ec g     O .rwdata	00000004 _impure_ptr
010122a8 g     O .bss	00000004 alt_argc
0100d774 g     F .text	00000064 _do_dtors
01000238 g     F .text	00000198 setName
01000020 g       .exceptions	00000000 alt_irq_entry
01006260 g     F .text	00000080 __ulp
01007878 g     F .text	00000040 __isinfd
01004810 g     F .text	00000018 __fp_unlock_all
010003f4 g     F .text	0000015c send_data
01010604 g     O .rwdata	00000008 alt_fs_list
0100cdc8 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0100cf40 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01005424 g     F .text	00000010 localeconv
0101062c g       *ABS*	00000000 _edata
01012a7c g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100bb44 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010079c8 g     F .text	0000007c __swrite
010105fc g     O .rwdata	00000004 __malloc_trim_threshold
0100de40 g     F .text	00000020 altera_nios2_qsys_irq_init
0100e0dc g     F .text	00000038 exit
01005290 g     F .text	000000c8 _fwalk_reent
0100c7f4 g     F .text	000000cc alt_up_ps2_init
0100685c g     F .text	0000018c __mdiff
01009ed4 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01012280 g     O .bss	00000004 uart
01004750 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100c334 g     F .text	00000078 alt_up_character_lcd_string
0100e4b0 g     F .text	00000020 _exit
010078b8 g     F .text	00000030 __isnand
01012284 g     O .bss	00000004 Start
0100d464 g     F .text	00000154 alt_alarm_start
01009f44 g     F .text	00000098 __muldi3
010054d4 g     F .text	00000194 __smakebuf_r
0100c9e4 g     F .text	00000070 alt_up_ps2_wait_for_ack
01000c20 g     F .text	00000074 strlen
0100dab4 g     F .text	00000188 open
01009984 g     F .text	00000088 __gedf2
0100d86c g     F .text	00000030 alt_icache_flush_all
01000550 g     F .text	000000cc send_ack
0100c3f8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101061c g     O .rwdata	00000004 alt_priority_mask
01002b98 g     F .text	00000024 __vfprintf_internal
0100cc44 g     F .text	0000009c alt_up_ps2_read_fd
010090dc g     F .text	00000080 __subdf3
0100613c g     F .text	000000c4 __lo0bits
01010624 g     O .rwdata	00000008 alt_alarm_list
0100d710 g     F .text	00000064 _do_ctors
0100ce74 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0100a570 g     F .text	000000fc close
0100ab0c g     F .text	00000080 alt_load
0100a05c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01004754 g     F .text	00000004 __sinit_lock_acquire
01006d58 g     F .text	00000100 __multadd
010060a4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c9fb04 	addi	r3,r3,10220
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c9fb04 	addi	r3,r3,10220
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6a17b14 	ori	gp,gp,34284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	10889b14 	ori	r2,r2,8812

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18ca9f14 	ori	r3,r3,10876

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100ab0c0 	call	100ab0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100ad480 	call	100ad48 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <sendNameAll>:
	}
	set_name_i++;
	printf("i: %i\n", set_name_i);
}

void sendNameAll(){
 1000204:	deffff04 	addi	sp,sp,-4
	printf("sending names\n");
 1000208:	01004074 	movhi	r4,257
 100020c:	21395004 	addi	r4,r4,-6848
	}
	set_name_i++;
	printf("i: %i\n", set_name_i);
}

void sendNameAll(){
 1000210:	dfc00015 	stw	ra,0(sp)
	printf("sending names\n");
 1000214:	1000c0c0 	call	1000c0c <puts>
	send_data(SEND_TO_ALL,12,p.size0,p.p0name);
 1000218:	01c04074 	movhi	r7,257
 100021c:	39c8b904 	addi	r7,r7,8932
 1000220:	39802003 	ldbu	r6,128(r7)
 1000224:	01003fc4 	movi	r4,255
 1000228:	01400304 	movi	r5,12
	//send_data(SEND_TO_ALL,12,p.size1,p.p1name);
	//send_data(SEND_TO_ALL,12,p.size2,p.p2name);
	//send_data(SEND_TO_ALL,12,p.size3,p.p3name);
}
 100022c:	dfc00017 	ldw	ra,0(sp)
 1000230:	dec00104 	addi	sp,sp,4
	printf("i: %i\n", set_name_i);
}

void sendNameAll(){
	printf("sending names\n");
	send_data(SEND_TO_ALL,12,p.size0,p.p0name);
 1000234:	10003f41 	jmpi	10003f4 <send_data>

01000238 <setName>:
players p;
volatile int set_name_i = 0;

void setName(unsigned char id, unsigned char size, unsigned char *name){
	int i;
	switch(set_name_i){
 1000238:	d0e72017 	ldw	r3,-25472(gp)
 100023c:	00800044 	movi	r2,1
 1000240:	18802126 	beq	r3,r2,10002c8 <setName+0x90>
 1000244:	10c00b0e 	bge	r2,r3,1000274 <setName+0x3c>
 1000248:	00800084 	movi	r2,2
 100024c:	18804026 	beq	r3,r2,1000350 <setName+0x118>
 1000250:	008000c4 	movi	r2,3
 1000254:	18803026 	beq	r3,r2,1000318 <setName+0xe0>
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 1000258:	d0a72017 	ldw	r2,-25472(gp)
	printf("i: %i\n", set_name_i);
 100025c:	01004074 	movhi	r4,257
 1000260:	21395404 	addi	r4,r4,-6832
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 1000264:	10800044 	addi	r2,r2,1
 1000268:	d0a72015 	stw	r2,-25472(gp)
	printf("i: %i\n", set_name_i);
 100026c:	d1672017 	ldw	r5,-25472(gp)
 1000270:	1000ad01 	jmpi	1000ad0 <printf>
players p;
volatile int set_name_i = 0;

void setName(unsigned char id, unsigned char size, unsigned char *name){
	int i;
	switch(set_name_i){
 1000274:	183ff81e 	bne	r3,zero,1000258 <setName+0x20>
	case 0:
		for(i = 0; i < size; i++){
 1000278:	28803fcc 	andi	r2,r5,255
 100027c:	10004b26 	beq	r2,zero,10003ac <setName+0x174>
		}
		p.size2 = size;
		p.pid2 = id;
		break;
	case 3:
		for(i = 0; i < size; i++){
 1000280:	02004074 	movhi	r8,257
 1000284:	4208b904 	addi	r8,r8,8932
 1000288:	120f883a 	add	r7,r2,r8
 100028c:	4007883a 	mov	r3,r8
void setName(unsigned char id, unsigned char size, unsigned char *name){
	int i;
	switch(set_name_i){
	case 0:
		for(i = 0; i < size; i++){
			p.p0name[i] = name[i];
 1000290:	30800003 	ldbu	r2,0(r6)
 1000294:	31800044 	addi	r6,r6,1
 1000298:	18800005 	stb	r2,0(r3)
 100029c:	18c00044 	addi	r3,r3,1

void setName(unsigned char id, unsigned char size, unsigned char *name){
	int i;
	switch(set_name_i){
	case 0:
		for(i = 0; i < size; i++){
 10002a0:	19fffb1e 	bne	r3,r7,1000290 <setName+0x58>
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 10002a4:	d0a72017 	ldw	r2,-25472(gp)
	switch(set_name_i){
	case 0:
		for(i = 0; i < size; i++){
			p.p0name[i] = name[i];
		}
		p.size0 = size;
 10002a8:	41402005 	stb	r5,128(r8)
		p.pid0 = id;
 10002ac:	41002105 	stb	r4,132(r8)
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 10002b0:	10800044 	addi	r2,r2,1
 10002b4:	d0a72015 	stw	r2,-25472(gp)
	printf("i: %i\n", set_name_i);
 10002b8:	d1672017 	ldw	r5,-25472(gp)
 10002bc:	01004074 	movhi	r4,257
 10002c0:	21395404 	addi	r4,r4,-6832
 10002c4:	1000ad01 	jmpi	1000ad0 <printf>
		}
		p.size0 = size;
		p.pid0 = id;
		break;
	case 1:
		for(i = 0; i < size; i++){
 10002c8:	28803fcc 	andi	r2,r5,255
 10002cc:	10003426 	beq	r2,zero,10003a0 <setName+0x168>
		for(i = 0; i < size; i++){
			p.p0name[i] = name[i];
		}
		p.size0 = size;
		p.pid0 = id;
		break;
 10002d0:	00c04074 	movhi	r3,257
 10002d4:	18c8c104 	addi	r3,r3,8964
 10002d8:	10cf883a 	add	r7,r2,r3
 10002dc:	1a3ff804 	addi	r8,r3,-32
	case 1:
		for(i = 0; i < size; i++){
			p.p1name[i] = name[i];
 10002e0:	30800003 	ldbu	r2,0(r6)
 10002e4:	31800044 	addi	r6,r6,1
 10002e8:	18800005 	stb	r2,0(r3)
 10002ec:	18c00044 	addi	r3,r3,1
		}
		p.size0 = size;
		p.pid0 = id;
		break;
	case 1:
		for(i = 0; i < size; i++){
 10002f0:	19fffb1e 	bne	r3,r7,10002e0 <setName+0xa8>
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 10002f4:	d0a72017 	ldw	r2,-25472(gp)
		break;
	case 1:
		for(i = 0; i < size; i++){
			p.p1name[i] = name[i];
		}
		p.size1 = size;
 10002f8:	41402045 	stb	r5,129(r8)
		p.pid1 = id;
 10002fc:	41002145 	stb	r4,133(r8)
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 1000300:	10800044 	addi	r2,r2,1
 1000304:	d0a72015 	stw	r2,-25472(gp)
	printf("i: %i\n", set_name_i);
 1000308:	d1672017 	ldw	r5,-25472(gp)
 100030c:	01004074 	movhi	r4,257
 1000310:	21395404 	addi	r4,r4,-6832
 1000314:	1000ad01 	jmpi	1000ad0 <printf>
		}
		p.size2 = size;
		p.pid2 = id;
		break;
	case 3:
		for(i = 0; i < size; i++){
 1000318:	28803fcc 	andi	r2,r5,255
 100031c:	10002926 	beq	r2,zero,10003c4 <setName+0x18c>
		for(i = 0; i < size; i++){
			p.p2name[i] = name[i];
		}
		p.size2 = size;
		p.pid2 = id;
		break;
 1000320:	00c04074 	movhi	r3,257
 1000324:	18c8d104 	addi	r3,r3,9028
 1000328:	10cf883a 	add	r7,r2,r3
 100032c:	1a3fe804 	addi	r8,r3,-96
	case 3:
		for(i = 0; i < size; i++){
			p.p3name[i] = name[i];
 1000330:	30800003 	ldbu	r2,0(r6)
 1000334:	31800044 	addi	r6,r6,1
 1000338:	18800005 	stb	r2,0(r3)
 100033c:	18c00044 	addi	r3,r3,1
		}
		p.size2 = size;
		p.pid2 = id;
		break;
	case 3:
		for(i = 0; i < size; i++){
 1000340:	19fffb1e 	bne	r3,r7,1000330 <setName+0xf8>
			p.p3name[i] = name[i];
		}
		p.size3 = size;
		p.pid3 = id;
 1000344:	410021c5 	stb	r4,135(r8)
		break;
	case 3:
		for(i = 0; i < size; i++){
			p.p3name[i] = name[i];
		}
		p.size3 = size;
 1000348:	414020c5 	stb	r5,131(r8)
 100034c:	003fc206 	br	1000258 <setName+0x20>
		}
		p.size1 = size;
		p.pid1 = id;
		break;
	case 2:
		for(i = 0; i < size; i++){
 1000350:	28803fcc 	andi	r2,r5,255
 1000354:	10001826 	beq	r2,zero,10003b8 <setName+0x180>
		for(i = 0; i < size; i++){
			p.p1name[i] = name[i];
		}
		p.size1 = size;
		p.pid1 = id;
		break;
 1000358:	00c04074 	movhi	r3,257
 100035c:	18c8c904 	addi	r3,r3,8996
 1000360:	10cf883a 	add	r7,r2,r3
 1000364:	1a3ff004 	addi	r8,r3,-64
	case 2:
		for(i = 0; i < size; i++){
			p.p2name[i] = name[i];
 1000368:	30800003 	ldbu	r2,0(r6)
 100036c:	31800044 	addi	r6,r6,1
 1000370:	18800005 	stb	r2,0(r3)
 1000374:	18c00044 	addi	r3,r3,1
		}
		p.size1 = size;
		p.pid1 = id;
		break;
	case 2:
		for(i = 0; i < size; i++){
 1000378:	19fffb1e 	bne	r3,r7,1000368 <setName+0x130>
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 100037c:	d0a72017 	ldw	r2,-25472(gp)
		break;
	case 2:
		for(i = 0; i < size; i++){
			p.p2name[i] = name[i];
		}
		p.size2 = size;
 1000380:	41402085 	stb	r5,130(r8)
		p.pid2 = id;
 1000384:	41002185 	stb	r4,134(r8)
		}
		p.size3 = size;
		p.pid3 = id;
		break;
	}
	set_name_i++;
 1000388:	10800044 	addi	r2,r2,1
 100038c:	d0a72015 	stw	r2,-25472(gp)
	printf("i: %i\n", set_name_i);
 1000390:	d1672017 	ldw	r5,-25472(gp)
 1000394:	01004074 	movhi	r4,257
 1000398:	21395404 	addi	r4,r4,-6832
 100039c:	1000ad01 	jmpi	1000ad0 <printf>
 10003a0:	02004074 	movhi	r8,257
 10003a4:	4208b904 	addi	r8,r8,8932
 10003a8:	003fd206 	br	10002f4 <setName+0xbc>
 10003ac:	02004074 	movhi	r8,257
 10003b0:	4208b904 	addi	r8,r8,8932
 10003b4:	003fbb06 	br	10002a4 <setName+0x6c>
 10003b8:	02004074 	movhi	r8,257
 10003bc:	4208b904 	addi	r8,r8,8932
 10003c0:	003fee06 	br	100037c <setName+0x144>
 10003c4:	02004074 	movhi	r8,257
 10003c8:	4208b904 	addi	r8,r8,8932
 10003cc:	003fdd06 	br	1000344 <setName+0x10c>

010003d0 <get_buffer_space>:
	}
	return true;
}

unsigned int get_buffer_space() {
	int start = Start;
 10003d0:	d0a72617 	ldw	r2,-25448(gp)
	int end = End;
 10003d4:	d0e72317 	ldw	r3,-25460(gp)
	return start > end ? start - end - 1 : start + BUFFER_SIZE - end - 1;
 10003d8:	10c9c83a 	sub	r4,r2,r3
 10003dc:	200b883a 	mov	r5,r4
 10003e0:	213fffc4 	addi	r4,r4,-1
 10003e4:	18800116 	blt	r3,r2,10003ec <get_buffer_space+0x1c>
 10003e8:	2900ffc4 	addi	r4,r5,1023
}
 10003ec:	2005883a 	mov	r2,r4
 10003f0:	f800283a 	ret

010003f4 <send_data>:
	//[2] data_size + 1
	//[3] data_type
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
 10003f4:	d2272317 	ldw	r8,-25460(gp)
	int start = Start;
 10003f8:	d0a72617 	ldw	r2,-25448(gp)
//dataType
//size: size of the data array, excluding the dataType byte (cannot exceed 124)
//*data: pointer to the character array
//output:
//true if send, false if not send
bool send_data(unsigned char id, unsigned char dataType, unsigned char size, unsigned char *data) {
 10003fc:	deffff04 	addi	sp,sp,-4
 1000400:	dfc00015 	stw	ra,0(sp)
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 1000404:	40802e0e 	bge	r8,r2,10004c0 <send_data+0xcc>
 1000408:	1207c83a 	sub	r3,r2,r8
	avail_to_fill--; //start != end

	if(size>124){
 100040c:	32403fcc 	andi	r9,r6,255
 1000410:	00801f04 	movi	r2,124
 1000414:	12402f36 	bltu	r2,r9,10004d4 <send_data+0xe0>
		printf("error: send(): sending too much data! size must be <= 124\n");
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
 1000418:	18fff0c4 	addi	r3,r3,-61
 100041c:	48800104 	addi	r2,r9,4
 1000420:	18803316 	blt	r3,r2,10004f0 <send_data+0xfc>
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 1000424:	02804074 	movhi	r10,257
 1000428:	5288db04 	addi	r10,r10,9068
 100042c:	4285883a 	add	r2,r8,r10
 1000430:	40c00044 	addi	r3,r8,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000434:	02c10004 	movi	r11,1024
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 1000438:	11000005 	stb	r4,0(r2)
 100043c:	5019883a 	mov	r12,r10
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000440:	1ac03726 	beq	r3,r11,1000520 <send_data+0x12c>
		send[end++] = size + 2;
 1000444:	1a87883a 	add	r3,r3,r10
 1000448:	30800084 	addi	r2,r6,2
 100044c:	41000084 	addi	r4,r8,2
 1000450:	18800005 	stb	r2,0(r3)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000454:	22c03926 	beq	r4,r11,100053c <send_data+0x148>
		send[end++] = size + 1;
 1000458:	2287883a 	add	r3,r4,r10
 100045c:	30800044 	addi	r2,r6,1
 1000460:	410000c4 	addi	r4,r8,3
 1000464:	18800005 	stb	r2,0(r3)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000468:	22c02a26 	beq	r4,r11,1000514 <send_data+0x120>
		send[end++] = dataType;
 100046c:	2285883a 	add	r2,r4,r10
 1000470:	41000104 	addi	r4,r8,4
 1000474:	11400005 	stb	r5,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000478:	22c0011e 	bne	r4,r11,1000480 <send_data+0x8c>
 100047c:	0009883a 	mov	r4,zero

		int i;
		for(i = 0; i < size; i++) {
 1000480:	48000a26 	beq	r9,zero,10004ac <send_data+0xb8>
 1000484:	000b883a 	mov	r5,zero
 1000488:	01810004 	movi	r6,1024
			send[end] = data[i];
 100048c:	29c5883a 	add	r2,r5,r7
 1000490:	10c00003 	ldbu	r3,0(r2)
 1000494:	2305883a 	add	r2,r4,r12

			end++;
 1000498:	21000044 	addi	r4,r4,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer

		int i;
		for(i = 0; i < size; i++) {
 100049c:	29400044 	addi	r5,r5,1
			send[end] = data[i];
 10004a0:	10c00005 	stb	r3,0(r2)

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 10004a4:	21801926 	beq	r4,r6,100050c <send_data+0x118>
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer

		int i;
		for(i = 0; i < size; i++) {
 10004a8:	497ff81e 	bne	r9,r5,100048c <send_data+0x98>

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		}

		End = end;
 10004ac:	00800044 	movi	r2,1
 10004b0:	d1272315 	stw	r4,-25460(gp)
	}
	return true;
}
 10004b4:	dfc00017 	ldw	ra,0(sp)
 10004b8:	dec00104 	addi	sp,sp,4
 10004bc:	f800283a 	ret
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 10004c0:	1205c83a 	sub	r2,r2,r8
 10004c4:	10c10004 	addi	r3,r2,1024
	avail_to_fill--; //start != end

	if(size>124){
 10004c8:	32403fcc 	andi	r9,r6,255
 10004cc:	00801f04 	movi	r2,124
 10004d0:	127fd12e 	bgeu	r2,r9,1000418 <send_data+0x24>
		printf("error: send(): sending too much data! size must be <= 124\n");
 10004d4:	01004074 	movhi	r4,257
 10004d8:	21395604 	addi	r4,r4,-6824
 10004dc:	1000c0c0 	call	1000c0c <puts>
 10004e0:	0005883a 	mov	r2,zero
		}

		End = end;
	}
	return true;
}
 10004e4:	dfc00017 	ldw	ra,0(sp)
 10004e8:	dec00104 	addi	sp,sp,4
 10004ec:	f800283a 	ret

	if(size>124){
		printf("error: send(): sending too much data! size must be <= 124\n");
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
		printf("error: send(): not enough space in buffer");
 10004f0:	01004074 	movhi	r4,257
 10004f4:	21396504 	addi	r4,r4,-6764
 10004f8:	1000ad00 	call	1000ad0 <printf>
 10004fc:	0005883a 	mov	r2,zero
		}

		End = end;
	}
	return true;
}
 1000500:	dfc00017 	ldw	ra,0(sp)
 1000504:	dec00104 	addi	sp,sp,4
 1000508:	f800283a 	ret
		int i;
		for(i = 0; i < size; i++) {
			send[end] = data[i];

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 100050c:	0009883a 	mov	r4,zero
 1000510:	003fe506 	br	10004a8 <send_data+0xb4>
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000514:	01000044 	movi	r4,1
 1000518:	51400005 	stb	r5,0(r10)
 100051c:	003fd806 	br	1000480 <send_data+0x8c>
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000520:	30c00044 	addi	r3,r6,1
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
 1000524:	30800084 	addi	r2,r6,2
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000528:	010000c4 	movi	r4,3
 100052c:	51400085 	stb	r5,2(r10)
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
 1000530:	50800005 	stb	r2,0(r10)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000534:	50c00045 	stb	r3,1(r10)
 1000538:	003fd106 	br	1000480 <send_data+0x8c>
 100053c:	30800044 	addi	r2,r6,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000540:	01000084 	movi	r4,2
 1000544:	51400045 	stb	r5,1(r10)
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000548:	50800005 	stb	r2,0(r10)
 100054c:	003fcc06 	br	1000480 <send_data+0x8c>

01000550 <send_ack>:
}

//sends ack to the android phone
bool send_ack(unsigned char id) {
	//calculate available space
	int end = End;
 1000550:	d0e72317 	ldw	r3,-25460(gp)
	int start = Start;
 1000554:	d0a72617 	ldw	r2,-25448(gp)
	IOWR_16DIRECT(TIMER_0_BASE,4,0x5); //restarts timer
	return;
}

//sends ack to the android phone
bool send_ack(unsigned char id) {
 1000558:	deffff04 	addi	sp,sp,-4
 100055c:	dfc00015 	stw	ra,0(sp)
	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 1000560:	1880190e 	bge	r3,r2,10005c8 <send_ack+0x78>
 1000564:	10c5c83a 	sub	r2,r2,r3
	avail_to_fill--; //start != end

	if(avail_to_fill < 3){
 1000568:	10bfffc4 	addi	r2,r2,-1
 100056c:	02400084 	movi	r9,2
 1000570:	48801a0e 	bge	r9,r2,10005dc <send_ack+0x8c>
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 1000574:	02004074 	movhi	r8,257
 1000578:	4208db04 	addi	r8,r8,9068
 100057c:	1a05883a 	add	r2,r3,r8
 1000580:	19400044 	addi	r5,r3,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000584:	01810004 	movi	r6,1024

	if(avail_to_fill < 3){
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 1000588:	11000005 	stb	r4,0(r2)
 100058c:	01c00044 	movi	r7,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000590:	29801926 	beq	r5,r6,10005f8 <send_ack+0xa8>
		send[end++] = 1;
 1000594:	2a05883a 	add	r2,r5,r8
 1000598:	19000084 	addi	r4,r3,2
 100059c:	11c00005 	stb	r7,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 10005a0:	21801926 	beq	r4,r6,1000608 <send_ack+0xb8>
		send[end++] = 0;
 10005a4:	2205883a 	add	r2,r4,r8
 10005a8:	18c000c4 	addi	r3,r3,3
 10005ac:	10000005 	stb	zero,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 10005b0:	19801826 	beq	r3,r6,1000614 <send_ack+0xc4>
	}
	End = end;
 10005b4:	00800044 	movi	r2,1
 10005b8:	d0e72315 	stw	r3,-25460(gp)
	return true;
}
 10005bc:	dfc00017 	ldw	ra,0(sp)
 10005c0:	dec00104 	addi	sp,sp,4
 10005c4:	f800283a 	ret
//sends ack to the android phone
bool send_ack(unsigned char id) {
	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 10005c8:	10c5c83a 	sub	r2,r2,r3
 10005cc:	10810004 	addi	r2,r2,1024
	avail_to_fill--; //start != end

	if(avail_to_fill < 3){
 10005d0:	10bfffc4 	addi	r2,r2,-1
 10005d4:	02400084 	movi	r9,2
 10005d8:	48bfe616 	blt	r9,r2,1000574 <send_ack+0x24>
		printf("error: send(): not enough space in buffer");
 10005dc:	01004074 	movhi	r4,257
 10005e0:	21396504 	addi	r4,r4,-6764
 10005e4:	1000ad00 	call	1000ad0 <printf>
 10005e8:	0005883a 	mov	r2,zero
		send[end++] = 0;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
	}
	End = end;
	return true;
}
 10005ec:	dfc00017 	ldw	ra,0(sp)
 10005f0:	dec00104 	addi	sp,sp,4
 10005f4:	f800283a 	ret
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
 10005f8:	4807883a 	mov	r3,r9
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
 10005fc:	41c00005 	stb	r7,0(r8)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
 1000600:	40000045 	stb	zero,1(r8)
 1000604:	003feb06 	br	10005b4 <send_ack+0x64>
 1000608:	3807883a 	mov	r3,r7
 100060c:	40000005 	stb	zero,0(r8)
 1000610:	003fe806 	br	10005b4 <send_ack+0x64>
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000614:	0007883a 	mov	r3,zero
 1000618:	003fe606 	br	10005b4 <send_ack+0x64>

0100061c <uart_init>:
	End = end;
	return true;
}

//initialize uart functions
void uart_init() {
 100061c:	defffd04 	addi	sp,sp,-12

	//crap data holder
	unsigned char parity, data;

    //UART Initialization
    uart = alt_up_rs232_open_dev(RS232_0_NAME);
 1000620:	01004074 	movhi	r4,257
 1000624:	21397004 	addi	r4,r4,-6720
	End = end;
	return true;
}

//initialize uart functions
void uart_init() {
 1000628:	dfc00215 	stw	ra,8(sp)
 100062c:	dc000115 	stw	r16,4(sp)

	//crap data holder
	unsigned char parity, data;

    //UART Initialization
    uart = alt_up_rs232_open_dev(RS232_0_NAME);
 1000630:	100d1200 	call	100d120 <alt_up_rs232_open_dev>
 1000634:	1009883a 	mov	r4,r2
 1000638:	d0a72515 	stw	r2,-25452(gp)
 100063c:	00000306 	br	100064c <uart_init+0x30>

    //Clearing read buffer to start
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
		alt_up_rs232_read_data(uart, &data, &parity);
 1000640:	d1272517 	ldw	r4,-25452(gp)
 1000644:	100cf880 	call	100cf88 <alt_up_rs232_read_data>
 1000648:	d1272517 	ldw	r4,-25452(gp)

    //UART Initialization
    uart = alt_up_rs232_open_dev(RS232_0_NAME);

    //Clearing read buffer to start
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 100064c:	100ce740 	call	100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>
		alt_up_rs232_read_data(uart, &data, &parity);
 1000650:	d80b883a 	mov	r5,sp
 1000654:	d9800044 	addi	r6,sp,1

    //UART Initialization
    uart = alt_up_rs232_open_dev(RS232_0_NAME);

    //Clearing read buffer to start
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 1000658:	103ff91e 	bne	r2,zero,1000640 <uart_init+0x24>
		alt_up_rs232_read_data(uart, &data, &parity);
	}

	//clear the sending buffer
	Start = 0;
	End = 1;
 100065c:	00800044 	movi	r2,1
 1000660:	d0a72315 	stw	r2,-25460(gp)

	//start the receiving interrupt
	IOWR_16DIRECT(TIMER_0_BASE, 8, TIMER_PERIOD & 0xFFFF); //writes the period to the hardware timer
 1000664:	00c35004 	movi	r3,3392
 1000668:	00910a04 	movi	r2,17448
	while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
		alt_up_rs232_read_data(uart, &data, &parity);
	}

	//clear the sending buffer
	Start = 0;
 100066c:	d0272615 	stw	zero,-25448(gp)
	End = 1;

	//start the receiving interrupt
	IOWR_16DIRECT(TIMER_0_BASE, 8, TIMER_PERIOD & 0xFFFF); //writes the period to the hardware timer
 1000670:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(TIMER_0_BASE, 12, TIMER_PERIOD >> 16);
 1000674:	010000c4 	movi	r4,3
 1000678:	00910b04 	movi	r2,17452
 100067c:	1100002d 	sthio	r4,0(r2)
	IOWR_16DIRECT(TIMER_0_BASE, 4, 1 << 3); //stop timer
 1000680:	04110904 	movi	r16,17444
 1000684:	00800204 	movi	r2,8
 1000688:	8080002d 	sthio	r2,0(r16)

	alt_irq_register(TIMER_0_IRQ,NULL,(void*)uart_isr);//registers function to a specific IRQ
 100068c:	01000084 	movi	r4,2
 1000690:	000b883a 	mov	r5,zero
 1000694:	01804034 	movhi	r6,256
 1000698:	3181be04 	addi	r6,r6,1784
 100069c:	100a82c0 	call	100a82c <alt_irq_register>

	IOWR_16DIRECT(TIMER_0_BASE, 4, 0x5);	//starts timer with interrupt
 10006a0:	00c00144 	movi	r3,5
 10006a4:	80c0002d 	sthio	r3,0(r16)
}
 10006a8:	dfc00217 	ldw	ra,8(sp)
 10006ac:	dc000117 	ldw	r16,4(sp)
 10006b0:	dec00304 	addi	sp,sp,12
 10006b4:	f800283a 	ret

010006b8 <main>:
	int end = End;
	return start > end ? start - end - 1 : start + BUFFER_SIZE - end - 1;
}

int main()
{
 10006b8:	deffff04 	addi	sp,sp,-4
 10006bc:	dfc00015 	stw	ra,0(sp)
	uart_init();
 10006c0:	100061c0 	call	100061c <uart_init>
	printf("uart init\n");
 10006c4:	01004074 	movhi	r4,257
 10006c8:	21397404 	addi	r4,r4,-6704
 10006cc:	1000c0c0 	call	1000c0c <puts>
 10006d0:	00c00044 	movi	r3,1
 10006d4:	01004074 	movhi	r4,257
 10006d8:	21089b04 	addi	r4,r4,8812

	while(set_name_i != 1);
 10006dc:	20800017 	ldw	r2,0(r4)
 10006e0:	10fffe1e 	bne	r2,r3,10006dc <main+0x24>

	sendNameAll();
 10006e4:	10002040 	call	1000204 <sendNameAll>

	return 0;
}
 10006e8:	0005883a 	mov	r2,zero
 10006ec:	dfc00017 	ldw	ra,0(sp)
 10006f0:	dec00104 	addi	sp,sp,4
 10006f4:	f800283a 	ret

010006f8 <uart_isr>:
unsigned char buffer[128]; //input buffer

unsigned char send[BUFFER_SIZE]; //output buffer
int Start, End;

void uart_isr() {
 10006f8:	defffc04 	addi	sp,sp,-16
 10006fc:	dfc00315 	stw	ra,12(sp)
 1000700:	dc400215 	stw	r17,8(sp)
 1000704:	dc000115 	stw	r16,4(sp)


	unsigned char parity;
	int start, end, queue_size, amount_to_send,FIFO_avail;

	while(alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
 1000708:	d1272517 	ldw	r4,-25452(gp)
 100070c:	100ce740 	call	100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>
 1000710:	10002b26 	beq	r2,zero,10007c0 <uart_isr+0xc8>
		if(!hasReadHeader) {
 1000714:	d0a72103 	ldbu	r2,-25468(gp)
 1000718:	10009a26 	beq	r2,zero,1000984 <uart_isr+0x28c>
				//printf("0:id: %i size: %i datatype: %i \n", id,size,dataType);
			}else {
				goto Send;
			}
		}
		if(size > 0) {
 100071c:	d0a72443 	ldbu	r2,-25455(gp)
 1000720:	1000af1e 	bne	r2,zero,10009e0 <uart_isr+0x2e8>
}

//sends ack to the android phone
bool send_ack(unsigned char id) {
	//calculate available space
	int end = End;
 1000724:	d1272317 	ldw	r4,-25460(gp)
	int start = Start;
 1000728:	d0a72617 	ldw	r2,-25448(gp)
			}
			//printf("\n");
		}

		//turn off hasReadHeader
		hasReadHeader = false;
 100072c:	d0272105 	stb	zero,-25468(gp)

		//send ack
		if(!send_ack(id)){
 1000730:	d1a72403 	ldbu	r6,-25456(gp)
//sends ack to the android phone
bool send_ack(unsigned char id) {
	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 1000734:	2080540e 	bge	r4,r2,1000888 <uart_isr+0x190>
 1000738:	1105c83a 	sub	r2,r2,r4
	avail_to_fill--; //start != end

	if(avail_to_fill < 3){
 100073c:	10ffffc4 	addi	r3,r2,-1
 1000740:	00800084 	movi	r2,2
 1000744:	10c0550e 	bge	r2,r3,100089c <uart_isr+0x1a4>
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 1000748:	01c04074 	movhi	r7,257
 100074c:	39c8db04 	addi	r7,r7,9068
 1000750:	21c5883a 	add	r2,r4,r7
 1000754:	20c00044 	addi	r3,r4,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000758:	01410004 	movi	r5,1024

	if(avail_to_fill < 3){
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 100075c:	11800005 	stb	r6,0(r2)
 1000760:	01800044 	movi	r6,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000764:	1940b126 	beq	r3,r5,1000a2c <uart_isr+0x334>
		send[end++] = 1;
 1000768:	19c5883a 	add	r2,r3,r7
 100076c:	20c00084 	addi	r3,r4,2
 1000770:	11800005 	stb	r6,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000774:	1940ba26 	beq	r3,r5,1000a60 <uart_isr+0x368>
		send[end++] = 0;
 1000778:	19c5883a 	add	r2,r3,r7
 100077c:	20c000c4 	addi	r3,r4,3
 1000780:	10000005 	stb	zero,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000784:	19403e26 	beq	r3,r5,1000880 <uart_isr+0x188>
	}
	End = end;
 1000788:	d0e72315 	stw	r3,-25460(gp)
		}else{
			//printf("ack to ID: %i\n",id);
		}

		//TODO: Modify stuff here to do different things for different data type
		switch(dataType){
 100078c:	d0e72203 	ldbu	r3,-25464(gp)
 1000790:	00800044 	movi	r2,1
 1000794:	18804726 	beq	r3,r2,10008b4 <uart_isr+0x1bc>
 1000798:	00800284 	movi	r2,10
 100079c:	18bfda1e 	bne	r3,r2,1000708 <uart_isr+0x10>
			break;
		case 1:
			send_data(id, dataType, size, buffer);
			break;
		case 10:
			setName(id, size, buffer);
 10007a0:	d1272403 	ldbu	r4,-25456(gp)
 10007a4:	d1672443 	ldbu	r5,-25455(gp)
 10007a8:	01804074 	movhi	r6,257
 10007ac:	3189db04 	addi	r6,r6,10092
 10007b0:	10002380 	call	1000238 <setName>


	unsigned char parity;
	int start, end, queue_size, amount_to_send,FIFO_avail;

	while(alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
 10007b4:	d1272517 	ldw	r4,-25452(gp)
 10007b8:	100ce740 	call	100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>
 10007bc:	103fd51e 	bne	r2,zero,1000714 <uart_isr+0x1c>
	Send:

	//sending data

	//create a copy of the global variables
	start = Start;
 10007c0:	d4272617 	ldw	r16,-25448(gp)
	end = End;
 10007c4:	d0a72317 	ldw	r2,-25460(gp)

	queue_size = start < end ? end - start : end + BUFFER_SIZE - start; //how much is there to send
 10007c8:	8080b80e 	bge	r16,r2,1000aac <uart_isr+0x3b4>
 10007cc:	1423c83a 	sub	r17,r2,r16
	queue_size--; //start != end
	FIFO_avail = alt_up_rs232_get_available_space_in_write_FIFO(uart); //how much can we send?
 10007d0:	d1272517 	ldw	r4,-25452(gp)
 10007d4:	100ceb00 	call	100ceb0 <alt_up_rs232_get_available_space_in_write_FIFO>
	amount_to_send = FIFO_avail > queue_size ? queue_size : FIFO_avail; //send the lower amount
 10007d8:	89bfffc4 	addi	r6,r17,-1
 10007dc:	1180010e 	bge	r2,r6,10007e4 <uart_isr+0xec>
 10007e0:	100d883a 	mov	r6,r2

	const unsigned int BASE_addr = uart->base;
 10007e4:	d0a72517 	ldw	r2,-25452(gp)
 10007e8:	12400a17 	ldw	r9,40(r2)
	const unsigned int RAVAIL = uart->base + 2;

	if(amount_to_send > 0){
 10007ec:	0180190e 	bge	zero,r6,1000854 <uart_isr+0x15c>
 10007f0:	4a000084 	addi	r8,r9,2
 10007f4:	800f883a 	mov	r7,r16
 10007f8:	000b883a 	mov	r5,zero
 10007fc:	02c04074 	movhi	r11,257
 1000800:	5ac8db04 	addi	r11,r11,9068
 1000804:	02810004 	movi	r10,1024
 1000808:	00000906 	br	1000830 <uart_isr+0x138>
		int i;
		for(i = 0; i < amount_to_send; i++) {
			int temp_start = start;
			start++;
			if(start == BUFFER_SIZE) start = 0;
			unsigned char temp_data = send[start];
 100080c:	82c5883a 	add	r2,r16,r11
 1000810:	10c00003 	ldbu	r3,0(r2)

			if(IORD_8DIRECT(RAVAIL,0)==0){
 1000814:	41000023 	ldbuio	r4,0(r8)
				IOWR_8DIRECT(BASE_addr,0,temp_data); //sends the actual data
 1000818:	18c03fcc 	andi	r3,r3,255
			int temp_start = start;
			start++;
			if(start == BUFFER_SIZE) start = 0;
			unsigned char temp_data = send[start];

			if(IORD_8DIRECT(RAVAIL,0)==0){
 100081c:	20000c1e 	bne	r4,zero,1000850 <uart_isr+0x158>
				IOWR_8DIRECT(BASE_addr,0,temp_data); //sends the actual data
 1000820:	48c00025 	stbio	r3,0(r9)
	const unsigned int RAVAIL = uart->base + 2;

	if(amount_to_send > 0){
		//printf("transmit:  %i bytes\n\n\n",amount_to_send);
		int i;
		for(i = 0; i < amount_to_send; i++) {
 1000824:	29400044 	addi	r5,r5,1
 1000828:	800f883a 	mov	r7,r16
 100082c:	31400926 	beq	r6,r5,1000854 <uart_isr+0x15c>
			int temp_start = start;
			start++;
 1000830:	84000044 	addi	r16,r16,1
			if(start == BUFFER_SIZE) start = 0;
 1000834:	82bff51e 	bne	r16,r10,100080c <uart_isr+0x114>
 1000838:	0021883a 	mov	r16,zero
			unsigned char temp_data = send[start];
 100083c:	82c5883a 	add	r2,r16,r11
 1000840:	10c00003 	ldbu	r3,0(r2)

			if(IORD_8DIRECT(RAVAIL,0)==0){
 1000844:	41000023 	ldbuio	r4,0(r8)
				IOWR_8DIRECT(BASE_addr,0,temp_data); //sends the actual data
 1000848:	18c03fcc 	andi	r3,r3,255
			int temp_start = start;
			start++;
			if(start == BUFFER_SIZE) start = 0;
			unsigned char temp_data = send[start];

			if(IORD_8DIRECT(RAVAIL,0)==0){
 100084c:	203ff426 	beq	r4,zero,1000820 <uart_isr+0x128>
	const unsigned int RAVAIL = uart->base + 2;

	if(amount_to_send > 0){
		//printf("transmit:  %i bytes\n\n\n",amount_to_send);
		int i;
		for(i = 0; i < amount_to_send; i++) {
 1000850:	3821883a 	mov	r16,r7

		}
	}

	Start = start; //sets the global
	IOWR_16DIRECT(TIMER_0_BASE,0,0); //needed to show that interrupt finished executing
 1000854:	00910804 	movi	r2,17440
			//printf("\n%c,%X,%i",send[start],send[start],send[start]);

		}
	}

	Start = start; //sets the global
 1000858:	d4272615 	stw	r16,-25448(gp)
	IOWR_16DIRECT(TIMER_0_BASE,0,0); //needed to show that interrupt finished executing
 100085c:	1000002d 	sthio	zero,0(r2)
	IOWR_16DIRECT(TIMER_0_BASE,4,0x5); //restarts timer
 1000860:	00c00144 	movi	r3,5
 1000864:	00910904 	movi	r2,17444
 1000868:	10c0002d 	sthio	r3,0(r2)
	return;
}
 100086c:	dfc00317 	ldw	ra,12(sp)
 1000870:	dc400217 	ldw	r17,8(sp)
 1000874:	dc000117 	ldw	r16,4(sp)
 1000878:	dec00404 	addi	sp,sp,16
 100087c:	f800283a 	ret
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000880:	0007883a 	mov	r3,zero
 1000884:	003fc006 	br	1000788 <uart_isr+0x90>
//sends ack to the android phone
bool send_ack(unsigned char id) {
	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 1000888:	1105c83a 	sub	r2,r2,r4
 100088c:	10810004 	addi	r2,r2,1024
	avail_to_fill--; //start != end

	if(avail_to_fill < 3){
 1000890:	10ffffc4 	addi	r3,r2,-1
 1000894:	00800084 	movi	r2,2
 1000898:	10ffab16 	blt	r2,r3,1000748 <uart_isr+0x50>
		printf("error: send(): not enough space in buffer");
 100089c:	01004074 	movhi	r4,257
 10008a0:	21396504 	addi	r4,r4,-6764
 10008a4:	1000ad00 	call	1000ad0 <printf>
		}else{
			//printf("ack to ID: %i\n",id);
		}

		//TODO: Modify stuff here to do different things for different data type
		switch(dataType){
 10008a8:	d0e72203 	ldbu	r3,-25464(gp)
 10008ac:	00800044 	movi	r2,1
 10008b0:	18bfb91e 	bne	r3,r2,1000798 <uart_isr+0xa0>
		case 0:
			//speed test mode, do nothing
			break;
		case 1:
			send_data(id, dataType, size, buffer);
 10008b4:	d3272443 	ldbu	r12,-25455(gp)
	//[2] data_size + 1
	//[3] data_type
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
 10008b8:	d1272317 	ldw	r4,-25460(gp)
	int start = Start;
 10008bc:	d0a72617 	ldw	r2,-25448(gp)
		switch(dataType){
		case 0:
			//speed test mode, do nothing
			break;
		case 1:
			send_data(id, dataType, size, buffer);
 10008c0:	d1672403 	ldbu	r5,-25456(gp)
 10008c4:	600d883a 	mov	r6,r12
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 10008c8:	20805c0e 	bge	r4,r2,1000a3c <uart_isr+0x344>
 10008cc:	1107c83a 	sub	r3,r2,r4
	avail_to_fill--; //start != end

	if(size>124){
 10008d0:	31c03fcc 	andi	r7,r6,255
 10008d4:	00801f04 	movi	r2,124
 10008d8:	11c05d36 	bltu	r2,r7,1000a50 <uart_isr+0x358>
		printf("error: send(): sending too much data! size must be <= 124\n");
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
 10008dc:	18fff0c4 	addi	r3,r3,-61
 10008e0:	38800104 	addi	r2,r7,4
 10008e4:	18806116 	blt	r3,r2,1000a6c <uart_isr+0x374>
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 10008e8:	02004074 	movhi	r8,257
 10008ec:	4208db04 	addi	r8,r8,9068
 10008f0:	2205883a 	add	r2,r4,r8
 10008f4:	20c00044 	addi	r3,r4,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 10008f8:	02410004 	movi	r9,1024
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
 10008fc:	11400005 	stb	r5,0(r2)
 1000900:	4017883a 	mov	r11,r8
 1000904:	02800044 	movi	r10,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000908:	1a405c26 	beq	r3,r9,1000a7c <uart_isr+0x384>
		send[end++] = size + 2;
 100090c:	1a07883a 	add	r3,r3,r8
 1000910:	30800084 	addi	r2,r6,2
 1000914:	21400084 	addi	r5,r4,2
 1000918:	18800005 	stb	r2,0(r3)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 100091c:	2a405e26 	beq	r5,r9,1000a98 <uart_isr+0x3a0>
		send[end++] = size + 1;
 1000920:	2a07883a 	add	r3,r5,r8
 1000924:	3285883a 	add	r2,r6,r10
 1000928:	214000c4 	addi	r5,r4,3
 100092c:	18800005 	stb	r2,0(r3)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000930:	2a406126 	beq	r5,r9,1000ab8 <uart_isr+0x3c0>
		send[end++] = dataType;
 1000934:	2a05883a 	add	r2,r5,r8
 1000938:	21000104 	addi	r4,r4,4
 100093c:	12800005 	stb	r10,0(r2)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000940:	2240011e 	bne	r4,r9,1000948 <uart_isr+0x250>
 1000944:	0009883a 	mov	r4,zero

		int i;
		for(i = 0; i < size; i++) {
 1000948:	38000c26 	beq	r7,zero,100097c <uart_isr+0x284>
 100094c:	04404074 	movhi	r17,257
 1000950:	8c49db04 	addi	r17,r17,10092
 1000954:	880b883a 	mov	r5,r17
 1000958:	644d883a 	add	r6,r12,r17
 100095c:	01c10004 	movi	r7,1024
			send[end] = data[i];
 1000960:	28c00003 	ldbu	r3,0(r5)
 1000964:	22c5883a 	add	r2,r4,r11

			end++;
 1000968:	21000044 	addi	r4,r4,1
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 100096c:	29400044 	addi	r5,r5,1
		send[end++] = dataType;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer

		int i;
		for(i = 0; i < size; i++) {
			send[end] = data[i];
 1000970:	10c00005 	stb	r3,0(r2)

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000974:	21c02a26 	beq	r4,r7,1000a20 <uart_isr+0x328>
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer

		int i;
		for(i = 0; i < size; i++) {
 1000978:	29bff91e 	bne	r5,r6,1000960 <uart_isr+0x268>

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		}

		End = end;
 100097c:	d1272315 	stw	r4,-25460(gp)
 1000980:	003f6106 	br	1000708 <uart_isr+0x10>
	unsigned char parity;
	int start, end, queue_size, amount_to_send,FIFO_avail;

	while(alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
		if(!hasReadHeader) {
			if(alt_up_rs232_get_used_space_in_read_FIFO(uart) >= 3) {
 1000984:	d1272517 	ldw	r4,-25452(gp)
 1000988:	100ce740 	call	100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>
 100098c:	00c00084 	movi	r3,2
 1000990:	18bf8b2e 	bgeu	r3,r2,10007c0 <uart_isr+0xc8>
				// First byte is ID
				alt_up_rs232_read_data(uart, &id, &parity);
 1000994:	d1272517 	ldw	r4,-25452(gp)
 1000998:	d1672404 	addi	r5,gp,-25456
 100099c:	d80d883a 	mov	r6,sp
 10009a0:	100cf880 	call	100cf88 <alt_up_rs232_read_data>
				//2nd byte is the amount of data (including the dataType)
				alt_up_rs232_read_data(uart, &size, &parity);
 10009a4:	d1272517 	ldw	r4,-25452(gp)
 10009a8:	d1672444 	addi	r5,gp,-25455
 10009ac:	d80d883a 	mov	r6,sp
 10009b0:	100cf880 	call	100cf88 <alt_up_rs232_read_data>
				//3rd byte is the dataType
				alt_up_rs232_read_data(uart, &dataType, &parity);
 10009b4:	d1272517 	ldw	r4,-25452(gp)
 10009b8:	d1672204 	addi	r5,gp,-25464
 10009bc:	d80d883a 	mov	r6,sp
 10009c0:	100cf880 	call	100cf88 <alt_up_rs232_read_data>

				hasReadHeader = true;
				size--; //remaining data
 10009c4:	d0a72443 	ldbu	r2,-25455(gp)
				//2nd byte is the amount of data (including the dataType)
				alt_up_rs232_read_data(uart, &size, &parity);
				//3rd byte is the dataType
				alt_up_rs232_read_data(uart, &dataType, &parity);

				hasReadHeader = true;
 10009c8:	00c00044 	movi	r3,1
 10009cc:	d0e72105 	stb	r3,-25468(gp)
				size--; //remaining data
 10009d0:	10bfffc4 	addi	r2,r2,-1
 10009d4:	d0a72445 	stb	r2,-25455(gp)
				//printf("0:id: %i size: %i datatype: %i \n", id,size,dataType);
			}else {
				goto Send;
			}
		}
		if(size > 0) {
 10009d8:	d0a72443 	ldbu	r2,-25455(gp)
 10009dc:	103f5126 	beq	r2,zero,1000724 <uart_isr+0x2c>
			//printf("1: space_avail: %i, size: %i\n",alt_up_rs232_get_used_space_in_read_FIFO(uart),size);
			//wait for all the data to arrive

			if(alt_up_rs232_get_used_space_in_read_FIFO(uart) < size ) {
 10009e0:	d1272517 	ldw	r4,-25452(gp)
 10009e4:	100ce740 	call	100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>
 10009e8:	d0e72443 	ldbu	r3,-25455(gp)
 10009ec:	10c03536 	bltu	r2,r3,1000ac4 <uart_isr+0x3cc>
				goto Send;
			}
			//printf("2:id: %i size: %i datatype: %i \n", id,size,dataType);
			//receiving data into buffer
			unsigned i;
			for (i = 0; i < size; i++) {
 10009f0:	183f4c26 	beq	r3,zero,1000724 <uart_isr+0x2c>
			//printf("1: space_avail: %i, size: %i\n",alt_up_rs232_get_used_space_in_read_FIFO(uart),size);
			//wait for all the data to arrive

			if(alt_up_rs232_get_used_space_in_read_FIFO(uart) < size ) {
				printf("1");
				goto Send;
 10009f4:	0021883a 	mov	r16,zero
 10009f8:	04404074 	movhi	r17,257
 10009fc:	8c49db04 	addi	r17,r17,10092
			}
			//printf("2:id: %i size: %i datatype: %i \n", id,size,dataType);
			//receiving data into buffer
			unsigned i;
			for (i = 0; i < size; i++) {
				alt_up_rs232_read_data(uart, buffer+i, &parity);
 1000a00:	d1272517 	ldw	r4,-25452(gp)
 1000a04:	844b883a 	add	r5,r16,r17
 1000a08:	d80d883a 	mov	r6,sp
 1000a0c:	100cf880 	call	100cf88 <alt_up_rs232_read_data>
				goto Send;
			}
			//printf("2:id: %i size: %i datatype: %i \n", id,size,dataType);
			//receiving data into buffer
			unsigned i;
			for (i = 0; i < size; i++) {
 1000a10:	d0e72443 	ldbu	r3,-25455(gp)
 1000a14:	84000044 	addi	r16,r16,1
 1000a18:	80fff936 	bltu	r16,r3,1000a00 <uart_isr+0x308>
 1000a1c:	003f4106 	br	1000724 <uart_isr+0x2c>
		int i;
		for(i = 0; i < size; i++) {
			send[end] = data[i];

			end++;
			if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
 1000a20:	0009883a 	mov	r4,zero
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer

		int i;
		for(i = 0; i < size; i++) {
 1000a24:	29bfce1e 	bne	r5,r6,1000960 <uart_isr+0x268>
 1000a28:	003fd406 	br	100097c <uart_isr+0x284>
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
 1000a2c:	00c00084 	movi	r3,2
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
 1000a30:	39800005 	stb	r6,0(r7)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
 1000a34:	38000045 	stb	zero,1(r7)
 1000a38:	003f5306 	br	1000788 <uart_isr+0x90>
	//so max_size is 124 bytes

	//calculate available space
	int end = End;
	int start = Start;
	int avail_to_fill = start > end ? start - end : start + BUFFER_SIZE - end;
 1000a3c:	1105c83a 	sub	r2,r2,r4
 1000a40:	10c10004 	addi	r3,r2,1024
	avail_to_fill--; //start != end

	if(size>124){
 1000a44:	31c03fcc 	andi	r7,r6,255
 1000a48:	00801f04 	movi	r2,124
 1000a4c:	11ffa32e 	bgeu	r2,r7,10008dc <uart_isr+0x1e4>
		printf("error: send(): sending too much data! size must be <= 124\n");
 1000a50:	01004074 	movhi	r4,257
 1000a54:	21395604 	addi	r4,r4,-6824
 1000a58:	1000c0c0 	call	1000c0c <puts>
 1000a5c:	003f2a06 	br	1000708 <uart_isr+0x10>
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = 0;
 1000a60:	3007883a 	mov	r3,r6
 1000a64:	38000005 	stb	zero,0(r7)
 1000a68:	003f4706 	br	1000788 <uart_isr+0x90>

	if(size>124){
		printf("error: send(): sending too much data! size must be <= 124\n");
		return false;
	}else if((avail_to_fill - 60) < (size + 4)){ //leaving atleast 60 bytes exclusively for ack messages
		printf("error: send(): not enough space in buffer");
 1000a6c:	01004074 	movhi	r4,257
 1000a70:	21396504 	addi	r4,r4,-6764
 1000a74:	1000ad00 	call	1000ad0 <printf>
 1000a78:	003f2306 	br	1000708 <uart_isr+0x10>
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000a7c:	30c00044 	addi	r3,r6,1
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
 1000a80:	30800084 	addi	r2,r6,2
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000a84:	010000c4 	movi	r4,3
 1000a88:	42800085 	stb	r10,2(r8)
		printf("error: send(): not enough space in buffer");
		return false;
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
 1000a8c:	40800005 	stb	r2,0(r8)
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000a90:	40c00045 	stb	r3,1(r8)
 1000a94:	003fac06 	br	1000948 <uart_isr+0x250>
 1000a98:	30800044 	addi	r2,r6,1
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000a9c:	01000084 	movi	r4,2
 1000aa0:	42800045 	stb	r10,1(r8)
	}else{
		send[end++] = id;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
 1000aa4:	40800005 	stb	r2,0(r8)
 1000aa8:	003fa706 	br	1000948 <uart_isr+0x250>

	//create a copy of the global variables
	start = Start;
	end = End;

	queue_size = start < end ? end - start : end + BUFFER_SIZE - start; //how much is there to send
 1000aac:	1405c83a 	sub	r2,r2,r16
 1000ab0:	14410004 	addi	r17,r2,1024
 1000ab4:	003f4606 	br	10007d0 <uart_isr+0xd8>
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 2;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = size + 1;
		if( end == BUFFER_SIZE ) end = 0; //reached end of buffer
		send[end++] = dataType;
 1000ab8:	5009883a 	mov	r4,r10
 1000abc:	42800005 	stb	r10,0(r8)
 1000ac0:	003fa106 	br	1000948 <uart_isr+0x250>
		if(size > 0) {
			//printf("1: space_avail: %i, size: %i\n",alt_up_rs232_get_used_space_in_read_FIFO(uart),size);
			//wait for all the data to arrive

			if(alt_up_rs232_get_used_space_in_read_FIFO(uart) < size ) {
				printf("1");
 1000ac4:	01000c44 	movi	r4,49
 1000ac8:	1000b480 	call	1000b48 <putchar>
 1000acc:	003f3c06 	br	10007c0 <uart_isr+0xc8>

01000ad0 <printf>:
 1000ad0:	defffb04 	addi	sp,sp,-20
 1000ad4:	dfc00115 	stw	ra,4(sp)
 1000ad8:	d9400215 	stw	r5,8(sp)
 1000adc:	d9800315 	stw	r6,12(sp)
 1000ae0:	d9c00415 	stw	r7,16(sp)
 1000ae4:	00804074 	movhi	r2,257
 1000ae8:	10817b04 	addi	r2,r2,1516
 1000aec:	10c00017 	ldw	r3,0(r2)
 1000af0:	200b883a 	mov	r5,r4
 1000af4:	d8800204 	addi	r2,sp,8
 1000af8:	19000217 	ldw	r4,8(r3)
 1000afc:	100d883a 	mov	r6,r2
 1000b00:	d8800015 	stw	r2,0(sp)
 1000b04:	1002b980 	call	1002b98 <__vfprintf_internal>
 1000b08:	dfc00117 	ldw	ra,4(sp)
 1000b0c:	dec00504 	addi	sp,sp,20
 1000b10:	f800283a 	ret

01000b14 <_printf_r>:
 1000b14:	defffc04 	addi	sp,sp,-16
 1000b18:	dfc00115 	stw	ra,4(sp)
 1000b1c:	d9800215 	stw	r6,8(sp)
 1000b20:	d9c00315 	stw	r7,12(sp)
 1000b24:	280d883a 	mov	r6,r5
 1000b28:	21400217 	ldw	r5,8(r4)
 1000b2c:	d8c00204 	addi	r3,sp,8
 1000b30:	180f883a 	mov	r7,r3
 1000b34:	d8c00015 	stw	r3,0(sp)
 1000b38:	1000cec0 	call	1000cec <___vfprintf_internal_r>
 1000b3c:	dfc00117 	ldw	ra,4(sp)
 1000b40:	dec00404 	addi	sp,sp,16
 1000b44:	f800283a 	ret

01000b48 <putchar>:
 1000b48:	00804074 	movhi	r2,257
 1000b4c:	10817b04 	addi	r2,r2,1516
 1000b50:	11800017 	ldw	r6,0(r2)
 1000b54:	200b883a 	mov	r5,r4
 1000b58:	3009883a 	mov	r4,r6
 1000b5c:	31800217 	ldw	r6,8(r6)
 1000b60:	100719c1 	jmpi	100719c <_putc_r>

01000b64 <_putchar_r>:
 1000b64:	21800217 	ldw	r6,8(r4)
 1000b68:	100719c1 	jmpi	100719c <_putc_r>

01000b6c <_puts_r>:
 1000b6c:	defff604 	addi	sp,sp,-40
 1000b70:	dc400715 	stw	r17,28(sp)
 1000b74:	2023883a 	mov	r17,r4
 1000b78:	2809883a 	mov	r4,r5
 1000b7c:	dfc00915 	stw	ra,36(sp)
 1000b80:	dcc00815 	stw	r19,32(sp)
 1000b84:	2827883a 	mov	r19,r5
 1000b88:	1000c200 	call	1000c20 <strlen>
 1000b8c:	89400217 	ldw	r5,8(r17)
 1000b90:	00c04074 	movhi	r3,257
 1000b94:	18f97704 	addi	r3,r3,-6692
 1000b98:	01c00044 	movi	r7,1
 1000b9c:	12000044 	addi	r8,r2,1
 1000ba0:	d8c00515 	stw	r3,20(sp)
 1000ba4:	d9c00615 	stw	r7,24(sp)
 1000ba8:	d8c00304 	addi	r3,sp,12
 1000bac:	01c00084 	movi	r7,2
 1000bb0:	8809883a 	mov	r4,r17
 1000bb4:	d80d883a 	mov	r6,sp
 1000bb8:	d8c00015 	stw	r3,0(sp)
 1000bbc:	dcc00315 	stw	r19,12(sp)
 1000bc0:	da000215 	stw	r8,8(sp)
 1000bc4:	d9c00115 	stw	r7,4(sp)
 1000bc8:	d8800415 	stw	r2,16(sp)
 1000bcc:	1004df40 	call	1004df4 <__sfvwrite_r>
 1000bd0:	00ffffc4 	movi	r3,-1
 1000bd4:	10000626 	beq	r2,zero,1000bf0 <_puts_r+0x84>
 1000bd8:	1805883a 	mov	r2,r3
 1000bdc:	dfc00917 	ldw	ra,36(sp)
 1000be0:	dcc00817 	ldw	r19,32(sp)
 1000be4:	dc400717 	ldw	r17,28(sp)
 1000be8:	dec00a04 	addi	sp,sp,40
 1000bec:	f800283a 	ret
 1000bf0:	00c00284 	movi	r3,10
 1000bf4:	1805883a 	mov	r2,r3
 1000bf8:	dfc00917 	ldw	ra,36(sp)
 1000bfc:	dcc00817 	ldw	r19,32(sp)
 1000c00:	dc400717 	ldw	r17,28(sp)
 1000c04:	dec00a04 	addi	sp,sp,40
 1000c08:	f800283a 	ret

01000c0c <puts>:
 1000c0c:	00804074 	movhi	r2,257
 1000c10:	10817b04 	addi	r2,r2,1516
 1000c14:	200b883a 	mov	r5,r4
 1000c18:	11000017 	ldw	r4,0(r2)
 1000c1c:	1000b6c1 	jmpi	1000b6c <_puts_r>

01000c20 <strlen>:
 1000c20:	208000cc 	andi	r2,r4,3
 1000c24:	2011883a 	mov	r8,r4
 1000c28:	1000161e 	bne	r2,zero,1000c84 <strlen+0x64>
 1000c2c:	20c00017 	ldw	r3,0(r4)
 1000c30:	017fbff4 	movhi	r5,65279
 1000c34:	297fbfc4 	addi	r5,r5,-257
 1000c38:	01e02074 	movhi	r7,32897
 1000c3c:	39e02004 	addi	r7,r7,-32640
 1000c40:	1945883a 	add	r2,r3,r5
 1000c44:	11c4703a 	and	r2,r2,r7
 1000c48:	00c6303a 	nor	r3,zero,r3
 1000c4c:	1886703a 	and	r3,r3,r2
 1000c50:	18000c1e 	bne	r3,zero,1000c84 <strlen+0x64>
 1000c54:	280d883a 	mov	r6,r5
 1000c58:	380b883a 	mov	r5,r7
 1000c5c:	21000104 	addi	r4,r4,4
 1000c60:	20800017 	ldw	r2,0(r4)
 1000c64:	1187883a 	add	r3,r2,r6
 1000c68:	1946703a 	and	r3,r3,r5
 1000c6c:	0084303a 	nor	r2,zero,r2
 1000c70:	10c4703a 	and	r2,r2,r3
 1000c74:	103ff926 	beq	r2,zero,1000c5c <strlen+0x3c>
 1000c78:	20800007 	ldb	r2,0(r4)
 1000c7c:	10000326 	beq	r2,zero,1000c8c <strlen+0x6c>
 1000c80:	21000044 	addi	r4,r4,1
 1000c84:	20800007 	ldb	r2,0(r4)
 1000c88:	103ffd1e 	bne	r2,zero,1000c80 <strlen+0x60>
 1000c8c:	2205c83a 	sub	r2,r4,r8
 1000c90:	f800283a 	ret

01000c94 <__sprint_r>:
 1000c94:	30800217 	ldw	r2,8(r6)
 1000c98:	defffe04 	addi	sp,sp,-8
 1000c9c:	dc000015 	stw	r16,0(sp)
 1000ca0:	dfc00115 	stw	ra,4(sp)
 1000ca4:	3021883a 	mov	r16,r6
 1000ca8:	0007883a 	mov	r3,zero
 1000cac:	1000061e 	bne	r2,zero,1000cc8 <__sprint_r+0x34>
 1000cb0:	1805883a 	mov	r2,r3
 1000cb4:	30000115 	stw	zero,4(r6)
 1000cb8:	dfc00117 	ldw	ra,4(sp)
 1000cbc:	dc000017 	ldw	r16,0(sp)
 1000cc0:	dec00204 	addi	sp,sp,8
 1000cc4:	f800283a 	ret
 1000cc8:	1004df40 	call	1004df4 <__sfvwrite_r>
 1000ccc:	1007883a 	mov	r3,r2
 1000cd0:	1805883a 	mov	r2,r3
 1000cd4:	80000115 	stw	zero,4(r16)
 1000cd8:	80000215 	stw	zero,8(r16)
 1000cdc:	dfc00117 	ldw	ra,4(sp)
 1000ce0:	dc000017 	ldw	r16,0(sp)
 1000ce4:	dec00204 	addi	sp,sp,8
 1000ce8:	f800283a 	ret

01000cec <___vfprintf_internal_r>:
 1000cec:	defea404 	addi	sp,sp,-1392
 1000cf0:	dd815815 	stw	r22,1376(sp)
 1000cf4:	dc015215 	stw	r16,1352(sp)
 1000cf8:	d9c15115 	stw	r7,1348(sp)
 1000cfc:	dfc15b15 	stw	ra,1388(sp)
 1000d00:	df015a15 	stw	fp,1384(sp)
 1000d04:	ddc15915 	stw	r23,1380(sp)
 1000d08:	dd415715 	stw	r21,1372(sp)
 1000d0c:	dd015615 	stw	r20,1368(sp)
 1000d10:	dcc15515 	stw	r19,1364(sp)
 1000d14:	dc815415 	stw	r18,1360(sp)
 1000d18:	dc415315 	stw	r17,1356(sp)
 1000d1c:	282d883a 	mov	r22,r5
 1000d20:	3021883a 	mov	r16,r6
 1000d24:	d9014f15 	stw	r4,1340(sp)
 1000d28:	10054180 	call	1005418 <_localeconv_r>
 1000d2c:	10800017 	ldw	r2,0(r2)
 1000d30:	d9c15117 	ldw	r7,1348(sp)
 1000d34:	d8814915 	stw	r2,1316(sp)
 1000d38:	d8814f17 	ldw	r2,1340(sp)
 1000d3c:	10000226 	beq	r2,zero,1000d48 <___vfprintf_internal_r+0x5c>
 1000d40:	10800e17 	ldw	r2,56(r2)
 1000d44:	10020d26 	beq	r2,zero,100157c <___vfprintf_internal_r+0x890>
 1000d48:	b080030b 	ldhu	r2,12(r22)
 1000d4c:	1080020c 	andi	r2,r2,8
 1000d50:	10020e26 	beq	r2,zero,100158c <___vfprintf_internal_r+0x8a0>
 1000d54:	b0800417 	ldw	r2,16(r22)
 1000d58:	10020c26 	beq	r2,zero,100158c <___vfprintf_internal_r+0x8a0>
 1000d5c:	b200030b 	ldhu	r8,12(r22)
 1000d60:	00800284 	movi	r2,10
 1000d64:	40c0068c 	andi	r3,r8,26
 1000d68:	18802f1e 	bne	r3,r2,1000e28 <___vfprintf_internal_r+0x13c>
 1000d6c:	b080038f 	ldh	r2,14(r22)
 1000d70:	10002d16 	blt	r2,zero,1000e28 <___vfprintf_internal_r+0x13c>
 1000d74:	b240038b 	ldhu	r9,14(r22)
 1000d78:	b2800717 	ldw	r10,28(r22)
 1000d7c:	b2c00917 	ldw	r11,36(r22)
 1000d80:	d9014f17 	ldw	r4,1340(sp)
 1000d84:	dc402904 	addi	r17,sp,164
 1000d88:	d8804004 	addi	r2,sp,256
 1000d8c:	00c10004 	movi	r3,1024
 1000d90:	423fff4c 	andi	r8,r8,65533
 1000d94:	800d883a 	mov	r6,r16
 1000d98:	880b883a 	mov	r5,r17
 1000d9c:	da002c0d 	sth	r8,176(sp)
 1000da0:	da402c8d 	sth	r9,178(sp)
 1000da4:	da803015 	stw	r10,192(sp)
 1000da8:	dac03215 	stw	r11,200(sp)
 1000dac:	d8802d15 	stw	r2,180(sp)
 1000db0:	d8c02e15 	stw	r3,184(sp)
 1000db4:	d8802915 	stw	r2,164(sp)
 1000db8:	d8c02b15 	stw	r3,172(sp)
 1000dbc:	d8002f15 	stw	zero,188(sp)
 1000dc0:	1000cec0 	call	1000cec <___vfprintf_internal_r>
 1000dc4:	d8814b15 	stw	r2,1324(sp)
 1000dc8:	10000416 	blt	r2,zero,1000ddc <___vfprintf_internal_r+0xf0>
 1000dcc:	d9014f17 	ldw	r4,1340(sp)
 1000dd0:	880b883a 	mov	r5,r17
 1000dd4:	10044c40 	call	10044c4 <_fflush_r>
 1000dd8:	1002321e 	bne	r2,zero,10016a4 <___vfprintf_internal_r+0x9b8>
 1000ddc:	d8802c0b 	ldhu	r2,176(sp)
 1000de0:	1080100c 	andi	r2,r2,64
 1000de4:	10000326 	beq	r2,zero,1000df4 <___vfprintf_internal_r+0x108>
 1000de8:	b080030b 	ldhu	r2,12(r22)
 1000dec:	10801014 	ori	r2,r2,64
 1000df0:	b080030d 	sth	r2,12(r22)
 1000df4:	d8814b17 	ldw	r2,1324(sp)
 1000df8:	dfc15b17 	ldw	ra,1388(sp)
 1000dfc:	df015a17 	ldw	fp,1384(sp)
 1000e00:	ddc15917 	ldw	r23,1380(sp)
 1000e04:	dd815817 	ldw	r22,1376(sp)
 1000e08:	dd415717 	ldw	r21,1372(sp)
 1000e0c:	dd015617 	ldw	r20,1368(sp)
 1000e10:	dcc15517 	ldw	r19,1364(sp)
 1000e14:	dc815417 	ldw	r18,1360(sp)
 1000e18:	dc415317 	ldw	r17,1356(sp)
 1000e1c:	dc015217 	ldw	r16,1352(sp)
 1000e20:	dec15c04 	addi	sp,sp,1392
 1000e24:	f800283a 	ret
 1000e28:	0005883a 	mov	r2,zero
 1000e2c:	0007883a 	mov	r3,zero
 1000e30:	dd401904 	addi	r21,sp,100
 1000e34:	d8814215 	stw	r2,1288(sp)
 1000e38:	802f883a 	mov	r23,r16
 1000e3c:	d8c14315 	stw	r3,1292(sp)
 1000e40:	d8014b15 	stw	zero,1324(sp)
 1000e44:	d8014815 	stw	zero,1312(sp)
 1000e48:	d8014415 	stw	zero,1296(sp)
 1000e4c:	d8014715 	stw	zero,1308(sp)
 1000e50:	dd400c15 	stw	r21,48(sp)
 1000e54:	d8000e15 	stw	zero,56(sp)
 1000e58:	d8000d15 	stw	zero,52(sp)
 1000e5c:	b8800007 	ldb	r2,0(r23)
 1000e60:	10001926 	beq	r2,zero,1000ec8 <___vfprintf_internal_r+0x1dc>
 1000e64:	00c00944 	movi	r3,37
 1000e68:	10c01726 	beq	r2,r3,1000ec8 <___vfprintf_internal_r+0x1dc>
 1000e6c:	b821883a 	mov	r16,r23
 1000e70:	00000106 	br	1000e78 <___vfprintf_internal_r+0x18c>
 1000e74:	10c00326 	beq	r2,r3,1000e84 <___vfprintf_internal_r+0x198>
 1000e78:	84000044 	addi	r16,r16,1
 1000e7c:	80800007 	ldb	r2,0(r16)
 1000e80:	103ffc1e 	bne	r2,zero,1000e74 <___vfprintf_internal_r+0x188>
 1000e84:	85e7c83a 	sub	r19,r16,r23
 1000e88:	98000e26 	beq	r19,zero,1000ec4 <___vfprintf_internal_r+0x1d8>
 1000e8c:	dc800e17 	ldw	r18,56(sp)
 1000e90:	dc400d17 	ldw	r17,52(sp)
 1000e94:	008001c4 	movi	r2,7
 1000e98:	94e5883a 	add	r18,r18,r19
 1000e9c:	8c400044 	addi	r17,r17,1
 1000ea0:	adc00015 	stw	r23,0(r21)
 1000ea4:	dc800e15 	stw	r18,56(sp)
 1000ea8:	acc00115 	stw	r19,4(r21)
 1000eac:	dc400d15 	stw	r17,52(sp)
 1000eb0:	14428b16 	blt	r2,r17,10018e0 <___vfprintf_internal_r+0xbf4>
 1000eb4:	ad400204 	addi	r21,r21,8
 1000eb8:	d9014b17 	ldw	r4,1324(sp)
 1000ebc:	24c9883a 	add	r4,r4,r19
 1000ec0:	d9014b15 	stw	r4,1324(sp)
 1000ec4:	802f883a 	mov	r23,r16
 1000ec8:	b8800007 	ldb	r2,0(r23)
 1000ecc:	10013c26 	beq	r2,zero,10013c0 <___vfprintf_internal_r+0x6d4>
 1000ed0:	bdc00044 	addi	r23,r23,1
 1000ed4:	d8000405 	stb	zero,16(sp)
 1000ed8:	b8c00007 	ldb	r3,0(r23)
 1000edc:	04ffffc4 	movi	r19,-1
 1000ee0:	d8014c15 	stw	zero,1328(sp)
 1000ee4:	d8014a15 	stw	zero,1320(sp)
 1000ee8:	d8c14d15 	stw	r3,1332(sp)
 1000eec:	bdc00044 	addi	r23,r23,1
 1000ef0:	d9414d17 	ldw	r5,1332(sp)
 1000ef4:	00801604 	movi	r2,88
 1000ef8:	28fff804 	addi	r3,r5,-32
 1000efc:	10c06036 	bltu	r2,r3,1001080 <___vfprintf_internal_r+0x394>
 1000f00:	18c5883a 	add	r2,r3,r3
 1000f04:	1085883a 	add	r2,r2,r2
 1000f08:	00c04034 	movhi	r3,256
 1000f0c:	18c3c704 	addi	r3,r3,3868
 1000f10:	10c5883a 	add	r2,r2,r3
 1000f14:	11000017 	ldw	r4,0(r2)
 1000f18:	2000683a 	jmp	r4
 1000f1c:	01001e90 	cmplti	r4,zero,122
 1000f20:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f24:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f28:	01001e7c 	xorhi	r4,zero,121
 1000f2c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f30:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f34:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f38:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f3c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f40:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f44:	01001c5c 	xori	r4,zero,113
 1000f48:	01001e6c 	andhi	r4,zero,121
 1000f4c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f50:	01001c74 	movhi	r4,113
 1000f54:	01001f08 	cmpgei	r4,zero,124
 1000f58:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f5c:	01001ef4 	movhi	r4,123
 1000f60:	01001ebc 	xorhi	r4,zero,122
 1000f64:	01001ebc 	xorhi	r4,zero,122
 1000f68:	01001ebc 	xorhi	r4,zero,122
 1000f6c:	01001ebc 	xorhi	r4,zero,122
 1000f70:	01001ebc 	xorhi	r4,zero,122
 1000f74:	01001ebc 	xorhi	r4,zero,122
 1000f78:	01001ebc 	xorhi	r4,zero,122
 1000f7c:	01001ebc 	xorhi	r4,zero,122
 1000f80:	01001ebc 	xorhi	r4,zero,122
 1000f84:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f88:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f8c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f90:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f94:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f98:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000f9c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fa0:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fa4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fa8:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fac:	010016d8 	cmpnei	r4,zero,91
 1000fb0:	01001d44 	movi	r4,117
 1000fb4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fb8:	01001d44 	movi	r4,117
 1000fbc:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fc0:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fc4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fc8:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fcc:	01001ea8 	cmpgeui	r4,zero,122
 1000fd0:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fd4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fd8:	0100178c 	andi	r4,zero,94
 1000fdc:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fe0:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fe4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fe8:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000fec:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000ff0:	010017d8 	cmpnei	r4,zero,95
 1000ff4:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000ff8:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1000ffc:	01001df8 	rdprs	r4,zero,119
 1001000:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001004:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001008:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 100100c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001010:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001014:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001018:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 100101c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001020:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001024:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001028:	01001dcc 	andi	r4,zero,119
 100102c:	010016e4 	muli	r4,zero,91
 1001030:	01001d44 	movi	r4,117
 1001034:	01001d44 	movi	r4,117
 1001038:	01001d44 	movi	r4,117
 100103c:	01001d30 	cmpltui	r4,zero,116
 1001040:	010016e4 	muli	r4,zero,91
 1001044:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001048:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 100104c:	01001cb8 	rdprs	r4,zero,114
 1001050:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001054:	01001c88 	cmpgei	r4,zero,114
 1001058:	01001798 	cmpnei	r4,zero,94
 100105c:	01001ce8 	cmpgeui	r4,zero,115
 1001060:	01001cd4 	movui	r4,115
 1001064:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001068:	01001f64 	muli	r4,zero,125
 100106c:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001070:	010017e4 	muli	r4,zero,95
 1001074:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 1001078:	01001080 	call	100108 <__alt_mem_onchip_memory+0x100108>
 100107c:	01001e5c 	xori	r4,zero,121
 1001080:	d9014d17 	ldw	r4,1332(sp)
 1001084:	2000ce26 	beq	r4,zero,10013c0 <___vfprintf_internal_r+0x6d4>
 1001088:	01400044 	movi	r5,1
 100108c:	d9800f04 	addi	r6,sp,60
 1001090:	d9c14015 	stw	r7,1280(sp)
 1001094:	d9414515 	stw	r5,1300(sp)
 1001098:	d9814115 	stw	r6,1284(sp)
 100109c:	280f883a 	mov	r7,r5
 10010a0:	d9000f05 	stb	r4,60(sp)
 10010a4:	d8000405 	stb	zero,16(sp)
 10010a8:	d8014615 	stw	zero,1304(sp)
 10010ac:	d8c14c17 	ldw	r3,1328(sp)
 10010b0:	1880008c 	andi	r2,r3,2
 10010b4:	1005003a 	cmpeq	r2,r2,zero
 10010b8:	d8815015 	stw	r2,1344(sp)
 10010bc:	1000031e 	bne	r2,zero,10010cc <___vfprintf_internal_r+0x3e0>
 10010c0:	d9014517 	ldw	r4,1300(sp)
 10010c4:	21000084 	addi	r4,r4,2
 10010c8:	d9014515 	stw	r4,1300(sp)
 10010cc:	d9414c17 	ldw	r5,1328(sp)
 10010d0:	2940210c 	andi	r5,r5,132
 10010d4:	d9414e15 	stw	r5,1336(sp)
 10010d8:	28002d1e 	bne	r5,zero,1001190 <___vfprintf_internal_r+0x4a4>
 10010dc:	d9814a17 	ldw	r6,1320(sp)
 10010e0:	d8814517 	ldw	r2,1300(sp)
 10010e4:	30a1c83a 	sub	r16,r6,r2
 10010e8:	0400290e 	bge	zero,r16,1001190 <___vfprintf_internal_r+0x4a4>
 10010ec:	00800404 	movi	r2,16
 10010f0:	1404580e 	bge	r2,r16,1002254 <___vfprintf_internal_r+0x1568>
 10010f4:	dc800e17 	ldw	r18,56(sp)
 10010f8:	dc400d17 	ldw	r17,52(sp)
 10010fc:	1027883a 	mov	r19,r2
 1001100:	07004074 	movhi	fp,257
 1001104:	e7399384 	addi	fp,fp,-6578
 1001108:	050001c4 	movi	r20,7
 100110c:	00000306 	br	100111c <___vfprintf_internal_r+0x430>
 1001110:	843ffc04 	addi	r16,r16,-16
 1001114:	ad400204 	addi	r21,r21,8
 1001118:	9c00130e 	bge	r19,r16,1001168 <___vfprintf_internal_r+0x47c>
 100111c:	94800404 	addi	r18,r18,16
 1001120:	8c400044 	addi	r17,r17,1
 1001124:	af000015 	stw	fp,0(r21)
 1001128:	acc00115 	stw	r19,4(r21)
 100112c:	dc800e15 	stw	r18,56(sp)
 1001130:	dc400d15 	stw	r17,52(sp)
 1001134:	a47ff60e 	bge	r20,r17,1001110 <___vfprintf_internal_r+0x424>
 1001138:	d9014f17 	ldw	r4,1340(sp)
 100113c:	b00b883a 	mov	r5,r22
 1001140:	d9800c04 	addi	r6,sp,48
 1001144:	d9c15115 	stw	r7,1348(sp)
 1001148:	1000c940 	call	1000c94 <__sprint_r>
 100114c:	d9c15117 	ldw	r7,1348(sp)
 1001150:	10009e1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001154:	843ffc04 	addi	r16,r16,-16
 1001158:	dc800e17 	ldw	r18,56(sp)
 100115c:	dc400d17 	ldw	r17,52(sp)
 1001160:	dd401904 	addi	r21,sp,100
 1001164:	9c3fed16 	blt	r19,r16,100111c <___vfprintf_internal_r+0x430>
 1001168:	9425883a 	add	r18,r18,r16
 100116c:	8c400044 	addi	r17,r17,1
 1001170:	008001c4 	movi	r2,7
 1001174:	af000015 	stw	fp,0(r21)
 1001178:	ac000115 	stw	r16,4(r21)
 100117c:	dc800e15 	stw	r18,56(sp)
 1001180:	dc400d15 	stw	r17,52(sp)
 1001184:	1441f516 	blt	r2,r17,100195c <___vfprintf_internal_r+0xc70>
 1001188:	ad400204 	addi	r21,r21,8
 100118c:	00000206 	br	1001198 <___vfprintf_internal_r+0x4ac>
 1001190:	dc800e17 	ldw	r18,56(sp)
 1001194:	dc400d17 	ldw	r17,52(sp)
 1001198:	d8800407 	ldb	r2,16(sp)
 100119c:	10000b26 	beq	r2,zero,10011cc <___vfprintf_internal_r+0x4e0>
 10011a0:	00800044 	movi	r2,1
 10011a4:	94800044 	addi	r18,r18,1
 10011a8:	8c400044 	addi	r17,r17,1
 10011ac:	a8800115 	stw	r2,4(r21)
 10011b0:	d8c00404 	addi	r3,sp,16
 10011b4:	008001c4 	movi	r2,7
 10011b8:	a8c00015 	stw	r3,0(r21)
 10011bc:	dc800e15 	stw	r18,56(sp)
 10011c0:	dc400d15 	stw	r17,52(sp)
 10011c4:	1441da16 	blt	r2,r17,1001930 <___vfprintf_internal_r+0xc44>
 10011c8:	ad400204 	addi	r21,r21,8
 10011cc:	d9015017 	ldw	r4,1344(sp)
 10011d0:	20000b1e 	bne	r4,zero,1001200 <___vfprintf_internal_r+0x514>
 10011d4:	d8800444 	addi	r2,sp,17
 10011d8:	94800084 	addi	r18,r18,2
 10011dc:	8c400044 	addi	r17,r17,1
 10011e0:	a8800015 	stw	r2,0(r21)
 10011e4:	00c00084 	movi	r3,2
 10011e8:	008001c4 	movi	r2,7
 10011ec:	a8c00115 	stw	r3,4(r21)
 10011f0:	dc800e15 	stw	r18,56(sp)
 10011f4:	dc400d15 	stw	r17,52(sp)
 10011f8:	1441c216 	blt	r2,r17,1001904 <___vfprintf_internal_r+0xc18>
 10011fc:	ad400204 	addi	r21,r21,8
 1001200:	d9414e17 	ldw	r5,1336(sp)
 1001204:	00802004 	movi	r2,128
 1001208:	2880b126 	beq	r5,r2,10014d0 <___vfprintf_internal_r+0x7e4>
 100120c:	d8c14617 	ldw	r3,1304(sp)
 1001210:	19e1c83a 	sub	r16,r3,r7
 1001214:	0400260e 	bge	zero,r16,10012b0 <___vfprintf_internal_r+0x5c4>
 1001218:	00800404 	movi	r2,16
 100121c:	1403c90e 	bge	r2,r16,1002144 <___vfprintf_internal_r+0x1458>
 1001220:	1027883a 	mov	r19,r2
 1001224:	07004074 	movhi	fp,257
 1001228:	e7398f84 	addi	fp,fp,-6594
 100122c:	050001c4 	movi	r20,7
 1001230:	00000306 	br	1001240 <___vfprintf_internal_r+0x554>
 1001234:	843ffc04 	addi	r16,r16,-16
 1001238:	ad400204 	addi	r21,r21,8
 100123c:	9c00130e 	bge	r19,r16,100128c <___vfprintf_internal_r+0x5a0>
 1001240:	94800404 	addi	r18,r18,16
 1001244:	8c400044 	addi	r17,r17,1
 1001248:	af000015 	stw	fp,0(r21)
 100124c:	acc00115 	stw	r19,4(r21)
 1001250:	dc800e15 	stw	r18,56(sp)
 1001254:	dc400d15 	stw	r17,52(sp)
 1001258:	a47ff60e 	bge	r20,r17,1001234 <___vfprintf_internal_r+0x548>
 100125c:	d9014f17 	ldw	r4,1340(sp)
 1001260:	b00b883a 	mov	r5,r22
 1001264:	d9800c04 	addi	r6,sp,48
 1001268:	d9c15115 	stw	r7,1348(sp)
 100126c:	1000c940 	call	1000c94 <__sprint_r>
 1001270:	d9c15117 	ldw	r7,1348(sp)
 1001274:	1000551e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001278:	843ffc04 	addi	r16,r16,-16
 100127c:	dc800e17 	ldw	r18,56(sp)
 1001280:	dc400d17 	ldw	r17,52(sp)
 1001284:	dd401904 	addi	r21,sp,100
 1001288:	9c3fed16 	blt	r19,r16,1001240 <___vfprintf_internal_r+0x554>
 100128c:	9425883a 	add	r18,r18,r16
 1001290:	8c400044 	addi	r17,r17,1
 1001294:	008001c4 	movi	r2,7
 1001298:	af000015 	stw	fp,0(r21)
 100129c:	ac000115 	stw	r16,4(r21)
 10012a0:	dc800e15 	stw	r18,56(sp)
 10012a4:	dc400d15 	stw	r17,52(sp)
 10012a8:	14418216 	blt	r2,r17,10018b4 <___vfprintf_internal_r+0xbc8>
 10012ac:	ad400204 	addi	r21,r21,8
 10012b0:	d9014c17 	ldw	r4,1328(sp)
 10012b4:	2080400c 	andi	r2,r4,256
 10012b8:	10004a1e 	bne	r2,zero,10013e4 <___vfprintf_internal_r+0x6f8>
 10012bc:	d9414117 	ldw	r5,1284(sp)
 10012c0:	91e5883a 	add	r18,r18,r7
 10012c4:	8c400044 	addi	r17,r17,1
 10012c8:	008001c4 	movi	r2,7
 10012cc:	a9400015 	stw	r5,0(r21)
 10012d0:	a9c00115 	stw	r7,4(r21)
 10012d4:	dc800e15 	stw	r18,56(sp)
 10012d8:	dc400d15 	stw	r17,52(sp)
 10012dc:	14416716 	blt	r2,r17,100187c <___vfprintf_internal_r+0xb90>
 10012e0:	a8c00204 	addi	r3,r21,8
 10012e4:	d9814c17 	ldw	r6,1328(sp)
 10012e8:	3080010c 	andi	r2,r6,4
 10012ec:	10002826 	beq	r2,zero,1001390 <___vfprintf_internal_r+0x6a4>
 10012f0:	d8814a17 	ldw	r2,1320(sp)
 10012f4:	d9014517 	ldw	r4,1300(sp)
 10012f8:	1121c83a 	sub	r16,r2,r4
 10012fc:	0400240e 	bge	zero,r16,1001390 <___vfprintf_internal_r+0x6a4>
 1001300:	00800404 	movi	r2,16
 1001304:	14044f0e 	bge	r2,r16,1002444 <___vfprintf_internal_r+0x1758>
 1001308:	dc400d17 	ldw	r17,52(sp)
 100130c:	1027883a 	mov	r19,r2
 1001310:	07004074 	movhi	fp,257
 1001314:	e7399384 	addi	fp,fp,-6578
 1001318:	050001c4 	movi	r20,7
 100131c:	00000306 	br	100132c <___vfprintf_internal_r+0x640>
 1001320:	843ffc04 	addi	r16,r16,-16
 1001324:	18c00204 	addi	r3,r3,8
 1001328:	9c00110e 	bge	r19,r16,1001370 <___vfprintf_internal_r+0x684>
 100132c:	94800404 	addi	r18,r18,16
 1001330:	8c400044 	addi	r17,r17,1
 1001334:	1f000015 	stw	fp,0(r3)
 1001338:	1cc00115 	stw	r19,4(r3)
 100133c:	dc800e15 	stw	r18,56(sp)
 1001340:	dc400d15 	stw	r17,52(sp)
 1001344:	a47ff60e 	bge	r20,r17,1001320 <___vfprintf_internal_r+0x634>
 1001348:	d9014f17 	ldw	r4,1340(sp)
 100134c:	b00b883a 	mov	r5,r22
 1001350:	d9800c04 	addi	r6,sp,48
 1001354:	1000c940 	call	1000c94 <__sprint_r>
 1001358:	10001c1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 100135c:	843ffc04 	addi	r16,r16,-16
 1001360:	dc800e17 	ldw	r18,56(sp)
 1001364:	dc400d17 	ldw	r17,52(sp)
 1001368:	d8c01904 	addi	r3,sp,100
 100136c:	9c3fef16 	blt	r19,r16,100132c <___vfprintf_internal_r+0x640>
 1001370:	9425883a 	add	r18,r18,r16
 1001374:	8c400044 	addi	r17,r17,1
 1001378:	008001c4 	movi	r2,7
 100137c:	1f000015 	stw	fp,0(r3)
 1001380:	1c000115 	stw	r16,4(r3)
 1001384:	dc800e15 	stw	r18,56(sp)
 1001388:	dc400d15 	stw	r17,52(sp)
 100138c:	1440cb16 	blt	r2,r17,10016bc <___vfprintf_internal_r+0x9d0>
 1001390:	d8814a17 	ldw	r2,1320(sp)
 1001394:	d9414517 	ldw	r5,1300(sp)
 1001398:	1140010e 	bge	r2,r5,10013a0 <___vfprintf_internal_r+0x6b4>
 100139c:	2805883a 	mov	r2,r5
 10013a0:	d9814b17 	ldw	r6,1324(sp)
 10013a4:	308d883a 	add	r6,r6,r2
 10013a8:	d9814b15 	stw	r6,1324(sp)
 10013ac:	90013b1e 	bne	r18,zero,100189c <___vfprintf_internal_r+0xbb0>
 10013b0:	d9c14017 	ldw	r7,1280(sp)
 10013b4:	dd401904 	addi	r21,sp,100
 10013b8:	d8000d15 	stw	zero,52(sp)
 10013bc:	003ea706 	br	1000e5c <___vfprintf_internal_r+0x170>
 10013c0:	d8800e17 	ldw	r2,56(sp)
 10013c4:	10053f1e 	bne	r2,zero,10028c4 <___vfprintf_internal_r+0x1bd8>
 10013c8:	d8000d15 	stw	zero,52(sp)
 10013cc:	b080030b 	ldhu	r2,12(r22)
 10013d0:	1080100c 	andi	r2,r2,64
 10013d4:	103e8726 	beq	r2,zero,1000df4 <___vfprintf_internal_r+0x108>
 10013d8:	00bfffc4 	movi	r2,-1
 10013dc:	d8814b15 	stw	r2,1324(sp)
 10013e0:	003e8406 	br	1000df4 <___vfprintf_internal_r+0x108>
 10013e4:	d9814d17 	ldw	r6,1332(sp)
 10013e8:	00801944 	movi	r2,101
 10013ec:	11806e16 	blt	r2,r6,10015a8 <___vfprintf_internal_r+0x8bc>
 10013f0:	d9414717 	ldw	r5,1308(sp)
 10013f4:	00c00044 	movi	r3,1
 10013f8:	1943430e 	bge	r3,r5,1002108 <___vfprintf_internal_r+0x141c>
 10013fc:	d8814117 	ldw	r2,1284(sp)
 1001400:	94800044 	addi	r18,r18,1
 1001404:	8c400044 	addi	r17,r17,1
 1001408:	a8800015 	stw	r2,0(r21)
 100140c:	008001c4 	movi	r2,7
 1001410:	a8c00115 	stw	r3,4(r21)
 1001414:	dc800e15 	stw	r18,56(sp)
 1001418:	dc400d15 	stw	r17,52(sp)
 100141c:	1441ca16 	blt	r2,r17,1001b48 <___vfprintf_internal_r+0xe5c>
 1001420:	a8c00204 	addi	r3,r21,8
 1001424:	d9014917 	ldw	r4,1316(sp)
 1001428:	00800044 	movi	r2,1
 100142c:	94800044 	addi	r18,r18,1
 1001430:	8c400044 	addi	r17,r17,1
 1001434:	18800115 	stw	r2,4(r3)
 1001438:	008001c4 	movi	r2,7
 100143c:	19000015 	stw	r4,0(r3)
 1001440:	dc800e15 	stw	r18,56(sp)
 1001444:	dc400d15 	stw	r17,52(sp)
 1001448:	1441b616 	blt	r2,r17,1001b24 <___vfprintf_internal_r+0xe38>
 100144c:	1cc00204 	addi	r19,r3,8
 1001450:	d9014217 	ldw	r4,1288(sp)
 1001454:	d9414317 	ldw	r5,1292(sp)
 1001458:	000d883a 	mov	r6,zero
 100145c:	000f883a 	mov	r7,zero
 1001460:	10098740 	call	1009874 <__nedf2>
 1001464:	10017426 	beq	r2,zero,1001a38 <___vfprintf_internal_r+0xd4c>
 1001468:	d9414717 	ldw	r5,1308(sp)
 100146c:	d9814117 	ldw	r6,1284(sp)
 1001470:	8c400044 	addi	r17,r17,1
 1001474:	2c85883a 	add	r2,r5,r18
 1001478:	14bfffc4 	addi	r18,r2,-1
 100147c:	28bfffc4 	addi	r2,r5,-1
 1001480:	30c00044 	addi	r3,r6,1
 1001484:	98800115 	stw	r2,4(r19)
 1001488:	008001c4 	movi	r2,7
 100148c:	98c00015 	stw	r3,0(r19)
 1001490:	dc800e15 	stw	r18,56(sp)
 1001494:	dc400d15 	stw	r17,52(sp)
 1001498:	14418e16 	blt	r2,r17,1001ad4 <___vfprintf_internal_r+0xde8>
 100149c:	9cc00204 	addi	r19,r19,8
 10014a0:	d9414817 	ldw	r5,1312(sp)
 10014a4:	d8800804 	addi	r2,sp,32
 10014a8:	8c400044 	addi	r17,r17,1
 10014ac:	9165883a 	add	r18,r18,r5
 10014b0:	98800015 	stw	r2,0(r19)
 10014b4:	008001c4 	movi	r2,7
 10014b8:	99400115 	stw	r5,4(r19)
 10014bc:	dc800e15 	stw	r18,56(sp)
 10014c0:	dc400d15 	stw	r17,52(sp)
 10014c4:	1440ed16 	blt	r2,r17,100187c <___vfprintf_internal_r+0xb90>
 10014c8:	98c00204 	addi	r3,r19,8
 10014cc:	003f8506 	br	10012e4 <___vfprintf_internal_r+0x5f8>
 10014d0:	d9814a17 	ldw	r6,1320(sp)
 10014d4:	d8814517 	ldw	r2,1300(sp)
 10014d8:	30a1c83a 	sub	r16,r6,r2
 10014dc:	043f4b0e 	bge	zero,r16,100120c <___vfprintf_internal_r+0x520>
 10014e0:	00800404 	movi	r2,16
 10014e4:	1404340e 	bge	r2,r16,10025b8 <___vfprintf_internal_r+0x18cc>
 10014e8:	1027883a 	mov	r19,r2
 10014ec:	07004074 	movhi	fp,257
 10014f0:	e7398f84 	addi	fp,fp,-6594
 10014f4:	050001c4 	movi	r20,7
 10014f8:	00000306 	br	1001508 <___vfprintf_internal_r+0x81c>
 10014fc:	843ffc04 	addi	r16,r16,-16
 1001500:	ad400204 	addi	r21,r21,8
 1001504:	9c00130e 	bge	r19,r16,1001554 <___vfprintf_internal_r+0x868>
 1001508:	94800404 	addi	r18,r18,16
 100150c:	8c400044 	addi	r17,r17,1
 1001510:	af000015 	stw	fp,0(r21)
 1001514:	acc00115 	stw	r19,4(r21)
 1001518:	dc800e15 	stw	r18,56(sp)
 100151c:	dc400d15 	stw	r17,52(sp)
 1001520:	a47ff60e 	bge	r20,r17,10014fc <___vfprintf_internal_r+0x810>
 1001524:	d9014f17 	ldw	r4,1340(sp)
 1001528:	b00b883a 	mov	r5,r22
 100152c:	d9800c04 	addi	r6,sp,48
 1001530:	d9c15115 	stw	r7,1348(sp)
 1001534:	1000c940 	call	1000c94 <__sprint_r>
 1001538:	d9c15117 	ldw	r7,1348(sp)
 100153c:	103fa31e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001540:	843ffc04 	addi	r16,r16,-16
 1001544:	dc800e17 	ldw	r18,56(sp)
 1001548:	dc400d17 	ldw	r17,52(sp)
 100154c:	dd401904 	addi	r21,sp,100
 1001550:	9c3fed16 	blt	r19,r16,1001508 <___vfprintf_internal_r+0x81c>
 1001554:	9425883a 	add	r18,r18,r16
 1001558:	8c400044 	addi	r17,r17,1
 100155c:	008001c4 	movi	r2,7
 1001560:	af000015 	stw	fp,0(r21)
 1001564:	ac000115 	stw	r16,4(r21)
 1001568:	dc800e15 	stw	r18,56(sp)
 100156c:	dc400d15 	stw	r17,52(sp)
 1001570:	14416116 	blt	r2,r17,1001af8 <___vfprintf_internal_r+0xe0c>
 1001574:	ad400204 	addi	r21,r21,8
 1001578:	003f2406 	br	100120c <___vfprintf_internal_r+0x520>
 100157c:	d9014f17 	ldw	r4,1340(sp)
 1001580:	100475c0 	call	100475c <__sinit>
 1001584:	d9c15117 	ldw	r7,1348(sp)
 1001588:	003def06 	br	1000d48 <___vfprintf_internal_r+0x5c>
 100158c:	d9014f17 	ldw	r4,1340(sp)
 1001590:	b00b883a 	mov	r5,r22
 1001594:	d9c15115 	stw	r7,1348(sp)
 1001598:	1002bbc0 	call	1002bbc <__swsetup_r>
 100159c:	d9c15117 	ldw	r7,1348(sp)
 10015a0:	103dee26 	beq	r2,zero,1000d5c <___vfprintf_internal_r+0x70>
 10015a4:	003f8c06 	br	10013d8 <___vfprintf_internal_r+0x6ec>
 10015a8:	d9014217 	ldw	r4,1288(sp)
 10015ac:	d9414317 	ldw	r5,1292(sp)
 10015b0:	000d883a 	mov	r6,zero
 10015b4:	000f883a 	mov	r7,zero
 10015b8:	10097ec0 	call	10097ec <__eqdf2>
 10015bc:	1000f21e 	bne	r2,zero,1001988 <___vfprintf_internal_r+0xc9c>
 10015c0:	00804074 	movhi	r2,257
 10015c4:	10b98f04 	addi	r2,r2,-6596
 10015c8:	94800044 	addi	r18,r18,1
 10015cc:	8c400044 	addi	r17,r17,1
 10015d0:	a8800015 	stw	r2,0(r21)
 10015d4:	00c00044 	movi	r3,1
 10015d8:	008001c4 	movi	r2,7
 10015dc:	a8c00115 	stw	r3,4(r21)
 10015e0:	dc800e15 	stw	r18,56(sp)
 10015e4:	dc400d15 	stw	r17,52(sp)
 10015e8:	1442fa16 	blt	r2,r17,10021d4 <___vfprintf_internal_r+0x14e8>
 10015ec:	a8c00204 	addi	r3,r21,8
 10015f0:	d8800517 	ldw	r2,20(sp)
 10015f4:	d9014717 	ldw	r4,1308(sp)
 10015f8:	11015c0e 	bge	r2,r4,1001b6c <___vfprintf_internal_r+0xe80>
 10015fc:	dc400d17 	ldw	r17,52(sp)
 1001600:	d9814917 	ldw	r6,1316(sp)
 1001604:	00800044 	movi	r2,1
 1001608:	94800044 	addi	r18,r18,1
 100160c:	8c400044 	addi	r17,r17,1
 1001610:	18800115 	stw	r2,4(r3)
 1001614:	008001c4 	movi	r2,7
 1001618:	19800015 	stw	r6,0(r3)
 100161c:	dc800e15 	stw	r18,56(sp)
 1001620:	dc400d15 	stw	r17,52(sp)
 1001624:	14431016 	blt	r2,r17,1002268 <___vfprintf_internal_r+0x157c>
 1001628:	18c00204 	addi	r3,r3,8
 100162c:	d8814717 	ldw	r2,1308(sp)
 1001630:	143fffc4 	addi	r16,r2,-1
 1001634:	043f2b0e 	bge	zero,r16,10012e4 <___vfprintf_internal_r+0x5f8>
 1001638:	00800404 	movi	r2,16
 100163c:	1402a20e 	bge	r2,r16,10020c8 <___vfprintf_internal_r+0x13dc>
 1001640:	dc400d17 	ldw	r17,52(sp)
 1001644:	1027883a 	mov	r19,r2
 1001648:	07004074 	movhi	fp,257
 100164c:	e7398f84 	addi	fp,fp,-6594
 1001650:	050001c4 	movi	r20,7
 1001654:	00000306 	br	1001664 <___vfprintf_internal_r+0x978>
 1001658:	18c00204 	addi	r3,r3,8
 100165c:	843ffc04 	addi	r16,r16,-16
 1001660:	9c029c0e 	bge	r19,r16,10020d4 <___vfprintf_internal_r+0x13e8>
 1001664:	94800404 	addi	r18,r18,16
 1001668:	8c400044 	addi	r17,r17,1
 100166c:	1f000015 	stw	fp,0(r3)
 1001670:	1cc00115 	stw	r19,4(r3)
 1001674:	dc800e15 	stw	r18,56(sp)
 1001678:	dc400d15 	stw	r17,52(sp)
 100167c:	a47ff60e 	bge	r20,r17,1001658 <___vfprintf_internal_r+0x96c>
 1001680:	d9014f17 	ldw	r4,1340(sp)
 1001684:	b00b883a 	mov	r5,r22
 1001688:	d9800c04 	addi	r6,sp,48
 100168c:	1000c940 	call	1000c94 <__sprint_r>
 1001690:	103f4e1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001694:	dc800e17 	ldw	r18,56(sp)
 1001698:	dc400d17 	ldw	r17,52(sp)
 100169c:	d8c01904 	addi	r3,sp,100
 10016a0:	003fee06 	br	100165c <___vfprintf_internal_r+0x970>
 10016a4:	d8802c0b 	ldhu	r2,176(sp)
 10016a8:	00ffffc4 	movi	r3,-1
 10016ac:	d8c14b15 	stw	r3,1324(sp)
 10016b0:	1080100c 	andi	r2,r2,64
 10016b4:	103dcc1e 	bne	r2,zero,1000de8 <___vfprintf_internal_r+0xfc>
 10016b8:	003dce06 	br	1000df4 <___vfprintf_internal_r+0x108>
 10016bc:	d9014f17 	ldw	r4,1340(sp)
 10016c0:	b00b883a 	mov	r5,r22
 10016c4:	d9800c04 	addi	r6,sp,48
 10016c8:	1000c940 	call	1000c94 <__sprint_r>
 10016cc:	103f3f1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10016d0:	dc800e17 	ldw	r18,56(sp)
 10016d4:	003f2e06 	br	1001390 <___vfprintf_internal_r+0x6a4>
 10016d8:	d9414c17 	ldw	r5,1328(sp)
 10016dc:	29400414 	ori	r5,r5,16
 10016e0:	d9414c15 	stw	r5,1328(sp)
 10016e4:	d9814c17 	ldw	r6,1328(sp)
 10016e8:	3080080c 	andi	r2,r6,32
 10016ec:	10014f1e 	bne	r2,zero,1001c2c <___vfprintf_internal_r+0xf40>
 10016f0:	d8c14c17 	ldw	r3,1328(sp)
 10016f4:	1880040c 	andi	r2,r3,16
 10016f8:	1002ea1e 	bne	r2,zero,10022a4 <___vfprintf_internal_r+0x15b8>
 10016fc:	d9014c17 	ldw	r4,1328(sp)
 1001700:	2080100c 	andi	r2,r4,64
 1001704:	1002e726 	beq	r2,zero,10022a4 <___vfprintf_internal_r+0x15b8>
 1001708:	3880000f 	ldh	r2,0(r7)
 100170c:	39c00104 	addi	r7,r7,4
 1001710:	d9c14015 	stw	r7,1280(sp)
 1001714:	1023d7fa 	srai	r17,r2,31
 1001718:	1021883a 	mov	r16,r2
 100171c:	88037216 	blt	r17,zero,10024e8 <___vfprintf_internal_r+0x17fc>
 1001720:	01000044 	movi	r4,1
 1001724:	98000416 	blt	r19,zero,1001738 <___vfprintf_internal_r+0xa4c>
 1001728:	d8c14c17 	ldw	r3,1328(sp)
 100172c:	00bfdfc4 	movi	r2,-129
 1001730:	1886703a 	and	r3,r3,r2
 1001734:	d8c14c15 	stw	r3,1328(sp)
 1001738:	8444b03a 	or	r2,r16,r17
 100173c:	1002261e 	bne	r2,zero,1001fd8 <___vfprintf_internal_r+0x12ec>
 1001740:	9802251e 	bne	r19,zero,1001fd8 <___vfprintf_internal_r+0x12ec>
 1001744:	20803fcc 	andi	r2,r4,255
 1001748:	10029b26 	beq	r2,zero,10021b8 <___vfprintf_internal_r+0x14cc>
 100174c:	d8c01904 	addi	r3,sp,100
 1001750:	dd000f04 	addi	r20,sp,60
 1001754:	d8c14115 	stw	r3,1284(sp)
 1001758:	d8c14117 	ldw	r3,1284(sp)
 100175c:	dcc14515 	stw	r19,1300(sp)
 1001760:	a0c5c83a 	sub	r2,r20,r3
 1001764:	11c00a04 	addi	r7,r2,40
 1001768:	99c0010e 	bge	r19,r7,1001770 <___vfprintf_internal_r+0xa84>
 100176c:	d9c14515 	stw	r7,1300(sp)
 1001770:	dcc14615 	stw	r19,1304(sp)
 1001774:	d8800407 	ldb	r2,16(sp)
 1001778:	103e4c26 	beq	r2,zero,10010ac <___vfprintf_internal_r+0x3c0>
 100177c:	d8814517 	ldw	r2,1300(sp)
 1001780:	10800044 	addi	r2,r2,1
 1001784:	d8814515 	stw	r2,1300(sp)
 1001788:	003e4806 	br	10010ac <___vfprintf_internal_r+0x3c0>
 100178c:	d9814c17 	ldw	r6,1328(sp)
 1001790:	31800414 	ori	r6,r6,16
 1001794:	d9814c15 	stw	r6,1328(sp)
 1001798:	d8c14c17 	ldw	r3,1328(sp)
 100179c:	1880080c 	andi	r2,r3,32
 10017a0:	1001271e 	bne	r2,zero,1001c40 <___vfprintf_internal_r+0xf54>
 10017a4:	d9414c17 	ldw	r5,1328(sp)
 10017a8:	2880040c 	andi	r2,r5,16
 10017ac:	1002b61e 	bne	r2,zero,1002288 <___vfprintf_internal_r+0x159c>
 10017b0:	d9814c17 	ldw	r6,1328(sp)
 10017b4:	3080100c 	andi	r2,r6,64
 10017b8:	1002b326 	beq	r2,zero,1002288 <___vfprintf_internal_r+0x159c>
 10017bc:	3c00000b 	ldhu	r16,0(r7)
 10017c0:	0009883a 	mov	r4,zero
 10017c4:	39c00104 	addi	r7,r7,4
 10017c8:	0023883a 	mov	r17,zero
 10017cc:	d9c14015 	stw	r7,1280(sp)
 10017d0:	d8000405 	stb	zero,16(sp)
 10017d4:	003fd306 	br	1001724 <___vfprintf_internal_r+0xa38>
 10017d8:	d9014c17 	ldw	r4,1328(sp)
 10017dc:	21000414 	ori	r4,r4,16
 10017e0:	d9014c15 	stw	r4,1328(sp)
 10017e4:	d9414c17 	ldw	r5,1328(sp)
 10017e8:	2880080c 	andi	r2,r5,32
 10017ec:	1001081e 	bne	r2,zero,1001c10 <___vfprintf_internal_r+0xf24>
 10017f0:	d8c14c17 	ldw	r3,1328(sp)
 10017f4:	1880040c 	andi	r2,r3,16
 10017f8:	1002b01e 	bne	r2,zero,10022bc <___vfprintf_internal_r+0x15d0>
 10017fc:	d9014c17 	ldw	r4,1328(sp)
 1001800:	2080100c 	andi	r2,r4,64
 1001804:	1002ad26 	beq	r2,zero,10022bc <___vfprintf_internal_r+0x15d0>
 1001808:	3c00000b 	ldhu	r16,0(r7)
 100180c:	01000044 	movi	r4,1
 1001810:	39c00104 	addi	r7,r7,4
 1001814:	0023883a 	mov	r17,zero
 1001818:	d9c14015 	stw	r7,1280(sp)
 100181c:	d8000405 	stb	zero,16(sp)
 1001820:	003fc006 	br	1001724 <___vfprintf_internal_r+0xa38>
 1001824:	d9014f17 	ldw	r4,1340(sp)
 1001828:	b00b883a 	mov	r5,r22
 100182c:	d9800c04 	addi	r6,sp,48
 1001830:	1000c940 	call	1000c94 <__sprint_r>
 1001834:	103ee51e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001838:	dc800e17 	ldw	r18,56(sp)
 100183c:	d8c01904 	addi	r3,sp,100
 1001840:	d9814c17 	ldw	r6,1328(sp)
 1001844:	3080004c 	andi	r2,r6,1
 1001848:	1005003a 	cmpeq	r2,r2,zero
 100184c:	103ea51e 	bne	r2,zero,10012e4 <___vfprintf_internal_r+0x5f8>
 1001850:	00800044 	movi	r2,1
 1001854:	dc400d17 	ldw	r17,52(sp)
 1001858:	18800115 	stw	r2,4(r3)
 100185c:	d8814917 	ldw	r2,1316(sp)
 1001860:	94800044 	addi	r18,r18,1
 1001864:	8c400044 	addi	r17,r17,1
 1001868:	18800015 	stw	r2,0(r3)
 100186c:	008001c4 	movi	r2,7
 1001870:	dc800e15 	stw	r18,56(sp)
 1001874:	dc400d15 	stw	r17,52(sp)
 1001878:	14421e0e 	bge	r2,r17,10020f4 <___vfprintf_internal_r+0x1408>
 100187c:	d9014f17 	ldw	r4,1340(sp)
 1001880:	b00b883a 	mov	r5,r22
 1001884:	d9800c04 	addi	r6,sp,48
 1001888:	1000c940 	call	1000c94 <__sprint_r>
 100188c:	103ecf1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001890:	dc800e17 	ldw	r18,56(sp)
 1001894:	d8c01904 	addi	r3,sp,100
 1001898:	003e9206 	br	10012e4 <___vfprintf_internal_r+0x5f8>
 100189c:	d9014f17 	ldw	r4,1340(sp)
 10018a0:	b00b883a 	mov	r5,r22
 10018a4:	d9800c04 	addi	r6,sp,48
 10018a8:	1000c940 	call	1000c94 <__sprint_r>
 10018ac:	103ec026 	beq	r2,zero,10013b0 <___vfprintf_internal_r+0x6c4>
 10018b0:	003ec606 	br	10013cc <___vfprintf_internal_r+0x6e0>
 10018b4:	d9014f17 	ldw	r4,1340(sp)
 10018b8:	b00b883a 	mov	r5,r22
 10018bc:	d9800c04 	addi	r6,sp,48
 10018c0:	d9c15115 	stw	r7,1348(sp)
 10018c4:	1000c940 	call	1000c94 <__sprint_r>
 10018c8:	d9c15117 	ldw	r7,1348(sp)
 10018cc:	103ebf1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10018d0:	dc800e17 	ldw	r18,56(sp)
 10018d4:	dc400d17 	ldw	r17,52(sp)
 10018d8:	dd401904 	addi	r21,sp,100
 10018dc:	003e7406 	br	10012b0 <___vfprintf_internal_r+0x5c4>
 10018e0:	d9014f17 	ldw	r4,1340(sp)
 10018e4:	b00b883a 	mov	r5,r22
 10018e8:	d9800c04 	addi	r6,sp,48
 10018ec:	d9c15115 	stw	r7,1348(sp)
 10018f0:	1000c940 	call	1000c94 <__sprint_r>
 10018f4:	d9c15117 	ldw	r7,1348(sp)
 10018f8:	103eb41e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10018fc:	dd401904 	addi	r21,sp,100
 1001900:	003d6d06 	br	1000eb8 <___vfprintf_internal_r+0x1cc>
 1001904:	d9014f17 	ldw	r4,1340(sp)
 1001908:	b00b883a 	mov	r5,r22
 100190c:	d9800c04 	addi	r6,sp,48
 1001910:	d9c15115 	stw	r7,1348(sp)
 1001914:	1000c940 	call	1000c94 <__sprint_r>
 1001918:	d9c15117 	ldw	r7,1348(sp)
 100191c:	103eab1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001920:	dc800e17 	ldw	r18,56(sp)
 1001924:	dc400d17 	ldw	r17,52(sp)
 1001928:	dd401904 	addi	r21,sp,100
 100192c:	003e3406 	br	1001200 <___vfprintf_internal_r+0x514>
 1001930:	d9014f17 	ldw	r4,1340(sp)
 1001934:	b00b883a 	mov	r5,r22
 1001938:	d9800c04 	addi	r6,sp,48
 100193c:	d9c15115 	stw	r7,1348(sp)
 1001940:	1000c940 	call	1000c94 <__sprint_r>
 1001944:	d9c15117 	ldw	r7,1348(sp)
 1001948:	103ea01e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 100194c:	dc800e17 	ldw	r18,56(sp)
 1001950:	dc400d17 	ldw	r17,52(sp)
 1001954:	dd401904 	addi	r21,sp,100
 1001958:	003e1c06 	br	10011cc <___vfprintf_internal_r+0x4e0>
 100195c:	d9014f17 	ldw	r4,1340(sp)
 1001960:	b00b883a 	mov	r5,r22
 1001964:	d9800c04 	addi	r6,sp,48
 1001968:	d9c15115 	stw	r7,1348(sp)
 100196c:	1000c940 	call	1000c94 <__sprint_r>
 1001970:	d9c15117 	ldw	r7,1348(sp)
 1001974:	103e951e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001978:	dc800e17 	ldw	r18,56(sp)
 100197c:	dc400d17 	ldw	r17,52(sp)
 1001980:	dd401904 	addi	r21,sp,100
 1001984:	003e0406 	br	1001198 <___vfprintf_internal_r+0x4ac>
 1001988:	d9000517 	ldw	r4,20(sp)
 100198c:	0102520e 	bge	zero,r4,10022d8 <___vfprintf_internal_r+0x15ec>
 1001990:	d9814717 	ldw	r6,1308(sp)
 1001994:	21807a16 	blt	r4,r6,1001b80 <___vfprintf_internal_r+0xe94>
 1001998:	d8814117 	ldw	r2,1284(sp)
 100199c:	91a5883a 	add	r18,r18,r6
 10019a0:	8c400044 	addi	r17,r17,1
 10019a4:	a8800015 	stw	r2,0(r21)
 10019a8:	008001c4 	movi	r2,7
 10019ac:	a9800115 	stw	r6,4(r21)
 10019b0:	dc800e15 	stw	r18,56(sp)
 10019b4:	dc400d15 	stw	r17,52(sp)
 10019b8:	1442f616 	blt	r2,r17,1002594 <___vfprintf_internal_r+0x18a8>
 10019bc:	a8c00204 	addi	r3,r21,8
 10019c0:	d9414717 	ldw	r5,1308(sp)
 10019c4:	2161c83a 	sub	r16,r4,r5
 10019c8:	043f9d0e 	bge	zero,r16,1001840 <___vfprintf_internal_r+0xb54>
 10019cc:	00800404 	movi	r2,16
 10019d0:	1402130e 	bge	r2,r16,1002220 <___vfprintf_internal_r+0x1534>
 10019d4:	dc400d17 	ldw	r17,52(sp)
 10019d8:	1027883a 	mov	r19,r2
 10019dc:	07004074 	movhi	fp,257
 10019e0:	e7398f84 	addi	fp,fp,-6594
 10019e4:	050001c4 	movi	r20,7
 10019e8:	00000306 	br	10019f8 <___vfprintf_internal_r+0xd0c>
 10019ec:	18c00204 	addi	r3,r3,8
 10019f0:	843ffc04 	addi	r16,r16,-16
 10019f4:	9c020d0e 	bge	r19,r16,100222c <___vfprintf_internal_r+0x1540>
 10019f8:	94800404 	addi	r18,r18,16
 10019fc:	8c400044 	addi	r17,r17,1
 1001a00:	1f000015 	stw	fp,0(r3)
 1001a04:	1cc00115 	stw	r19,4(r3)
 1001a08:	dc800e15 	stw	r18,56(sp)
 1001a0c:	dc400d15 	stw	r17,52(sp)
 1001a10:	a47ff60e 	bge	r20,r17,10019ec <___vfprintf_internal_r+0xd00>
 1001a14:	d9014f17 	ldw	r4,1340(sp)
 1001a18:	b00b883a 	mov	r5,r22
 1001a1c:	d9800c04 	addi	r6,sp,48
 1001a20:	1000c940 	call	1000c94 <__sprint_r>
 1001a24:	103e691e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001a28:	dc800e17 	ldw	r18,56(sp)
 1001a2c:	dc400d17 	ldw	r17,52(sp)
 1001a30:	d8c01904 	addi	r3,sp,100
 1001a34:	003fee06 	br	10019f0 <___vfprintf_internal_r+0xd04>
 1001a38:	d8814717 	ldw	r2,1308(sp)
 1001a3c:	143fffc4 	addi	r16,r2,-1
 1001a40:	043e970e 	bge	zero,r16,10014a0 <___vfprintf_internal_r+0x7b4>
 1001a44:	00800404 	movi	r2,16
 1001a48:	1400180e 	bge	r2,r16,1001aac <___vfprintf_internal_r+0xdc0>
 1001a4c:	1029883a 	mov	r20,r2
 1001a50:	07004074 	movhi	fp,257
 1001a54:	e7398f84 	addi	fp,fp,-6594
 1001a58:	054001c4 	movi	r21,7
 1001a5c:	00000306 	br	1001a6c <___vfprintf_internal_r+0xd80>
 1001a60:	9cc00204 	addi	r19,r19,8
 1001a64:	843ffc04 	addi	r16,r16,-16
 1001a68:	a400120e 	bge	r20,r16,1001ab4 <___vfprintf_internal_r+0xdc8>
 1001a6c:	94800404 	addi	r18,r18,16
 1001a70:	8c400044 	addi	r17,r17,1
 1001a74:	9f000015 	stw	fp,0(r19)
 1001a78:	9d000115 	stw	r20,4(r19)
 1001a7c:	dc800e15 	stw	r18,56(sp)
 1001a80:	dc400d15 	stw	r17,52(sp)
 1001a84:	ac7ff60e 	bge	r21,r17,1001a60 <___vfprintf_internal_r+0xd74>
 1001a88:	d9014f17 	ldw	r4,1340(sp)
 1001a8c:	b00b883a 	mov	r5,r22
 1001a90:	d9800c04 	addi	r6,sp,48
 1001a94:	1000c940 	call	1000c94 <__sprint_r>
 1001a98:	103e4c1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001a9c:	dc800e17 	ldw	r18,56(sp)
 1001aa0:	dc400d17 	ldw	r17,52(sp)
 1001aa4:	dcc01904 	addi	r19,sp,100
 1001aa8:	003fee06 	br	1001a64 <___vfprintf_internal_r+0xd78>
 1001aac:	07004074 	movhi	fp,257
 1001ab0:	e7398f84 	addi	fp,fp,-6594
 1001ab4:	9425883a 	add	r18,r18,r16
 1001ab8:	8c400044 	addi	r17,r17,1
 1001abc:	008001c4 	movi	r2,7
 1001ac0:	9f000015 	stw	fp,0(r19)
 1001ac4:	9c000115 	stw	r16,4(r19)
 1001ac8:	dc800e15 	stw	r18,56(sp)
 1001acc:	dc400d15 	stw	r17,52(sp)
 1001ad0:	147e720e 	bge	r2,r17,100149c <___vfprintf_internal_r+0x7b0>
 1001ad4:	d9014f17 	ldw	r4,1340(sp)
 1001ad8:	b00b883a 	mov	r5,r22
 1001adc:	d9800c04 	addi	r6,sp,48
 1001ae0:	1000c940 	call	1000c94 <__sprint_r>
 1001ae4:	103e391e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001ae8:	dc800e17 	ldw	r18,56(sp)
 1001aec:	dc400d17 	ldw	r17,52(sp)
 1001af0:	dcc01904 	addi	r19,sp,100
 1001af4:	003e6a06 	br	10014a0 <___vfprintf_internal_r+0x7b4>
 1001af8:	d9014f17 	ldw	r4,1340(sp)
 1001afc:	b00b883a 	mov	r5,r22
 1001b00:	d9800c04 	addi	r6,sp,48
 1001b04:	d9c15115 	stw	r7,1348(sp)
 1001b08:	1000c940 	call	1000c94 <__sprint_r>
 1001b0c:	d9c15117 	ldw	r7,1348(sp)
 1001b10:	103e2e1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001b14:	dc800e17 	ldw	r18,56(sp)
 1001b18:	dc400d17 	ldw	r17,52(sp)
 1001b1c:	dd401904 	addi	r21,sp,100
 1001b20:	003dba06 	br	100120c <___vfprintf_internal_r+0x520>
 1001b24:	d9014f17 	ldw	r4,1340(sp)
 1001b28:	b00b883a 	mov	r5,r22
 1001b2c:	d9800c04 	addi	r6,sp,48
 1001b30:	1000c940 	call	1000c94 <__sprint_r>
 1001b34:	103e251e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001b38:	dc800e17 	ldw	r18,56(sp)
 1001b3c:	dc400d17 	ldw	r17,52(sp)
 1001b40:	dcc01904 	addi	r19,sp,100
 1001b44:	003e4206 	br	1001450 <___vfprintf_internal_r+0x764>
 1001b48:	d9014f17 	ldw	r4,1340(sp)
 1001b4c:	b00b883a 	mov	r5,r22
 1001b50:	d9800c04 	addi	r6,sp,48
 1001b54:	1000c940 	call	1000c94 <__sprint_r>
 1001b58:	103e1c1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1001b5c:	dc800e17 	ldw	r18,56(sp)
 1001b60:	dc400d17 	ldw	r17,52(sp)
 1001b64:	d8c01904 	addi	r3,sp,100
 1001b68:	003e2e06 	br	1001424 <___vfprintf_internal_r+0x738>
 1001b6c:	d9414c17 	ldw	r5,1328(sp)
 1001b70:	2880004c 	andi	r2,r5,1
 1001b74:	1005003a 	cmpeq	r2,r2,zero
 1001b78:	103dda1e 	bne	r2,zero,10012e4 <___vfprintf_internal_r+0x5f8>
 1001b7c:	003e9f06 	br	10015fc <___vfprintf_internal_r+0x910>
 1001b80:	d8c14117 	ldw	r3,1284(sp)
 1001b84:	9125883a 	add	r18,r18,r4
 1001b88:	8c400044 	addi	r17,r17,1
 1001b8c:	008001c4 	movi	r2,7
 1001b90:	a8c00015 	stw	r3,0(r21)
 1001b94:	a9000115 	stw	r4,4(r21)
 1001b98:	dc800e15 	stw	r18,56(sp)
 1001b9c:	dc400d15 	stw	r17,52(sp)
 1001ba0:	14426616 	blt	r2,r17,100253c <___vfprintf_internal_r+0x1850>
 1001ba4:	a8c00204 	addi	r3,r21,8
 1001ba8:	d9414917 	ldw	r5,1316(sp)
 1001bac:	00800044 	movi	r2,1
 1001bb0:	94800044 	addi	r18,r18,1
 1001bb4:	8c400044 	addi	r17,r17,1
 1001bb8:	18800115 	stw	r2,4(r3)
 1001bbc:	008001c4 	movi	r2,7
 1001bc0:	19400015 	stw	r5,0(r3)
 1001bc4:	dc800e15 	stw	r18,56(sp)
 1001bc8:	dc400d15 	stw	r17,52(sp)
 1001bcc:	2021883a 	mov	r16,r4
 1001bd0:	14425016 	blt	r2,r17,1002514 <___vfprintf_internal_r+0x1828>
 1001bd4:	19400204 	addi	r5,r3,8
 1001bd8:	d9814717 	ldw	r6,1308(sp)
 1001bdc:	8c400044 	addi	r17,r17,1
 1001be0:	dc400d15 	stw	r17,52(sp)
 1001be4:	3107c83a 	sub	r3,r6,r4
 1001be8:	d9014117 	ldw	r4,1284(sp)
 1001bec:	90e5883a 	add	r18,r18,r3
 1001bf0:	28c00115 	stw	r3,4(r5)
 1001bf4:	8105883a 	add	r2,r16,r4
 1001bf8:	28800015 	stw	r2,0(r5)
 1001bfc:	008001c4 	movi	r2,7
 1001c00:	dc800e15 	stw	r18,56(sp)
 1001c04:	147f1d16 	blt	r2,r17,100187c <___vfprintf_internal_r+0xb90>
 1001c08:	28c00204 	addi	r3,r5,8
 1001c0c:	003db506 	br	10012e4 <___vfprintf_internal_r+0x5f8>
 1001c10:	3c000017 	ldw	r16,0(r7)
 1001c14:	3c400117 	ldw	r17,4(r7)
 1001c18:	39800204 	addi	r6,r7,8
 1001c1c:	01000044 	movi	r4,1
 1001c20:	d9814015 	stw	r6,1280(sp)
 1001c24:	d8000405 	stb	zero,16(sp)
 1001c28:	003ebe06 	br	1001724 <___vfprintf_internal_r+0xa38>
 1001c2c:	3c000017 	ldw	r16,0(r7)
 1001c30:	3c400117 	ldw	r17,4(r7)
 1001c34:	38800204 	addi	r2,r7,8
 1001c38:	d8814015 	stw	r2,1280(sp)
 1001c3c:	003eb706 	br	100171c <___vfprintf_internal_r+0xa30>
 1001c40:	3c000017 	ldw	r16,0(r7)
 1001c44:	3c400117 	ldw	r17,4(r7)
 1001c48:	39000204 	addi	r4,r7,8
 1001c4c:	d9014015 	stw	r4,1280(sp)
 1001c50:	0009883a 	mov	r4,zero
 1001c54:	d8000405 	stb	zero,16(sp)
 1001c58:	003eb206 	br	1001724 <___vfprintf_internal_r+0xa38>
 1001c5c:	38c00017 	ldw	r3,0(r7)
 1001c60:	39c00104 	addi	r7,r7,4
 1001c64:	d8c14a15 	stw	r3,1320(sp)
 1001c68:	1800d10e 	bge	r3,zero,1001fb0 <___vfprintf_internal_r+0x12c4>
 1001c6c:	00c7c83a 	sub	r3,zero,r3
 1001c70:	d8c14a15 	stw	r3,1320(sp)
 1001c74:	d9014c17 	ldw	r4,1328(sp)
 1001c78:	b8c00007 	ldb	r3,0(r23)
 1001c7c:	21000114 	ori	r4,r4,4
 1001c80:	d9014c15 	stw	r4,1328(sp)
 1001c84:	003c9806 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001c88:	d9814c17 	ldw	r6,1328(sp)
 1001c8c:	3080080c 	andi	r2,r6,32
 1001c90:	1001f026 	beq	r2,zero,1002454 <___vfprintf_internal_r+0x1768>
 1001c94:	d9014b17 	ldw	r4,1324(sp)
 1001c98:	38800017 	ldw	r2,0(r7)
 1001c9c:	39c00104 	addi	r7,r7,4
 1001ca0:	d9c14015 	stw	r7,1280(sp)
 1001ca4:	2007d7fa 	srai	r3,r4,31
 1001ca8:	d9c14017 	ldw	r7,1280(sp)
 1001cac:	11000015 	stw	r4,0(r2)
 1001cb0:	10c00115 	stw	r3,4(r2)
 1001cb4:	003c6906 	br	1000e5c <___vfprintf_internal_r+0x170>
 1001cb8:	b8c00007 	ldb	r3,0(r23)
 1001cbc:	00801b04 	movi	r2,108
 1001cc0:	18824f26 	beq	r3,r2,1002600 <___vfprintf_internal_r+0x1914>
 1001cc4:	d9414c17 	ldw	r5,1328(sp)
 1001cc8:	29400414 	ori	r5,r5,16
 1001ccc:	d9414c15 	stw	r5,1328(sp)
 1001cd0:	003c8506 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001cd4:	d9814c17 	ldw	r6,1328(sp)
 1001cd8:	b8c00007 	ldb	r3,0(r23)
 1001cdc:	31800814 	ori	r6,r6,32
 1001ce0:	d9814c15 	stw	r6,1328(sp)
 1001ce4:	003c8006 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001ce8:	d8814c17 	ldw	r2,1328(sp)
 1001cec:	3c000017 	ldw	r16,0(r7)
 1001cf0:	00c01e04 	movi	r3,120
 1001cf4:	10800094 	ori	r2,r2,2
 1001cf8:	d8814c15 	stw	r2,1328(sp)
 1001cfc:	39c00104 	addi	r7,r7,4
 1001d00:	01404074 	movhi	r5,257
 1001d04:	29797804 	addi	r5,r5,-6688
 1001d08:	00800c04 	movi	r2,48
 1001d0c:	0023883a 	mov	r17,zero
 1001d10:	01000084 	movi	r4,2
 1001d14:	d9c14015 	stw	r7,1280(sp)
 1001d18:	d8c14d15 	stw	r3,1332(sp)
 1001d1c:	d9414415 	stw	r5,1296(sp)
 1001d20:	d8800445 	stb	r2,17(sp)
 1001d24:	d8c00485 	stb	r3,18(sp)
 1001d28:	d8000405 	stb	zero,16(sp)
 1001d2c:	003e7d06 	br	1001724 <___vfprintf_internal_r+0xa38>
 1001d30:	d8814c17 	ldw	r2,1328(sp)
 1001d34:	b8c00007 	ldb	r3,0(r23)
 1001d38:	10801014 	ori	r2,r2,64
 1001d3c:	d8814c15 	stw	r2,1328(sp)
 1001d40:	003c6906 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001d44:	d9414c17 	ldw	r5,1328(sp)
 1001d48:	2880020c 	andi	r2,r5,8
 1001d4c:	1001df26 	beq	r2,zero,10024cc <___vfprintf_internal_r+0x17e0>
 1001d50:	39800017 	ldw	r6,0(r7)
 1001d54:	38800204 	addi	r2,r7,8
 1001d58:	d8814015 	stw	r2,1280(sp)
 1001d5c:	d9814215 	stw	r6,1288(sp)
 1001d60:	39c00117 	ldw	r7,4(r7)
 1001d64:	d9c14315 	stw	r7,1292(sp)
 1001d68:	d9014217 	ldw	r4,1288(sp)
 1001d6c:	d9414317 	ldw	r5,1292(sp)
 1001d70:	10078780 	call	1007878 <__isinfd>
 1001d74:	10021726 	beq	r2,zero,10025d4 <___vfprintf_internal_r+0x18e8>
 1001d78:	d9014217 	ldw	r4,1288(sp)
 1001d7c:	d9414317 	ldw	r5,1292(sp)
 1001d80:	000d883a 	mov	r6,zero
 1001d84:	000f883a 	mov	r7,zero
 1001d88:	1009a0c0 	call	1009a0c <__ltdf2>
 1001d8c:	1002ca16 	blt	r2,zero,10028b8 <___vfprintf_internal_r+0x1bcc>
 1001d90:	d9414d17 	ldw	r5,1332(sp)
 1001d94:	008011c4 	movi	r2,71
 1001d98:	11420a16 	blt	r2,r5,10025c4 <___vfprintf_internal_r+0x18d8>
 1001d9c:	01804074 	movhi	r6,257
 1001da0:	31b97d04 	addi	r6,r6,-6668
 1001da4:	d9814115 	stw	r6,1284(sp)
 1001da8:	d9014c17 	ldw	r4,1328(sp)
 1001dac:	00c000c4 	movi	r3,3
 1001db0:	00bfdfc4 	movi	r2,-129
 1001db4:	2088703a 	and	r4,r4,r2
 1001db8:	180f883a 	mov	r7,r3
 1001dbc:	d8c14515 	stw	r3,1300(sp)
 1001dc0:	d9014c15 	stw	r4,1328(sp)
 1001dc4:	d8014615 	stw	zero,1304(sp)
 1001dc8:	003e6a06 	br	1001774 <___vfprintf_internal_r+0xa88>
 1001dcc:	38800017 	ldw	r2,0(r7)
 1001dd0:	00c00044 	movi	r3,1
 1001dd4:	39c00104 	addi	r7,r7,4
 1001dd8:	d9c14015 	stw	r7,1280(sp)
 1001ddc:	d9000f04 	addi	r4,sp,60
 1001de0:	180f883a 	mov	r7,r3
 1001de4:	d8c14515 	stw	r3,1300(sp)
 1001de8:	d9014115 	stw	r4,1284(sp)
 1001dec:	d8800f05 	stb	r2,60(sp)
 1001df0:	d8000405 	stb	zero,16(sp)
 1001df4:	003cac06 	br	10010a8 <___vfprintf_internal_r+0x3bc>
 1001df8:	01404074 	movhi	r5,257
 1001dfc:	29798304 	addi	r5,r5,-6644
 1001e00:	d9414415 	stw	r5,1296(sp)
 1001e04:	d9814c17 	ldw	r6,1328(sp)
 1001e08:	3080080c 	andi	r2,r6,32
 1001e0c:	1000f926 	beq	r2,zero,10021f4 <___vfprintf_internal_r+0x1508>
 1001e10:	3c000017 	ldw	r16,0(r7)
 1001e14:	3c400117 	ldw	r17,4(r7)
 1001e18:	38800204 	addi	r2,r7,8
 1001e1c:	d8814015 	stw	r2,1280(sp)
 1001e20:	d9414c17 	ldw	r5,1328(sp)
 1001e24:	2880004c 	andi	r2,r5,1
 1001e28:	1005003a 	cmpeq	r2,r2,zero
 1001e2c:	1000b31e 	bne	r2,zero,10020fc <___vfprintf_internal_r+0x1410>
 1001e30:	8444b03a 	or	r2,r16,r17
 1001e34:	1000b126 	beq	r2,zero,10020fc <___vfprintf_internal_r+0x1410>
 1001e38:	d9814d17 	ldw	r6,1332(sp)
 1001e3c:	29400094 	ori	r5,r5,2
 1001e40:	00800c04 	movi	r2,48
 1001e44:	01000084 	movi	r4,2
 1001e48:	d9414c15 	stw	r5,1328(sp)
 1001e4c:	d8800445 	stb	r2,17(sp)
 1001e50:	d9800485 	stb	r6,18(sp)
 1001e54:	d8000405 	stb	zero,16(sp)
 1001e58:	003e3206 	br	1001724 <___vfprintf_internal_r+0xa38>
 1001e5c:	01804074 	movhi	r6,257
 1001e60:	31b97804 	addi	r6,r6,-6688
 1001e64:	d9814415 	stw	r6,1296(sp)
 1001e68:	003fe606 	br	1001e04 <___vfprintf_internal_r+0x1118>
 1001e6c:	00800ac4 	movi	r2,43
 1001e70:	d8800405 	stb	r2,16(sp)
 1001e74:	b8c00007 	ldb	r3,0(r23)
 1001e78:	003c1b06 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001e7c:	d8814c17 	ldw	r2,1328(sp)
 1001e80:	b8c00007 	ldb	r3,0(r23)
 1001e84:	10800054 	ori	r2,r2,1
 1001e88:	d8814c15 	stw	r2,1328(sp)
 1001e8c:	003c1606 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001e90:	d8800407 	ldb	r2,16(sp)
 1001e94:	1000461e 	bne	r2,zero,1001fb0 <___vfprintf_internal_r+0x12c4>
 1001e98:	00800804 	movi	r2,32
 1001e9c:	d8800405 	stb	r2,16(sp)
 1001ea0:	b8c00007 	ldb	r3,0(r23)
 1001ea4:	003c1006 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001ea8:	d9814c17 	ldw	r6,1328(sp)
 1001eac:	b8c00007 	ldb	r3,0(r23)
 1001eb0:	31800214 	ori	r6,r6,8
 1001eb4:	d9814c15 	stw	r6,1328(sp)
 1001eb8:	003c0b06 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001ebc:	0007883a 	mov	r3,zero
 1001ec0:	01000244 	movi	r4,9
 1001ec4:	188002a4 	muli	r2,r3,10
 1001ec8:	b8c00007 	ldb	r3,0(r23)
 1001ecc:	d9814d17 	ldw	r6,1332(sp)
 1001ed0:	bdc00044 	addi	r23,r23,1
 1001ed4:	d8c14d15 	stw	r3,1332(sp)
 1001ed8:	d9414d17 	ldw	r5,1332(sp)
 1001edc:	3085883a 	add	r2,r6,r2
 1001ee0:	10fff404 	addi	r3,r2,-48
 1001ee4:	28bff404 	addi	r2,r5,-48
 1001ee8:	20bff62e 	bgeu	r4,r2,1001ec4 <___vfprintf_internal_r+0x11d8>
 1001eec:	d8c14a15 	stw	r3,1320(sp)
 1001ef0:	003bff06 	br	1000ef0 <___vfprintf_internal_r+0x204>
 1001ef4:	d9414c17 	ldw	r5,1328(sp)
 1001ef8:	b8c00007 	ldb	r3,0(r23)
 1001efc:	29402014 	ori	r5,r5,128
 1001f00:	d9414c15 	stw	r5,1328(sp)
 1001f04:	003bf806 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001f08:	b8c00007 	ldb	r3,0(r23)
 1001f0c:	00800a84 	movi	r2,42
 1001f10:	bdc00044 	addi	r23,r23,1
 1001f14:	18831526 	beq	r3,r2,1002b6c <___vfprintf_internal_r+0x1e80>
 1001f18:	d8c14d15 	stw	r3,1332(sp)
 1001f1c:	18bff404 	addi	r2,r3,-48
 1001f20:	00c00244 	movi	r3,9
 1001f24:	18827836 	bltu	r3,r2,1002908 <___vfprintf_internal_r+0x1c1c>
 1001f28:	000d883a 	mov	r6,zero
 1001f2c:	308002a4 	muli	r2,r6,10
 1001f30:	b9800007 	ldb	r6,0(r23)
 1001f34:	d9414d17 	ldw	r5,1332(sp)
 1001f38:	bdc00044 	addi	r23,r23,1
 1001f3c:	d9814d15 	stw	r6,1332(sp)
 1001f40:	d9014d17 	ldw	r4,1332(sp)
 1001f44:	1145883a 	add	r2,r2,r5
 1001f48:	11bff404 	addi	r6,r2,-48
 1001f4c:	20bff404 	addi	r2,r4,-48
 1001f50:	18bff62e 	bgeu	r3,r2,1001f2c <___vfprintf_internal_r+0x1240>
 1001f54:	3027883a 	mov	r19,r6
 1001f58:	303be50e 	bge	r6,zero,1000ef0 <___vfprintf_internal_r+0x204>
 1001f5c:	04ffffc4 	movi	r19,-1
 1001f60:	003be306 	br	1000ef0 <___vfprintf_internal_r+0x204>
 1001f64:	d8000405 	stb	zero,16(sp)
 1001f68:	39800017 	ldw	r6,0(r7)
 1001f6c:	39c00104 	addi	r7,r7,4
 1001f70:	d9c14015 	stw	r7,1280(sp)
 1001f74:	d9814115 	stw	r6,1284(sp)
 1001f78:	3001c926 	beq	r6,zero,10026a0 <___vfprintf_internal_r+0x19b4>
 1001f7c:	98000e16 	blt	r19,zero,1001fb8 <___vfprintf_internal_r+0x12cc>
 1001f80:	d9014117 	ldw	r4,1284(sp)
 1001f84:	000b883a 	mov	r5,zero
 1001f88:	980d883a 	mov	r6,r19
 1001f8c:	1005da80 	call	1005da8 <memchr>
 1001f90:	10025926 	beq	r2,zero,10028f8 <___vfprintf_internal_r+0x1c0c>
 1001f94:	d8c14117 	ldw	r3,1284(sp)
 1001f98:	10cfc83a 	sub	r7,r2,r3
 1001f9c:	99c19e16 	blt	r19,r7,1002618 <___vfprintf_internal_r+0x192c>
 1001fa0:	d9c14515 	stw	r7,1300(sp)
 1001fa4:	38000916 	blt	r7,zero,1001fcc <___vfprintf_internal_r+0x12e0>
 1001fa8:	d8014615 	stw	zero,1304(sp)
 1001fac:	003df106 	br	1001774 <___vfprintf_internal_r+0xa88>
 1001fb0:	b8c00007 	ldb	r3,0(r23)
 1001fb4:	003bcc06 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1001fb8:	d9014117 	ldw	r4,1284(sp)
 1001fbc:	1000c200 	call	1000c20 <strlen>
 1001fc0:	d8814515 	stw	r2,1300(sp)
 1001fc4:	100f883a 	mov	r7,r2
 1001fc8:	103ff70e 	bge	r2,zero,1001fa8 <___vfprintf_internal_r+0x12bc>
 1001fcc:	d8014515 	stw	zero,1300(sp)
 1001fd0:	d8014615 	stw	zero,1304(sp)
 1001fd4:	003de706 	br	1001774 <___vfprintf_internal_r+0xa88>
 1001fd8:	20c03fcc 	andi	r3,r4,255
 1001fdc:	00800044 	movi	r2,1
 1001fe0:	18802d26 	beq	r3,r2,1002098 <___vfprintf_internal_r+0x13ac>
 1001fe4:	18800e36 	bltu	r3,r2,1002020 <___vfprintf_internal_r+0x1334>
 1001fe8:	00800084 	movi	r2,2
 1001fec:	1880fa26 	beq	r3,r2,10023d8 <___vfprintf_internal_r+0x16ec>
 1001ff0:	01004074 	movhi	r4,257
 1001ff4:	21398804 	addi	r4,r4,-6624
 1001ff8:	1000c200 	call	1000c20 <strlen>
 1001ffc:	100f883a 	mov	r7,r2
 1002000:	dcc14515 	stw	r19,1300(sp)
 1002004:	9880010e 	bge	r19,r2,100200c <___vfprintf_internal_r+0x1320>
 1002008:	d8814515 	stw	r2,1300(sp)
 100200c:	00804074 	movhi	r2,257
 1002010:	10b98804 	addi	r2,r2,-6624
 1002014:	dcc14615 	stw	r19,1304(sp)
 1002018:	d8814115 	stw	r2,1284(sp)
 100201c:	003dd506 	br	1001774 <___vfprintf_internal_r+0xa88>
 1002020:	d9401904 	addi	r5,sp,100
 1002024:	dd000f04 	addi	r20,sp,60
 1002028:	d9414115 	stw	r5,1284(sp)
 100202c:	880a977a 	slli	r5,r17,29
 1002030:	d9814117 	ldw	r6,1284(sp)
 1002034:	8004d0fa 	srli	r2,r16,3
 1002038:	8806d0fa 	srli	r3,r17,3
 100203c:	810001cc 	andi	r4,r16,7
 1002040:	2884b03a 	or	r2,r5,r2
 1002044:	31bfffc4 	addi	r6,r6,-1
 1002048:	21000c04 	addi	r4,r4,48
 100204c:	d9814115 	stw	r6,1284(sp)
 1002050:	10cab03a 	or	r5,r2,r3
 1002054:	31000005 	stb	r4,0(r6)
 1002058:	1021883a 	mov	r16,r2
 100205c:	1823883a 	mov	r17,r3
 1002060:	283ff21e 	bne	r5,zero,100202c <___vfprintf_internal_r+0x1340>
 1002064:	d8c14c17 	ldw	r3,1328(sp)
 1002068:	1880004c 	andi	r2,r3,1
 100206c:	1005003a 	cmpeq	r2,r2,zero
 1002070:	103db91e 	bne	r2,zero,1001758 <___vfprintf_internal_r+0xa6c>
 1002074:	20803fcc 	andi	r2,r4,255
 1002078:	1080201c 	xori	r2,r2,128
 100207c:	10bfe004 	addi	r2,r2,-128
 1002080:	00c00c04 	movi	r3,48
 1002084:	10fdb426 	beq	r2,r3,1001758 <___vfprintf_internal_r+0xa6c>
 1002088:	31bfffc4 	addi	r6,r6,-1
 100208c:	d9814115 	stw	r6,1284(sp)
 1002090:	30c00005 	stb	r3,0(r6)
 1002094:	003db006 	br	1001758 <___vfprintf_internal_r+0xa6c>
 1002098:	88800068 	cmpgeui	r2,r17,1
 100209c:	10002c1e 	bne	r2,zero,1002150 <___vfprintf_internal_r+0x1464>
 10020a0:	8800021e 	bne	r17,zero,10020ac <___vfprintf_internal_r+0x13c0>
 10020a4:	00800244 	movi	r2,9
 10020a8:	14002936 	bltu	r2,r16,1002150 <___vfprintf_internal_r+0x1464>
 10020ac:	d90018c4 	addi	r4,sp,99
 10020b0:	dd000f04 	addi	r20,sp,60
 10020b4:	d9014115 	stw	r4,1284(sp)
 10020b8:	d9014117 	ldw	r4,1284(sp)
 10020bc:	80800c04 	addi	r2,r16,48
 10020c0:	20800005 	stb	r2,0(r4)
 10020c4:	003da406 	br	1001758 <___vfprintf_internal_r+0xa6c>
 10020c8:	dc400d17 	ldw	r17,52(sp)
 10020cc:	07004074 	movhi	fp,257
 10020d0:	e7398f84 	addi	fp,fp,-6594
 10020d4:	9425883a 	add	r18,r18,r16
 10020d8:	8c400044 	addi	r17,r17,1
 10020dc:	008001c4 	movi	r2,7
 10020e0:	1f000015 	stw	fp,0(r3)
 10020e4:	1c000115 	stw	r16,4(r3)
 10020e8:	dc800e15 	stw	r18,56(sp)
 10020ec:	dc400d15 	stw	r17,52(sp)
 10020f0:	147de216 	blt	r2,r17,100187c <___vfprintf_internal_r+0xb90>
 10020f4:	18c00204 	addi	r3,r3,8
 10020f8:	003c7a06 	br	10012e4 <___vfprintf_internal_r+0x5f8>
 10020fc:	01000084 	movi	r4,2
 1002100:	d8000405 	stb	zero,16(sp)
 1002104:	003d8706 	br	1001724 <___vfprintf_internal_r+0xa38>
 1002108:	d9814c17 	ldw	r6,1328(sp)
 100210c:	30c4703a 	and	r2,r6,r3
 1002110:	1005003a 	cmpeq	r2,r2,zero
 1002114:	103cb926 	beq	r2,zero,10013fc <___vfprintf_internal_r+0x710>
 1002118:	d9014117 	ldw	r4,1284(sp)
 100211c:	94800044 	addi	r18,r18,1
 1002120:	8c400044 	addi	r17,r17,1
 1002124:	008001c4 	movi	r2,7
 1002128:	a9000015 	stw	r4,0(r21)
 100212c:	a8c00115 	stw	r3,4(r21)
 1002130:	dc800e15 	stw	r18,56(sp)
 1002134:	dc400d15 	stw	r17,52(sp)
 1002138:	147e6616 	blt	r2,r17,1001ad4 <___vfprintf_internal_r+0xde8>
 100213c:	acc00204 	addi	r19,r21,8
 1002140:	003cd706 	br	10014a0 <___vfprintf_internal_r+0x7b4>
 1002144:	07004074 	movhi	fp,257
 1002148:	e7398f84 	addi	fp,fp,-6594
 100214c:	003c4f06 	br	100128c <___vfprintf_internal_r+0x5a0>
 1002150:	dd000f04 	addi	r20,sp,60
 1002154:	dc801904 	addi	r18,sp,100
 1002158:	8009883a 	mov	r4,r16
 100215c:	880b883a 	mov	r5,r17
 1002160:	01800284 	movi	r6,10
 1002164:	000f883a 	mov	r7,zero
 1002168:	100871c0 	call	100871c <__umoddi3>
 100216c:	12000c04 	addi	r8,r2,48
 1002170:	94bfffc4 	addi	r18,r18,-1
 1002174:	8009883a 	mov	r4,r16
 1002178:	880b883a 	mov	r5,r17
 100217c:	01800284 	movi	r6,10
 1002180:	000f883a 	mov	r7,zero
 1002184:	92000005 	stb	r8,0(r18)
 1002188:	10081400 	call	1008140 <__udivdi3>
 100218c:	1009883a 	mov	r4,r2
 1002190:	1021883a 	mov	r16,r2
 1002194:	18800068 	cmpgeui	r2,r3,1
 1002198:	1823883a 	mov	r17,r3
 100219c:	103fee1e 	bne	r2,zero,1002158 <___vfprintf_internal_r+0x146c>
 10021a0:	1800021e 	bne	r3,zero,10021ac <___vfprintf_internal_r+0x14c0>
 10021a4:	00800244 	movi	r2,9
 10021a8:	113feb36 	bltu	r2,r4,1002158 <___vfprintf_internal_r+0x146c>
 10021ac:	94bfffc4 	addi	r18,r18,-1
 10021b0:	dc814115 	stw	r18,1284(sp)
 10021b4:	003fc006 	br	10020b8 <___vfprintf_internal_r+0x13cc>
 10021b8:	d9014c17 	ldw	r4,1328(sp)
 10021bc:	2080004c 	andi	r2,r4,1
 10021c0:	10009a1e 	bne	r2,zero,100242c <___vfprintf_internal_r+0x1740>
 10021c4:	d9401904 	addi	r5,sp,100
 10021c8:	dd000f04 	addi	r20,sp,60
 10021cc:	d9414115 	stw	r5,1284(sp)
 10021d0:	003d6106 	br	1001758 <___vfprintf_internal_r+0xa6c>
 10021d4:	d9014f17 	ldw	r4,1340(sp)
 10021d8:	b00b883a 	mov	r5,r22
 10021dc:	d9800c04 	addi	r6,sp,48
 10021e0:	1000c940 	call	1000c94 <__sprint_r>
 10021e4:	103c791e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10021e8:	dc800e17 	ldw	r18,56(sp)
 10021ec:	d8c01904 	addi	r3,sp,100
 10021f0:	003cff06 	br	10015f0 <___vfprintf_internal_r+0x904>
 10021f4:	d8c14c17 	ldw	r3,1328(sp)
 10021f8:	1880040c 	andi	r2,r3,16
 10021fc:	1000711e 	bne	r2,zero,10023c4 <___vfprintf_internal_r+0x16d8>
 1002200:	d9014c17 	ldw	r4,1328(sp)
 1002204:	2080100c 	andi	r2,r4,64
 1002208:	10006e26 	beq	r2,zero,10023c4 <___vfprintf_internal_r+0x16d8>
 100220c:	3c00000b 	ldhu	r16,0(r7)
 1002210:	0023883a 	mov	r17,zero
 1002214:	39c00104 	addi	r7,r7,4
 1002218:	d9c14015 	stw	r7,1280(sp)
 100221c:	003f0006 	br	1001e20 <___vfprintf_internal_r+0x1134>
 1002220:	dc400d17 	ldw	r17,52(sp)
 1002224:	07004074 	movhi	fp,257
 1002228:	e7398f84 	addi	fp,fp,-6594
 100222c:	9425883a 	add	r18,r18,r16
 1002230:	8c400044 	addi	r17,r17,1
 1002234:	008001c4 	movi	r2,7
 1002238:	1f000015 	stw	fp,0(r3)
 100223c:	1c000115 	stw	r16,4(r3)
 1002240:	dc800e15 	stw	r18,56(sp)
 1002244:	dc400d15 	stw	r17,52(sp)
 1002248:	147d7616 	blt	r2,r17,1001824 <___vfprintf_internal_r+0xb38>
 100224c:	18c00204 	addi	r3,r3,8
 1002250:	003d7b06 	br	1001840 <___vfprintf_internal_r+0xb54>
 1002254:	dc800e17 	ldw	r18,56(sp)
 1002258:	dc400d17 	ldw	r17,52(sp)
 100225c:	07004074 	movhi	fp,257
 1002260:	e7399384 	addi	fp,fp,-6578
 1002264:	003bc006 	br	1001168 <___vfprintf_internal_r+0x47c>
 1002268:	d9014f17 	ldw	r4,1340(sp)
 100226c:	b00b883a 	mov	r5,r22
 1002270:	d9800c04 	addi	r6,sp,48
 1002274:	1000c940 	call	1000c94 <__sprint_r>
 1002278:	103c541e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 100227c:	dc800e17 	ldw	r18,56(sp)
 1002280:	d8c01904 	addi	r3,sp,100
 1002284:	003ce906 	br	100162c <___vfprintf_internal_r+0x940>
 1002288:	3c000017 	ldw	r16,0(r7)
 100228c:	0009883a 	mov	r4,zero
 1002290:	39c00104 	addi	r7,r7,4
 1002294:	0023883a 	mov	r17,zero
 1002298:	d9c14015 	stw	r7,1280(sp)
 100229c:	d8000405 	stb	zero,16(sp)
 10022a0:	003d2006 	br	1001724 <___vfprintf_internal_r+0xa38>
 10022a4:	38800017 	ldw	r2,0(r7)
 10022a8:	39c00104 	addi	r7,r7,4
 10022ac:	d9c14015 	stw	r7,1280(sp)
 10022b0:	1023d7fa 	srai	r17,r2,31
 10022b4:	1021883a 	mov	r16,r2
 10022b8:	003d1806 	br	100171c <___vfprintf_internal_r+0xa30>
 10022bc:	3c000017 	ldw	r16,0(r7)
 10022c0:	01000044 	movi	r4,1
 10022c4:	39c00104 	addi	r7,r7,4
 10022c8:	0023883a 	mov	r17,zero
 10022cc:	d9c14015 	stw	r7,1280(sp)
 10022d0:	d8000405 	stb	zero,16(sp)
 10022d4:	003d1306 	br	1001724 <___vfprintf_internal_r+0xa38>
 10022d8:	00804074 	movhi	r2,257
 10022dc:	10b98f04 	addi	r2,r2,-6596
 10022e0:	94800044 	addi	r18,r18,1
 10022e4:	8c400044 	addi	r17,r17,1
 10022e8:	a8800015 	stw	r2,0(r21)
 10022ec:	00c00044 	movi	r3,1
 10022f0:	008001c4 	movi	r2,7
 10022f4:	a8c00115 	stw	r3,4(r21)
 10022f8:	dc800e15 	stw	r18,56(sp)
 10022fc:	dc400d15 	stw	r17,52(sp)
 1002300:	1440ca16 	blt	r2,r17,100262c <___vfprintf_internal_r+0x1940>
 1002304:	a8c00204 	addi	r3,r21,8
 1002308:	2000061e 	bne	r4,zero,1002324 <___vfprintf_internal_r+0x1638>
 100230c:	d9414717 	ldw	r5,1308(sp)
 1002310:	2800041e 	bne	r5,zero,1002324 <___vfprintf_internal_r+0x1638>
 1002314:	d9814c17 	ldw	r6,1328(sp)
 1002318:	3080004c 	andi	r2,r6,1
 100231c:	1005003a 	cmpeq	r2,r2,zero
 1002320:	103bf01e 	bne	r2,zero,10012e4 <___vfprintf_internal_r+0x5f8>
 1002324:	00800044 	movi	r2,1
 1002328:	dc400d17 	ldw	r17,52(sp)
 100232c:	18800115 	stw	r2,4(r3)
 1002330:	d8814917 	ldw	r2,1316(sp)
 1002334:	94800044 	addi	r18,r18,1
 1002338:	8c400044 	addi	r17,r17,1
 100233c:	18800015 	stw	r2,0(r3)
 1002340:	008001c4 	movi	r2,7
 1002344:	dc800e15 	stw	r18,56(sp)
 1002348:	dc400d15 	stw	r17,52(sp)
 100234c:	1440ca16 	blt	r2,r17,1002678 <___vfprintf_internal_r+0x198c>
 1002350:	18c00204 	addi	r3,r3,8
 1002354:	0121c83a 	sub	r16,zero,r4
 1002358:	0400500e 	bge	zero,r16,100249c <___vfprintf_internal_r+0x17b0>
 100235c:	00800404 	movi	r2,16
 1002360:	1400800e 	bge	r2,r16,1002564 <___vfprintf_internal_r+0x1878>
 1002364:	1027883a 	mov	r19,r2
 1002368:	07004074 	movhi	fp,257
 100236c:	e7398f84 	addi	fp,fp,-6594
 1002370:	050001c4 	movi	r20,7
 1002374:	00000306 	br	1002384 <___vfprintf_internal_r+0x1698>
 1002378:	18c00204 	addi	r3,r3,8
 100237c:	843ffc04 	addi	r16,r16,-16
 1002380:	9c007a0e 	bge	r19,r16,100256c <___vfprintf_internal_r+0x1880>
 1002384:	94800404 	addi	r18,r18,16
 1002388:	8c400044 	addi	r17,r17,1
 100238c:	1f000015 	stw	fp,0(r3)
 1002390:	1cc00115 	stw	r19,4(r3)
 1002394:	dc800e15 	stw	r18,56(sp)
 1002398:	dc400d15 	stw	r17,52(sp)
 100239c:	a47ff60e 	bge	r20,r17,1002378 <___vfprintf_internal_r+0x168c>
 10023a0:	d9014f17 	ldw	r4,1340(sp)
 10023a4:	b00b883a 	mov	r5,r22
 10023a8:	d9800c04 	addi	r6,sp,48
 10023ac:	1000c940 	call	1000c94 <__sprint_r>
 10023b0:	103c061e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10023b4:	dc800e17 	ldw	r18,56(sp)
 10023b8:	dc400d17 	ldw	r17,52(sp)
 10023bc:	d8c01904 	addi	r3,sp,100
 10023c0:	003fee06 	br	100237c <___vfprintf_internal_r+0x1690>
 10023c4:	3c000017 	ldw	r16,0(r7)
 10023c8:	0023883a 	mov	r17,zero
 10023cc:	39c00104 	addi	r7,r7,4
 10023d0:	d9c14015 	stw	r7,1280(sp)
 10023d4:	003e9206 	br	1001e20 <___vfprintf_internal_r+0x1134>
 10023d8:	d9401904 	addi	r5,sp,100
 10023dc:	dd000f04 	addi	r20,sp,60
 10023e0:	d9414115 	stw	r5,1284(sp)
 10023e4:	d9814417 	ldw	r6,1296(sp)
 10023e8:	880a973a 	slli	r5,r17,28
 10023ec:	8004d13a 	srli	r2,r16,4
 10023f0:	810003cc 	andi	r4,r16,15
 10023f4:	3109883a 	add	r4,r6,r4
 10023f8:	2884b03a 	or	r2,r5,r2
 10023fc:	21400003 	ldbu	r5,0(r4)
 1002400:	d9014117 	ldw	r4,1284(sp)
 1002404:	8806d13a 	srli	r3,r17,4
 1002408:	1021883a 	mov	r16,r2
 100240c:	213fffc4 	addi	r4,r4,-1
 1002410:	d9014115 	stw	r4,1284(sp)
 1002414:	d9814117 	ldw	r6,1284(sp)
 1002418:	10c8b03a 	or	r4,r2,r3
 100241c:	1823883a 	mov	r17,r3
 1002420:	31400005 	stb	r5,0(r6)
 1002424:	203fef1e 	bne	r4,zero,10023e4 <___vfprintf_internal_r+0x16f8>
 1002428:	003ccb06 	br	1001758 <___vfprintf_internal_r+0xa6c>
 100242c:	00800c04 	movi	r2,48
 1002430:	d98018c4 	addi	r6,sp,99
 1002434:	dd000f04 	addi	r20,sp,60
 1002438:	d88018c5 	stb	r2,99(sp)
 100243c:	d9814115 	stw	r6,1284(sp)
 1002440:	003cc506 	br	1001758 <___vfprintf_internal_r+0xa6c>
 1002444:	dc400d17 	ldw	r17,52(sp)
 1002448:	07004074 	movhi	fp,257
 100244c:	e7399384 	addi	fp,fp,-6578
 1002450:	003bc706 	br	1001370 <___vfprintf_internal_r+0x684>
 1002454:	d9414c17 	ldw	r5,1328(sp)
 1002458:	2880040c 	andi	r2,r5,16
 100245c:	10007c26 	beq	r2,zero,1002650 <___vfprintf_internal_r+0x1964>
 1002460:	38800017 	ldw	r2,0(r7)
 1002464:	39c00104 	addi	r7,r7,4
 1002468:	d9c14015 	stw	r7,1280(sp)
 100246c:	d9814b17 	ldw	r6,1324(sp)
 1002470:	d9c14017 	ldw	r7,1280(sp)
 1002474:	11800015 	stw	r6,0(r2)
 1002478:	003a7806 	br	1000e5c <___vfprintf_internal_r+0x170>
 100247c:	d9014f17 	ldw	r4,1340(sp)
 1002480:	b00b883a 	mov	r5,r22
 1002484:	d9800c04 	addi	r6,sp,48
 1002488:	1000c940 	call	1000c94 <__sprint_r>
 100248c:	103bcf1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1002490:	dc800e17 	ldw	r18,56(sp)
 1002494:	dc400d17 	ldw	r17,52(sp)
 1002498:	d8c01904 	addi	r3,sp,100
 100249c:	d9014717 	ldw	r4,1308(sp)
 10024a0:	d9414117 	ldw	r5,1284(sp)
 10024a4:	8c400044 	addi	r17,r17,1
 10024a8:	9125883a 	add	r18,r18,r4
 10024ac:	008001c4 	movi	r2,7
 10024b0:	19400015 	stw	r5,0(r3)
 10024b4:	19000115 	stw	r4,4(r3)
 10024b8:	dc800e15 	stw	r18,56(sp)
 10024bc:	dc400d15 	stw	r17,52(sp)
 10024c0:	147cee16 	blt	r2,r17,100187c <___vfprintf_internal_r+0xb90>
 10024c4:	18c00204 	addi	r3,r3,8
 10024c8:	003b8606 	br	10012e4 <___vfprintf_internal_r+0x5f8>
 10024cc:	38c00017 	ldw	r3,0(r7)
 10024d0:	39000204 	addi	r4,r7,8
 10024d4:	d9014015 	stw	r4,1280(sp)
 10024d8:	d8c14215 	stw	r3,1288(sp)
 10024dc:	39c00117 	ldw	r7,4(r7)
 10024e0:	d9c14315 	stw	r7,1292(sp)
 10024e4:	003e2006 	br	1001d68 <___vfprintf_internal_r+0x107c>
 10024e8:	0005883a 	mov	r2,zero
 10024ec:	1409c83a 	sub	r4,r2,r16
 10024f0:	1105803a 	cmpltu	r2,r2,r4
 10024f4:	044bc83a 	sub	r5,zero,r17
 10024f8:	2885c83a 	sub	r2,r5,r2
 10024fc:	2021883a 	mov	r16,r4
 1002500:	1023883a 	mov	r17,r2
 1002504:	01000044 	movi	r4,1
 1002508:	00800b44 	movi	r2,45
 100250c:	d8800405 	stb	r2,16(sp)
 1002510:	003c8406 	br	1001724 <___vfprintf_internal_r+0xa38>
 1002514:	d9014f17 	ldw	r4,1340(sp)
 1002518:	b00b883a 	mov	r5,r22
 100251c:	d9800c04 	addi	r6,sp,48
 1002520:	1000c940 	call	1000c94 <__sprint_r>
 1002524:	103ba91e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1002528:	dc800e17 	ldw	r18,56(sp)
 100252c:	dc400d17 	ldw	r17,52(sp)
 1002530:	d9000517 	ldw	r4,20(sp)
 1002534:	d9401904 	addi	r5,sp,100
 1002538:	003da706 	br	1001bd8 <___vfprintf_internal_r+0xeec>
 100253c:	d9014f17 	ldw	r4,1340(sp)
 1002540:	b00b883a 	mov	r5,r22
 1002544:	d9800c04 	addi	r6,sp,48
 1002548:	1000c940 	call	1000c94 <__sprint_r>
 100254c:	103b9f1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1002550:	dc800e17 	ldw	r18,56(sp)
 1002554:	dc400d17 	ldw	r17,52(sp)
 1002558:	d9000517 	ldw	r4,20(sp)
 100255c:	d8c01904 	addi	r3,sp,100
 1002560:	003d9106 	br	1001ba8 <___vfprintf_internal_r+0xebc>
 1002564:	07004074 	movhi	fp,257
 1002568:	e7398f84 	addi	fp,fp,-6594
 100256c:	9425883a 	add	r18,r18,r16
 1002570:	8c400044 	addi	r17,r17,1
 1002574:	008001c4 	movi	r2,7
 1002578:	1f000015 	stw	fp,0(r3)
 100257c:	1c000115 	stw	r16,4(r3)
 1002580:	dc800e15 	stw	r18,56(sp)
 1002584:	dc400d15 	stw	r17,52(sp)
 1002588:	147fbc16 	blt	r2,r17,100247c <___vfprintf_internal_r+0x1790>
 100258c:	18c00204 	addi	r3,r3,8
 1002590:	003fc206 	br	100249c <___vfprintf_internal_r+0x17b0>
 1002594:	d9014f17 	ldw	r4,1340(sp)
 1002598:	b00b883a 	mov	r5,r22
 100259c:	d9800c04 	addi	r6,sp,48
 10025a0:	1000c940 	call	1000c94 <__sprint_r>
 10025a4:	103b891e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10025a8:	dc800e17 	ldw	r18,56(sp)
 10025ac:	d9000517 	ldw	r4,20(sp)
 10025b0:	d8c01904 	addi	r3,sp,100
 10025b4:	003d0206 	br	10019c0 <___vfprintf_internal_r+0xcd4>
 10025b8:	07004074 	movhi	fp,257
 10025bc:	e7398f84 	addi	fp,fp,-6594
 10025c0:	003be406 	br	1001554 <___vfprintf_internal_r+0x868>
 10025c4:	00804074 	movhi	r2,257
 10025c8:	10b97e04 	addi	r2,r2,-6664
 10025cc:	d8814115 	stw	r2,1284(sp)
 10025d0:	003df506 	br	1001da8 <___vfprintf_internal_r+0x10bc>
 10025d4:	d9014217 	ldw	r4,1288(sp)
 10025d8:	d9414317 	ldw	r5,1292(sp)
 10025dc:	10078b80 	call	10078b8 <__isnand>
 10025e0:	10003926 	beq	r2,zero,10026c8 <___vfprintf_internal_r+0x19dc>
 10025e4:	d9414d17 	ldw	r5,1332(sp)
 10025e8:	008011c4 	movi	r2,71
 10025ec:	1140ce16 	blt	r2,r5,1002928 <___vfprintf_internal_r+0x1c3c>
 10025f0:	01804074 	movhi	r6,257
 10025f4:	31b97f04 	addi	r6,r6,-6660
 10025f8:	d9814115 	stw	r6,1284(sp)
 10025fc:	003dea06 	br	1001da8 <___vfprintf_internal_r+0x10bc>
 1002600:	d9014c17 	ldw	r4,1328(sp)
 1002604:	bdc00044 	addi	r23,r23,1
 1002608:	b8c00007 	ldb	r3,0(r23)
 100260c:	21000814 	ori	r4,r4,32
 1002610:	d9014c15 	stw	r4,1328(sp)
 1002614:	003a3406 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1002618:	dcc14515 	stw	r19,1300(sp)
 100261c:	98011016 	blt	r19,zero,1002a60 <___vfprintf_internal_r+0x1d74>
 1002620:	980f883a 	mov	r7,r19
 1002624:	d8014615 	stw	zero,1304(sp)
 1002628:	003c5206 	br	1001774 <___vfprintf_internal_r+0xa88>
 100262c:	d9014f17 	ldw	r4,1340(sp)
 1002630:	b00b883a 	mov	r5,r22
 1002634:	d9800c04 	addi	r6,sp,48
 1002638:	1000c940 	call	1000c94 <__sprint_r>
 100263c:	103b631e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 1002640:	dc800e17 	ldw	r18,56(sp)
 1002644:	d9000517 	ldw	r4,20(sp)
 1002648:	d8c01904 	addi	r3,sp,100
 100264c:	003f2e06 	br	1002308 <___vfprintf_internal_r+0x161c>
 1002650:	d8c14c17 	ldw	r3,1328(sp)
 1002654:	1880100c 	andi	r2,r3,64
 1002658:	1000a026 	beq	r2,zero,10028dc <___vfprintf_internal_r+0x1bf0>
 100265c:	38800017 	ldw	r2,0(r7)
 1002660:	39c00104 	addi	r7,r7,4
 1002664:	d9c14015 	stw	r7,1280(sp)
 1002668:	d9014b17 	ldw	r4,1324(sp)
 100266c:	d9c14017 	ldw	r7,1280(sp)
 1002670:	1100000d 	sth	r4,0(r2)
 1002674:	0039f906 	br	1000e5c <___vfprintf_internal_r+0x170>
 1002678:	d9014f17 	ldw	r4,1340(sp)
 100267c:	b00b883a 	mov	r5,r22
 1002680:	d9800c04 	addi	r6,sp,48
 1002684:	1000c940 	call	1000c94 <__sprint_r>
 1002688:	103b501e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 100268c:	dc800e17 	ldw	r18,56(sp)
 1002690:	dc400d17 	ldw	r17,52(sp)
 1002694:	d9000517 	ldw	r4,20(sp)
 1002698:	d8c01904 	addi	r3,sp,100
 100269c:	003f2d06 	br	1002354 <___vfprintf_internal_r+0x1668>
 10026a0:	00800184 	movi	r2,6
 10026a4:	14c09a36 	bltu	r2,r19,1002910 <___vfprintf_internal_r+0x1c24>
 10026a8:	dcc14515 	stw	r19,1300(sp)
 10026ac:	9800010e 	bge	r19,zero,10026b4 <___vfprintf_internal_r+0x19c8>
 10026b0:	d8014515 	stw	zero,1300(sp)
 10026b4:	00804074 	movhi	r2,257
 10026b8:	10b98104 	addi	r2,r2,-6652
 10026bc:	980f883a 	mov	r7,r19
 10026c0:	d8814115 	stw	r2,1284(sp)
 10026c4:	003a7806 	br	10010a8 <___vfprintf_internal_r+0x3bc>
 10026c8:	00bfffc4 	movi	r2,-1
 10026cc:	9880e226 	beq	r19,r2,1002a58 <___vfprintf_internal_r+0x1d6c>
 10026d0:	d9414d17 	ldw	r5,1332(sp)
 10026d4:	008019c4 	movi	r2,103
 10026d8:	2880dc26 	beq	r5,r2,1002a4c <___vfprintf_internal_r+0x1d60>
 10026dc:	008011c4 	movi	r2,71
 10026e0:	2880da26 	beq	r5,r2,1002a4c <___vfprintf_internal_r+0x1d60>
 10026e4:	d9414c17 	ldw	r5,1328(sp)
 10026e8:	d9014317 	ldw	r4,1292(sp)
 10026ec:	d9814217 	ldw	r6,1288(sp)
 10026f0:	29404014 	ori	r5,r5,256
 10026f4:	d9414c15 	stw	r5,1328(sp)
 10026f8:	2000cc16 	blt	r4,zero,1002a2c <___vfprintf_internal_r+0x1d40>
 10026fc:	3021883a 	mov	r16,r6
 1002700:	2023883a 	mov	r17,r4
 1002704:	0039883a 	mov	fp,zero
 1002708:	d9414d17 	ldw	r5,1332(sp)
 100270c:	00801984 	movi	r2,102
 1002710:	2880b726 	beq	r5,r2,10029f0 <___vfprintf_internal_r+0x1d04>
 1002714:	00801184 	movi	r2,70
 1002718:	2880b526 	beq	r5,r2,10029f0 <___vfprintf_internal_r+0x1d04>
 100271c:	00801944 	movi	r2,101
 1002720:	2880c826 	beq	r5,r2,1002a44 <___vfprintf_internal_r+0x1d58>
 1002724:	00801144 	movi	r2,69
 1002728:	2880c626 	beq	r5,r2,1002a44 <___vfprintf_internal_r+0x1d58>
 100272c:	9829883a 	mov	r20,r19
 1002730:	d9014f17 	ldw	r4,1340(sp)
 1002734:	d8800504 	addi	r2,sp,20
 1002738:	880d883a 	mov	r6,r17
 100273c:	d8800115 	stw	r2,4(sp)
 1002740:	d8c00604 	addi	r3,sp,24
 1002744:	d8800704 	addi	r2,sp,28
 1002748:	800b883a 	mov	r5,r16
 100274c:	01c00084 	movi	r7,2
 1002750:	d8c00215 	stw	r3,8(sp)
 1002754:	d8800315 	stw	r2,12(sp)
 1002758:	dd000015 	stw	r20,0(sp)
 100275c:	1002f100 	call	1002f10 <_dtoa_r>
 1002760:	d9814d17 	ldw	r6,1332(sp)
 1002764:	d8814115 	stw	r2,1284(sp)
 1002768:	008019c4 	movi	r2,103
 100276c:	30809526 	beq	r6,r2,10029c4 <___vfprintf_internal_r+0x1cd8>
 1002770:	d8c14d17 	ldw	r3,1332(sp)
 1002774:	008011c4 	movi	r2,71
 1002778:	18809226 	beq	r3,r2,10029c4 <___vfprintf_internal_r+0x1cd8>
 100277c:	d9414117 	ldw	r5,1284(sp)
 1002780:	d9814d17 	ldw	r6,1332(sp)
 1002784:	00801984 	movi	r2,102
 1002788:	2d25883a 	add	r18,r5,r20
 100278c:	30808626 	beq	r6,r2,10029a8 <___vfprintf_internal_r+0x1cbc>
 1002790:	00801184 	movi	r2,70
 1002794:	30808426 	beq	r6,r2,10029a8 <___vfprintf_internal_r+0x1cbc>
 1002798:	000d883a 	mov	r6,zero
 100279c:	000f883a 	mov	r7,zero
 10027a0:	880b883a 	mov	r5,r17
 10027a4:	8009883a 	mov	r4,r16
 10027a8:	10097ec0 	call	10097ec <__eqdf2>
 10027ac:	1000751e 	bne	r2,zero,1002984 <___vfprintf_internal_r+0x1c98>
 10027b0:	9005883a 	mov	r2,r18
 10027b4:	dc800715 	stw	r18,28(sp)
 10027b8:	d9014117 	ldw	r4,1284(sp)
 10027bc:	d9414d17 	ldw	r5,1332(sp)
 10027c0:	00c019c4 	movi	r3,103
 10027c4:	1125c83a 	sub	r18,r2,r4
 10027c8:	28c06826 	beq	r5,r3,100296c <___vfprintf_internal_r+0x1c80>
 10027cc:	008011c4 	movi	r2,71
 10027d0:	28806626 	beq	r5,r2,100296c <___vfprintf_internal_r+0x1c80>
 10027d4:	d9000517 	ldw	r4,20(sp)
 10027d8:	d8c14d17 	ldw	r3,1332(sp)
 10027dc:	00801944 	movi	r2,101
 10027e0:	10c05516 	blt	r2,r3,1002938 <___vfprintf_internal_r+0x1c4c>
 10027e4:	213fffc4 	addi	r4,r4,-1
 10027e8:	d9000515 	stw	r4,20(sp)
 10027ec:	d8c00805 	stb	r3,32(sp)
 10027f0:	2021883a 	mov	r16,r4
 10027f4:	2000c116 	blt	r4,zero,1002afc <___vfprintf_internal_r+0x1e10>
 10027f8:	00800ac4 	movi	r2,43
 10027fc:	d8800845 	stb	r2,33(sp)
 1002800:	00800244 	movi	r2,9
 1002804:	1400af0e 	bge	r2,r16,1002ac4 <___vfprintf_internal_r+0x1dd8>
 1002808:	1027883a 	mov	r19,r2
 100280c:	dc400b84 	addi	r17,sp,46
 1002810:	8009883a 	mov	r4,r16
 1002814:	01400284 	movi	r5,10
 1002818:	1009ed40 	call	1009ed4 <__modsi3>
 100281c:	10800c04 	addi	r2,r2,48
 1002820:	8c7fffc4 	addi	r17,r17,-1
 1002824:	8009883a 	mov	r4,r16
 1002828:	01400284 	movi	r5,10
 100282c:	88800005 	stb	r2,0(r17)
 1002830:	1009e740 	call	1009e74 <__divsi3>
 1002834:	1021883a 	mov	r16,r2
 1002838:	98bff516 	blt	r19,r2,1002810 <___vfprintf_internal_r+0x1b24>
 100283c:	10c00c04 	addi	r3,r2,48
 1002840:	d88009c4 	addi	r2,sp,39
 1002844:	108001c4 	addi	r2,r2,7
 1002848:	897fffc4 	addi	r5,r17,-1
 100284c:	88ffffc5 	stb	r3,-1(r17)
 1002850:	2880a72e 	bgeu	r5,r2,1002af0 <___vfprintf_internal_r+0x1e04>
 1002854:	1009883a 	mov	r4,r2
 1002858:	d9800804 	addi	r6,sp,32
 100285c:	d8c00884 	addi	r3,sp,34
 1002860:	28800003 	ldbu	r2,0(r5)
 1002864:	29400044 	addi	r5,r5,1
 1002868:	18800005 	stb	r2,0(r3)
 100286c:	18c00044 	addi	r3,r3,1
 1002870:	293ffb36 	bltu	r5,r4,1002860 <___vfprintf_internal_r+0x1b74>
 1002874:	1987c83a 	sub	r3,r3,r6
 1002878:	00800044 	movi	r2,1
 100287c:	d8c14815 	stw	r3,1312(sp)
 1002880:	90cf883a 	add	r7,r18,r3
 1002884:	1480960e 	bge	r2,r18,1002ae0 <___vfprintf_internal_r+0x1df4>
 1002888:	39c00044 	addi	r7,r7,1
 100288c:	d9c14515 	stw	r7,1300(sp)
 1002890:	38003416 	blt	r7,zero,1002964 <___vfprintf_internal_r+0x1c78>
 1002894:	e0803fcc 	andi	r2,fp,255
 1002898:	1080201c 	xori	r2,r2,128
 100289c:	10bfe004 	addi	r2,r2,-128
 10028a0:	10004e26 	beq	r2,zero,10029dc <___vfprintf_internal_r+0x1cf0>
 10028a4:	00800b44 	movi	r2,45
 10028a8:	dc814715 	stw	r18,1308(sp)
 10028ac:	d8014615 	stw	zero,1304(sp)
 10028b0:	d8800405 	stb	r2,16(sp)
 10028b4:	003bb106 	br	100177c <___vfprintf_internal_r+0xa90>
 10028b8:	00800b44 	movi	r2,45
 10028bc:	d8800405 	stb	r2,16(sp)
 10028c0:	003d3306 	br	1001d90 <___vfprintf_internal_r+0x10a4>
 10028c4:	d9014f17 	ldw	r4,1340(sp)
 10028c8:	b00b883a 	mov	r5,r22
 10028cc:	d9800c04 	addi	r6,sp,48
 10028d0:	1000c940 	call	1000c94 <__sprint_r>
 10028d4:	103abd1e 	bne	r2,zero,10013cc <___vfprintf_internal_r+0x6e0>
 10028d8:	003abb06 	br	10013c8 <___vfprintf_internal_r+0x6dc>
 10028dc:	38800017 	ldw	r2,0(r7)
 10028e0:	39c00104 	addi	r7,r7,4
 10028e4:	d9c14015 	stw	r7,1280(sp)
 10028e8:	d9414b17 	ldw	r5,1324(sp)
 10028ec:	d9c14017 	ldw	r7,1280(sp)
 10028f0:	11400015 	stw	r5,0(r2)
 10028f4:	00395906 	br	1000e5c <___vfprintf_internal_r+0x170>
 10028f8:	980f883a 	mov	r7,r19
 10028fc:	dcc14515 	stw	r19,1300(sp)
 1002900:	d8014615 	stw	zero,1304(sp)
 1002904:	003b9b06 	br	1001774 <___vfprintf_internal_r+0xa88>
 1002908:	0027883a 	mov	r19,zero
 100290c:	00397806 	br	1000ef0 <___vfprintf_internal_r+0x204>
 1002910:	00c04074 	movhi	r3,257
 1002914:	18f98104 	addi	r3,r3,-6652
 1002918:	100f883a 	mov	r7,r2
 100291c:	d8814515 	stw	r2,1300(sp)
 1002920:	d8c14115 	stw	r3,1284(sp)
 1002924:	0039e006 	br	10010a8 <___vfprintf_internal_r+0x3bc>
 1002928:	00804074 	movhi	r2,257
 100292c:	10b98004 	addi	r2,r2,-6656
 1002930:	d8814115 	stw	r2,1284(sp)
 1002934:	003d1c06 	br	1001da8 <___vfprintf_internal_r+0x10bc>
 1002938:	d9414d17 	ldw	r5,1332(sp)
 100293c:	00801984 	movi	r2,102
 1002940:	28804926 	beq	r5,r2,1002a68 <___vfprintf_internal_r+0x1d7c>
 1002944:	200f883a 	mov	r7,r4
 1002948:	24805716 	blt	r4,r18,1002aa8 <___vfprintf_internal_r+0x1dbc>
 100294c:	d9414c17 	ldw	r5,1328(sp)
 1002950:	2880004c 	andi	r2,r5,1
 1002954:	10000126 	beq	r2,zero,100295c <___vfprintf_internal_r+0x1c70>
 1002958:	21c00044 	addi	r7,r4,1
 100295c:	d9c14515 	stw	r7,1300(sp)
 1002960:	383fcc0e 	bge	r7,zero,1002894 <___vfprintf_internal_r+0x1ba8>
 1002964:	d8014515 	stw	zero,1300(sp)
 1002968:	003fca06 	br	1002894 <___vfprintf_internal_r+0x1ba8>
 100296c:	d9000517 	ldw	r4,20(sp)
 1002970:	00bfff04 	movi	r2,-4
 1002974:	1100480e 	bge	r2,r4,1002a98 <___vfprintf_internal_r+0x1dac>
 1002978:	99004716 	blt	r19,r4,1002a98 <___vfprintf_internal_r+0x1dac>
 100297c:	d8c14d15 	stw	r3,1332(sp)
 1002980:	003ff006 	br	1002944 <___vfprintf_internal_r+0x1c58>
 1002984:	d8800717 	ldw	r2,28(sp)
 1002988:	14bf8b2e 	bgeu	r2,r18,10027b8 <___vfprintf_internal_r+0x1acc>
 100298c:	9007883a 	mov	r3,r18
 1002990:	01000c04 	movi	r4,48
 1002994:	11000005 	stb	r4,0(r2)
 1002998:	10800044 	addi	r2,r2,1
 100299c:	d8800715 	stw	r2,28(sp)
 10029a0:	18bffc1e 	bne	r3,r2,1002994 <___vfprintf_internal_r+0x1ca8>
 10029a4:	003f8406 	br	10027b8 <___vfprintf_internal_r+0x1acc>
 10029a8:	d8814117 	ldw	r2,1284(sp)
 10029ac:	10c00007 	ldb	r3,0(r2)
 10029b0:	00800c04 	movi	r2,48
 10029b4:	18805b26 	beq	r3,r2,1002b24 <___vfprintf_internal_r+0x1e38>
 10029b8:	d9000517 	ldw	r4,20(sp)
 10029bc:	9125883a 	add	r18,r18,r4
 10029c0:	003f7506 	br	1002798 <___vfprintf_internal_r+0x1aac>
 10029c4:	d9014c17 	ldw	r4,1328(sp)
 10029c8:	2080004c 	andi	r2,r4,1
 10029cc:	1005003a 	cmpeq	r2,r2,zero
 10029d0:	103f6a26 	beq	r2,zero,100277c <___vfprintf_internal_r+0x1a90>
 10029d4:	d8800717 	ldw	r2,28(sp)
 10029d8:	003f7706 	br	10027b8 <___vfprintf_internal_r+0x1acc>
 10029dc:	d9c14515 	stw	r7,1300(sp)
 10029e0:	38004d16 	blt	r7,zero,1002b18 <___vfprintf_internal_r+0x1e2c>
 10029e4:	dc814715 	stw	r18,1308(sp)
 10029e8:	d8014615 	stw	zero,1304(sp)
 10029ec:	003b6106 	br	1001774 <___vfprintf_internal_r+0xa88>
 10029f0:	d9014f17 	ldw	r4,1340(sp)
 10029f4:	d8800504 	addi	r2,sp,20
 10029f8:	d8800115 	stw	r2,4(sp)
 10029fc:	d8c00604 	addi	r3,sp,24
 1002a00:	d8800704 	addi	r2,sp,28
 1002a04:	800b883a 	mov	r5,r16
 1002a08:	880d883a 	mov	r6,r17
 1002a0c:	01c000c4 	movi	r7,3
 1002a10:	d8c00215 	stw	r3,8(sp)
 1002a14:	d8800315 	stw	r2,12(sp)
 1002a18:	dcc00015 	stw	r19,0(sp)
 1002a1c:	9829883a 	mov	r20,r19
 1002a20:	1002f100 	call	1002f10 <_dtoa_r>
 1002a24:	d8814115 	stw	r2,1284(sp)
 1002a28:	003f5106 	br	1002770 <___vfprintf_internal_r+0x1a84>
 1002a2c:	d8c14217 	ldw	r3,1288(sp)
 1002a30:	d9014317 	ldw	r4,1292(sp)
 1002a34:	07000b44 	movi	fp,45
 1002a38:	1821883a 	mov	r16,r3
 1002a3c:	2460003c 	xorhi	r17,r4,32768
 1002a40:	003f3106 	br	1002708 <___vfprintf_internal_r+0x1a1c>
 1002a44:	9d000044 	addi	r20,r19,1
 1002a48:	003f3906 	br	1002730 <___vfprintf_internal_r+0x1a44>
 1002a4c:	983f251e 	bne	r19,zero,10026e4 <___vfprintf_internal_r+0x19f8>
 1002a50:	04c00044 	movi	r19,1
 1002a54:	003f2306 	br	10026e4 <___vfprintf_internal_r+0x19f8>
 1002a58:	04c00184 	movi	r19,6
 1002a5c:	003f2106 	br	10026e4 <___vfprintf_internal_r+0x19f8>
 1002a60:	d8014515 	stw	zero,1300(sp)
 1002a64:	003eee06 	br	1002620 <___vfprintf_internal_r+0x1934>
 1002a68:	200f883a 	mov	r7,r4
 1002a6c:	0100370e 	bge	zero,r4,1002b4c <___vfprintf_internal_r+0x1e60>
 1002a70:	9800031e 	bne	r19,zero,1002a80 <___vfprintf_internal_r+0x1d94>
 1002a74:	d9814c17 	ldw	r6,1328(sp)
 1002a78:	3080004c 	andi	r2,r6,1
 1002a7c:	103fb726 	beq	r2,zero,100295c <___vfprintf_internal_r+0x1c70>
 1002a80:	20800044 	addi	r2,r4,1
 1002a84:	98a7883a 	add	r19,r19,r2
 1002a88:	dcc14515 	stw	r19,1300(sp)
 1002a8c:	980f883a 	mov	r7,r19
 1002a90:	983f800e 	bge	r19,zero,1002894 <___vfprintf_internal_r+0x1ba8>
 1002a94:	003fb306 	br	1002964 <___vfprintf_internal_r+0x1c78>
 1002a98:	d9814d17 	ldw	r6,1332(sp)
 1002a9c:	31bfff84 	addi	r6,r6,-2
 1002aa0:	d9814d15 	stw	r6,1332(sp)
 1002aa4:	003f4c06 	br	10027d8 <___vfprintf_internal_r+0x1aec>
 1002aa8:	0100180e 	bge	zero,r4,1002b0c <___vfprintf_internal_r+0x1e20>
 1002aac:	00800044 	movi	r2,1
 1002ab0:	1485883a 	add	r2,r2,r18
 1002ab4:	d8814515 	stw	r2,1300(sp)
 1002ab8:	100f883a 	mov	r7,r2
 1002abc:	103f750e 	bge	r2,zero,1002894 <___vfprintf_internal_r+0x1ba8>
 1002ac0:	003fa806 	br	1002964 <___vfprintf_internal_r+0x1c78>
 1002ac4:	80c00c04 	addi	r3,r16,48
 1002ac8:	00800c04 	movi	r2,48
 1002acc:	d8c008c5 	stb	r3,35(sp)
 1002ad0:	d9800804 	addi	r6,sp,32
 1002ad4:	d8c00904 	addi	r3,sp,36
 1002ad8:	d8800885 	stb	r2,34(sp)
 1002adc:	003f6506 	br	1002874 <___vfprintf_internal_r+0x1b88>
 1002ae0:	d9014c17 	ldw	r4,1328(sp)
 1002ae4:	2084703a 	and	r2,r4,r2
 1002ae8:	103f9c26 	beq	r2,zero,100295c <___vfprintf_internal_r+0x1c70>
 1002aec:	003f6606 	br	1002888 <___vfprintf_internal_r+0x1b9c>
 1002af0:	d9800804 	addi	r6,sp,32
 1002af4:	d8c00884 	addi	r3,sp,34
 1002af8:	003f5e06 	br	1002874 <___vfprintf_internal_r+0x1b88>
 1002afc:	00800b44 	movi	r2,45
 1002b00:	0121c83a 	sub	r16,zero,r4
 1002b04:	d8800845 	stb	r2,33(sp)
 1002b08:	003f3d06 	br	1002800 <___vfprintf_internal_r+0x1b14>
 1002b0c:	00800084 	movi	r2,2
 1002b10:	1105c83a 	sub	r2,r2,r4
 1002b14:	003fe606 	br	1002ab0 <___vfprintf_internal_r+0x1dc4>
 1002b18:	d8014515 	stw	zero,1300(sp)
 1002b1c:	dc814715 	stw	r18,1308(sp)
 1002b20:	003fb106 	br	10029e8 <___vfprintf_internal_r+0x1cfc>
 1002b24:	000d883a 	mov	r6,zero
 1002b28:	000f883a 	mov	r7,zero
 1002b2c:	8009883a 	mov	r4,r16
 1002b30:	880b883a 	mov	r5,r17
 1002b34:	10098740 	call	1009874 <__nedf2>
 1002b38:	103f9f26 	beq	r2,zero,10029b8 <___vfprintf_internal_r+0x1ccc>
 1002b3c:	00800044 	movi	r2,1
 1002b40:	1509c83a 	sub	r4,r2,r20
 1002b44:	d9000515 	stw	r4,20(sp)
 1002b48:	003f9b06 	br	10029b8 <___vfprintf_internal_r+0x1ccc>
 1002b4c:	98000d1e 	bne	r19,zero,1002b84 <___vfprintf_internal_r+0x1e98>
 1002b50:	d8c14c17 	ldw	r3,1328(sp)
 1002b54:	1880004c 	andi	r2,r3,1
 1002b58:	10000a1e 	bne	r2,zero,1002b84 <___vfprintf_internal_r+0x1e98>
 1002b5c:	01000044 	movi	r4,1
 1002b60:	200f883a 	mov	r7,r4
 1002b64:	d9014515 	stw	r4,1300(sp)
 1002b68:	003f4a06 	br	1002894 <___vfprintf_internal_r+0x1ba8>
 1002b6c:	3cc00017 	ldw	r19,0(r7)
 1002b70:	39c00104 	addi	r7,r7,4
 1002b74:	983d0e0e 	bge	r19,zero,1001fb0 <___vfprintf_internal_r+0x12c4>
 1002b78:	b8c00007 	ldb	r3,0(r23)
 1002b7c:	04ffffc4 	movi	r19,-1
 1002b80:	0038d906 	br	1000ee8 <___vfprintf_internal_r+0x1fc>
 1002b84:	9cc00084 	addi	r19,r19,2
 1002b88:	dcc14515 	stw	r19,1300(sp)
 1002b8c:	980f883a 	mov	r7,r19
 1002b90:	983f400e 	bge	r19,zero,1002894 <___vfprintf_internal_r+0x1ba8>
 1002b94:	003f7306 	br	1002964 <___vfprintf_internal_r+0x1c78>

01002b98 <__vfprintf_internal>:
 1002b98:	00804074 	movhi	r2,257
 1002b9c:	10817b04 	addi	r2,r2,1516
 1002ba0:	2013883a 	mov	r9,r4
 1002ba4:	11000017 	ldw	r4,0(r2)
 1002ba8:	2805883a 	mov	r2,r5
 1002bac:	300f883a 	mov	r7,r6
 1002bb0:	480b883a 	mov	r5,r9
 1002bb4:	100d883a 	mov	r6,r2
 1002bb8:	1000cec1 	jmpi	1000cec <___vfprintf_internal_r>

01002bbc <__swsetup_r>:
 1002bbc:	00804074 	movhi	r2,257
 1002bc0:	10817b04 	addi	r2,r2,1516
 1002bc4:	10c00017 	ldw	r3,0(r2)
 1002bc8:	defffd04 	addi	sp,sp,-12
 1002bcc:	dc400115 	stw	r17,4(sp)
 1002bd0:	dc000015 	stw	r16,0(sp)
 1002bd4:	dfc00215 	stw	ra,8(sp)
 1002bd8:	2023883a 	mov	r17,r4
 1002bdc:	2821883a 	mov	r16,r5
 1002be0:	18000226 	beq	r3,zero,1002bec <__swsetup_r+0x30>
 1002be4:	18800e17 	ldw	r2,56(r3)
 1002be8:	10001f26 	beq	r2,zero,1002c68 <__swsetup_r+0xac>
 1002bec:	8100030b 	ldhu	r4,12(r16)
 1002bf0:	2080020c 	andi	r2,r4,8
 1002bf4:	10002826 	beq	r2,zero,1002c98 <__swsetup_r+0xdc>
 1002bf8:	81400417 	ldw	r5,16(r16)
 1002bfc:	28001d26 	beq	r5,zero,1002c74 <__swsetup_r+0xb8>
 1002c00:	2080004c 	andi	r2,r4,1
 1002c04:	1005003a 	cmpeq	r2,r2,zero
 1002c08:	10000b26 	beq	r2,zero,1002c38 <__swsetup_r+0x7c>
 1002c0c:	2080008c 	andi	r2,r4,2
 1002c10:	10001226 	beq	r2,zero,1002c5c <__swsetup_r+0xa0>
 1002c14:	0005883a 	mov	r2,zero
 1002c18:	80800215 	stw	r2,8(r16)
 1002c1c:	28000b26 	beq	r5,zero,1002c4c <__swsetup_r+0x90>
 1002c20:	0005883a 	mov	r2,zero
 1002c24:	dfc00217 	ldw	ra,8(sp)
 1002c28:	dc400117 	ldw	r17,4(sp)
 1002c2c:	dc000017 	ldw	r16,0(sp)
 1002c30:	dec00304 	addi	sp,sp,12
 1002c34:	f800283a 	ret
 1002c38:	80800517 	ldw	r2,20(r16)
 1002c3c:	80000215 	stw	zero,8(r16)
 1002c40:	0085c83a 	sub	r2,zero,r2
 1002c44:	80800615 	stw	r2,24(r16)
 1002c48:	283ff51e 	bne	r5,zero,1002c20 <__swsetup_r+0x64>
 1002c4c:	2080200c 	andi	r2,r4,128
 1002c50:	103ff326 	beq	r2,zero,1002c20 <__swsetup_r+0x64>
 1002c54:	00bfffc4 	movi	r2,-1
 1002c58:	003ff206 	br	1002c24 <__swsetup_r+0x68>
 1002c5c:	80800517 	ldw	r2,20(r16)
 1002c60:	80800215 	stw	r2,8(r16)
 1002c64:	003fed06 	br	1002c1c <__swsetup_r+0x60>
 1002c68:	1809883a 	mov	r4,r3
 1002c6c:	100475c0 	call	100475c <__sinit>
 1002c70:	003fde06 	br	1002bec <__swsetup_r+0x30>
 1002c74:	20c0a00c 	andi	r3,r4,640
 1002c78:	00808004 	movi	r2,512
 1002c7c:	18bfe026 	beq	r3,r2,1002c00 <__swsetup_r+0x44>
 1002c80:	8809883a 	mov	r4,r17
 1002c84:	800b883a 	mov	r5,r16
 1002c88:	10054d40 	call	10054d4 <__smakebuf_r>
 1002c8c:	8100030b 	ldhu	r4,12(r16)
 1002c90:	81400417 	ldw	r5,16(r16)
 1002c94:	003fda06 	br	1002c00 <__swsetup_r+0x44>
 1002c98:	2080040c 	andi	r2,r4,16
 1002c9c:	103fed26 	beq	r2,zero,1002c54 <__swsetup_r+0x98>
 1002ca0:	2080010c 	andi	r2,r4,4
 1002ca4:	10001226 	beq	r2,zero,1002cf0 <__swsetup_r+0x134>
 1002ca8:	81400c17 	ldw	r5,48(r16)
 1002cac:	28000526 	beq	r5,zero,1002cc4 <__swsetup_r+0x108>
 1002cb0:	80801004 	addi	r2,r16,64
 1002cb4:	28800226 	beq	r5,r2,1002cc0 <__swsetup_r+0x104>
 1002cb8:	8809883a 	mov	r4,r17
 1002cbc:	1004ae00 	call	1004ae0 <_free_r>
 1002cc0:	80000c15 	stw	zero,48(r16)
 1002cc4:	8080030b 	ldhu	r2,12(r16)
 1002cc8:	81400417 	ldw	r5,16(r16)
 1002ccc:	80000115 	stw	zero,4(r16)
 1002cd0:	10bff6cc 	andi	r2,r2,65499
 1002cd4:	8080030d 	sth	r2,12(r16)
 1002cd8:	81400015 	stw	r5,0(r16)
 1002cdc:	8080030b 	ldhu	r2,12(r16)
 1002ce0:	10800214 	ori	r2,r2,8
 1002ce4:	113fffcc 	andi	r4,r2,65535
 1002ce8:	8080030d 	sth	r2,12(r16)
 1002cec:	003fc306 	br	1002bfc <__swsetup_r+0x40>
 1002cf0:	81400417 	ldw	r5,16(r16)
 1002cf4:	003ff906 	br	1002cdc <__swsetup_r+0x120>

01002cf8 <quorem>:
 1002cf8:	28c00417 	ldw	r3,16(r5)
 1002cfc:	20800417 	ldw	r2,16(r4)
 1002d00:	defff604 	addi	sp,sp,-40
 1002d04:	ddc00715 	stw	r23,28(sp)
 1002d08:	dd400515 	stw	r21,20(sp)
 1002d0c:	dfc00915 	stw	ra,36(sp)
 1002d10:	df000815 	stw	fp,32(sp)
 1002d14:	dd800615 	stw	r22,24(sp)
 1002d18:	dd000415 	stw	r20,16(sp)
 1002d1c:	dcc00315 	stw	r19,12(sp)
 1002d20:	dc800215 	stw	r18,8(sp)
 1002d24:	dc400115 	stw	r17,4(sp)
 1002d28:	dc000015 	stw	r16,0(sp)
 1002d2c:	202f883a 	mov	r23,r4
 1002d30:	282b883a 	mov	r21,r5
 1002d34:	10c07416 	blt	r2,r3,1002f08 <quorem+0x210>
 1002d38:	1c7fffc4 	addi	r17,r3,-1
 1002d3c:	8c45883a 	add	r2,r17,r17
 1002d40:	1085883a 	add	r2,r2,r2
 1002d44:	2c000504 	addi	r16,r5,20
 1002d48:	24c00504 	addi	r19,r4,20
 1002d4c:	14ed883a 	add	r22,r2,r19
 1002d50:	80a5883a 	add	r18,r16,r2
 1002d54:	b7000017 	ldw	fp,0(r22)
 1002d58:	91400017 	ldw	r5,0(r18)
 1002d5c:	e009883a 	mov	r4,fp
 1002d60:	29400044 	addi	r5,r5,1
 1002d64:	1009f340 	call	1009f34 <__udivsi3>
 1002d68:	1029883a 	mov	r20,r2
 1002d6c:	10003c1e 	bne	r2,zero,1002e60 <quorem+0x168>
 1002d70:	a80b883a 	mov	r5,r21
 1002d74:	b809883a 	mov	r4,r23
 1002d78:	10062000 	call	1006200 <__mcmp>
 1002d7c:	10002b16 	blt	r2,zero,1002e2c <quorem+0x134>
 1002d80:	a5000044 	addi	r20,r20,1
 1002d84:	980f883a 	mov	r7,r19
 1002d88:	0011883a 	mov	r8,zero
 1002d8c:	0009883a 	mov	r4,zero
 1002d90:	81400017 	ldw	r5,0(r16)
 1002d94:	38c00017 	ldw	r3,0(r7)
 1002d98:	84000104 	addi	r16,r16,4
 1002d9c:	28bfffcc 	andi	r2,r5,65535
 1002da0:	2085883a 	add	r2,r4,r2
 1002da4:	11bfffcc 	andi	r6,r2,65535
 1002da8:	193fffcc 	andi	r4,r3,65535
 1002dac:	1004d43a 	srli	r2,r2,16
 1002db0:	280ad43a 	srli	r5,r5,16
 1002db4:	2189c83a 	sub	r4,r4,r6
 1002db8:	2209883a 	add	r4,r4,r8
 1002dbc:	1806d43a 	srli	r3,r3,16
 1002dc0:	288b883a 	add	r5,r5,r2
 1002dc4:	200dd43a 	srai	r6,r4,16
 1002dc8:	28bfffcc 	andi	r2,r5,65535
 1002dcc:	1887c83a 	sub	r3,r3,r2
 1002dd0:	1987883a 	add	r3,r3,r6
 1002dd4:	3900000d 	sth	r4,0(r7)
 1002dd8:	38c0008d 	sth	r3,2(r7)
 1002ddc:	2808d43a 	srli	r4,r5,16
 1002de0:	39c00104 	addi	r7,r7,4
 1002de4:	1811d43a 	srai	r8,r3,16
 1002de8:	943fe92e 	bgeu	r18,r16,1002d90 <quorem+0x98>
 1002dec:	8c45883a 	add	r2,r17,r17
 1002df0:	1085883a 	add	r2,r2,r2
 1002df4:	9885883a 	add	r2,r19,r2
 1002df8:	10c00017 	ldw	r3,0(r2)
 1002dfc:	18000b1e 	bne	r3,zero,1002e2c <quorem+0x134>
 1002e00:	113fff04 	addi	r4,r2,-4
 1002e04:	9900082e 	bgeu	r19,r4,1002e28 <quorem+0x130>
 1002e08:	10bfff17 	ldw	r2,-4(r2)
 1002e0c:	10000326 	beq	r2,zero,1002e1c <quorem+0x124>
 1002e10:	00000506 	br	1002e28 <quorem+0x130>
 1002e14:	20800017 	ldw	r2,0(r4)
 1002e18:	1000031e 	bne	r2,zero,1002e28 <quorem+0x130>
 1002e1c:	213fff04 	addi	r4,r4,-4
 1002e20:	8c7fffc4 	addi	r17,r17,-1
 1002e24:	993ffb36 	bltu	r19,r4,1002e14 <quorem+0x11c>
 1002e28:	bc400415 	stw	r17,16(r23)
 1002e2c:	a005883a 	mov	r2,r20
 1002e30:	dfc00917 	ldw	ra,36(sp)
 1002e34:	df000817 	ldw	fp,32(sp)
 1002e38:	ddc00717 	ldw	r23,28(sp)
 1002e3c:	dd800617 	ldw	r22,24(sp)
 1002e40:	dd400517 	ldw	r21,20(sp)
 1002e44:	dd000417 	ldw	r20,16(sp)
 1002e48:	dcc00317 	ldw	r19,12(sp)
 1002e4c:	dc800217 	ldw	r18,8(sp)
 1002e50:	dc400117 	ldw	r17,4(sp)
 1002e54:	dc000017 	ldw	r16,0(sp)
 1002e58:	dec00a04 	addi	sp,sp,40
 1002e5c:	f800283a 	ret
 1002e60:	980f883a 	mov	r7,r19
 1002e64:	8011883a 	mov	r8,r16
 1002e68:	0013883a 	mov	r9,zero
 1002e6c:	000d883a 	mov	r6,zero
 1002e70:	40c00017 	ldw	r3,0(r8)
 1002e74:	39000017 	ldw	r4,0(r7)
 1002e78:	42000104 	addi	r8,r8,4
 1002e7c:	18bfffcc 	andi	r2,r3,65535
 1002e80:	a085383a 	mul	r2,r20,r2
 1002e84:	1806d43a 	srli	r3,r3,16
 1002e88:	217fffcc 	andi	r5,r4,65535
 1002e8c:	3085883a 	add	r2,r6,r2
 1002e90:	11bfffcc 	andi	r6,r2,65535
 1002e94:	a0c7383a 	mul	r3,r20,r3
 1002e98:	1004d43a 	srli	r2,r2,16
 1002e9c:	298bc83a 	sub	r5,r5,r6
 1002ea0:	2a4b883a 	add	r5,r5,r9
 1002ea4:	2008d43a 	srli	r4,r4,16
 1002ea8:	1887883a 	add	r3,r3,r2
 1002eac:	280dd43a 	srai	r6,r5,16
 1002eb0:	18bfffcc 	andi	r2,r3,65535
 1002eb4:	2089c83a 	sub	r4,r4,r2
 1002eb8:	2189883a 	add	r4,r4,r6
 1002ebc:	3900008d 	sth	r4,2(r7)
 1002ec0:	3940000d 	sth	r5,0(r7)
 1002ec4:	180cd43a 	srli	r6,r3,16
 1002ec8:	39c00104 	addi	r7,r7,4
 1002ecc:	2013d43a 	srai	r9,r4,16
 1002ed0:	923fe72e 	bgeu	r18,r8,1002e70 <quorem+0x178>
 1002ed4:	e03fa61e 	bne	fp,zero,1002d70 <quorem+0x78>
 1002ed8:	b0ffff04 	addi	r3,r22,-4
 1002edc:	98c0082e 	bgeu	r19,r3,1002f00 <quorem+0x208>
 1002ee0:	b0bfff17 	ldw	r2,-4(r22)
 1002ee4:	10000326 	beq	r2,zero,1002ef4 <quorem+0x1fc>
 1002ee8:	00000506 	br	1002f00 <quorem+0x208>
 1002eec:	18800017 	ldw	r2,0(r3)
 1002ef0:	1000031e 	bne	r2,zero,1002f00 <quorem+0x208>
 1002ef4:	18ffff04 	addi	r3,r3,-4
 1002ef8:	8c7fffc4 	addi	r17,r17,-1
 1002efc:	98fffb36 	bltu	r19,r3,1002eec <quorem+0x1f4>
 1002f00:	bc400415 	stw	r17,16(r23)
 1002f04:	003f9a06 	br	1002d70 <quorem+0x78>
 1002f08:	0005883a 	mov	r2,zero
 1002f0c:	003fc806 	br	1002e30 <quorem+0x138>

01002f10 <_dtoa_r>:
 1002f10:	22001017 	ldw	r8,64(r4)
 1002f14:	deffda04 	addi	sp,sp,-152
 1002f18:	dd402115 	stw	r21,132(sp)
 1002f1c:	dd002015 	stw	r20,128(sp)
 1002f20:	dc801e15 	stw	r18,120(sp)
 1002f24:	dc401d15 	stw	r17,116(sp)
 1002f28:	dfc02515 	stw	ra,148(sp)
 1002f2c:	df002415 	stw	fp,144(sp)
 1002f30:	ddc02315 	stw	r23,140(sp)
 1002f34:	dd802215 	stw	r22,136(sp)
 1002f38:	dcc01f15 	stw	r19,124(sp)
 1002f3c:	dc001c15 	stw	r16,112(sp)
 1002f40:	d9001615 	stw	r4,88(sp)
 1002f44:	3023883a 	mov	r17,r6
 1002f48:	2829883a 	mov	r20,r5
 1002f4c:	d9c01715 	stw	r7,92(sp)
 1002f50:	dc802817 	ldw	r18,160(sp)
 1002f54:	302b883a 	mov	r21,r6
 1002f58:	40000a26 	beq	r8,zero,1002f84 <_dtoa_r+0x74>
 1002f5c:	20801117 	ldw	r2,68(r4)
 1002f60:	400b883a 	mov	r5,r8
 1002f64:	40800115 	stw	r2,4(r8)
 1002f68:	20c01117 	ldw	r3,68(r4)
 1002f6c:	00800044 	movi	r2,1
 1002f70:	10c4983a 	sll	r2,r2,r3
 1002f74:	40800215 	stw	r2,8(r8)
 1002f78:	10060a40 	call	10060a4 <_Bfree>
 1002f7c:	d8c01617 	ldw	r3,88(sp)
 1002f80:	18001015 	stw	zero,64(r3)
 1002f84:	8800a316 	blt	r17,zero,1003214 <_dtoa_r+0x304>
 1002f88:	90000015 	stw	zero,0(r18)
 1002f8c:	a8dffc2c 	andhi	r3,r21,32752
 1002f90:	009ffc34 	movhi	r2,32752
 1002f94:	18809126 	beq	r3,r2,10031dc <_dtoa_r+0x2cc>
 1002f98:	000d883a 	mov	r6,zero
 1002f9c:	000f883a 	mov	r7,zero
 1002fa0:	a009883a 	mov	r4,r20
 1002fa4:	a80b883a 	mov	r5,r21
 1002fa8:	dd001215 	stw	r20,72(sp)
 1002fac:	dd401315 	stw	r21,76(sp)
 1002fb0:	10098740 	call	1009874 <__nedf2>
 1002fb4:	1000171e 	bne	r2,zero,1003014 <_dtoa_r+0x104>
 1002fb8:	d9802717 	ldw	r6,156(sp)
 1002fbc:	00800044 	movi	r2,1
 1002fc0:	30800015 	stw	r2,0(r6)
 1002fc4:	d8802917 	ldw	r2,164(sp)
 1002fc8:	10029b26 	beq	r2,zero,1003a38 <_dtoa_r+0xb28>
 1002fcc:	d9002917 	ldw	r4,164(sp)
 1002fd0:	00804074 	movhi	r2,257
 1002fd4:	10b98f44 	addi	r2,r2,-6595
 1002fd8:	10ffffc4 	addi	r3,r2,-1
 1002fdc:	20800015 	stw	r2,0(r4)
 1002fe0:	1805883a 	mov	r2,r3
 1002fe4:	dfc02517 	ldw	ra,148(sp)
 1002fe8:	df002417 	ldw	fp,144(sp)
 1002fec:	ddc02317 	ldw	r23,140(sp)
 1002ff0:	dd802217 	ldw	r22,136(sp)
 1002ff4:	dd402117 	ldw	r21,132(sp)
 1002ff8:	dd002017 	ldw	r20,128(sp)
 1002ffc:	dcc01f17 	ldw	r19,124(sp)
 1003000:	dc801e17 	ldw	r18,120(sp)
 1003004:	dc401d17 	ldw	r17,116(sp)
 1003008:	dc001c17 	ldw	r16,112(sp)
 100300c:	dec02604 	addi	sp,sp,152
 1003010:	f800283a 	ret
 1003014:	d9001617 	ldw	r4,88(sp)
 1003018:	d9401217 	ldw	r5,72(sp)
 100301c:	d8800104 	addi	r2,sp,4
 1003020:	a80d883a 	mov	r6,r21
 1003024:	d9c00204 	addi	r7,sp,8
 1003028:	d8800015 	stw	r2,0(sp)
 100302c:	10066e00 	call	10066e0 <__d2b>
 1003030:	d8800715 	stw	r2,28(sp)
 1003034:	a804d53a 	srli	r2,r21,20
 1003038:	1101ffcc 	andi	r4,r2,2047
 100303c:	20008626 	beq	r4,zero,1003258 <_dtoa_r+0x348>
 1003040:	d8c01217 	ldw	r3,72(sp)
 1003044:	00800434 	movhi	r2,16
 1003048:	10bfffc4 	addi	r2,r2,-1
 100304c:	ddc00117 	ldw	r23,4(sp)
 1003050:	a884703a 	and	r2,r21,r2
 1003054:	1811883a 	mov	r8,r3
 1003058:	124ffc34 	orhi	r9,r2,16368
 100305c:	25bf0044 	addi	r22,r4,-1023
 1003060:	d8000815 	stw	zero,32(sp)
 1003064:	0005883a 	mov	r2,zero
 1003068:	00cffe34 	movhi	r3,16376
 100306c:	480b883a 	mov	r5,r9
 1003070:	4009883a 	mov	r4,r8
 1003074:	180f883a 	mov	r7,r3
 1003078:	100d883a 	mov	r6,r2
 100307c:	10090dc0 	call	10090dc <__subdf3>
 1003080:	0218dbf4 	movhi	r8,25455
 1003084:	4210d844 	addi	r8,r8,17249
 1003088:	024ff4f4 	movhi	r9,16339
 100308c:	4a61e9c4 	addi	r9,r9,-30809
 1003090:	480f883a 	mov	r7,r9
 1003094:	400d883a 	mov	r6,r8
 1003098:	180b883a 	mov	r5,r3
 100309c:	1009883a 	mov	r4,r2
 10030a0:	10091d00 	call	10091d0 <__muldf3>
 10030a4:	0222d874 	movhi	r8,35681
 10030a8:	42322cc4 	addi	r8,r8,-14157
 10030ac:	024ff1f4 	movhi	r9,16327
 10030b0:	4a628a04 	addi	r9,r9,-30168
 10030b4:	480f883a 	mov	r7,r9
 10030b8:	400d883a 	mov	r6,r8
 10030bc:	180b883a 	mov	r5,r3
 10030c0:	1009883a 	mov	r4,r2
 10030c4:	100915c0 	call	100915c <__adddf3>
 10030c8:	b009883a 	mov	r4,r22
 10030cc:	1021883a 	mov	r16,r2
 10030d0:	1823883a 	mov	r17,r3
 10030d4:	1009a940 	call	1009a94 <__floatsidf>
 10030d8:	021427f4 	movhi	r8,20639
 10030dc:	421e7ec4 	addi	r8,r8,31227
 10030e0:	024ff4f4 	movhi	r9,16339
 10030e4:	4a5104c4 	addi	r9,r9,17427
 10030e8:	480f883a 	mov	r7,r9
 10030ec:	400d883a 	mov	r6,r8
 10030f0:	180b883a 	mov	r5,r3
 10030f4:	1009883a 	mov	r4,r2
 10030f8:	10091d00 	call	10091d0 <__muldf3>
 10030fc:	180f883a 	mov	r7,r3
 1003100:	880b883a 	mov	r5,r17
 1003104:	100d883a 	mov	r6,r2
 1003108:	8009883a 	mov	r4,r16
 100310c:	100915c0 	call	100915c <__adddf3>
 1003110:	1009883a 	mov	r4,r2
 1003114:	180b883a 	mov	r5,r3
 1003118:	1021883a 	mov	r16,r2
 100311c:	1823883a 	mov	r17,r3
 1003120:	1009b8c0 	call	1009b8c <__fixdfsi>
 1003124:	000d883a 	mov	r6,zero
 1003128:	000f883a 	mov	r7,zero
 100312c:	8009883a 	mov	r4,r16
 1003130:	880b883a 	mov	r5,r17
 1003134:	d8800d15 	stw	r2,52(sp)
 1003138:	1009a0c0 	call	1009a0c <__ltdf2>
 100313c:	10031716 	blt	r2,zero,1003d9c <_dtoa_r+0xe8c>
 1003140:	d8c00d17 	ldw	r3,52(sp)
 1003144:	00800584 	movi	r2,22
 1003148:	10c1482e 	bgeu	r2,r3,100366c <_dtoa_r+0x75c>
 100314c:	01000044 	movi	r4,1
 1003150:	d9000c15 	stw	r4,48(sp)
 1003154:	bd85c83a 	sub	r2,r23,r22
 1003158:	11bfffc4 	addi	r6,r2,-1
 100315c:	30030b16 	blt	r6,zero,1003d8c <_dtoa_r+0xe7c>
 1003160:	d9800a15 	stw	r6,40(sp)
 1003164:	d8001115 	stw	zero,68(sp)
 1003168:	d8c00d17 	ldw	r3,52(sp)
 100316c:	1802ff16 	blt	r3,zero,1003d6c <_dtoa_r+0xe5c>
 1003170:	d9000a17 	ldw	r4,40(sp)
 1003174:	d8c00915 	stw	r3,36(sp)
 1003178:	d8001015 	stw	zero,64(sp)
 100317c:	20c9883a 	add	r4,r4,r3
 1003180:	d9000a15 	stw	r4,40(sp)
 1003184:	d9001717 	ldw	r4,92(sp)
 1003188:	00800244 	movi	r2,9
 100318c:	11004636 	bltu	r2,r4,10032a8 <_dtoa_r+0x398>
 1003190:	00800144 	movi	r2,5
 1003194:	11020416 	blt	r2,r4,10039a8 <_dtoa_r+0xa98>
 1003198:	04400044 	movi	r17,1
 100319c:	d8c01717 	ldw	r3,92(sp)
 10031a0:	00800144 	movi	r2,5
 10031a4:	10c1ed36 	bltu	r2,r3,100395c <_dtoa_r+0xa4c>
 10031a8:	18c5883a 	add	r2,r3,r3
 10031ac:	1085883a 	add	r2,r2,r2
 10031b0:	00c04034 	movhi	r3,256
 10031b4:	18cc7104 	addi	r3,r3,12740
 10031b8:	10c5883a 	add	r2,r2,r3
 10031bc:	11000017 	ldw	r4,0(r2)
 10031c0:	2000683a 	jmp	r4
 10031c4:	010032b0 	cmpltui	r4,zero,202
 10031c8:	010032b0 	cmpltui	r4,zero,202
 10031cc:	01003cb0 	cmpltui	r4,zero,242
 10031d0:	01003c88 	cmpgei	r4,zero,242
 10031d4:	01003ccc 	andi	r4,zero,243
 10031d8:	01003cd8 	cmpnei	r4,zero,243
 10031dc:	d9002717 	ldw	r4,156(sp)
 10031e0:	0089c3c4 	movi	r2,9999
 10031e4:	20800015 	stw	r2,0(r4)
 10031e8:	a0001026 	beq	r20,zero,100322c <_dtoa_r+0x31c>
 10031ec:	00c04074 	movhi	r3,257
 10031f0:	18f99b04 	addi	r3,r3,-6548
 10031f4:	d9802917 	ldw	r6,164(sp)
 10031f8:	303f7926 	beq	r6,zero,1002fe0 <_dtoa_r+0xd0>
 10031fc:	188000c7 	ldb	r2,3(r3)
 1003200:	190000c4 	addi	r4,r3,3
 1003204:	1000101e 	bne	r2,zero,1003248 <_dtoa_r+0x338>
 1003208:	d8802917 	ldw	r2,164(sp)
 100320c:	11000015 	stw	r4,0(r2)
 1003210:	003f7306 	br	1002fe0 <_dtoa_r+0xd0>
 1003214:	00a00034 	movhi	r2,32768
 1003218:	10bfffc4 	addi	r2,r2,-1
 100321c:	00c00044 	movi	r3,1
 1003220:	88aa703a 	and	r21,r17,r2
 1003224:	90c00015 	stw	r3,0(r18)
 1003228:	003f5806 	br	1002f8c <_dtoa_r+0x7c>
 100322c:	00800434 	movhi	r2,16
 1003230:	10bfffc4 	addi	r2,r2,-1
 1003234:	a884703a 	and	r2,r21,r2
 1003238:	103fec1e 	bne	r2,zero,10031ec <_dtoa_r+0x2dc>
 100323c:	00c04074 	movhi	r3,257
 1003240:	18f99804 	addi	r3,r3,-6560
 1003244:	003feb06 	br	10031f4 <_dtoa_r+0x2e4>
 1003248:	d8802917 	ldw	r2,164(sp)
 100324c:	19000204 	addi	r4,r3,8
 1003250:	11000015 	stw	r4,0(r2)
 1003254:	003f6206 	br	1002fe0 <_dtoa_r+0xd0>
 1003258:	ddc00117 	ldw	r23,4(sp)
 100325c:	d8800217 	ldw	r2,8(sp)
 1003260:	01000804 	movi	r4,32
 1003264:	b8c10c84 	addi	r3,r23,1074
 1003268:	18a3883a 	add	r17,r3,r2
 100326c:	2441b80e 	bge	r4,r17,1003950 <_dtoa_r+0xa40>
 1003270:	00c01004 	movi	r3,64
 1003274:	1c47c83a 	sub	r3,r3,r17
 1003278:	88bff804 	addi	r2,r17,-32
 100327c:	a8c6983a 	sll	r3,r21,r3
 1003280:	a084d83a 	srl	r2,r20,r2
 1003284:	1888b03a 	or	r4,r3,r2
 1003288:	1009c640 	call	1009c64 <__floatunsidf>
 100328c:	1011883a 	mov	r8,r2
 1003290:	00bf8434 	movhi	r2,65040
 1003294:	01000044 	movi	r4,1
 1003298:	10d3883a 	add	r9,r2,r3
 100329c:	8dbef344 	addi	r22,r17,-1075
 10032a0:	d9000815 	stw	r4,32(sp)
 10032a4:	003f6f06 	br	1003064 <_dtoa_r+0x154>
 10032a8:	d8001715 	stw	zero,92(sp)
 10032ac:	04400044 	movi	r17,1
 10032b0:	00bfffc4 	movi	r2,-1
 10032b4:	00c00044 	movi	r3,1
 10032b8:	d8800e15 	stw	r2,56(sp)
 10032bc:	d8002615 	stw	zero,152(sp)
 10032c0:	d8800f15 	stw	r2,60(sp)
 10032c4:	d8c00b15 	stw	r3,44(sp)
 10032c8:	1021883a 	mov	r16,r2
 10032cc:	d8801617 	ldw	r2,88(sp)
 10032d0:	10001115 	stw	zero,68(r2)
 10032d4:	d8801617 	ldw	r2,88(sp)
 10032d8:	11401117 	ldw	r5,68(r2)
 10032dc:	1009883a 	mov	r4,r2
 10032e0:	10066240 	call	1006624 <_Balloc>
 10032e4:	d8c01617 	ldw	r3,88(sp)
 10032e8:	d8800515 	stw	r2,20(sp)
 10032ec:	18801015 	stw	r2,64(r3)
 10032f0:	00800384 	movi	r2,14
 10032f4:	14006836 	bltu	r2,r16,1003498 <_dtoa_r+0x588>
 10032f8:	8805003a 	cmpeq	r2,r17,zero
 10032fc:	1000661e 	bne	r2,zero,1003498 <_dtoa_r+0x588>
 1003300:	d9000d17 	ldw	r4,52(sp)
 1003304:	0102300e 	bge	zero,r4,1003bc8 <_dtoa_r+0xcb8>
 1003308:	208003cc 	andi	r2,r4,15
 100330c:	100490fa 	slli	r2,r2,3
 1003310:	2025d13a 	srai	r18,r4,4
 1003314:	00c04074 	movhi	r3,257
 1003318:	18f9ad04 	addi	r3,r3,-6476
 100331c:	10c5883a 	add	r2,r2,r3
 1003320:	90c0040c 	andi	r3,r18,16
 1003324:	14000017 	ldw	r16,0(r2)
 1003328:	14400117 	ldw	r17,4(r2)
 100332c:	18036a1e 	bne	r3,zero,10040d8 <_dtoa_r+0x11c8>
 1003330:	05800084 	movi	r22,2
 1003334:	90001026 	beq	r18,zero,1003378 <_dtoa_r+0x468>
 1003338:	04c04074 	movhi	r19,257
 100333c:	9cf9df04 	addi	r19,r19,-6276
 1003340:	9080004c 	andi	r2,r18,1
 1003344:	1005003a 	cmpeq	r2,r2,zero
 1003348:	1000081e 	bne	r2,zero,100336c <_dtoa_r+0x45c>
 100334c:	99800017 	ldw	r6,0(r19)
 1003350:	99c00117 	ldw	r7,4(r19)
 1003354:	880b883a 	mov	r5,r17
 1003358:	8009883a 	mov	r4,r16
 100335c:	10091d00 	call	10091d0 <__muldf3>
 1003360:	1021883a 	mov	r16,r2
 1003364:	b5800044 	addi	r22,r22,1
 1003368:	1823883a 	mov	r17,r3
 100336c:	9025d07a 	srai	r18,r18,1
 1003370:	9cc00204 	addi	r19,r19,8
 1003374:	903ff21e 	bne	r18,zero,1003340 <_dtoa_r+0x430>
 1003378:	a80b883a 	mov	r5,r21
 100337c:	a009883a 	mov	r4,r20
 1003380:	880f883a 	mov	r7,r17
 1003384:	800d883a 	mov	r6,r16
 1003388:	10095940 	call	1009594 <__divdf3>
 100338c:	1029883a 	mov	r20,r2
 1003390:	182b883a 	mov	r21,r3
 1003394:	d8c00c17 	ldw	r3,48(sp)
 1003398:	1805003a 	cmpeq	r2,r3,zero
 100339c:	1000081e 	bne	r2,zero,10033c0 <_dtoa_r+0x4b0>
 10033a0:	0005883a 	mov	r2,zero
 10033a4:	00cffc34 	movhi	r3,16368
 10033a8:	180f883a 	mov	r7,r3
 10033ac:	a009883a 	mov	r4,r20
 10033b0:	a80b883a 	mov	r5,r21
 10033b4:	100d883a 	mov	r6,r2
 10033b8:	1009a0c0 	call	1009a0c <__ltdf2>
 10033bc:	1003fe16 	blt	r2,zero,10043b8 <_dtoa_r+0x14a8>
 10033c0:	b009883a 	mov	r4,r22
 10033c4:	1009a940 	call	1009a94 <__floatsidf>
 10033c8:	180b883a 	mov	r5,r3
 10033cc:	1009883a 	mov	r4,r2
 10033d0:	a00d883a 	mov	r6,r20
 10033d4:	a80f883a 	mov	r7,r21
 10033d8:	10091d00 	call	10091d0 <__muldf3>
 10033dc:	0011883a 	mov	r8,zero
 10033e0:	02500734 	movhi	r9,16412
 10033e4:	1009883a 	mov	r4,r2
 10033e8:	180b883a 	mov	r5,r3
 10033ec:	480f883a 	mov	r7,r9
 10033f0:	400d883a 	mov	r6,r8
 10033f4:	100915c0 	call	100915c <__adddf3>
 10033f8:	d9000f17 	ldw	r4,60(sp)
 10033fc:	102d883a 	mov	r22,r2
 1003400:	00bf3034 	movhi	r2,64704
 1003404:	18b9883a 	add	fp,r3,r2
 1003408:	e02f883a 	mov	r23,fp
 100340c:	20028f1e 	bne	r4,zero,1003e4c <_dtoa_r+0xf3c>
 1003410:	0005883a 	mov	r2,zero
 1003414:	00d00534 	movhi	r3,16404
 1003418:	a009883a 	mov	r4,r20
 100341c:	a80b883a 	mov	r5,r21
 1003420:	180f883a 	mov	r7,r3
 1003424:	100d883a 	mov	r6,r2
 1003428:	10090dc0 	call	10090dc <__subdf3>
 100342c:	1009883a 	mov	r4,r2
 1003430:	e00f883a 	mov	r7,fp
 1003434:	180b883a 	mov	r5,r3
 1003438:	b00d883a 	mov	r6,r22
 100343c:	1025883a 	mov	r18,r2
 1003440:	1827883a 	mov	r19,r3
 1003444:	10098fc0 	call	10098fc <__gtdf2>
 1003448:	00834f16 	blt	zero,r2,1004188 <_dtoa_r+0x1278>
 100344c:	e0e0003c 	xorhi	r3,fp,32768
 1003450:	9009883a 	mov	r4,r18
 1003454:	980b883a 	mov	r5,r19
 1003458:	180f883a 	mov	r7,r3
 100345c:	b00d883a 	mov	r6,r22
 1003460:	1009a0c0 	call	1009a0c <__ltdf2>
 1003464:	1000080e 	bge	r2,zero,1003488 <_dtoa_r+0x578>
 1003468:	0027883a 	mov	r19,zero
 100346c:	0025883a 	mov	r18,zero
 1003470:	d8802617 	ldw	r2,152(sp)
 1003474:	df000517 	ldw	fp,20(sp)
 1003478:	d8000615 	stw	zero,24(sp)
 100347c:	0084303a 	nor	r2,zero,r2
 1003480:	d8800d15 	stw	r2,52(sp)
 1003484:	00019b06 	br	1003af4 <_dtoa_r+0xbe4>
 1003488:	d9801217 	ldw	r6,72(sp)
 100348c:	d8801317 	ldw	r2,76(sp)
 1003490:	3029883a 	mov	r20,r6
 1003494:	102b883a 	mov	r21,r2
 1003498:	d8c00217 	ldw	r3,8(sp)
 100349c:	18008516 	blt	r3,zero,10036b4 <_dtoa_r+0x7a4>
 10034a0:	d9000d17 	ldw	r4,52(sp)
 10034a4:	00800384 	movi	r2,14
 10034a8:	11008216 	blt	r2,r4,10036b4 <_dtoa_r+0x7a4>
 10034ac:	200490fa 	slli	r2,r4,3
 10034b0:	d9802617 	ldw	r6,152(sp)
 10034b4:	00c04074 	movhi	r3,257
 10034b8:	18f9ad04 	addi	r3,r3,-6476
 10034bc:	10c5883a 	add	r2,r2,r3
 10034c0:	14800017 	ldw	r18,0(r2)
 10034c4:	14c00117 	ldw	r19,4(r2)
 10034c8:	30031e16 	blt	r6,zero,1004144 <_dtoa_r+0x1234>
 10034cc:	d9000517 	ldw	r4,20(sp)
 10034d0:	d8c00f17 	ldw	r3,60(sp)
 10034d4:	a823883a 	mov	r17,r21
 10034d8:	a021883a 	mov	r16,r20
 10034dc:	192b883a 	add	r21,r3,r4
 10034e0:	2039883a 	mov	fp,r4
 10034e4:	00000f06 	br	1003524 <_dtoa_r+0x614>
 10034e8:	0005883a 	mov	r2,zero
 10034ec:	00d00934 	movhi	r3,16420
 10034f0:	5009883a 	mov	r4,r10
 10034f4:	580b883a 	mov	r5,r11
 10034f8:	180f883a 	mov	r7,r3
 10034fc:	100d883a 	mov	r6,r2
 1003500:	10091d00 	call	10091d0 <__muldf3>
 1003504:	180b883a 	mov	r5,r3
 1003508:	000d883a 	mov	r6,zero
 100350c:	000f883a 	mov	r7,zero
 1003510:	1009883a 	mov	r4,r2
 1003514:	1021883a 	mov	r16,r2
 1003518:	1823883a 	mov	r17,r3
 100351c:	10098740 	call	1009874 <__nedf2>
 1003520:	10004526 	beq	r2,zero,1003638 <_dtoa_r+0x728>
 1003524:	900d883a 	mov	r6,r18
 1003528:	980f883a 	mov	r7,r19
 100352c:	8009883a 	mov	r4,r16
 1003530:	880b883a 	mov	r5,r17
 1003534:	10095940 	call	1009594 <__divdf3>
 1003538:	180b883a 	mov	r5,r3
 100353c:	1009883a 	mov	r4,r2
 1003540:	1009b8c0 	call	1009b8c <__fixdfsi>
 1003544:	1009883a 	mov	r4,r2
 1003548:	1029883a 	mov	r20,r2
 100354c:	1009a940 	call	1009a94 <__floatsidf>
 1003550:	180f883a 	mov	r7,r3
 1003554:	9009883a 	mov	r4,r18
 1003558:	980b883a 	mov	r5,r19
 100355c:	100d883a 	mov	r6,r2
 1003560:	10091d00 	call	10091d0 <__muldf3>
 1003564:	180f883a 	mov	r7,r3
 1003568:	880b883a 	mov	r5,r17
 100356c:	8009883a 	mov	r4,r16
 1003570:	100d883a 	mov	r6,r2
 1003574:	10090dc0 	call	10090dc <__subdf3>
 1003578:	1015883a 	mov	r10,r2
 100357c:	a0800c04 	addi	r2,r20,48
 1003580:	e0800005 	stb	r2,0(fp)
 1003584:	e7000044 	addi	fp,fp,1
 1003588:	1817883a 	mov	r11,r3
 100358c:	e57fd61e 	bne	fp,r21,10034e8 <_dtoa_r+0x5d8>
 1003590:	500d883a 	mov	r6,r10
 1003594:	180f883a 	mov	r7,r3
 1003598:	5009883a 	mov	r4,r10
 100359c:	180b883a 	mov	r5,r3
 10035a0:	100915c0 	call	100915c <__adddf3>
 10035a4:	100d883a 	mov	r6,r2
 10035a8:	9009883a 	mov	r4,r18
 10035ac:	980b883a 	mov	r5,r19
 10035b0:	180f883a 	mov	r7,r3
 10035b4:	1021883a 	mov	r16,r2
 10035b8:	1823883a 	mov	r17,r3
 10035bc:	1009a0c0 	call	1009a0c <__ltdf2>
 10035c0:	10000816 	blt	r2,zero,10035e4 <_dtoa_r+0x6d4>
 10035c4:	980b883a 	mov	r5,r19
 10035c8:	800d883a 	mov	r6,r16
 10035cc:	880f883a 	mov	r7,r17
 10035d0:	9009883a 	mov	r4,r18
 10035d4:	10097ec0 	call	10097ec <__eqdf2>
 10035d8:	1000171e 	bne	r2,zero,1003638 <_dtoa_r+0x728>
 10035dc:	a080004c 	andi	r2,r20,1
 10035e0:	10001526 	beq	r2,zero,1003638 <_dtoa_r+0x728>
 10035e4:	d8800d17 	ldw	r2,52(sp)
 10035e8:	d8800415 	stw	r2,16(sp)
 10035ec:	e009883a 	mov	r4,fp
 10035f0:	213fffc4 	addi	r4,r4,-1
 10035f4:	20c00007 	ldb	r3,0(r4)
 10035f8:	00800e44 	movi	r2,57
 10035fc:	1880081e 	bne	r3,r2,1003620 <_dtoa_r+0x710>
 1003600:	d8800517 	ldw	r2,20(sp)
 1003604:	113ffa1e 	bne	r2,r4,10035f0 <_dtoa_r+0x6e0>
 1003608:	d8c00417 	ldw	r3,16(sp)
 100360c:	d9800517 	ldw	r6,20(sp)
 1003610:	00800c04 	movi	r2,48
 1003614:	18c00044 	addi	r3,r3,1
 1003618:	d8c00415 	stw	r3,16(sp)
 100361c:	30800005 	stb	r2,0(r6)
 1003620:	20800003 	ldbu	r2,0(r4)
 1003624:	d8c00417 	ldw	r3,16(sp)
 1003628:	27000044 	addi	fp,r4,1
 100362c:	10800044 	addi	r2,r2,1
 1003630:	d8c00d15 	stw	r3,52(sp)
 1003634:	20800005 	stb	r2,0(r4)
 1003638:	d9001617 	ldw	r4,88(sp)
 100363c:	d9400717 	ldw	r5,28(sp)
 1003640:	10060a40 	call	10060a4 <_Bfree>
 1003644:	e0000005 	stb	zero,0(fp)
 1003648:	d9800d17 	ldw	r6,52(sp)
 100364c:	d8c02717 	ldw	r3,156(sp)
 1003650:	d9002917 	ldw	r4,164(sp)
 1003654:	30800044 	addi	r2,r6,1
 1003658:	18800015 	stw	r2,0(r3)
 100365c:	20029c26 	beq	r4,zero,10040d0 <_dtoa_r+0x11c0>
 1003660:	d8c00517 	ldw	r3,20(sp)
 1003664:	27000015 	stw	fp,0(r4)
 1003668:	003e5d06 	br	1002fe0 <_dtoa_r+0xd0>
 100366c:	d9800d17 	ldw	r6,52(sp)
 1003670:	00c04074 	movhi	r3,257
 1003674:	18f9ad04 	addi	r3,r3,-6476
 1003678:	d9001217 	ldw	r4,72(sp)
 100367c:	300490fa 	slli	r2,r6,3
 1003680:	d9401317 	ldw	r5,76(sp)
 1003684:	10c5883a 	add	r2,r2,r3
 1003688:	12000017 	ldw	r8,0(r2)
 100368c:	12400117 	ldw	r9,4(r2)
 1003690:	400d883a 	mov	r6,r8
 1003694:	480f883a 	mov	r7,r9
 1003698:	1009a0c0 	call	1009a0c <__ltdf2>
 100369c:	1000030e 	bge	r2,zero,10036ac <_dtoa_r+0x79c>
 10036a0:	d8800d17 	ldw	r2,52(sp)
 10036a4:	10bfffc4 	addi	r2,r2,-1
 10036a8:	d8800d15 	stw	r2,52(sp)
 10036ac:	d8000c15 	stw	zero,48(sp)
 10036b0:	003ea806 	br	1003154 <_dtoa_r+0x244>
 10036b4:	d9000b17 	ldw	r4,44(sp)
 10036b8:	202cc03a 	cmpne	r22,r4,zero
 10036bc:	b000c71e 	bne	r22,zero,10039dc <_dtoa_r+0xacc>
 10036c0:	dc001117 	ldw	r16,68(sp)
 10036c4:	dc801017 	ldw	r18,64(sp)
 10036c8:	0027883a 	mov	r19,zero
 10036cc:	04000b0e 	bge	zero,r16,10036fc <_dtoa_r+0x7ec>
 10036d0:	d8c00a17 	ldw	r3,40(sp)
 10036d4:	00c0090e 	bge	zero,r3,10036fc <_dtoa_r+0x7ec>
 10036d8:	8005883a 	mov	r2,r16
 10036dc:	1c011316 	blt	r3,r16,1003b2c <_dtoa_r+0xc1c>
 10036e0:	d9000a17 	ldw	r4,40(sp)
 10036e4:	d9801117 	ldw	r6,68(sp)
 10036e8:	80a1c83a 	sub	r16,r16,r2
 10036ec:	2089c83a 	sub	r4,r4,r2
 10036f0:	308dc83a 	sub	r6,r6,r2
 10036f4:	d9000a15 	stw	r4,40(sp)
 10036f8:	d9801115 	stw	r6,68(sp)
 10036fc:	d8801017 	ldw	r2,64(sp)
 1003700:	0080150e 	bge	zero,r2,1003758 <_dtoa_r+0x848>
 1003704:	d8c00b17 	ldw	r3,44(sp)
 1003708:	1805003a 	cmpeq	r2,r3,zero
 100370c:	1001c91e 	bne	r2,zero,1003e34 <_dtoa_r+0xf24>
 1003710:	04800e0e 	bge	zero,r18,100374c <_dtoa_r+0x83c>
 1003714:	d9001617 	ldw	r4,88(sp)
 1003718:	980b883a 	mov	r5,r19
 100371c:	900d883a 	mov	r6,r18
 1003720:	1006e580 	call	1006e58 <__pow5mult>
 1003724:	d9001617 	ldw	r4,88(sp)
 1003728:	d9800717 	ldw	r6,28(sp)
 100372c:	100b883a 	mov	r5,r2
 1003730:	1027883a 	mov	r19,r2
 1003734:	1006b340 	call	1006b34 <__multiply>
 1003738:	d9001617 	ldw	r4,88(sp)
 100373c:	d9400717 	ldw	r5,28(sp)
 1003740:	1023883a 	mov	r17,r2
 1003744:	10060a40 	call	10060a4 <_Bfree>
 1003748:	dc400715 	stw	r17,28(sp)
 100374c:	d9001017 	ldw	r4,64(sp)
 1003750:	248dc83a 	sub	r6,r4,r18
 1003754:	30010e1e 	bne	r6,zero,1003b90 <_dtoa_r+0xc80>
 1003758:	d9001617 	ldw	r4,88(sp)
 100375c:	04400044 	movi	r17,1
 1003760:	880b883a 	mov	r5,r17
 1003764:	1006d1c0 	call	1006d1c <__i2b>
 1003768:	d9800917 	ldw	r6,36(sp)
 100376c:	1025883a 	mov	r18,r2
 1003770:	0180040e 	bge	zero,r6,1003784 <_dtoa_r+0x874>
 1003774:	d9001617 	ldw	r4,88(sp)
 1003778:	100b883a 	mov	r5,r2
 100377c:	1006e580 	call	1006e58 <__pow5mult>
 1003780:	1025883a 	mov	r18,r2
 1003784:	d8801717 	ldw	r2,92(sp)
 1003788:	8880f30e 	bge	r17,r2,1003b58 <_dtoa_r+0xc48>
 100378c:	0023883a 	mov	r17,zero
 1003790:	d9800917 	ldw	r6,36(sp)
 1003794:	30019e1e 	bne	r6,zero,1003e10 <_dtoa_r+0xf00>
 1003798:	00c00044 	movi	r3,1
 100379c:	d9000a17 	ldw	r4,40(sp)
 10037a0:	20c5883a 	add	r2,r4,r3
 10037a4:	10c007cc 	andi	r3,r2,31
 10037a8:	1800841e 	bne	r3,zero,10039bc <_dtoa_r+0xaac>
 10037ac:	00800704 	movi	r2,28
 10037b0:	d9000a17 	ldw	r4,40(sp)
 10037b4:	d9801117 	ldw	r6,68(sp)
 10037b8:	80a1883a 	add	r16,r16,r2
 10037bc:	2089883a 	add	r4,r4,r2
 10037c0:	308d883a 	add	r6,r6,r2
 10037c4:	d9000a15 	stw	r4,40(sp)
 10037c8:	d9801115 	stw	r6,68(sp)
 10037cc:	d8801117 	ldw	r2,68(sp)
 10037d0:	0080050e 	bge	zero,r2,10037e8 <_dtoa_r+0x8d8>
 10037d4:	d9400717 	ldw	r5,28(sp)
 10037d8:	d9001617 	ldw	r4,88(sp)
 10037dc:	100d883a 	mov	r6,r2
 10037e0:	10069e80 	call	10069e8 <__lshift>
 10037e4:	d8800715 	stw	r2,28(sp)
 10037e8:	d8c00a17 	ldw	r3,40(sp)
 10037ec:	00c0050e 	bge	zero,r3,1003804 <_dtoa_r+0x8f4>
 10037f0:	d9001617 	ldw	r4,88(sp)
 10037f4:	900b883a 	mov	r5,r18
 10037f8:	180d883a 	mov	r6,r3
 10037fc:	10069e80 	call	10069e8 <__lshift>
 1003800:	1025883a 	mov	r18,r2
 1003804:	d9000c17 	ldw	r4,48(sp)
 1003808:	2005003a 	cmpeq	r2,r4,zero
 100380c:	10016f26 	beq	r2,zero,1003dcc <_dtoa_r+0xebc>
 1003810:	d9000f17 	ldw	r4,60(sp)
 1003814:	0102170e 	bge	zero,r4,1004074 <_dtoa_r+0x1164>
 1003818:	d9800b17 	ldw	r6,44(sp)
 100381c:	3005003a 	cmpeq	r2,r6,zero
 1003820:	1000881e 	bne	r2,zero,1003a44 <_dtoa_r+0xb34>
 1003824:	0400050e 	bge	zero,r16,100383c <_dtoa_r+0x92c>
 1003828:	d9001617 	ldw	r4,88(sp)
 100382c:	980b883a 	mov	r5,r19
 1003830:	800d883a 	mov	r6,r16
 1003834:	10069e80 	call	10069e8 <__lshift>
 1003838:	1027883a 	mov	r19,r2
 100383c:	8804c03a 	cmpne	r2,r17,zero
 1003840:	1002541e 	bne	r2,zero,1004194 <_dtoa_r+0x1284>
 1003844:	980b883a 	mov	r5,r19
 1003848:	dd800517 	ldw	r22,20(sp)
 100384c:	dcc00615 	stw	r19,24(sp)
 1003850:	a700004c 	andi	fp,r20,1
 1003854:	2827883a 	mov	r19,r5
 1003858:	d9000717 	ldw	r4,28(sp)
 100385c:	900b883a 	mov	r5,r18
 1003860:	1002cf80 	call	1002cf8 <quorem>
 1003864:	d9000717 	ldw	r4,28(sp)
 1003868:	d9400617 	ldw	r5,24(sp)
 100386c:	1023883a 	mov	r17,r2
 1003870:	8dc00c04 	addi	r23,r17,48
 1003874:	10062000 	call	1006200 <__mcmp>
 1003878:	d9001617 	ldw	r4,88(sp)
 100387c:	900b883a 	mov	r5,r18
 1003880:	980d883a 	mov	r6,r19
 1003884:	1029883a 	mov	r20,r2
 1003888:	100685c0 	call	100685c <__mdiff>
 100388c:	102b883a 	mov	r21,r2
 1003890:	10800317 	ldw	r2,12(r2)
 1003894:	1001281e 	bne	r2,zero,1003d38 <_dtoa_r+0xe28>
 1003898:	d9000717 	ldw	r4,28(sp)
 100389c:	a80b883a 	mov	r5,r21
 10038a0:	10062000 	call	1006200 <__mcmp>
 10038a4:	d9001617 	ldw	r4,88(sp)
 10038a8:	1021883a 	mov	r16,r2
 10038ac:	a80b883a 	mov	r5,r21
 10038b0:	10060a40 	call	10060a4 <_Bfree>
 10038b4:	8000041e 	bne	r16,zero,10038c8 <_dtoa_r+0x9b8>
 10038b8:	d8801717 	ldw	r2,92(sp)
 10038bc:	1000021e 	bne	r2,zero,10038c8 <_dtoa_r+0x9b8>
 10038c0:	e004c03a 	cmpne	r2,fp,zero
 10038c4:	10011726 	beq	r2,zero,1003d24 <_dtoa_r+0xe14>
 10038c8:	a0010616 	blt	r20,zero,1003ce4 <_dtoa_r+0xdd4>
 10038cc:	a000041e 	bne	r20,zero,10038e0 <_dtoa_r+0x9d0>
 10038d0:	d8c01717 	ldw	r3,92(sp)
 10038d4:	1800021e 	bne	r3,zero,10038e0 <_dtoa_r+0x9d0>
 10038d8:	e004c03a 	cmpne	r2,fp,zero
 10038dc:	10010126 	beq	r2,zero,1003ce4 <_dtoa_r+0xdd4>
 10038e0:	04023d16 	blt	zero,r16,10041d8 <_dtoa_r+0x12c8>
 10038e4:	b5c00005 	stb	r23,0(r22)
 10038e8:	d9800517 	ldw	r6,20(sp)
 10038ec:	d9000f17 	ldw	r4,60(sp)
 10038f0:	b5800044 	addi	r22,r22,1
 10038f4:	3105883a 	add	r2,r6,r4
 10038f8:	b0806526 	beq	r22,r2,1003a90 <_dtoa_r+0xb80>
 10038fc:	d9400717 	ldw	r5,28(sp)
 1003900:	d9001617 	ldw	r4,88(sp)
 1003904:	01800284 	movi	r6,10
 1003908:	000f883a 	mov	r7,zero
 100390c:	1006d580 	call	1006d58 <__multadd>
 1003910:	d8800715 	stw	r2,28(sp)
 1003914:	d8800617 	ldw	r2,24(sp)
 1003918:	14c10c26 	beq	r2,r19,1003d4c <_dtoa_r+0xe3c>
 100391c:	d9400617 	ldw	r5,24(sp)
 1003920:	d9001617 	ldw	r4,88(sp)
 1003924:	01800284 	movi	r6,10
 1003928:	000f883a 	mov	r7,zero
 100392c:	1006d580 	call	1006d58 <__multadd>
 1003930:	d9001617 	ldw	r4,88(sp)
 1003934:	980b883a 	mov	r5,r19
 1003938:	01800284 	movi	r6,10
 100393c:	000f883a 	mov	r7,zero
 1003940:	d8800615 	stw	r2,24(sp)
 1003944:	1006d580 	call	1006d58 <__multadd>
 1003948:	1027883a 	mov	r19,r2
 100394c:	003fc206 	br	1003858 <_dtoa_r+0x948>
 1003950:	2445c83a 	sub	r2,r4,r17
 1003954:	a088983a 	sll	r4,r20,r2
 1003958:	003e4b06 	br	1003288 <_dtoa_r+0x378>
 100395c:	01bfffc4 	movi	r6,-1
 1003960:	00800044 	movi	r2,1
 1003964:	d9800e15 	stw	r6,56(sp)
 1003968:	d9800f15 	stw	r6,60(sp)
 100396c:	d8800b15 	stw	r2,44(sp)
 1003970:	d8c01617 	ldw	r3,88(sp)
 1003974:	008005c4 	movi	r2,23
 1003978:	18001115 	stw	zero,68(r3)
 100397c:	1580082e 	bgeu	r2,r22,10039a0 <_dtoa_r+0xa90>
 1003980:	00c00104 	movi	r3,4
 1003984:	0009883a 	mov	r4,zero
 1003988:	18c7883a 	add	r3,r3,r3
 100398c:	18800504 	addi	r2,r3,20
 1003990:	21000044 	addi	r4,r4,1
 1003994:	b0bffc2e 	bgeu	r22,r2,1003988 <_dtoa_r+0xa78>
 1003998:	d9801617 	ldw	r6,88(sp)
 100399c:	31001115 	stw	r4,68(r6)
 10039a0:	dc000f17 	ldw	r16,60(sp)
 10039a4:	003e4b06 	br	10032d4 <_dtoa_r+0x3c4>
 10039a8:	d9801717 	ldw	r6,92(sp)
 10039ac:	0023883a 	mov	r17,zero
 10039b0:	31bfff04 	addi	r6,r6,-4
 10039b4:	d9801715 	stw	r6,92(sp)
 10039b8:	003df806 	br	100319c <_dtoa_r+0x28c>
 10039bc:	00800804 	movi	r2,32
 10039c0:	10c9c83a 	sub	r4,r2,r3
 10039c4:	00c00104 	movi	r3,4
 10039c8:	19005a16 	blt	r3,r4,1003b34 <_dtoa_r+0xc24>
 10039cc:	008000c4 	movi	r2,3
 10039d0:	113f7e16 	blt	r2,r4,10037cc <_dtoa_r+0x8bc>
 10039d4:	20800704 	addi	r2,r4,28
 10039d8:	003f7506 	br	10037b0 <_dtoa_r+0x8a0>
 10039dc:	d9801717 	ldw	r6,92(sp)
 10039e0:	00800044 	movi	r2,1
 10039e4:	1180a10e 	bge	r2,r6,1003c6c <_dtoa_r+0xd5c>
 10039e8:	d9800f17 	ldw	r6,60(sp)
 10039ec:	d8c01017 	ldw	r3,64(sp)
 10039f0:	30bfffc4 	addi	r2,r6,-1
 10039f4:	1881c616 	blt	r3,r2,1004110 <_dtoa_r+0x1200>
 10039f8:	18a5c83a 	sub	r18,r3,r2
 10039fc:	d8800f17 	ldw	r2,60(sp)
 1003a00:	10026216 	blt	r2,zero,100438c <_dtoa_r+0x147c>
 1003a04:	dc001117 	ldw	r16,68(sp)
 1003a08:	1007883a 	mov	r3,r2
 1003a0c:	d9800a17 	ldw	r6,40(sp)
 1003a10:	d8801117 	ldw	r2,68(sp)
 1003a14:	d9001617 	ldw	r4,88(sp)
 1003a18:	30cd883a 	add	r6,r6,r3
 1003a1c:	10c5883a 	add	r2,r2,r3
 1003a20:	01400044 	movi	r5,1
 1003a24:	d9800a15 	stw	r6,40(sp)
 1003a28:	d8801115 	stw	r2,68(sp)
 1003a2c:	1006d1c0 	call	1006d1c <__i2b>
 1003a30:	1027883a 	mov	r19,r2
 1003a34:	003f2506 	br	10036cc <_dtoa_r+0x7bc>
 1003a38:	00c04074 	movhi	r3,257
 1003a3c:	18f98f04 	addi	r3,r3,-6596
 1003a40:	003d6706 	br	1002fe0 <_dtoa_r+0xd0>
 1003a44:	dd800517 	ldw	r22,20(sp)
 1003a48:	04000044 	movi	r16,1
 1003a4c:	00000706 	br	1003a6c <_dtoa_r+0xb5c>
 1003a50:	d9400717 	ldw	r5,28(sp)
 1003a54:	d9001617 	ldw	r4,88(sp)
 1003a58:	01800284 	movi	r6,10
 1003a5c:	000f883a 	mov	r7,zero
 1003a60:	1006d580 	call	1006d58 <__multadd>
 1003a64:	d8800715 	stw	r2,28(sp)
 1003a68:	84000044 	addi	r16,r16,1
 1003a6c:	d9000717 	ldw	r4,28(sp)
 1003a70:	900b883a 	mov	r5,r18
 1003a74:	1002cf80 	call	1002cf8 <quorem>
 1003a78:	15c00c04 	addi	r23,r2,48
 1003a7c:	b5c00005 	stb	r23,0(r22)
 1003a80:	d8c00f17 	ldw	r3,60(sp)
 1003a84:	b5800044 	addi	r22,r22,1
 1003a88:	80fff116 	blt	r16,r3,1003a50 <_dtoa_r+0xb40>
 1003a8c:	d8000615 	stw	zero,24(sp)
 1003a90:	d9400717 	ldw	r5,28(sp)
 1003a94:	d9001617 	ldw	r4,88(sp)
 1003a98:	01800044 	movi	r6,1
 1003a9c:	10069e80 	call	10069e8 <__lshift>
 1003aa0:	1009883a 	mov	r4,r2
 1003aa4:	900b883a 	mov	r5,r18
 1003aa8:	d8800715 	stw	r2,28(sp)
 1003aac:	10062000 	call	1006200 <__mcmp>
 1003ab0:	00803c0e 	bge	zero,r2,1003ba4 <_dtoa_r+0xc94>
 1003ab4:	b009883a 	mov	r4,r22
 1003ab8:	213fffc4 	addi	r4,r4,-1
 1003abc:	21400003 	ldbu	r5,0(r4)
 1003ac0:	00800e44 	movi	r2,57
 1003ac4:	28c03fcc 	andi	r3,r5,255
 1003ac8:	18c0201c 	xori	r3,r3,128
 1003acc:	18ffe004 	addi	r3,r3,-128
 1003ad0:	1881981e 	bne	r3,r2,1004134 <_dtoa_r+0x1224>
 1003ad4:	d9800517 	ldw	r6,20(sp)
 1003ad8:	21bff71e 	bne	r4,r6,1003ab8 <_dtoa_r+0xba8>
 1003adc:	d8800d17 	ldw	r2,52(sp)
 1003ae0:	37000044 	addi	fp,r6,1
 1003ae4:	10800044 	addi	r2,r2,1
 1003ae8:	d8800d15 	stw	r2,52(sp)
 1003aec:	00800c44 	movi	r2,49
 1003af0:	30800005 	stb	r2,0(r6)
 1003af4:	d9001617 	ldw	r4,88(sp)
 1003af8:	900b883a 	mov	r5,r18
 1003afc:	10060a40 	call	10060a4 <_Bfree>
 1003b00:	983ecd26 	beq	r19,zero,1003638 <_dtoa_r+0x728>
 1003b04:	d8c00617 	ldw	r3,24(sp)
 1003b08:	18000426 	beq	r3,zero,1003b1c <_dtoa_r+0xc0c>
 1003b0c:	1cc00326 	beq	r3,r19,1003b1c <_dtoa_r+0xc0c>
 1003b10:	d9001617 	ldw	r4,88(sp)
 1003b14:	180b883a 	mov	r5,r3
 1003b18:	10060a40 	call	10060a4 <_Bfree>
 1003b1c:	d9001617 	ldw	r4,88(sp)
 1003b20:	980b883a 	mov	r5,r19
 1003b24:	10060a40 	call	10060a4 <_Bfree>
 1003b28:	003ec306 	br	1003638 <_dtoa_r+0x728>
 1003b2c:	1805883a 	mov	r2,r3
 1003b30:	003eeb06 	br	10036e0 <_dtoa_r+0x7d0>
 1003b34:	d9800a17 	ldw	r6,40(sp)
 1003b38:	d8c01117 	ldw	r3,68(sp)
 1003b3c:	20bfff04 	addi	r2,r4,-4
 1003b40:	308d883a 	add	r6,r6,r2
 1003b44:	1887883a 	add	r3,r3,r2
 1003b48:	80a1883a 	add	r16,r16,r2
 1003b4c:	d9800a15 	stw	r6,40(sp)
 1003b50:	d8c01115 	stw	r3,68(sp)
 1003b54:	003f1d06 	br	10037cc <_dtoa_r+0x8bc>
 1003b58:	a03f0c1e 	bne	r20,zero,100378c <_dtoa_r+0x87c>
 1003b5c:	00800434 	movhi	r2,16
 1003b60:	10bfffc4 	addi	r2,r2,-1
 1003b64:	a884703a 	and	r2,r21,r2
 1003b68:	103f081e 	bne	r2,zero,100378c <_dtoa_r+0x87c>
 1003b6c:	a89ffc2c 	andhi	r2,r21,32752
 1003b70:	103f0626 	beq	r2,zero,100378c <_dtoa_r+0x87c>
 1003b74:	d8c01117 	ldw	r3,68(sp)
 1003b78:	d9000a17 	ldw	r4,40(sp)
 1003b7c:	18c00044 	addi	r3,r3,1
 1003b80:	21000044 	addi	r4,r4,1
 1003b84:	d8c01115 	stw	r3,68(sp)
 1003b88:	d9000a15 	stw	r4,40(sp)
 1003b8c:	003f0006 	br	1003790 <_dtoa_r+0x880>
 1003b90:	d9400717 	ldw	r5,28(sp)
 1003b94:	d9001617 	ldw	r4,88(sp)
 1003b98:	1006e580 	call	1006e58 <__pow5mult>
 1003b9c:	d8800715 	stw	r2,28(sp)
 1003ba0:	003eed06 	br	1003758 <_dtoa_r+0x848>
 1003ba4:	1000021e 	bne	r2,zero,1003bb0 <_dtoa_r+0xca0>
 1003ba8:	b880004c 	andi	r2,r23,1
 1003bac:	103fc11e 	bne	r2,zero,1003ab4 <_dtoa_r+0xba4>
 1003bb0:	b5bfffc4 	addi	r22,r22,-1
 1003bb4:	b0c00007 	ldb	r3,0(r22)
 1003bb8:	00800c04 	movi	r2,48
 1003bbc:	18bffc26 	beq	r3,r2,1003bb0 <_dtoa_r+0xca0>
 1003bc0:	b7000044 	addi	fp,r22,1
 1003bc4:	003fcb06 	br	1003af4 <_dtoa_r+0xbe4>
 1003bc8:	d9800d17 	ldw	r6,52(sp)
 1003bcc:	018fc83a 	sub	r7,zero,r6
 1003bd0:	3801f726 	beq	r7,zero,10043b0 <_dtoa_r+0x14a0>
 1003bd4:	398003cc 	andi	r6,r7,15
 1003bd8:	300c90fa 	slli	r6,r6,3
 1003bdc:	01404074 	movhi	r5,257
 1003be0:	2979ad04 	addi	r5,r5,-6476
 1003be4:	d9001217 	ldw	r4,72(sp)
 1003be8:	314d883a 	add	r6,r6,r5
 1003bec:	30c00117 	ldw	r3,4(r6)
 1003bf0:	30800017 	ldw	r2,0(r6)
 1003bf4:	d9401317 	ldw	r5,76(sp)
 1003bf8:	3821d13a 	srai	r16,r7,4
 1003bfc:	100d883a 	mov	r6,r2
 1003c00:	180f883a 	mov	r7,r3
 1003c04:	10091d00 	call	10091d0 <__muldf3>
 1003c08:	1011883a 	mov	r8,r2
 1003c0c:	1813883a 	mov	r9,r3
 1003c10:	1029883a 	mov	r20,r2
 1003c14:	182b883a 	mov	r21,r3
 1003c18:	8001e526 	beq	r16,zero,10043b0 <_dtoa_r+0x14a0>
 1003c1c:	05800084 	movi	r22,2
 1003c20:	04404074 	movhi	r17,257
 1003c24:	8c79df04 	addi	r17,r17,-6276
 1003c28:	8080004c 	andi	r2,r16,1
 1003c2c:	1005003a 	cmpeq	r2,r2,zero
 1003c30:	1000081e 	bne	r2,zero,1003c54 <_dtoa_r+0xd44>
 1003c34:	89800017 	ldw	r6,0(r17)
 1003c38:	89c00117 	ldw	r7,4(r17)
 1003c3c:	480b883a 	mov	r5,r9
 1003c40:	4009883a 	mov	r4,r8
 1003c44:	10091d00 	call	10091d0 <__muldf3>
 1003c48:	1011883a 	mov	r8,r2
 1003c4c:	b5800044 	addi	r22,r22,1
 1003c50:	1813883a 	mov	r9,r3
 1003c54:	8021d07a 	srai	r16,r16,1
 1003c58:	8c400204 	addi	r17,r17,8
 1003c5c:	803ff21e 	bne	r16,zero,1003c28 <_dtoa_r+0xd18>
 1003c60:	4029883a 	mov	r20,r8
 1003c64:	482b883a 	mov	r21,r9
 1003c68:	003dca06 	br	1003394 <_dtoa_r+0x484>
 1003c6c:	d9000817 	ldw	r4,32(sp)
 1003c70:	2005003a 	cmpeq	r2,r4,zero
 1003c74:	1001f61e 	bne	r2,zero,1004450 <_dtoa_r+0x1540>
 1003c78:	dc001117 	ldw	r16,68(sp)
 1003c7c:	dc801017 	ldw	r18,64(sp)
 1003c80:	18c10cc4 	addi	r3,r3,1075
 1003c84:	003f6106 	br	1003a0c <_dtoa_r+0xafc>
 1003c88:	d8000b15 	stw	zero,44(sp)
 1003c8c:	d9802617 	ldw	r6,152(sp)
 1003c90:	d8c00d17 	ldw	r3,52(sp)
 1003c94:	30800044 	addi	r2,r6,1
 1003c98:	18ad883a 	add	r22,r3,r2
 1003c9c:	b13fffc4 	addi	r4,r22,-1
 1003ca0:	d9000e15 	stw	r4,56(sp)
 1003ca4:	0581f60e 	bge	zero,r22,1004480 <_dtoa_r+0x1570>
 1003ca8:	dd800f15 	stw	r22,60(sp)
 1003cac:	003f3006 	br	1003970 <_dtoa_r+0xa60>
 1003cb0:	d8000b15 	stw	zero,44(sp)
 1003cb4:	d9002617 	ldw	r4,152(sp)
 1003cb8:	0101eb0e 	bge	zero,r4,1004468 <_dtoa_r+0x1558>
 1003cbc:	202d883a 	mov	r22,r4
 1003cc0:	d9000e15 	stw	r4,56(sp)
 1003cc4:	d9000f15 	stw	r4,60(sp)
 1003cc8:	003f2906 	br	1003970 <_dtoa_r+0xa60>
 1003ccc:	01800044 	movi	r6,1
 1003cd0:	d9800b15 	stw	r6,44(sp)
 1003cd4:	003ff706 	br	1003cb4 <_dtoa_r+0xda4>
 1003cd8:	01000044 	movi	r4,1
 1003cdc:	d9000b15 	stw	r4,44(sp)
 1003ce0:	003fea06 	br	1003c8c <_dtoa_r+0xd7c>
 1003ce4:	04000c0e 	bge	zero,r16,1003d18 <_dtoa_r+0xe08>
 1003ce8:	d9400717 	ldw	r5,28(sp)
 1003cec:	d9001617 	ldw	r4,88(sp)
 1003cf0:	01800044 	movi	r6,1
 1003cf4:	10069e80 	call	10069e8 <__lshift>
 1003cf8:	1009883a 	mov	r4,r2
 1003cfc:	900b883a 	mov	r5,r18
 1003d00:	d8800715 	stw	r2,28(sp)
 1003d04:	10062000 	call	1006200 <__mcmp>
 1003d08:	0081e00e 	bge	zero,r2,100448c <_dtoa_r+0x157c>
 1003d0c:	bdc00044 	addi	r23,r23,1
 1003d10:	00800e84 	movi	r2,58
 1003d14:	b881a226 	beq	r23,r2,10043a0 <_dtoa_r+0x1490>
 1003d18:	b7000044 	addi	fp,r22,1
 1003d1c:	b5c00005 	stb	r23,0(r22)
 1003d20:	003f7406 	br	1003af4 <_dtoa_r+0xbe4>
 1003d24:	00800e44 	movi	r2,57
 1003d28:	b8819d26 	beq	r23,r2,10043a0 <_dtoa_r+0x1490>
 1003d2c:	053ffa0e 	bge	zero,r20,1003d18 <_dtoa_r+0xe08>
 1003d30:	8dc00c44 	addi	r23,r17,49
 1003d34:	003ff806 	br	1003d18 <_dtoa_r+0xe08>
 1003d38:	d9001617 	ldw	r4,88(sp)
 1003d3c:	a80b883a 	mov	r5,r21
 1003d40:	04000044 	movi	r16,1
 1003d44:	10060a40 	call	10060a4 <_Bfree>
 1003d48:	003edf06 	br	10038c8 <_dtoa_r+0x9b8>
 1003d4c:	d9001617 	ldw	r4,88(sp)
 1003d50:	980b883a 	mov	r5,r19
 1003d54:	01800284 	movi	r6,10
 1003d58:	000f883a 	mov	r7,zero
 1003d5c:	1006d580 	call	1006d58 <__multadd>
 1003d60:	1027883a 	mov	r19,r2
 1003d64:	d8800615 	stw	r2,24(sp)
 1003d68:	003ebb06 	br	1003858 <_dtoa_r+0x948>
 1003d6c:	d9801117 	ldw	r6,68(sp)
 1003d70:	d8800d17 	ldw	r2,52(sp)
 1003d74:	d8000915 	stw	zero,36(sp)
 1003d78:	308dc83a 	sub	r6,r6,r2
 1003d7c:	0087c83a 	sub	r3,zero,r2
 1003d80:	d9801115 	stw	r6,68(sp)
 1003d84:	d8c01015 	stw	r3,64(sp)
 1003d88:	003cfe06 	br	1003184 <_dtoa_r+0x274>
 1003d8c:	018dc83a 	sub	r6,zero,r6
 1003d90:	d9801115 	stw	r6,68(sp)
 1003d94:	d8000a15 	stw	zero,40(sp)
 1003d98:	003cf306 	br	1003168 <_dtoa_r+0x258>
 1003d9c:	d9000d17 	ldw	r4,52(sp)
 1003da0:	1009a940 	call	1009a94 <__floatsidf>
 1003da4:	880b883a 	mov	r5,r17
 1003da8:	8009883a 	mov	r4,r16
 1003dac:	180f883a 	mov	r7,r3
 1003db0:	100d883a 	mov	r6,r2
 1003db4:	10098740 	call	1009874 <__nedf2>
 1003db8:	103ce126 	beq	r2,zero,1003140 <_dtoa_r+0x230>
 1003dbc:	d9800d17 	ldw	r6,52(sp)
 1003dc0:	31bfffc4 	addi	r6,r6,-1
 1003dc4:	d9800d15 	stw	r6,52(sp)
 1003dc8:	003cdd06 	br	1003140 <_dtoa_r+0x230>
 1003dcc:	d9000717 	ldw	r4,28(sp)
 1003dd0:	900b883a 	mov	r5,r18
 1003dd4:	10062000 	call	1006200 <__mcmp>
 1003dd8:	103e8d0e 	bge	r2,zero,1003810 <_dtoa_r+0x900>
 1003ddc:	d9400717 	ldw	r5,28(sp)
 1003de0:	d9001617 	ldw	r4,88(sp)
 1003de4:	01800284 	movi	r6,10
 1003de8:	000f883a 	mov	r7,zero
 1003dec:	1006d580 	call	1006d58 <__multadd>
 1003df0:	d9800d17 	ldw	r6,52(sp)
 1003df4:	d8800715 	stw	r2,28(sp)
 1003df8:	31bfffc4 	addi	r6,r6,-1
 1003dfc:	d9800d15 	stw	r6,52(sp)
 1003e00:	b001a71e 	bne	r22,zero,10044a0 <_dtoa_r+0x1590>
 1003e04:	d8800e17 	ldw	r2,56(sp)
 1003e08:	d8800f15 	stw	r2,60(sp)
 1003e0c:	003e8006 	br	1003810 <_dtoa_r+0x900>
 1003e10:	90800417 	ldw	r2,16(r18)
 1003e14:	1085883a 	add	r2,r2,r2
 1003e18:	1085883a 	add	r2,r2,r2
 1003e1c:	1485883a 	add	r2,r2,r18
 1003e20:	11000417 	ldw	r4,16(r2)
 1003e24:	10060cc0 	call	10060cc <__hi0bits>
 1003e28:	00c00804 	movi	r3,32
 1003e2c:	1887c83a 	sub	r3,r3,r2
 1003e30:	003e5a06 	br	100379c <_dtoa_r+0x88c>
 1003e34:	d9400717 	ldw	r5,28(sp)
 1003e38:	d9801017 	ldw	r6,64(sp)
 1003e3c:	d9001617 	ldw	r4,88(sp)
 1003e40:	1006e580 	call	1006e58 <__pow5mult>
 1003e44:	d8800715 	stw	r2,28(sp)
 1003e48:	003e4306 	br	1003758 <_dtoa_r+0x848>
 1003e4c:	d9800f17 	ldw	r6,60(sp)
 1003e50:	d8800d17 	ldw	r2,52(sp)
 1003e54:	d9800315 	stw	r6,12(sp)
 1003e58:	d8800415 	stw	r2,16(sp)
 1003e5c:	d8c00b17 	ldw	r3,44(sp)
 1003e60:	1805003a 	cmpeq	r2,r3,zero
 1003e64:	1000e21e 	bne	r2,zero,10041f0 <_dtoa_r+0x12e0>
 1003e68:	d9000317 	ldw	r4,12(sp)
 1003e6c:	0005883a 	mov	r2,zero
 1003e70:	00cff834 	movhi	r3,16352
 1003e74:	200c90fa 	slli	r6,r4,3
 1003e78:	01004074 	movhi	r4,257
 1003e7c:	2139ad04 	addi	r4,r4,-6476
 1003e80:	180b883a 	mov	r5,r3
 1003e84:	310d883a 	add	r6,r6,r4
 1003e88:	327fff17 	ldw	r9,-4(r6)
 1003e8c:	323ffe17 	ldw	r8,-8(r6)
 1003e90:	1009883a 	mov	r4,r2
 1003e94:	480f883a 	mov	r7,r9
 1003e98:	400d883a 	mov	r6,r8
 1003e9c:	10095940 	call	1009594 <__divdf3>
 1003ea0:	180b883a 	mov	r5,r3
 1003ea4:	b00d883a 	mov	r6,r22
 1003ea8:	b80f883a 	mov	r7,r23
 1003eac:	1009883a 	mov	r4,r2
 1003eb0:	10090dc0 	call	10090dc <__subdf3>
 1003eb4:	a80b883a 	mov	r5,r21
 1003eb8:	a009883a 	mov	r4,r20
 1003ebc:	d8c01915 	stw	r3,100(sp)
 1003ec0:	d8801815 	stw	r2,96(sp)
 1003ec4:	1009b8c0 	call	1009b8c <__fixdfsi>
 1003ec8:	1009883a 	mov	r4,r2
 1003ecc:	1027883a 	mov	r19,r2
 1003ed0:	1009a940 	call	1009a94 <__floatsidf>
 1003ed4:	a80b883a 	mov	r5,r21
 1003ed8:	a009883a 	mov	r4,r20
 1003edc:	180f883a 	mov	r7,r3
 1003ee0:	100d883a 	mov	r6,r2
 1003ee4:	10090dc0 	call	10090dc <__subdf3>
 1003ee8:	d9801817 	ldw	r6,96(sp)
 1003eec:	1823883a 	mov	r17,r3
 1003ef0:	d8801415 	stw	r2,80(sp)
 1003ef4:	302d883a 	mov	r22,r6
 1003ef8:	d9800517 	ldw	r6,20(sp)
 1003efc:	9cc00c04 	addi	r19,r19,48
 1003f00:	dc401515 	stw	r17,84(sp)
 1003f04:	d8c01917 	ldw	r3,100(sp)
 1003f08:	34c00005 	stb	r19,0(r6)
 1003f0c:	d8800517 	ldw	r2,20(sp)
 1003f10:	d9401917 	ldw	r5,100(sp)
 1003f14:	d9801417 	ldw	r6,80(sp)
 1003f18:	b009883a 	mov	r4,r22
 1003f1c:	880f883a 	mov	r7,r17
 1003f20:	182f883a 	mov	r23,r3
 1003f24:	17000044 	addi	fp,r2,1
 1003f28:	10098fc0 	call	10098fc <__gtdf2>
 1003f2c:	00804e16 	blt	zero,r2,1004068 <_dtoa_r+0x1158>
 1003f30:	d9801417 	ldw	r6,80(sp)
 1003f34:	0005883a 	mov	r2,zero
 1003f38:	00cffc34 	movhi	r3,16368
 1003f3c:	180b883a 	mov	r5,r3
 1003f40:	880f883a 	mov	r7,r17
 1003f44:	1009883a 	mov	r4,r2
 1003f48:	10090dc0 	call	10090dc <__subdf3>
 1003f4c:	d9401917 	ldw	r5,100(sp)
 1003f50:	180f883a 	mov	r7,r3
 1003f54:	b009883a 	mov	r4,r22
 1003f58:	100d883a 	mov	r6,r2
 1003f5c:	10098fc0 	call	10098fc <__gtdf2>
 1003f60:	00bda216 	blt	zero,r2,10035ec <_dtoa_r+0x6dc>
 1003f64:	d8c00317 	ldw	r3,12(sp)
 1003f68:	00800044 	movi	r2,1
 1003f6c:	10c01216 	blt	r2,r3,1003fb8 <_dtoa_r+0x10a8>
 1003f70:	003d4506 	br	1003488 <_dtoa_r+0x578>
 1003f74:	d9801417 	ldw	r6,80(sp)
 1003f78:	0005883a 	mov	r2,zero
 1003f7c:	00cffc34 	movhi	r3,16368
 1003f80:	180b883a 	mov	r5,r3
 1003f84:	880f883a 	mov	r7,r17
 1003f88:	1009883a 	mov	r4,r2
 1003f8c:	10090dc0 	call	10090dc <__subdf3>
 1003f90:	d9c01b17 	ldw	r7,108(sp)
 1003f94:	180b883a 	mov	r5,r3
 1003f98:	1009883a 	mov	r4,r2
 1003f9c:	b00d883a 	mov	r6,r22
 1003fa0:	1009a0c0 	call	1009a0c <__ltdf2>
 1003fa4:	103d9116 	blt	r2,zero,10035ec <_dtoa_r+0x6dc>
 1003fa8:	d9800517 	ldw	r6,20(sp)
 1003fac:	d9000317 	ldw	r4,12(sp)
 1003fb0:	3105883a 	add	r2,r6,r4
 1003fb4:	e0bd3426 	beq	fp,r2,1003488 <_dtoa_r+0x578>
 1003fb8:	04500934 	movhi	r17,16420
 1003fbc:	0021883a 	mov	r16,zero
 1003fc0:	b80b883a 	mov	r5,r23
 1003fc4:	b009883a 	mov	r4,r22
 1003fc8:	800d883a 	mov	r6,r16
 1003fcc:	880f883a 	mov	r7,r17
 1003fd0:	10091d00 	call	10091d0 <__muldf3>
 1003fd4:	d9401517 	ldw	r5,84(sp)
 1003fd8:	d9001417 	ldw	r4,80(sp)
 1003fdc:	880f883a 	mov	r7,r17
 1003fe0:	000d883a 	mov	r6,zero
 1003fe4:	d8801a15 	stw	r2,104(sp)
 1003fe8:	d8c01b15 	stw	r3,108(sp)
 1003fec:	10091d00 	call	10091d0 <__muldf3>
 1003ff0:	180b883a 	mov	r5,r3
 1003ff4:	1009883a 	mov	r4,r2
 1003ff8:	1823883a 	mov	r17,r3
 1003ffc:	1021883a 	mov	r16,r2
 1004000:	1009b8c0 	call	1009b8c <__fixdfsi>
 1004004:	1009883a 	mov	r4,r2
 1004008:	102b883a 	mov	r21,r2
 100400c:	1009a940 	call	1009a94 <__floatsidf>
 1004010:	880b883a 	mov	r5,r17
 1004014:	8009883a 	mov	r4,r16
 1004018:	180f883a 	mov	r7,r3
 100401c:	100d883a 	mov	r6,r2
 1004020:	10090dc0 	call	10090dc <__subdf3>
 1004024:	1021883a 	mov	r16,r2
 1004028:	d9001b17 	ldw	r4,108(sp)
 100402c:	1823883a 	mov	r17,r3
 1004030:	dc001415 	stw	r16,80(sp)
 1004034:	ad400c04 	addi	r21,r21,48
 1004038:	dc401515 	stw	r17,84(sp)
 100403c:	d8801a17 	ldw	r2,104(sp)
 1004040:	e5400005 	stb	r21,0(fp)
 1004044:	202f883a 	mov	r23,r4
 1004048:	d9c01b17 	ldw	r7,108(sp)
 100404c:	d9001417 	ldw	r4,80(sp)
 1004050:	880b883a 	mov	r5,r17
 1004054:	100d883a 	mov	r6,r2
 1004058:	102d883a 	mov	r22,r2
 100405c:	e7000044 	addi	fp,fp,1
 1004060:	1009a0c0 	call	1009a0c <__ltdf2>
 1004064:	103fc30e 	bge	r2,zero,1003f74 <_dtoa_r+0x1064>
 1004068:	d9000417 	ldw	r4,16(sp)
 100406c:	d9000d15 	stw	r4,52(sp)
 1004070:	003d7106 	br	1003638 <_dtoa_r+0x728>
 1004074:	d9801717 	ldw	r6,92(sp)
 1004078:	00800084 	movi	r2,2
 100407c:	11bde60e 	bge	r2,r6,1003818 <_dtoa_r+0x908>
 1004080:	203cfb1e 	bne	r4,zero,1003470 <_dtoa_r+0x560>
 1004084:	d9001617 	ldw	r4,88(sp)
 1004088:	900b883a 	mov	r5,r18
 100408c:	01800144 	movi	r6,5
 1004090:	000f883a 	mov	r7,zero
 1004094:	1006d580 	call	1006d58 <__multadd>
 1004098:	d9000717 	ldw	r4,28(sp)
 100409c:	100b883a 	mov	r5,r2
 10040a0:	1025883a 	mov	r18,r2
 10040a4:	10062000 	call	1006200 <__mcmp>
 10040a8:	00bcf10e 	bge	zero,r2,1003470 <_dtoa_r+0x560>
 10040ac:	d8c00d17 	ldw	r3,52(sp)
 10040b0:	d9000517 	ldw	r4,20(sp)
 10040b4:	d8000615 	stw	zero,24(sp)
 10040b8:	18c00044 	addi	r3,r3,1
 10040bc:	d8c00d15 	stw	r3,52(sp)
 10040c0:	00800c44 	movi	r2,49
 10040c4:	27000044 	addi	fp,r4,1
 10040c8:	20800005 	stb	r2,0(r4)
 10040cc:	003e8906 	br	1003af4 <_dtoa_r+0xbe4>
 10040d0:	d8c00517 	ldw	r3,20(sp)
 10040d4:	003bc206 	br	1002fe0 <_dtoa_r+0xd0>
 10040d8:	01804074 	movhi	r6,257
 10040dc:	31b9df04 	addi	r6,r6,-6276
 10040e0:	30c00917 	ldw	r3,36(r6)
 10040e4:	30800817 	ldw	r2,32(r6)
 10040e8:	d9001217 	ldw	r4,72(sp)
 10040ec:	d9401317 	ldw	r5,76(sp)
 10040f0:	180f883a 	mov	r7,r3
 10040f4:	100d883a 	mov	r6,r2
 10040f8:	10095940 	call	1009594 <__divdf3>
 10040fc:	948003cc 	andi	r18,r18,15
 1004100:	058000c4 	movi	r22,3
 1004104:	1029883a 	mov	r20,r2
 1004108:	182b883a 	mov	r21,r3
 100410c:	003c8906 	br	1003334 <_dtoa_r+0x424>
 1004110:	d9001017 	ldw	r4,64(sp)
 1004114:	d9800917 	ldw	r6,36(sp)
 1004118:	0025883a 	mov	r18,zero
 100411c:	1105c83a 	sub	r2,r2,r4
 1004120:	2089883a 	add	r4,r4,r2
 1004124:	308d883a 	add	r6,r6,r2
 1004128:	d9001015 	stw	r4,64(sp)
 100412c:	d9800915 	stw	r6,36(sp)
 1004130:	003e3206 	br	10039fc <_dtoa_r+0xaec>
 1004134:	28800044 	addi	r2,r5,1
 1004138:	27000044 	addi	fp,r4,1
 100413c:	20800005 	stb	r2,0(r4)
 1004140:	003e6c06 	br	1003af4 <_dtoa_r+0xbe4>
 1004144:	d8800f17 	ldw	r2,60(sp)
 1004148:	00bce016 	blt	zero,r2,10034cc <_dtoa_r+0x5bc>
 100414c:	d9800f17 	ldw	r6,60(sp)
 1004150:	303cc51e 	bne	r6,zero,1003468 <_dtoa_r+0x558>
 1004154:	0005883a 	mov	r2,zero
 1004158:	00d00534 	movhi	r3,16404
 100415c:	980b883a 	mov	r5,r19
 1004160:	180f883a 	mov	r7,r3
 1004164:	9009883a 	mov	r4,r18
 1004168:	100d883a 	mov	r6,r2
 100416c:	10091d00 	call	10091d0 <__muldf3>
 1004170:	180b883a 	mov	r5,r3
 1004174:	a80f883a 	mov	r7,r21
 1004178:	1009883a 	mov	r4,r2
 100417c:	a00d883a 	mov	r6,r20
 1004180:	10099840 	call	1009984 <__gedf2>
 1004184:	103cb80e 	bge	r2,zero,1003468 <_dtoa_r+0x558>
 1004188:	0027883a 	mov	r19,zero
 100418c:	0025883a 	mov	r18,zero
 1004190:	003fc606 	br	10040ac <_dtoa_r+0x119c>
 1004194:	99400117 	ldw	r5,4(r19)
 1004198:	d9001617 	ldw	r4,88(sp)
 100419c:	10066240 	call	1006624 <_Balloc>
 10041a0:	99800417 	ldw	r6,16(r19)
 10041a4:	11000304 	addi	r4,r2,12
 10041a8:	99400304 	addi	r5,r19,12
 10041ac:	318d883a 	add	r6,r6,r6
 10041b0:	318d883a 	add	r6,r6,r6
 10041b4:	31800204 	addi	r6,r6,8
 10041b8:	1023883a 	mov	r17,r2
 10041bc:	1005e8c0 	call	1005e8c <memcpy>
 10041c0:	d9001617 	ldw	r4,88(sp)
 10041c4:	880b883a 	mov	r5,r17
 10041c8:	01800044 	movi	r6,1
 10041cc:	10069e80 	call	10069e8 <__lshift>
 10041d0:	100b883a 	mov	r5,r2
 10041d4:	003d9c06 	br	1003848 <_dtoa_r+0x938>
 10041d8:	00800e44 	movi	r2,57
 10041dc:	b8807026 	beq	r23,r2,10043a0 <_dtoa_r+0x1490>
 10041e0:	b8800044 	addi	r2,r23,1
 10041e4:	b7000044 	addi	fp,r22,1
 10041e8:	b0800005 	stb	r2,0(r22)
 10041ec:	003e4106 	br	1003af4 <_dtoa_r+0xbe4>
 10041f0:	d8800317 	ldw	r2,12(sp)
 10041f4:	01804074 	movhi	r6,257
 10041f8:	31b9ad04 	addi	r6,r6,-6476
 10041fc:	b009883a 	mov	r4,r22
 1004200:	100e90fa 	slli	r7,r2,3
 1004204:	b80b883a 	mov	r5,r23
 1004208:	398f883a 	add	r7,r7,r6
 100420c:	38bffe17 	ldw	r2,-8(r7)
 1004210:	d9800517 	ldw	r6,20(sp)
 1004214:	38ffff17 	ldw	r3,-4(r7)
 1004218:	37000044 	addi	fp,r6,1
 100421c:	180f883a 	mov	r7,r3
 1004220:	100d883a 	mov	r6,r2
 1004224:	10091d00 	call	10091d0 <__muldf3>
 1004228:	a80b883a 	mov	r5,r21
 100422c:	a009883a 	mov	r4,r20
 1004230:	182f883a 	mov	r23,r3
 1004234:	102d883a 	mov	r22,r2
 1004238:	1009b8c0 	call	1009b8c <__fixdfsi>
 100423c:	1009883a 	mov	r4,r2
 1004240:	1027883a 	mov	r19,r2
 1004244:	1009a940 	call	1009a94 <__floatsidf>
 1004248:	a80b883a 	mov	r5,r21
 100424c:	a009883a 	mov	r4,r20
 1004250:	180f883a 	mov	r7,r3
 1004254:	100d883a 	mov	r6,r2
 1004258:	10090dc0 	call	10090dc <__subdf3>
 100425c:	180b883a 	mov	r5,r3
 1004260:	d8c00517 	ldw	r3,20(sp)
 1004264:	9cc00c04 	addi	r19,r19,48
 1004268:	1009883a 	mov	r4,r2
 100426c:	1cc00005 	stb	r19,0(r3)
 1004270:	2021883a 	mov	r16,r4
 1004274:	d9000317 	ldw	r4,12(sp)
 1004278:	00800044 	movi	r2,1
 100427c:	2823883a 	mov	r17,r5
 1004280:	20802226 	beq	r4,r2,100430c <_dtoa_r+0x13fc>
 1004284:	1029883a 	mov	r20,r2
 1004288:	0005883a 	mov	r2,zero
 100428c:	00d00934 	movhi	r3,16420
 1004290:	180f883a 	mov	r7,r3
 1004294:	100d883a 	mov	r6,r2
 1004298:	880b883a 	mov	r5,r17
 100429c:	8009883a 	mov	r4,r16
 10042a0:	10091d00 	call	10091d0 <__muldf3>
 10042a4:	180b883a 	mov	r5,r3
 10042a8:	1009883a 	mov	r4,r2
 10042ac:	1823883a 	mov	r17,r3
 10042b0:	1021883a 	mov	r16,r2
 10042b4:	1009b8c0 	call	1009b8c <__fixdfsi>
 10042b8:	1009883a 	mov	r4,r2
 10042bc:	102b883a 	mov	r21,r2
 10042c0:	1009a940 	call	1009a94 <__floatsidf>
 10042c4:	880b883a 	mov	r5,r17
 10042c8:	8009883a 	mov	r4,r16
 10042cc:	180f883a 	mov	r7,r3
 10042d0:	100d883a 	mov	r6,r2
 10042d4:	10090dc0 	call	10090dc <__subdf3>
 10042d8:	180b883a 	mov	r5,r3
 10042dc:	d8c00517 	ldw	r3,20(sp)
 10042e0:	1009883a 	mov	r4,r2
 10042e4:	ad400c04 	addi	r21,r21,48
 10042e8:	1d05883a 	add	r2,r3,r20
 10042ec:	15400005 	stb	r21,0(r2)
 10042f0:	2021883a 	mov	r16,r4
 10042f4:	d9000317 	ldw	r4,12(sp)
 10042f8:	a5000044 	addi	r20,r20,1
 10042fc:	2823883a 	mov	r17,r5
 1004300:	a13fe11e 	bne	r20,r4,1004288 <_dtoa_r+0x1378>
 1004304:	e505883a 	add	r2,fp,r20
 1004308:	173fffc4 	addi	fp,r2,-1
 100430c:	0025883a 	mov	r18,zero
 1004310:	04cff834 	movhi	r19,16352
 1004314:	b009883a 	mov	r4,r22
 1004318:	b80b883a 	mov	r5,r23
 100431c:	900d883a 	mov	r6,r18
 1004320:	980f883a 	mov	r7,r19
 1004324:	100915c0 	call	100915c <__adddf3>
 1004328:	180b883a 	mov	r5,r3
 100432c:	1009883a 	mov	r4,r2
 1004330:	800d883a 	mov	r6,r16
 1004334:	880f883a 	mov	r7,r17
 1004338:	1009a0c0 	call	1009a0c <__ltdf2>
 100433c:	103cab16 	blt	r2,zero,10035ec <_dtoa_r+0x6dc>
 1004340:	0009883a 	mov	r4,zero
 1004344:	980b883a 	mov	r5,r19
 1004348:	b80f883a 	mov	r7,r23
 100434c:	b00d883a 	mov	r6,r22
 1004350:	10090dc0 	call	10090dc <__subdf3>
 1004354:	180b883a 	mov	r5,r3
 1004358:	880f883a 	mov	r7,r17
 100435c:	1009883a 	mov	r4,r2
 1004360:	800d883a 	mov	r6,r16
 1004364:	10098fc0 	call	10098fc <__gtdf2>
 1004368:	00bc470e 	bge	zero,r2,1003488 <_dtoa_r+0x578>
 100436c:	00c00c04 	movi	r3,48
 1004370:	e73fffc4 	addi	fp,fp,-1
 1004374:	e0800007 	ldb	r2,0(fp)
 1004378:	10fffd26 	beq	r2,r3,1004370 <_dtoa_r+0x1460>
 100437c:	d9800417 	ldw	r6,16(sp)
 1004380:	e7000044 	addi	fp,fp,1
 1004384:	d9800d15 	stw	r6,52(sp)
 1004388:	003cab06 	br	1003638 <_dtoa_r+0x728>
 100438c:	d8c00f17 	ldw	r3,60(sp)
 1004390:	d9001117 	ldw	r4,68(sp)
 1004394:	20e1c83a 	sub	r16,r4,r3
 1004398:	0007883a 	mov	r3,zero
 100439c:	003d9b06 	br	1003a0c <_dtoa_r+0xafc>
 10043a0:	00800e44 	movi	r2,57
 10043a4:	b0800005 	stb	r2,0(r22)
 10043a8:	b5800044 	addi	r22,r22,1
 10043ac:	003dc106 	br	1003ab4 <_dtoa_r+0xba4>
 10043b0:	05800084 	movi	r22,2
 10043b4:	003bf706 	br	1003394 <_dtoa_r+0x484>
 10043b8:	d9000f17 	ldw	r4,60(sp)
 10043bc:	013c000e 	bge	zero,r4,10033c0 <_dtoa_r+0x4b0>
 10043c0:	d9800e17 	ldw	r6,56(sp)
 10043c4:	01bc300e 	bge	zero,r6,1003488 <_dtoa_r+0x578>
 10043c8:	0005883a 	mov	r2,zero
 10043cc:	00d00934 	movhi	r3,16420
 10043d0:	a80b883a 	mov	r5,r21
 10043d4:	180f883a 	mov	r7,r3
 10043d8:	a009883a 	mov	r4,r20
 10043dc:	100d883a 	mov	r6,r2
 10043e0:	10091d00 	call	10091d0 <__muldf3>
 10043e4:	b1000044 	addi	r4,r22,1
 10043e8:	1021883a 	mov	r16,r2
 10043ec:	1823883a 	mov	r17,r3
 10043f0:	1009a940 	call	1009a94 <__floatsidf>
 10043f4:	880b883a 	mov	r5,r17
 10043f8:	8009883a 	mov	r4,r16
 10043fc:	180f883a 	mov	r7,r3
 1004400:	100d883a 	mov	r6,r2
 1004404:	10091d00 	call	10091d0 <__muldf3>
 1004408:	0011883a 	mov	r8,zero
 100440c:	02500734 	movhi	r9,16412
 1004410:	180b883a 	mov	r5,r3
 1004414:	480f883a 	mov	r7,r9
 1004418:	1009883a 	mov	r4,r2
 100441c:	400d883a 	mov	r6,r8
 1004420:	100915c0 	call	100915c <__adddf3>
 1004424:	102d883a 	mov	r22,r2
 1004428:	00bf3034 	movhi	r2,64704
 100442c:	10ef883a 	add	r23,r2,r3
 1004430:	d8800d17 	ldw	r2,52(sp)
 1004434:	d8c00e17 	ldw	r3,56(sp)
 1004438:	8029883a 	mov	r20,r16
 100443c:	10bfffc4 	addi	r2,r2,-1
 1004440:	882b883a 	mov	r21,r17
 1004444:	d8800415 	stw	r2,16(sp)
 1004448:	d8c00315 	stw	r3,12(sp)
 100444c:	003e8306 	br	1003e5c <_dtoa_r+0xf4c>
 1004450:	d8800117 	ldw	r2,4(sp)
 1004454:	dc001117 	ldw	r16,68(sp)
 1004458:	dc801017 	ldw	r18,64(sp)
 100445c:	00c00d84 	movi	r3,54
 1004460:	1887c83a 	sub	r3,r3,r2
 1004464:	003d6906 	br	1003a0c <_dtoa_r+0xafc>
 1004468:	01800044 	movi	r6,1
 100446c:	3021883a 	mov	r16,r6
 1004470:	d9800f15 	stw	r6,60(sp)
 1004474:	d9802615 	stw	r6,152(sp)
 1004478:	d9800e15 	stw	r6,56(sp)
 100447c:	003b9306 	br	10032cc <_dtoa_r+0x3bc>
 1004480:	b021883a 	mov	r16,r22
 1004484:	dd800f15 	stw	r22,60(sp)
 1004488:	003b9006 	br	10032cc <_dtoa_r+0x3bc>
 100448c:	103e221e 	bne	r2,zero,1003d18 <_dtoa_r+0xe08>
 1004490:	b880004c 	andi	r2,r23,1
 1004494:	1005003a 	cmpeq	r2,r2,zero
 1004498:	103e1f1e 	bne	r2,zero,1003d18 <_dtoa_r+0xe08>
 100449c:	003e1b06 	br	1003d0c <_dtoa_r+0xdfc>
 10044a0:	d9001617 	ldw	r4,88(sp)
 10044a4:	980b883a 	mov	r5,r19
 10044a8:	01800284 	movi	r6,10
 10044ac:	000f883a 	mov	r7,zero
 10044b0:	1006d580 	call	1006d58 <__multadd>
 10044b4:	d8c00e17 	ldw	r3,56(sp)
 10044b8:	1027883a 	mov	r19,r2
 10044bc:	d8c00f15 	stw	r3,60(sp)
 10044c0:	003cd306 	br	1003810 <_dtoa_r+0x900>

010044c4 <_fflush_r>:
 10044c4:	defffb04 	addi	sp,sp,-20
 10044c8:	dcc00315 	stw	r19,12(sp)
 10044cc:	dc800215 	stw	r18,8(sp)
 10044d0:	dfc00415 	stw	ra,16(sp)
 10044d4:	dc400115 	stw	r17,4(sp)
 10044d8:	dc000015 	stw	r16,0(sp)
 10044dc:	2027883a 	mov	r19,r4
 10044e0:	2825883a 	mov	r18,r5
 10044e4:	20000226 	beq	r4,zero,10044f0 <_fflush_r+0x2c>
 10044e8:	20800e17 	ldw	r2,56(r4)
 10044ec:	10005626 	beq	r2,zero,1004648 <_fflush_r+0x184>
 10044f0:	9100030b 	ldhu	r4,12(r18)
 10044f4:	20ffffcc 	andi	r3,r4,65535
 10044f8:	18e0001c 	xori	r3,r3,32768
 10044fc:	18e00004 	addi	r3,r3,-32768
 1004500:	1880020c 	andi	r2,r3,8
 1004504:	1000261e 	bne	r2,zero,10045a0 <_fflush_r+0xdc>
 1004508:	90c00117 	ldw	r3,4(r18)
 100450c:	20820014 	ori	r2,r4,2048
 1004510:	9080030d 	sth	r2,12(r18)
 1004514:	1009883a 	mov	r4,r2
 1004518:	00c0400e 	bge	zero,r3,100461c <_fflush_r+0x158>
 100451c:	92000a17 	ldw	r8,40(r18)
 1004520:	40004026 	beq	r8,zero,1004624 <_fflush_r+0x160>
 1004524:	2084000c 	andi	r2,r4,4096
 1004528:	10005326 	beq	r2,zero,1004678 <_fflush_r+0x1b4>
 100452c:	94001417 	ldw	r16,80(r18)
 1004530:	9080030b 	ldhu	r2,12(r18)
 1004534:	1080010c 	andi	r2,r2,4
 1004538:	1000481e 	bne	r2,zero,100465c <_fflush_r+0x198>
 100453c:	91400717 	ldw	r5,28(r18)
 1004540:	9809883a 	mov	r4,r19
 1004544:	800d883a 	mov	r6,r16
 1004548:	000f883a 	mov	r7,zero
 100454c:	403ee83a 	callr	r8
 1004550:	8080261e 	bne	r16,r2,10045ec <_fflush_r+0x128>
 1004554:	9080030b 	ldhu	r2,12(r18)
 1004558:	91000417 	ldw	r4,16(r18)
 100455c:	90000115 	stw	zero,4(r18)
 1004560:	10bdffcc 	andi	r2,r2,63487
 1004564:	10ffffcc 	andi	r3,r2,65535
 1004568:	18c4000c 	andi	r3,r3,4096
 100456c:	9080030d 	sth	r2,12(r18)
 1004570:	91000015 	stw	r4,0(r18)
 1004574:	18002b26 	beq	r3,zero,1004624 <_fflush_r+0x160>
 1004578:	0007883a 	mov	r3,zero
 100457c:	1805883a 	mov	r2,r3
 1004580:	94001415 	stw	r16,80(r18)
 1004584:	dfc00417 	ldw	ra,16(sp)
 1004588:	dcc00317 	ldw	r19,12(sp)
 100458c:	dc800217 	ldw	r18,8(sp)
 1004590:	dc400117 	ldw	r17,4(sp)
 1004594:	dc000017 	ldw	r16,0(sp)
 1004598:	dec00504 	addi	sp,sp,20
 100459c:	f800283a 	ret
 10045a0:	94400417 	ldw	r17,16(r18)
 10045a4:	88001f26 	beq	r17,zero,1004624 <_fflush_r+0x160>
 10045a8:	90800017 	ldw	r2,0(r18)
 10045ac:	18c000cc 	andi	r3,r3,3
 10045b0:	94400015 	stw	r17,0(r18)
 10045b4:	1461c83a 	sub	r16,r2,r17
 10045b8:	18002526 	beq	r3,zero,1004650 <_fflush_r+0x18c>
 10045bc:	0005883a 	mov	r2,zero
 10045c0:	90800215 	stw	r2,8(r18)
 10045c4:	0400170e 	bge	zero,r16,1004624 <_fflush_r+0x160>
 10045c8:	90c00917 	ldw	r3,36(r18)
 10045cc:	91400717 	ldw	r5,28(r18)
 10045d0:	880d883a 	mov	r6,r17
 10045d4:	800f883a 	mov	r7,r16
 10045d8:	9809883a 	mov	r4,r19
 10045dc:	183ee83a 	callr	r3
 10045e0:	88a3883a 	add	r17,r17,r2
 10045e4:	80a1c83a 	sub	r16,r16,r2
 10045e8:	00bff616 	blt	zero,r2,10045c4 <_fflush_r+0x100>
 10045ec:	9080030b 	ldhu	r2,12(r18)
 10045f0:	00ffffc4 	movi	r3,-1
 10045f4:	10801014 	ori	r2,r2,64
 10045f8:	9080030d 	sth	r2,12(r18)
 10045fc:	1805883a 	mov	r2,r3
 1004600:	dfc00417 	ldw	ra,16(sp)
 1004604:	dcc00317 	ldw	r19,12(sp)
 1004608:	dc800217 	ldw	r18,8(sp)
 100460c:	dc400117 	ldw	r17,4(sp)
 1004610:	dc000017 	ldw	r16,0(sp)
 1004614:	dec00504 	addi	sp,sp,20
 1004618:	f800283a 	ret
 100461c:	90800f17 	ldw	r2,60(r18)
 1004620:	00bfbe16 	blt	zero,r2,100451c <_fflush_r+0x58>
 1004624:	0007883a 	mov	r3,zero
 1004628:	1805883a 	mov	r2,r3
 100462c:	dfc00417 	ldw	ra,16(sp)
 1004630:	dcc00317 	ldw	r19,12(sp)
 1004634:	dc800217 	ldw	r18,8(sp)
 1004638:	dc400117 	ldw	r17,4(sp)
 100463c:	dc000017 	ldw	r16,0(sp)
 1004640:	dec00504 	addi	sp,sp,20
 1004644:	f800283a 	ret
 1004648:	100475c0 	call	100475c <__sinit>
 100464c:	003fa806 	br	10044f0 <_fflush_r+0x2c>
 1004650:	90800517 	ldw	r2,20(r18)
 1004654:	90800215 	stw	r2,8(r18)
 1004658:	003fda06 	br	10045c4 <_fflush_r+0x100>
 100465c:	90800117 	ldw	r2,4(r18)
 1004660:	90c00c17 	ldw	r3,48(r18)
 1004664:	80a1c83a 	sub	r16,r16,r2
 1004668:	183fb426 	beq	r3,zero,100453c <_fflush_r+0x78>
 100466c:	90800f17 	ldw	r2,60(r18)
 1004670:	80a1c83a 	sub	r16,r16,r2
 1004674:	003fb106 	br	100453c <_fflush_r+0x78>
 1004678:	91400717 	ldw	r5,28(r18)
 100467c:	9809883a 	mov	r4,r19
 1004680:	000d883a 	mov	r6,zero
 1004684:	01c00044 	movi	r7,1
 1004688:	403ee83a 	callr	r8
 100468c:	1021883a 	mov	r16,r2
 1004690:	00bfffc4 	movi	r2,-1
 1004694:	80800226 	beq	r16,r2,10046a0 <_fflush_r+0x1dc>
 1004698:	92000a17 	ldw	r8,40(r18)
 100469c:	003fa406 	br	1004530 <_fflush_r+0x6c>
 10046a0:	98c00017 	ldw	r3,0(r19)
 10046a4:	00800744 	movi	r2,29
 10046a8:	18bfde26 	beq	r3,r2,1004624 <_fflush_r+0x160>
 10046ac:	9080030b 	ldhu	r2,12(r18)
 10046b0:	8007883a 	mov	r3,r16
 10046b4:	10801014 	ori	r2,r2,64
 10046b8:	9080030d 	sth	r2,12(r18)
 10046bc:	003fcf06 	br	10045fc <_fflush_r+0x138>

010046c0 <fflush>:
 10046c0:	01404034 	movhi	r5,256
 10046c4:	29513104 	addi	r5,r5,17604
 10046c8:	2007883a 	mov	r3,r4
 10046cc:	20000526 	beq	r4,zero,10046e4 <fflush+0x24>
 10046d0:	00804074 	movhi	r2,257
 10046d4:	10817b04 	addi	r2,r2,1516
 10046d8:	11000017 	ldw	r4,0(r2)
 10046dc:	180b883a 	mov	r5,r3
 10046e0:	10044c41 	jmpi	10044c4 <_fflush_r>
 10046e4:	00804074 	movhi	r2,257
 10046e8:	10817c04 	addi	r2,r2,1520
 10046ec:	11000017 	ldw	r4,0(r2)
 10046f0:	10052901 	jmpi	1005290 <_fwalk_reent>

010046f4 <std>:
 10046f4:	00804034 	movhi	r2,256
 10046f8:	109e5604 	addi	r2,r2,31064
 10046fc:	20800b15 	stw	r2,44(r4)
 1004700:	00804034 	movhi	r2,256
 1004704:	109e9104 	addi	r2,r2,31300
 1004708:	20800815 	stw	r2,32(r4)
 100470c:	00c04034 	movhi	r3,256
 1004710:	18de7204 	addi	r3,r3,31176
 1004714:	00804034 	movhi	r2,256
 1004718:	109e5804 	addi	r2,r2,31072
 100471c:	2140030d 	sth	r5,12(r4)
 1004720:	2180038d 	sth	r6,14(r4)
 1004724:	20c00915 	stw	r3,36(r4)
 1004728:	20800a15 	stw	r2,40(r4)
 100472c:	20000015 	stw	zero,0(r4)
 1004730:	20000115 	stw	zero,4(r4)
 1004734:	20000215 	stw	zero,8(r4)
 1004738:	20000415 	stw	zero,16(r4)
 100473c:	20000515 	stw	zero,20(r4)
 1004740:	20000615 	stw	zero,24(r4)
 1004744:	21000715 	stw	r4,28(r4)
 1004748:	f800283a 	ret

0100474c <__sfp_lock_acquire>:
 100474c:	f800283a 	ret

01004750 <__sfp_lock_release>:
 1004750:	f800283a 	ret

01004754 <__sinit_lock_acquire>:
 1004754:	f800283a 	ret

01004758 <__sinit_lock_release>:
 1004758:	f800283a 	ret

0100475c <__sinit>:
 100475c:	20800e17 	ldw	r2,56(r4)
 1004760:	defffd04 	addi	sp,sp,-12
 1004764:	dc400115 	stw	r17,4(sp)
 1004768:	dc000015 	stw	r16,0(sp)
 100476c:	dfc00215 	stw	ra,8(sp)
 1004770:	04400044 	movi	r17,1
 1004774:	01400104 	movi	r5,4
 1004778:	000d883a 	mov	r6,zero
 100477c:	2021883a 	mov	r16,r4
 1004780:	2200bb04 	addi	r8,r4,748
 1004784:	200f883a 	mov	r7,r4
 1004788:	10000526 	beq	r2,zero,10047a0 <__sinit+0x44>
 100478c:	dfc00217 	ldw	ra,8(sp)
 1004790:	dc400117 	ldw	r17,4(sp)
 1004794:	dc000017 	ldw	r16,0(sp)
 1004798:	dec00304 	addi	sp,sp,12
 100479c:	f800283a 	ret
 10047a0:	21000117 	ldw	r4,4(r4)
 10047a4:	00804034 	movhi	r2,256
 10047a8:	10921004 	addi	r2,r2,18496
 10047ac:	00c000c4 	movi	r3,3
 10047b0:	80800f15 	stw	r2,60(r16)
 10047b4:	80c0b915 	stw	r3,740(r16)
 10047b8:	8200ba15 	stw	r8,744(r16)
 10047bc:	84400e15 	stw	r17,56(r16)
 10047c0:	8000b815 	stw	zero,736(r16)
 10047c4:	10046f40 	call	10046f4 <std>
 10047c8:	81000217 	ldw	r4,8(r16)
 10047cc:	880d883a 	mov	r6,r17
 10047d0:	800f883a 	mov	r7,r16
 10047d4:	01400284 	movi	r5,10
 10047d8:	10046f40 	call	10046f4 <std>
 10047dc:	81000317 	ldw	r4,12(r16)
 10047e0:	800f883a 	mov	r7,r16
 10047e4:	01400484 	movi	r5,18
 10047e8:	01800084 	movi	r6,2
 10047ec:	dfc00217 	ldw	ra,8(sp)
 10047f0:	dc400117 	ldw	r17,4(sp)
 10047f4:	dc000017 	ldw	r16,0(sp)
 10047f8:	dec00304 	addi	sp,sp,12
 10047fc:	10046f41 	jmpi	10046f4 <std>

01004800 <__fp_lock>:
 1004800:	0005883a 	mov	r2,zero
 1004804:	f800283a 	ret

01004808 <__fp_unlock>:
 1004808:	0005883a 	mov	r2,zero
 100480c:	f800283a 	ret

01004810 <__fp_unlock_all>:
 1004810:	00804074 	movhi	r2,257
 1004814:	10817b04 	addi	r2,r2,1516
 1004818:	11000017 	ldw	r4,0(r2)
 100481c:	01404034 	movhi	r5,256
 1004820:	29520204 	addi	r5,r5,18440
 1004824:	10053581 	jmpi	1005358 <_fwalk>

01004828 <__fp_lock_all>:
 1004828:	00804074 	movhi	r2,257
 100482c:	10817b04 	addi	r2,r2,1516
 1004830:	11000017 	ldw	r4,0(r2)
 1004834:	01404034 	movhi	r5,256
 1004838:	29520004 	addi	r5,r5,18432
 100483c:	10053581 	jmpi	1005358 <_fwalk>

01004840 <_cleanup_r>:
 1004840:	01404034 	movhi	r5,256
 1004844:	295fd604 	addi	r5,r5,32600
 1004848:	10053581 	jmpi	1005358 <_fwalk>

0100484c <_cleanup>:
 100484c:	00804074 	movhi	r2,257
 1004850:	10817c04 	addi	r2,r2,1520
 1004854:	11000017 	ldw	r4,0(r2)
 1004858:	10048401 	jmpi	1004840 <_cleanup_r>

0100485c <__sfmoreglue>:
 100485c:	defffc04 	addi	sp,sp,-16
 1004860:	dc400115 	stw	r17,4(sp)
 1004864:	2c401724 	muli	r17,r5,92
 1004868:	dc800215 	stw	r18,8(sp)
 100486c:	2825883a 	mov	r18,r5
 1004870:	89400304 	addi	r5,r17,12
 1004874:	dc000015 	stw	r16,0(sp)
 1004878:	dfc00315 	stw	ra,12(sp)
 100487c:	10056680 	call	1005668 <_malloc_r>
 1004880:	0021883a 	mov	r16,zero
 1004884:	880d883a 	mov	r6,r17
 1004888:	000b883a 	mov	r5,zero
 100488c:	10000626 	beq	r2,zero,10048a8 <__sfmoreglue+0x4c>
 1004890:	11000304 	addi	r4,r2,12
 1004894:	14800115 	stw	r18,4(r2)
 1004898:	10000015 	stw	zero,0(r2)
 100489c:	11000215 	stw	r4,8(r2)
 10048a0:	1021883a 	mov	r16,r2
 10048a4:	100600c0 	call	100600c <memset>
 10048a8:	8005883a 	mov	r2,r16
 10048ac:	dfc00317 	ldw	ra,12(sp)
 10048b0:	dc800217 	ldw	r18,8(sp)
 10048b4:	dc400117 	ldw	r17,4(sp)
 10048b8:	dc000017 	ldw	r16,0(sp)
 10048bc:	dec00404 	addi	sp,sp,16
 10048c0:	f800283a 	ret

010048c4 <__sfp>:
 10048c4:	defffd04 	addi	sp,sp,-12
 10048c8:	00804074 	movhi	r2,257
 10048cc:	10817c04 	addi	r2,r2,1520
 10048d0:	dc000015 	stw	r16,0(sp)
 10048d4:	14000017 	ldw	r16,0(r2)
 10048d8:	dc400115 	stw	r17,4(sp)
 10048dc:	dfc00215 	stw	ra,8(sp)
 10048e0:	80800e17 	ldw	r2,56(r16)
 10048e4:	2023883a 	mov	r17,r4
 10048e8:	10002626 	beq	r2,zero,1004984 <__sfp+0xc0>
 10048ec:	8400b804 	addi	r16,r16,736
 10048f0:	80800117 	ldw	r2,4(r16)
 10048f4:	81000217 	ldw	r4,8(r16)
 10048f8:	10ffffc4 	addi	r3,r2,-1
 10048fc:	18000916 	blt	r3,zero,1004924 <__sfp+0x60>
 1004900:	2080030f 	ldh	r2,12(r4)
 1004904:	10000b26 	beq	r2,zero,1004934 <__sfp+0x70>
 1004908:	017fffc4 	movi	r5,-1
 100490c:	00000206 	br	1004918 <__sfp+0x54>
 1004910:	2080030f 	ldh	r2,12(r4)
 1004914:	10000726 	beq	r2,zero,1004934 <__sfp+0x70>
 1004918:	18ffffc4 	addi	r3,r3,-1
 100491c:	21001704 	addi	r4,r4,92
 1004920:	197ffb1e 	bne	r3,r5,1004910 <__sfp+0x4c>
 1004924:	80800017 	ldw	r2,0(r16)
 1004928:	10001926 	beq	r2,zero,1004990 <__sfp+0xcc>
 100492c:	1021883a 	mov	r16,r2
 1004930:	003fef06 	br	10048f0 <__sfp+0x2c>
 1004934:	00bfffc4 	movi	r2,-1
 1004938:	00c00044 	movi	r3,1
 100493c:	2080038d 	sth	r2,14(r4)
 1004940:	20c0030d 	sth	r3,12(r4)
 1004944:	20000015 	stw	zero,0(r4)
 1004948:	20000215 	stw	zero,8(r4)
 100494c:	20000115 	stw	zero,4(r4)
 1004950:	20000415 	stw	zero,16(r4)
 1004954:	20000515 	stw	zero,20(r4)
 1004958:	20000615 	stw	zero,24(r4)
 100495c:	20000c15 	stw	zero,48(r4)
 1004960:	20000d15 	stw	zero,52(r4)
 1004964:	20001115 	stw	zero,68(r4)
 1004968:	20001215 	stw	zero,72(r4)
 100496c:	2005883a 	mov	r2,r4
 1004970:	dfc00217 	ldw	ra,8(sp)
 1004974:	dc400117 	ldw	r17,4(sp)
 1004978:	dc000017 	ldw	r16,0(sp)
 100497c:	dec00304 	addi	sp,sp,12
 1004980:	f800283a 	ret
 1004984:	8009883a 	mov	r4,r16
 1004988:	100475c0 	call	100475c <__sinit>
 100498c:	003fd706 	br	10048ec <__sfp+0x28>
 1004990:	8809883a 	mov	r4,r17
 1004994:	01400104 	movi	r5,4
 1004998:	100485c0 	call	100485c <__sfmoreglue>
 100499c:	80800015 	stw	r2,0(r16)
 10049a0:	103fe21e 	bne	r2,zero,100492c <__sfp+0x68>
 10049a4:	00800304 	movi	r2,12
 10049a8:	0009883a 	mov	r4,zero
 10049ac:	88800015 	stw	r2,0(r17)
 10049b0:	003fee06 	br	100496c <__sfp+0xa8>

010049b4 <_malloc_trim_r>:
 10049b4:	defffb04 	addi	sp,sp,-20
 10049b8:	dcc00315 	stw	r19,12(sp)
 10049bc:	04c04074 	movhi	r19,257
 10049c0:	9cfb7e04 	addi	r19,r19,-4616
 10049c4:	dc800215 	stw	r18,8(sp)
 10049c8:	dc400115 	stw	r17,4(sp)
 10049cc:	dc000015 	stw	r16,0(sp)
 10049d0:	2823883a 	mov	r17,r5
 10049d4:	2025883a 	mov	r18,r4
 10049d8:	dfc00415 	stw	ra,16(sp)
 10049dc:	100adb40 	call	100adb4 <__malloc_lock>
 10049e0:	98800217 	ldw	r2,8(r19)
 10049e4:	9009883a 	mov	r4,r18
 10049e8:	000b883a 	mov	r5,zero
 10049ec:	10c00117 	ldw	r3,4(r2)
 10049f0:	00bfff04 	movi	r2,-4
 10049f4:	18a0703a 	and	r16,r3,r2
 10049f8:	8463c83a 	sub	r17,r16,r17
 10049fc:	8c43fbc4 	addi	r17,r17,4079
 1004a00:	8822d33a 	srli	r17,r17,12
 1004a04:	0083ffc4 	movi	r2,4095
 1004a08:	8c7fffc4 	addi	r17,r17,-1
 1004a0c:	8822933a 	slli	r17,r17,12
 1004a10:	1440060e 	bge	r2,r17,1004a2c <_malloc_trim_r+0x78>
 1004a14:	10078e80 	call	10078e8 <_sbrk_r>
 1004a18:	98c00217 	ldw	r3,8(r19)
 1004a1c:	9009883a 	mov	r4,r18
 1004a20:	044bc83a 	sub	r5,zero,r17
 1004a24:	80c7883a 	add	r3,r16,r3
 1004a28:	10c00926 	beq	r2,r3,1004a50 <_malloc_trim_r+0x9c>
 1004a2c:	100add40 	call	100add4 <__malloc_unlock>
 1004a30:	0005883a 	mov	r2,zero
 1004a34:	dfc00417 	ldw	ra,16(sp)
 1004a38:	dcc00317 	ldw	r19,12(sp)
 1004a3c:	dc800217 	ldw	r18,8(sp)
 1004a40:	dc400117 	ldw	r17,4(sp)
 1004a44:	dc000017 	ldw	r16,0(sp)
 1004a48:	dec00504 	addi	sp,sp,20
 1004a4c:	f800283a 	ret
 1004a50:	9009883a 	mov	r4,r18
 1004a54:	10078e80 	call	10078e8 <_sbrk_r>
 1004a58:	844dc83a 	sub	r6,r16,r17
 1004a5c:	00ffffc4 	movi	r3,-1
 1004a60:	9009883a 	mov	r4,r18
 1004a64:	000b883a 	mov	r5,zero
 1004a68:	01c04074 	movhi	r7,257
 1004a6c:	39c8af04 	addi	r7,r7,8892
 1004a70:	31800054 	ori	r6,r6,1
 1004a74:	10c00926 	beq	r2,r3,1004a9c <_malloc_trim_r+0xe8>
 1004a78:	38800017 	ldw	r2,0(r7)
 1004a7c:	98c00217 	ldw	r3,8(r19)
 1004a80:	9009883a 	mov	r4,r18
 1004a84:	1445c83a 	sub	r2,r2,r17
 1004a88:	38800015 	stw	r2,0(r7)
 1004a8c:	19800115 	stw	r6,4(r3)
 1004a90:	100add40 	call	100add4 <__malloc_unlock>
 1004a94:	00800044 	movi	r2,1
 1004a98:	003fe606 	br	1004a34 <_malloc_trim_r+0x80>
 1004a9c:	10078e80 	call	10078e8 <_sbrk_r>
 1004aa0:	99800217 	ldw	r6,8(r19)
 1004aa4:	100f883a 	mov	r7,r2
 1004aa8:	9009883a 	mov	r4,r18
 1004aac:	1187c83a 	sub	r3,r2,r6
 1004ab0:	008003c4 	movi	r2,15
 1004ab4:	19400054 	ori	r5,r3,1
 1004ab8:	10ffdc0e 	bge	r2,r3,1004a2c <_malloc_trim_r+0x78>
 1004abc:	00804074 	movhi	r2,257
 1004ac0:	10818004 	addi	r2,r2,1536
 1004ac4:	10c00017 	ldw	r3,0(r2)
 1004ac8:	00804074 	movhi	r2,257
 1004acc:	1088af04 	addi	r2,r2,8892
 1004ad0:	31400115 	stw	r5,4(r6)
 1004ad4:	38c7c83a 	sub	r3,r7,r3
 1004ad8:	10c00015 	stw	r3,0(r2)
 1004adc:	003fd306 	br	1004a2c <_malloc_trim_r+0x78>

01004ae0 <_free_r>:
 1004ae0:	defffd04 	addi	sp,sp,-12
 1004ae4:	dc400115 	stw	r17,4(sp)
 1004ae8:	dc000015 	stw	r16,0(sp)
 1004aec:	dfc00215 	stw	ra,8(sp)
 1004af0:	2821883a 	mov	r16,r5
 1004af4:	2023883a 	mov	r17,r4
 1004af8:	28005a26 	beq	r5,zero,1004c64 <_free_r+0x184>
 1004afc:	100adb40 	call	100adb4 <__malloc_lock>
 1004b00:	823ffe04 	addi	r8,r16,-8
 1004b04:	41400117 	ldw	r5,4(r8)
 1004b08:	00bfff84 	movi	r2,-2
 1004b0c:	02804074 	movhi	r10,257
 1004b10:	52bb7e04 	addi	r10,r10,-4616
 1004b14:	288e703a 	and	r7,r5,r2
 1004b18:	41cd883a 	add	r6,r8,r7
 1004b1c:	30c00117 	ldw	r3,4(r6)
 1004b20:	51000217 	ldw	r4,8(r10)
 1004b24:	00bfff04 	movi	r2,-4
 1004b28:	1892703a 	and	r9,r3,r2
 1004b2c:	5017883a 	mov	r11,r10
 1004b30:	31006726 	beq	r6,r4,1004cd0 <_free_r+0x1f0>
 1004b34:	2880004c 	andi	r2,r5,1
 1004b38:	1005003a 	cmpeq	r2,r2,zero
 1004b3c:	32400115 	stw	r9,4(r6)
 1004b40:	10001a1e 	bne	r2,zero,1004bac <_free_r+0xcc>
 1004b44:	000b883a 	mov	r5,zero
 1004b48:	3247883a 	add	r3,r6,r9
 1004b4c:	18800117 	ldw	r2,4(r3)
 1004b50:	1080004c 	andi	r2,r2,1
 1004b54:	1000231e 	bne	r2,zero,1004be4 <_free_r+0x104>
 1004b58:	280ac03a 	cmpne	r5,r5,zero
 1004b5c:	3a4f883a 	add	r7,r7,r9
 1004b60:	2800451e 	bne	r5,zero,1004c78 <_free_r+0x198>
 1004b64:	31000217 	ldw	r4,8(r6)
 1004b68:	00804074 	movhi	r2,257
 1004b6c:	10bb8004 	addi	r2,r2,-4608
 1004b70:	20807b26 	beq	r4,r2,1004d60 <_free_r+0x280>
 1004b74:	30800317 	ldw	r2,12(r6)
 1004b78:	3a07883a 	add	r3,r7,r8
 1004b7c:	19c00015 	stw	r7,0(r3)
 1004b80:	11000215 	stw	r4,8(r2)
 1004b84:	20800315 	stw	r2,12(r4)
 1004b88:	38800054 	ori	r2,r7,1
 1004b8c:	40800115 	stw	r2,4(r8)
 1004b90:	28001a26 	beq	r5,zero,1004bfc <_free_r+0x11c>
 1004b94:	8809883a 	mov	r4,r17
 1004b98:	dfc00217 	ldw	ra,8(sp)
 1004b9c:	dc400117 	ldw	r17,4(sp)
 1004ba0:	dc000017 	ldw	r16,0(sp)
 1004ba4:	dec00304 	addi	sp,sp,12
 1004ba8:	100add41 	jmpi	100add4 <__malloc_unlock>
 1004bac:	80bffe17 	ldw	r2,-8(r16)
 1004bb0:	50c00204 	addi	r3,r10,8
 1004bb4:	4091c83a 	sub	r8,r8,r2
 1004bb8:	41000217 	ldw	r4,8(r8)
 1004bbc:	388f883a 	add	r7,r7,r2
 1004bc0:	20c06126 	beq	r4,r3,1004d48 <_free_r+0x268>
 1004bc4:	40800317 	ldw	r2,12(r8)
 1004bc8:	3247883a 	add	r3,r6,r9
 1004bcc:	000b883a 	mov	r5,zero
 1004bd0:	11000215 	stw	r4,8(r2)
 1004bd4:	20800315 	stw	r2,12(r4)
 1004bd8:	18800117 	ldw	r2,4(r3)
 1004bdc:	1080004c 	andi	r2,r2,1
 1004be0:	103fdd26 	beq	r2,zero,1004b58 <_free_r+0x78>
 1004be4:	38800054 	ori	r2,r7,1
 1004be8:	3a07883a 	add	r3,r7,r8
 1004bec:	280ac03a 	cmpne	r5,r5,zero
 1004bf0:	40800115 	stw	r2,4(r8)
 1004bf4:	19c00015 	stw	r7,0(r3)
 1004bf8:	283fe61e 	bne	r5,zero,1004b94 <_free_r+0xb4>
 1004bfc:	00807fc4 	movi	r2,511
 1004c00:	11c01f2e 	bgeu	r2,r7,1004c80 <_free_r+0x1a0>
 1004c04:	3806d27a 	srli	r3,r7,9
 1004c08:	1800481e 	bne	r3,zero,1004d2c <_free_r+0x24c>
 1004c0c:	3804d0fa 	srli	r2,r7,3
 1004c10:	100690fa 	slli	r3,r2,3
 1004c14:	1acd883a 	add	r6,r3,r11
 1004c18:	31400217 	ldw	r5,8(r6)
 1004c1c:	31405926 	beq	r6,r5,1004d84 <_free_r+0x2a4>
 1004c20:	28800117 	ldw	r2,4(r5)
 1004c24:	00ffff04 	movi	r3,-4
 1004c28:	10c4703a 	and	r2,r2,r3
 1004c2c:	3880022e 	bgeu	r7,r2,1004c38 <_free_r+0x158>
 1004c30:	29400217 	ldw	r5,8(r5)
 1004c34:	317ffa1e 	bne	r6,r5,1004c20 <_free_r+0x140>
 1004c38:	29800317 	ldw	r6,12(r5)
 1004c3c:	41800315 	stw	r6,12(r8)
 1004c40:	41400215 	stw	r5,8(r8)
 1004c44:	8809883a 	mov	r4,r17
 1004c48:	2a000315 	stw	r8,12(r5)
 1004c4c:	32000215 	stw	r8,8(r6)
 1004c50:	dfc00217 	ldw	ra,8(sp)
 1004c54:	dc400117 	ldw	r17,4(sp)
 1004c58:	dc000017 	ldw	r16,0(sp)
 1004c5c:	dec00304 	addi	sp,sp,12
 1004c60:	100add41 	jmpi	100add4 <__malloc_unlock>
 1004c64:	dfc00217 	ldw	ra,8(sp)
 1004c68:	dc400117 	ldw	r17,4(sp)
 1004c6c:	dc000017 	ldw	r16,0(sp)
 1004c70:	dec00304 	addi	sp,sp,12
 1004c74:	f800283a 	ret
 1004c78:	31000217 	ldw	r4,8(r6)
 1004c7c:	003fbd06 	br	1004b74 <_free_r+0x94>
 1004c80:	3806d0fa 	srli	r3,r7,3
 1004c84:	00800044 	movi	r2,1
 1004c88:	51400117 	ldw	r5,4(r10)
 1004c8c:	180890fa 	slli	r4,r3,3
 1004c90:	1807d0ba 	srai	r3,r3,2
 1004c94:	22c9883a 	add	r4,r4,r11
 1004c98:	21800217 	ldw	r6,8(r4)
 1004c9c:	10c4983a 	sll	r2,r2,r3
 1004ca0:	41000315 	stw	r4,12(r8)
 1004ca4:	41800215 	stw	r6,8(r8)
 1004ca8:	288ab03a 	or	r5,r5,r2
 1004cac:	22000215 	stw	r8,8(r4)
 1004cb0:	8809883a 	mov	r4,r17
 1004cb4:	51400115 	stw	r5,4(r10)
 1004cb8:	32000315 	stw	r8,12(r6)
 1004cbc:	dfc00217 	ldw	ra,8(sp)
 1004cc0:	dc400117 	ldw	r17,4(sp)
 1004cc4:	dc000017 	ldw	r16,0(sp)
 1004cc8:	dec00304 	addi	sp,sp,12
 1004ccc:	100add41 	jmpi	100add4 <__malloc_unlock>
 1004cd0:	2880004c 	andi	r2,r5,1
 1004cd4:	3a4d883a 	add	r6,r7,r9
 1004cd8:	1000071e 	bne	r2,zero,1004cf8 <_free_r+0x218>
 1004cdc:	80bffe17 	ldw	r2,-8(r16)
 1004ce0:	4091c83a 	sub	r8,r8,r2
 1004ce4:	41000317 	ldw	r4,12(r8)
 1004ce8:	40c00217 	ldw	r3,8(r8)
 1004cec:	308d883a 	add	r6,r6,r2
 1004cf0:	20c00215 	stw	r3,8(r4)
 1004cf4:	19000315 	stw	r4,12(r3)
 1004cf8:	00804074 	movhi	r2,257
 1004cfc:	10817f04 	addi	r2,r2,1532
 1004d00:	11000017 	ldw	r4,0(r2)
 1004d04:	30c00054 	ori	r3,r6,1
 1004d08:	52000215 	stw	r8,8(r10)
 1004d0c:	40c00115 	stw	r3,4(r8)
 1004d10:	313fa036 	bltu	r6,r4,1004b94 <_free_r+0xb4>
 1004d14:	00804074 	movhi	r2,257
 1004d18:	1088a504 	addi	r2,r2,8852
 1004d1c:	11400017 	ldw	r5,0(r2)
 1004d20:	8809883a 	mov	r4,r17
 1004d24:	10049b40 	call	10049b4 <_malloc_trim_r>
 1004d28:	003f9a06 	br	1004b94 <_free_r+0xb4>
 1004d2c:	00800104 	movi	r2,4
 1004d30:	10c0072e 	bgeu	r2,r3,1004d50 <_free_r+0x270>
 1004d34:	00800504 	movi	r2,20
 1004d38:	10c01936 	bltu	r2,r3,1004da0 <_free_r+0x2c0>
 1004d3c:	188016c4 	addi	r2,r3,91
 1004d40:	100690fa 	slli	r3,r2,3
 1004d44:	003fb306 	br	1004c14 <_free_r+0x134>
 1004d48:	01400044 	movi	r5,1
 1004d4c:	003f7e06 	br	1004b48 <_free_r+0x68>
 1004d50:	3804d1ba 	srli	r2,r7,6
 1004d54:	10800e04 	addi	r2,r2,56
 1004d58:	100690fa 	slli	r3,r2,3
 1004d5c:	003fad06 	br	1004c14 <_free_r+0x134>
 1004d60:	22000315 	stw	r8,12(r4)
 1004d64:	22000215 	stw	r8,8(r4)
 1004d68:	3a05883a 	add	r2,r7,r8
 1004d6c:	38c00054 	ori	r3,r7,1
 1004d70:	11c00015 	stw	r7,0(r2)
 1004d74:	41000215 	stw	r4,8(r8)
 1004d78:	40c00115 	stw	r3,4(r8)
 1004d7c:	41000315 	stw	r4,12(r8)
 1004d80:	003f8406 	br	1004b94 <_free_r+0xb4>
 1004d84:	1005d0ba 	srai	r2,r2,2
 1004d88:	00c00044 	movi	r3,1
 1004d8c:	51000117 	ldw	r4,4(r10)
 1004d90:	1886983a 	sll	r3,r3,r2
 1004d94:	20c8b03a 	or	r4,r4,r3
 1004d98:	51000115 	stw	r4,4(r10)
 1004d9c:	003fa706 	br	1004c3c <_free_r+0x15c>
 1004da0:	00801504 	movi	r2,84
 1004da4:	10c00436 	bltu	r2,r3,1004db8 <_free_r+0x2d8>
 1004da8:	3804d33a 	srli	r2,r7,12
 1004dac:	10801b84 	addi	r2,r2,110
 1004db0:	100690fa 	slli	r3,r2,3
 1004db4:	003f9706 	br	1004c14 <_free_r+0x134>
 1004db8:	00805504 	movi	r2,340
 1004dbc:	10c00436 	bltu	r2,r3,1004dd0 <_free_r+0x2f0>
 1004dc0:	3804d3fa 	srli	r2,r7,15
 1004dc4:	10801dc4 	addi	r2,r2,119
 1004dc8:	100690fa 	slli	r3,r2,3
 1004dcc:	003f9106 	br	1004c14 <_free_r+0x134>
 1004dd0:	00815504 	movi	r2,1364
 1004dd4:	10c0032e 	bgeu	r2,r3,1004de4 <_free_r+0x304>
 1004dd8:	00801f84 	movi	r2,126
 1004ddc:	00c0fc04 	movi	r3,1008
 1004de0:	003f8c06 	br	1004c14 <_free_r+0x134>
 1004de4:	3804d4ba 	srli	r2,r7,18
 1004de8:	10801f04 	addi	r2,r2,124
 1004dec:	100690fa 	slli	r3,r2,3
 1004df0:	003f8806 	br	1004c14 <_free_r+0x134>

01004df4 <__sfvwrite_r>:
 1004df4:	30800217 	ldw	r2,8(r6)
 1004df8:	defff504 	addi	sp,sp,-44
 1004dfc:	df000915 	stw	fp,36(sp)
 1004e00:	dd800715 	stw	r22,28(sp)
 1004e04:	dc800315 	stw	r18,12(sp)
 1004e08:	dfc00a15 	stw	ra,40(sp)
 1004e0c:	ddc00815 	stw	r23,32(sp)
 1004e10:	dd400615 	stw	r21,24(sp)
 1004e14:	dd000515 	stw	r20,20(sp)
 1004e18:	dcc00415 	stw	r19,16(sp)
 1004e1c:	dc400215 	stw	r17,8(sp)
 1004e20:	dc000115 	stw	r16,4(sp)
 1004e24:	302d883a 	mov	r22,r6
 1004e28:	2039883a 	mov	fp,r4
 1004e2c:	2825883a 	mov	r18,r5
 1004e30:	10001c26 	beq	r2,zero,1004ea4 <__sfvwrite_r+0xb0>
 1004e34:	29c0030b 	ldhu	r7,12(r5)
 1004e38:	3880020c 	andi	r2,r7,8
 1004e3c:	10002726 	beq	r2,zero,1004edc <__sfvwrite_r+0xe8>
 1004e40:	28800417 	ldw	r2,16(r5)
 1004e44:	10002526 	beq	r2,zero,1004edc <__sfvwrite_r+0xe8>
 1004e48:	3880008c 	andi	r2,r7,2
 1004e4c:	b5400017 	ldw	r21,0(r22)
 1004e50:	10002826 	beq	r2,zero,1004ef4 <__sfvwrite_r+0x100>
 1004e54:	0021883a 	mov	r16,zero
 1004e58:	0023883a 	mov	r17,zero
 1004e5c:	880d883a 	mov	r6,r17
 1004e60:	e009883a 	mov	r4,fp
 1004e64:	00810004 	movi	r2,1024
 1004e68:	80006e26 	beq	r16,zero,1005024 <__sfvwrite_r+0x230>
 1004e6c:	800f883a 	mov	r7,r16
 1004e70:	91400717 	ldw	r5,28(r18)
 1004e74:	1400012e 	bgeu	r2,r16,1004e7c <__sfvwrite_r+0x88>
 1004e78:	100f883a 	mov	r7,r2
 1004e7c:	90c00917 	ldw	r3,36(r18)
 1004e80:	183ee83a 	callr	r3
 1004e84:	1007883a 	mov	r3,r2
 1004e88:	80a1c83a 	sub	r16,r16,r2
 1004e8c:	88a3883a 	add	r17,r17,r2
 1004e90:	00806d0e 	bge	zero,r2,1005048 <__sfvwrite_r+0x254>
 1004e94:	b0800217 	ldw	r2,8(r22)
 1004e98:	10c5c83a 	sub	r2,r2,r3
 1004e9c:	b0800215 	stw	r2,8(r22)
 1004ea0:	103fee1e 	bne	r2,zero,1004e5c <__sfvwrite_r+0x68>
 1004ea4:	0009883a 	mov	r4,zero
 1004ea8:	2005883a 	mov	r2,r4
 1004eac:	dfc00a17 	ldw	ra,40(sp)
 1004eb0:	df000917 	ldw	fp,36(sp)
 1004eb4:	ddc00817 	ldw	r23,32(sp)
 1004eb8:	dd800717 	ldw	r22,28(sp)
 1004ebc:	dd400617 	ldw	r21,24(sp)
 1004ec0:	dd000517 	ldw	r20,20(sp)
 1004ec4:	dcc00417 	ldw	r19,16(sp)
 1004ec8:	dc800317 	ldw	r18,12(sp)
 1004ecc:	dc400217 	ldw	r17,8(sp)
 1004ed0:	dc000117 	ldw	r16,4(sp)
 1004ed4:	dec00b04 	addi	sp,sp,44
 1004ed8:	f800283a 	ret
 1004edc:	1002bbc0 	call	1002bbc <__swsetup_r>
 1004ee0:	1000e41e 	bne	r2,zero,1005274 <__sfvwrite_r+0x480>
 1004ee4:	91c0030b 	ldhu	r7,12(r18)
 1004ee8:	b5400017 	ldw	r21,0(r22)
 1004eec:	3880008c 	andi	r2,r7,2
 1004ef0:	103fd81e 	bne	r2,zero,1004e54 <__sfvwrite_r+0x60>
 1004ef4:	3880004c 	andi	r2,r7,1
 1004ef8:	1005003a 	cmpeq	r2,r2,zero
 1004efc:	10005726 	beq	r2,zero,100505c <__sfvwrite_r+0x268>
 1004f00:	0029883a 	mov	r20,zero
 1004f04:	002f883a 	mov	r23,zero
 1004f08:	a0004226 	beq	r20,zero,1005014 <__sfvwrite_r+0x220>
 1004f0c:	3880800c 	andi	r2,r7,512
 1004f10:	94000217 	ldw	r16,8(r18)
 1004f14:	10008b26 	beq	r2,zero,1005144 <__sfvwrite_r+0x350>
 1004f18:	800d883a 	mov	r6,r16
 1004f1c:	a400a536 	bltu	r20,r16,10051b4 <__sfvwrite_r+0x3c0>
 1004f20:	3881200c 	andi	r2,r7,1152
 1004f24:	10002726 	beq	r2,zero,1004fc4 <__sfvwrite_r+0x1d0>
 1004f28:	90800517 	ldw	r2,20(r18)
 1004f2c:	92000417 	ldw	r8,16(r18)
 1004f30:	91400017 	ldw	r5,0(r18)
 1004f34:	1087883a 	add	r3,r2,r2
 1004f38:	1887883a 	add	r3,r3,r2
 1004f3c:	1808d7fa 	srli	r4,r3,31
 1004f40:	2a21c83a 	sub	r16,r5,r8
 1004f44:	80800044 	addi	r2,r16,1
 1004f48:	20c9883a 	add	r4,r4,r3
 1004f4c:	2027d07a 	srai	r19,r4,1
 1004f50:	a085883a 	add	r2,r20,r2
 1004f54:	980d883a 	mov	r6,r19
 1004f58:	9880022e 	bgeu	r19,r2,1004f64 <__sfvwrite_r+0x170>
 1004f5c:	1027883a 	mov	r19,r2
 1004f60:	100d883a 	mov	r6,r2
 1004f64:	3881000c 	andi	r2,r7,1024
 1004f68:	1000b826 	beq	r2,zero,100524c <__sfvwrite_r+0x458>
 1004f6c:	300b883a 	mov	r5,r6
 1004f70:	e009883a 	mov	r4,fp
 1004f74:	10056680 	call	1005668 <_malloc_r>
 1004f78:	10003126 	beq	r2,zero,1005040 <__sfvwrite_r+0x24c>
 1004f7c:	91400417 	ldw	r5,16(r18)
 1004f80:	1009883a 	mov	r4,r2
 1004f84:	800d883a 	mov	r6,r16
 1004f88:	1023883a 	mov	r17,r2
 1004f8c:	1005e8c0 	call	1005e8c <memcpy>
 1004f90:	90c0030b 	ldhu	r3,12(r18)
 1004f94:	00beffc4 	movi	r2,-1025
 1004f98:	1886703a 	and	r3,r3,r2
 1004f9c:	18c02014 	ori	r3,r3,128
 1004fa0:	90c0030d 	sth	r3,12(r18)
 1004fa4:	9c07c83a 	sub	r3,r19,r16
 1004fa8:	8c05883a 	add	r2,r17,r16
 1004fac:	a00d883a 	mov	r6,r20
 1004fb0:	a021883a 	mov	r16,r20
 1004fb4:	90800015 	stw	r2,0(r18)
 1004fb8:	90c00215 	stw	r3,8(r18)
 1004fbc:	94400415 	stw	r17,16(r18)
 1004fc0:	94c00515 	stw	r19,20(r18)
 1004fc4:	91000017 	ldw	r4,0(r18)
 1004fc8:	b80b883a 	mov	r5,r23
 1004fcc:	a023883a 	mov	r17,r20
 1004fd0:	1005f2c0 	call	1005f2c <memmove>
 1004fd4:	90c00217 	ldw	r3,8(r18)
 1004fd8:	90800017 	ldw	r2,0(r18)
 1004fdc:	a027883a 	mov	r19,r20
 1004fe0:	1c07c83a 	sub	r3,r3,r16
 1004fe4:	1405883a 	add	r2,r2,r16
 1004fe8:	90c00215 	stw	r3,8(r18)
 1004fec:	a021883a 	mov	r16,r20
 1004ff0:	90800015 	stw	r2,0(r18)
 1004ff4:	b0800217 	ldw	r2,8(r22)
 1004ff8:	1405c83a 	sub	r2,r2,r16
 1004ffc:	b0800215 	stw	r2,8(r22)
 1005000:	103fa826 	beq	r2,zero,1004ea4 <__sfvwrite_r+0xb0>
 1005004:	a469c83a 	sub	r20,r20,r17
 1005008:	91c0030b 	ldhu	r7,12(r18)
 100500c:	bcef883a 	add	r23,r23,r19
 1005010:	a03fbe1e 	bne	r20,zero,1004f0c <__sfvwrite_r+0x118>
 1005014:	adc00017 	ldw	r23,0(r21)
 1005018:	ad000117 	ldw	r20,4(r21)
 100501c:	ad400204 	addi	r21,r21,8
 1005020:	003fb906 	br	1004f08 <__sfvwrite_r+0x114>
 1005024:	ac400017 	ldw	r17,0(r21)
 1005028:	ac000117 	ldw	r16,4(r21)
 100502c:	ad400204 	addi	r21,r21,8
 1005030:	003f8a06 	br	1004e5c <__sfvwrite_r+0x68>
 1005034:	91400417 	ldw	r5,16(r18)
 1005038:	e009883a 	mov	r4,fp
 100503c:	1004ae00 	call	1004ae0 <_free_r>
 1005040:	00800304 	movi	r2,12
 1005044:	e0800015 	stw	r2,0(fp)
 1005048:	9080030b 	ldhu	r2,12(r18)
 100504c:	013fffc4 	movi	r4,-1
 1005050:	10801014 	ori	r2,r2,64
 1005054:	9080030d 	sth	r2,12(r18)
 1005058:	003f9306 	br	1004ea8 <__sfvwrite_r+0xb4>
 100505c:	0027883a 	mov	r19,zero
 1005060:	002f883a 	mov	r23,zero
 1005064:	d8000015 	stw	zero,0(sp)
 1005068:	0029883a 	mov	r20,zero
 100506c:	98001e26 	beq	r19,zero,10050e8 <__sfvwrite_r+0x2f4>
 1005070:	d8c00017 	ldw	r3,0(sp)
 1005074:	1804c03a 	cmpne	r2,r3,zero
 1005078:	10005e26 	beq	r2,zero,10051f4 <__sfvwrite_r+0x400>
 100507c:	9821883a 	mov	r16,r19
 1005080:	a4c0012e 	bgeu	r20,r19,1005088 <__sfvwrite_r+0x294>
 1005084:	a021883a 	mov	r16,r20
 1005088:	91000017 	ldw	r4,0(r18)
 100508c:	90800417 	ldw	r2,16(r18)
 1005090:	91800217 	ldw	r6,8(r18)
 1005094:	91c00517 	ldw	r7,20(r18)
 1005098:	1100022e 	bgeu	r2,r4,10050a4 <__sfvwrite_r+0x2b0>
 100509c:	31e3883a 	add	r17,r6,r7
 10050a0:	8c001616 	blt	r17,r16,10050fc <__sfvwrite_r+0x308>
 10050a4:	81c03816 	blt	r16,r7,1005188 <__sfvwrite_r+0x394>
 10050a8:	90c00917 	ldw	r3,36(r18)
 10050ac:	91400717 	ldw	r5,28(r18)
 10050b0:	e009883a 	mov	r4,fp
 10050b4:	b80d883a 	mov	r6,r23
 10050b8:	183ee83a 	callr	r3
 10050bc:	1023883a 	mov	r17,r2
 10050c0:	00bfe10e 	bge	zero,r2,1005048 <__sfvwrite_r+0x254>
 10050c4:	a469c83a 	sub	r20,r20,r17
 10050c8:	a0001826 	beq	r20,zero,100512c <__sfvwrite_r+0x338>
 10050cc:	b0800217 	ldw	r2,8(r22)
 10050d0:	1445c83a 	sub	r2,r2,r17
 10050d4:	b0800215 	stw	r2,8(r22)
 10050d8:	103f7226 	beq	r2,zero,1004ea4 <__sfvwrite_r+0xb0>
 10050dc:	9c67c83a 	sub	r19,r19,r17
 10050e0:	bc6f883a 	add	r23,r23,r17
 10050e4:	983fe21e 	bne	r19,zero,1005070 <__sfvwrite_r+0x27c>
 10050e8:	adc00017 	ldw	r23,0(r21)
 10050ec:	acc00117 	ldw	r19,4(r21)
 10050f0:	ad400204 	addi	r21,r21,8
 10050f4:	d8000015 	stw	zero,0(sp)
 10050f8:	003fdc06 	br	100506c <__sfvwrite_r+0x278>
 10050fc:	b80b883a 	mov	r5,r23
 1005100:	880d883a 	mov	r6,r17
 1005104:	1005f2c0 	call	1005f2c <memmove>
 1005108:	90c00017 	ldw	r3,0(r18)
 100510c:	e009883a 	mov	r4,fp
 1005110:	900b883a 	mov	r5,r18
 1005114:	1c47883a 	add	r3,r3,r17
 1005118:	90c00015 	stw	r3,0(r18)
 100511c:	10044c40 	call	10044c4 <_fflush_r>
 1005120:	103fc91e 	bne	r2,zero,1005048 <__sfvwrite_r+0x254>
 1005124:	a469c83a 	sub	r20,r20,r17
 1005128:	a03fe81e 	bne	r20,zero,10050cc <__sfvwrite_r+0x2d8>
 100512c:	e009883a 	mov	r4,fp
 1005130:	900b883a 	mov	r5,r18
 1005134:	10044c40 	call	10044c4 <_fflush_r>
 1005138:	103fc31e 	bne	r2,zero,1005048 <__sfvwrite_r+0x254>
 100513c:	d8000015 	stw	zero,0(sp)
 1005140:	003fe206 	br	10050cc <__sfvwrite_r+0x2d8>
 1005144:	91000017 	ldw	r4,0(r18)
 1005148:	90800417 	ldw	r2,16(r18)
 100514c:	1100022e 	bgeu	r2,r4,1005158 <__sfvwrite_r+0x364>
 1005150:	8023883a 	mov	r17,r16
 1005154:	85003136 	bltu	r16,r20,100521c <__sfvwrite_r+0x428>
 1005158:	91c00517 	ldw	r7,20(r18)
 100515c:	a1c01836 	bltu	r20,r7,10051c0 <__sfvwrite_r+0x3cc>
 1005160:	90c00917 	ldw	r3,36(r18)
 1005164:	91400717 	ldw	r5,28(r18)
 1005168:	e009883a 	mov	r4,fp
 100516c:	b80d883a 	mov	r6,r23
 1005170:	183ee83a 	callr	r3
 1005174:	1021883a 	mov	r16,r2
 1005178:	00bfb30e 	bge	zero,r2,1005048 <__sfvwrite_r+0x254>
 100517c:	1023883a 	mov	r17,r2
 1005180:	1027883a 	mov	r19,r2
 1005184:	003f9b06 	br	1004ff4 <__sfvwrite_r+0x200>
 1005188:	b80b883a 	mov	r5,r23
 100518c:	800d883a 	mov	r6,r16
 1005190:	1005f2c0 	call	1005f2c <memmove>
 1005194:	90c00217 	ldw	r3,8(r18)
 1005198:	90800017 	ldw	r2,0(r18)
 100519c:	8023883a 	mov	r17,r16
 10051a0:	1c07c83a 	sub	r3,r3,r16
 10051a4:	1405883a 	add	r2,r2,r16
 10051a8:	90c00215 	stw	r3,8(r18)
 10051ac:	90800015 	stw	r2,0(r18)
 10051b0:	003fc406 	br	10050c4 <__sfvwrite_r+0x2d0>
 10051b4:	a00d883a 	mov	r6,r20
 10051b8:	a021883a 	mov	r16,r20
 10051bc:	003f8106 	br	1004fc4 <__sfvwrite_r+0x1d0>
 10051c0:	b80b883a 	mov	r5,r23
 10051c4:	a00d883a 	mov	r6,r20
 10051c8:	1005f2c0 	call	1005f2c <memmove>
 10051cc:	90c00217 	ldw	r3,8(r18)
 10051d0:	90800017 	ldw	r2,0(r18)
 10051d4:	a021883a 	mov	r16,r20
 10051d8:	1d07c83a 	sub	r3,r3,r20
 10051dc:	1505883a 	add	r2,r2,r20
 10051e0:	a023883a 	mov	r17,r20
 10051e4:	a027883a 	mov	r19,r20
 10051e8:	90c00215 	stw	r3,8(r18)
 10051ec:	90800015 	stw	r2,0(r18)
 10051f0:	003f8006 	br	1004ff4 <__sfvwrite_r+0x200>
 10051f4:	b809883a 	mov	r4,r23
 10051f8:	01400284 	movi	r5,10
 10051fc:	980d883a 	mov	r6,r19
 1005200:	1005da80 	call	1005da8 <memchr>
 1005204:	10001726 	beq	r2,zero,1005264 <__sfvwrite_r+0x470>
 1005208:	15c5c83a 	sub	r2,r2,r23
 100520c:	15000044 	addi	r20,r2,1
 1005210:	00800044 	movi	r2,1
 1005214:	d8800015 	stw	r2,0(sp)
 1005218:	003f9806 	br	100507c <__sfvwrite_r+0x288>
 100521c:	b80b883a 	mov	r5,r23
 1005220:	800d883a 	mov	r6,r16
 1005224:	1005f2c0 	call	1005f2c <memmove>
 1005228:	90c00017 	ldw	r3,0(r18)
 100522c:	e009883a 	mov	r4,fp
 1005230:	900b883a 	mov	r5,r18
 1005234:	1c07883a 	add	r3,r3,r16
 1005238:	90c00015 	stw	r3,0(r18)
 100523c:	8027883a 	mov	r19,r16
 1005240:	10044c40 	call	10044c4 <_fflush_r>
 1005244:	103f6b26 	beq	r2,zero,1004ff4 <__sfvwrite_r+0x200>
 1005248:	003f7f06 	br	1005048 <__sfvwrite_r+0x254>
 100524c:	400b883a 	mov	r5,r8
 1005250:	e009883a 	mov	r4,fp
 1005254:	10072840 	call	1007284 <_realloc_r>
 1005258:	103f7626 	beq	r2,zero,1005034 <__sfvwrite_r+0x240>
 100525c:	1023883a 	mov	r17,r2
 1005260:	003f5006 	br	1004fa4 <__sfvwrite_r+0x1b0>
 1005264:	00c00044 	movi	r3,1
 1005268:	9d000044 	addi	r20,r19,1
 100526c:	d8c00015 	stw	r3,0(sp)
 1005270:	003f8206 	br	100507c <__sfvwrite_r+0x288>
 1005274:	9080030b 	ldhu	r2,12(r18)
 1005278:	00c00244 	movi	r3,9
 100527c:	013fffc4 	movi	r4,-1
 1005280:	10801014 	ori	r2,r2,64
 1005284:	9080030d 	sth	r2,12(r18)
 1005288:	e0c00015 	stw	r3,0(fp)
 100528c:	003f0606 	br	1004ea8 <__sfvwrite_r+0xb4>

01005290 <_fwalk_reent>:
 1005290:	defff704 	addi	sp,sp,-36
 1005294:	dcc00315 	stw	r19,12(sp)
 1005298:	24c0b804 	addi	r19,r4,736
 100529c:	dd800615 	stw	r22,24(sp)
 10052a0:	dd400515 	stw	r21,20(sp)
 10052a4:	dfc00815 	stw	ra,32(sp)
 10052a8:	ddc00715 	stw	r23,28(sp)
 10052ac:	dd000415 	stw	r20,16(sp)
 10052b0:	dc800215 	stw	r18,8(sp)
 10052b4:	dc400115 	stw	r17,4(sp)
 10052b8:	dc000015 	stw	r16,0(sp)
 10052bc:	202b883a 	mov	r21,r4
 10052c0:	282d883a 	mov	r22,r5
 10052c4:	100474c0 	call	100474c <__sfp_lock_acquire>
 10052c8:	98002126 	beq	r19,zero,1005350 <_fwalk_reent+0xc0>
 10052cc:	002f883a 	mov	r23,zero
 10052d0:	9c800117 	ldw	r18,4(r19)
 10052d4:	9c000217 	ldw	r16,8(r19)
 10052d8:	90bfffc4 	addi	r2,r18,-1
 10052dc:	10000d16 	blt	r2,zero,1005314 <_fwalk_reent+0x84>
 10052e0:	0023883a 	mov	r17,zero
 10052e4:	053fffc4 	movi	r20,-1
 10052e8:	8080030f 	ldh	r2,12(r16)
 10052ec:	8c400044 	addi	r17,r17,1
 10052f0:	10000626 	beq	r2,zero,100530c <_fwalk_reent+0x7c>
 10052f4:	8080038f 	ldh	r2,14(r16)
 10052f8:	800b883a 	mov	r5,r16
 10052fc:	a809883a 	mov	r4,r21
 1005300:	15000226 	beq	r2,r20,100530c <_fwalk_reent+0x7c>
 1005304:	b03ee83a 	callr	r22
 1005308:	b8aeb03a 	or	r23,r23,r2
 100530c:	84001704 	addi	r16,r16,92
 1005310:	947ff51e 	bne	r18,r17,10052e8 <_fwalk_reent+0x58>
 1005314:	9cc00017 	ldw	r19,0(r19)
 1005318:	983fed1e 	bne	r19,zero,10052d0 <_fwalk_reent+0x40>
 100531c:	10047500 	call	1004750 <__sfp_lock_release>
 1005320:	b805883a 	mov	r2,r23
 1005324:	dfc00817 	ldw	ra,32(sp)
 1005328:	ddc00717 	ldw	r23,28(sp)
 100532c:	dd800617 	ldw	r22,24(sp)
 1005330:	dd400517 	ldw	r21,20(sp)
 1005334:	dd000417 	ldw	r20,16(sp)
 1005338:	dcc00317 	ldw	r19,12(sp)
 100533c:	dc800217 	ldw	r18,8(sp)
 1005340:	dc400117 	ldw	r17,4(sp)
 1005344:	dc000017 	ldw	r16,0(sp)
 1005348:	dec00904 	addi	sp,sp,36
 100534c:	f800283a 	ret
 1005350:	002f883a 	mov	r23,zero
 1005354:	003ff106 	br	100531c <_fwalk_reent+0x8c>

01005358 <_fwalk>:
 1005358:	defff804 	addi	sp,sp,-32
 100535c:	dcc00315 	stw	r19,12(sp)
 1005360:	24c0b804 	addi	r19,r4,736
 1005364:	dd400515 	stw	r21,20(sp)
 1005368:	dfc00715 	stw	ra,28(sp)
 100536c:	dd800615 	stw	r22,24(sp)
 1005370:	dd000415 	stw	r20,16(sp)
 1005374:	dc800215 	stw	r18,8(sp)
 1005378:	dc400115 	stw	r17,4(sp)
 100537c:	dc000015 	stw	r16,0(sp)
 1005380:	282b883a 	mov	r21,r5
 1005384:	100474c0 	call	100474c <__sfp_lock_acquire>
 1005388:	98001f26 	beq	r19,zero,1005408 <_fwalk+0xb0>
 100538c:	002d883a 	mov	r22,zero
 1005390:	9c800117 	ldw	r18,4(r19)
 1005394:	9c000217 	ldw	r16,8(r19)
 1005398:	90bfffc4 	addi	r2,r18,-1
 100539c:	10000c16 	blt	r2,zero,10053d0 <_fwalk+0x78>
 10053a0:	0023883a 	mov	r17,zero
 10053a4:	053fffc4 	movi	r20,-1
 10053a8:	8080030f 	ldh	r2,12(r16)
 10053ac:	8c400044 	addi	r17,r17,1
 10053b0:	10000526 	beq	r2,zero,10053c8 <_fwalk+0x70>
 10053b4:	8080038f 	ldh	r2,14(r16)
 10053b8:	8009883a 	mov	r4,r16
 10053bc:	15000226 	beq	r2,r20,10053c8 <_fwalk+0x70>
 10053c0:	a83ee83a 	callr	r21
 10053c4:	b0acb03a 	or	r22,r22,r2
 10053c8:	84001704 	addi	r16,r16,92
 10053cc:	947ff61e 	bne	r18,r17,10053a8 <_fwalk+0x50>
 10053d0:	9cc00017 	ldw	r19,0(r19)
 10053d4:	983fee1e 	bne	r19,zero,1005390 <_fwalk+0x38>
 10053d8:	10047500 	call	1004750 <__sfp_lock_release>
 10053dc:	b005883a 	mov	r2,r22
 10053e0:	dfc00717 	ldw	ra,28(sp)
 10053e4:	dd800617 	ldw	r22,24(sp)
 10053e8:	dd400517 	ldw	r21,20(sp)
 10053ec:	dd000417 	ldw	r20,16(sp)
 10053f0:	dcc00317 	ldw	r19,12(sp)
 10053f4:	dc800217 	ldw	r18,8(sp)
 10053f8:	dc400117 	ldw	r17,4(sp)
 10053fc:	dc000017 	ldw	r16,0(sp)
 1005400:	dec00804 	addi	sp,sp,32
 1005404:	f800283a 	ret
 1005408:	002d883a 	mov	r22,zero
 100540c:	003ff206 	br	10053d8 <_fwalk+0x80>

01005410 <__locale_charset>:
 1005410:	d0a00317 	ldw	r2,-32756(gp)
 1005414:	f800283a 	ret

01005418 <_localeconv_r>:
 1005418:	00804074 	movhi	r2,257
 100541c:	10b9a104 	addi	r2,r2,-6524
 1005420:	f800283a 	ret

01005424 <localeconv>:
 1005424:	00804074 	movhi	r2,257
 1005428:	10817b04 	addi	r2,r2,1516
 100542c:	11000017 	ldw	r4,0(r2)
 1005430:	10054181 	jmpi	1005418 <_localeconv_r>

01005434 <_setlocale_r>:
 1005434:	defffc04 	addi	sp,sp,-16
 1005438:	00c04074 	movhi	r3,257
 100543c:	18f99c04 	addi	r3,r3,-6544
 1005440:	dc800215 	stw	r18,8(sp)
 1005444:	dc400115 	stw	r17,4(sp)
 1005448:	dc000015 	stw	r16,0(sp)
 100544c:	2023883a 	mov	r17,r4
 1005450:	2825883a 	mov	r18,r5
 1005454:	dfc00315 	stw	ra,12(sp)
 1005458:	3021883a 	mov	r16,r6
 100545c:	3009883a 	mov	r4,r6
 1005460:	180b883a 	mov	r5,r3
 1005464:	30000926 	beq	r6,zero,100548c <_setlocale_r+0x58>
 1005468:	1007aa40 	call	1007aa4 <strcmp>
 100546c:	8009883a 	mov	r4,r16
 1005470:	01404074 	movhi	r5,257
 1005474:	29797304 	addi	r5,r5,-6708
 1005478:	10000b1e 	bne	r2,zero,10054a8 <_setlocale_r+0x74>
 100547c:	8c000d15 	stw	r16,52(r17)
 1005480:	8c800c15 	stw	r18,48(r17)
 1005484:	00c04074 	movhi	r3,257
 1005488:	18f99c04 	addi	r3,r3,-6544
 100548c:	1805883a 	mov	r2,r3
 1005490:	dfc00317 	ldw	ra,12(sp)
 1005494:	dc800217 	ldw	r18,8(sp)
 1005498:	dc400117 	ldw	r17,4(sp)
 100549c:	dc000017 	ldw	r16,0(sp)
 10054a0:	dec00404 	addi	sp,sp,16
 10054a4:	f800283a 	ret
 10054a8:	1007aa40 	call	1007aa4 <strcmp>
 10054ac:	0007883a 	mov	r3,zero
 10054b0:	103ff226 	beq	r2,zero,100547c <_setlocale_r+0x48>
 10054b4:	003ff506 	br	100548c <_setlocale_r+0x58>

010054b8 <setlocale>:
 10054b8:	01804074 	movhi	r6,257
 10054bc:	31817b04 	addi	r6,r6,1516
 10054c0:	2007883a 	mov	r3,r4
 10054c4:	31000017 	ldw	r4,0(r6)
 10054c8:	280d883a 	mov	r6,r5
 10054cc:	180b883a 	mov	r5,r3
 10054d0:	10054341 	jmpi	1005434 <_setlocale_r>

010054d4 <__smakebuf_r>:
 10054d4:	2880030b 	ldhu	r2,12(r5)
 10054d8:	deffed04 	addi	sp,sp,-76
 10054dc:	dc401015 	stw	r17,64(sp)
 10054e0:	1080008c 	andi	r2,r2,2
 10054e4:	dc000f15 	stw	r16,60(sp)
 10054e8:	dfc01215 	stw	ra,72(sp)
 10054ec:	dc801115 	stw	r18,68(sp)
 10054f0:	2821883a 	mov	r16,r5
 10054f4:	2023883a 	mov	r17,r4
 10054f8:	10000b26 	beq	r2,zero,1005528 <__smakebuf_r+0x54>
 10054fc:	28c010c4 	addi	r3,r5,67
 1005500:	00800044 	movi	r2,1
 1005504:	28800515 	stw	r2,20(r5)
 1005508:	28c00415 	stw	r3,16(r5)
 100550c:	28c00015 	stw	r3,0(r5)
 1005510:	dfc01217 	ldw	ra,72(sp)
 1005514:	dc801117 	ldw	r18,68(sp)
 1005518:	dc401017 	ldw	r17,64(sp)
 100551c:	dc000f17 	ldw	r16,60(sp)
 1005520:	dec01304 	addi	sp,sp,76
 1005524:	f800283a 	ret
 1005528:	2940038f 	ldh	r5,14(r5)
 100552c:	28002116 	blt	r5,zero,10055b4 <__smakebuf_r+0xe0>
 1005530:	d80d883a 	mov	r6,sp
 1005534:	1007f6c0 	call	1007f6c <_fstat_r>
 1005538:	10001e16 	blt	r2,zero,10055b4 <__smakebuf_r+0xe0>
 100553c:	d8800117 	ldw	r2,4(sp)
 1005540:	00e00014 	movui	r3,32768
 1005544:	113c000c 	andi	r4,r2,61440
 1005548:	20c03126 	beq	r4,r3,1005610 <__smakebuf_r+0x13c>
 100554c:	8080030b 	ldhu	r2,12(r16)
 1005550:	00c80004 	movi	r3,8192
 1005554:	10820014 	ori	r2,r2,2048
 1005558:	8080030d 	sth	r2,12(r16)
 100555c:	20c01e26 	beq	r4,r3,10055d8 <__smakebuf_r+0x104>
 1005560:	04810004 	movi	r18,1024
 1005564:	8809883a 	mov	r4,r17
 1005568:	900b883a 	mov	r5,r18
 100556c:	10056680 	call	1005668 <_malloc_r>
 1005570:	1009883a 	mov	r4,r2
 1005574:	10003126 	beq	r2,zero,100563c <__smakebuf_r+0x168>
 1005578:	80c0030b 	ldhu	r3,12(r16)
 100557c:	00804034 	movhi	r2,256
 1005580:	10921004 	addi	r2,r2,18496
 1005584:	88800f15 	stw	r2,60(r17)
 1005588:	18c02014 	ori	r3,r3,128
 100558c:	84800515 	stw	r18,20(r16)
 1005590:	80c0030d 	sth	r3,12(r16)
 1005594:	81000415 	stw	r4,16(r16)
 1005598:	81000015 	stw	r4,0(r16)
 100559c:	dfc01217 	ldw	ra,72(sp)
 10055a0:	dc801117 	ldw	r18,68(sp)
 10055a4:	dc401017 	ldw	r17,64(sp)
 10055a8:	dc000f17 	ldw	r16,60(sp)
 10055ac:	dec01304 	addi	sp,sp,76
 10055b0:	f800283a 	ret
 10055b4:	80c0030b 	ldhu	r3,12(r16)
 10055b8:	1880200c 	andi	r2,r3,128
 10055bc:	10000426 	beq	r2,zero,10055d0 <__smakebuf_r+0xfc>
 10055c0:	04801004 	movi	r18,64
 10055c4:	18820014 	ori	r2,r3,2048
 10055c8:	8080030d 	sth	r2,12(r16)
 10055cc:	003fe506 	br	1005564 <__smakebuf_r+0x90>
 10055d0:	04810004 	movi	r18,1024
 10055d4:	003ffb06 	br	10055c4 <__smakebuf_r+0xf0>
 10055d8:	8140038f 	ldh	r5,14(r16)
 10055dc:	8809883a 	mov	r4,r17
 10055e0:	1007fe00 	call	1007fe0 <_isatty_r>
 10055e4:	103fde26 	beq	r2,zero,1005560 <__smakebuf_r+0x8c>
 10055e8:	8080030b 	ldhu	r2,12(r16)
 10055ec:	80c010c4 	addi	r3,r16,67
 10055f0:	04810004 	movi	r18,1024
 10055f4:	10800054 	ori	r2,r2,1
 10055f8:	8080030d 	sth	r2,12(r16)
 10055fc:	00800044 	movi	r2,1
 1005600:	80c00415 	stw	r3,16(r16)
 1005604:	80800515 	stw	r2,20(r16)
 1005608:	80c00015 	stw	r3,0(r16)
 100560c:	003fd506 	br	1005564 <__smakebuf_r+0x90>
 1005610:	80c00a17 	ldw	r3,40(r16)
 1005614:	00804034 	movhi	r2,256
 1005618:	109e5804 	addi	r2,r2,31072
 100561c:	18bfcb1e 	bne	r3,r2,100554c <__smakebuf_r+0x78>
 1005620:	8080030b 	ldhu	r2,12(r16)
 1005624:	00c10004 	movi	r3,1024
 1005628:	1825883a 	mov	r18,r3
 100562c:	10c4b03a 	or	r2,r2,r3
 1005630:	8080030d 	sth	r2,12(r16)
 1005634:	80c01315 	stw	r3,76(r16)
 1005638:	003fca06 	br	1005564 <__smakebuf_r+0x90>
 100563c:	8100030b 	ldhu	r4,12(r16)
 1005640:	2080800c 	andi	r2,r4,512
 1005644:	103fb21e 	bne	r2,zero,1005510 <__smakebuf_r+0x3c>
 1005648:	80c010c4 	addi	r3,r16,67
 100564c:	21000094 	ori	r4,r4,2
 1005650:	00800044 	movi	r2,1
 1005654:	80800515 	stw	r2,20(r16)
 1005658:	8100030d 	sth	r4,12(r16)
 100565c:	80c00415 	stw	r3,16(r16)
 1005660:	80c00015 	stw	r3,0(r16)
 1005664:	003faa06 	br	1005510 <__smakebuf_r+0x3c>

01005668 <_malloc_r>:
 1005668:	defff604 	addi	sp,sp,-40
 100566c:	28c002c4 	addi	r3,r5,11
 1005670:	00800584 	movi	r2,22
 1005674:	dc800215 	stw	r18,8(sp)
 1005678:	dfc00915 	stw	ra,36(sp)
 100567c:	df000815 	stw	fp,32(sp)
 1005680:	ddc00715 	stw	r23,28(sp)
 1005684:	dd800615 	stw	r22,24(sp)
 1005688:	dd400515 	stw	r21,20(sp)
 100568c:	dd000415 	stw	r20,16(sp)
 1005690:	dcc00315 	stw	r19,12(sp)
 1005694:	dc400115 	stw	r17,4(sp)
 1005698:	dc000015 	stw	r16,0(sp)
 100569c:	2025883a 	mov	r18,r4
 10056a0:	10c01236 	bltu	r2,r3,10056ec <_malloc_r+0x84>
 10056a4:	04400404 	movi	r17,16
 10056a8:	8940142e 	bgeu	r17,r5,10056fc <_malloc_r+0x94>
 10056ac:	00800304 	movi	r2,12
 10056b0:	0007883a 	mov	r3,zero
 10056b4:	90800015 	stw	r2,0(r18)
 10056b8:	1805883a 	mov	r2,r3
 10056bc:	dfc00917 	ldw	ra,36(sp)
 10056c0:	df000817 	ldw	fp,32(sp)
 10056c4:	ddc00717 	ldw	r23,28(sp)
 10056c8:	dd800617 	ldw	r22,24(sp)
 10056cc:	dd400517 	ldw	r21,20(sp)
 10056d0:	dd000417 	ldw	r20,16(sp)
 10056d4:	dcc00317 	ldw	r19,12(sp)
 10056d8:	dc800217 	ldw	r18,8(sp)
 10056dc:	dc400117 	ldw	r17,4(sp)
 10056e0:	dc000017 	ldw	r16,0(sp)
 10056e4:	dec00a04 	addi	sp,sp,40
 10056e8:	f800283a 	ret
 10056ec:	00bffe04 	movi	r2,-8
 10056f0:	18a2703a 	and	r17,r3,r2
 10056f4:	883fed16 	blt	r17,zero,10056ac <_malloc_r+0x44>
 10056f8:	897fec36 	bltu	r17,r5,10056ac <_malloc_r+0x44>
 10056fc:	9009883a 	mov	r4,r18
 1005700:	100adb40 	call	100adb4 <__malloc_lock>
 1005704:	00807dc4 	movi	r2,503
 1005708:	14402b2e 	bgeu	r2,r17,10057b8 <_malloc_r+0x150>
 100570c:	8806d27a 	srli	r3,r17,9
 1005710:	18003f1e 	bne	r3,zero,1005810 <_malloc_r+0x1a8>
 1005714:	880cd0fa 	srli	r6,r17,3
 1005718:	300490fa 	slli	r2,r6,3
 100571c:	02c04074 	movhi	r11,257
 1005720:	5afb7e04 	addi	r11,r11,-4616
 1005724:	12cb883a 	add	r5,r2,r11
 1005728:	2c000317 	ldw	r16,12(r5)
 100572c:	580f883a 	mov	r7,r11
 1005730:	2c00041e 	bne	r5,r16,1005744 <_malloc_r+0xdc>
 1005734:	00000a06 	br	1005760 <_malloc_r+0xf8>
 1005738:	1800860e 	bge	r3,zero,1005954 <_malloc_r+0x2ec>
 100573c:	84000317 	ldw	r16,12(r16)
 1005740:	2c000726 	beq	r5,r16,1005760 <_malloc_r+0xf8>
 1005744:	80800117 	ldw	r2,4(r16)
 1005748:	00ffff04 	movi	r3,-4
 100574c:	10c8703a 	and	r4,r2,r3
 1005750:	2447c83a 	sub	r3,r4,r17
 1005754:	008003c4 	movi	r2,15
 1005758:	10fff70e 	bge	r2,r3,1005738 <_malloc_r+0xd0>
 100575c:	31bfffc4 	addi	r6,r6,-1
 1005760:	32400044 	addi	r9,r6,1
 1005764:	02804074 	movhi	r10,257
 1005768:	52bb8004 	addi	r10,r10,-4608
 100576c:	54000217 	ldw	r16,8(r10)
 1005770:	8280a026 	beq	r16,r10,10059f4 <_malloc_r+0x38c>
 1005774:	80800117 	ldw	r2,4(r16)
 1005778:	00ffff04 	movi	r3,-4
 100577c:	10ca703a 	and	r5,r2,r3
 1005780:	2c4dc83a 	sub	r6,r5,r17
 1005784:	008003c4 	movi	r2,15
 1005788:	11808316 	blt	r2,r6,1005998 <_malloc_r+0x330>
 100578c:	52800315 	stw	r10,12(r10)
 1005790:	52800215 	stw	r10,8(r10)
 1005794:	30002916 	blt	r6,zero,100583c <_malloc_r+0x1d4>
 1005798:	8147883a 	add	r3,r16,r5
 100579c:	18800117 	ldw	r2,4(r3)
 10057a0:	9009883a 	mov	r4,r18
 10057a4:	10800054 	ori	r2,r2,1
 10057a8:	18800115 	stw	r2,4(r3)
 10057ac:	100add40 	call	100add4 <__malloc_unlock>
 10057b0:	80c00204 	addi	r3,r16,8
 10057b4:	003fc006 	br	10056b8 <_malloc_r+0x50>
 10057b8:	02c04074 	movhi	r11,257
 10057bc:	5afb7e04 	addi	r11,r11,-4616
 10057c0:	8ac5883a 	add	r2,r17,r11
 10057c4:	14000317 	ldw	r16,12(r2)
 10057c8:	580f883a 	mov	r7,r11
 10057cc:	8806d0fa 	srli	r3,r17,3
 10057d0:	14006c26 	beq	r2,r16,1005984 <_malloc_r+0x31c>
 10057d4:	80c00117 	ldw	r3,4(r16)
 10057d8:	00bfff04 	movi	r2,-4
 10057dc:	81800317 	ldw	r6,12(r16)
 10057e0:	1886703a 	and	r3,r3,r2
 10057e4:	80c7883a 	add	r3,r16,r3
 10057e8:	18800117 	ldw	r2,4(r3)
 10057ec:	81400217 	ldw	r5,8(r16)
 10057f0:	9009883a 	mov	r4,r18
 10057f4:	10800054 	ori	r2,r2,1
 10057f8:	18800115 	stw	r2,4(r3)
 10057fc:	31400215 	stw	r5,8(r6)
 1005800:	29800315 	stw	r6,12(r5)
 1005804:	100add40 	call	100add4 <__malloc_unlock>
 1005808:	80c00204 	addi	r3,r16,8
 100580c:	003faa06 	br	10056b8 <_malloc_r+0x50>
 1005810:	00800104 	movi	r2,4
 1005814:	10c0052e 	bgeu	r2,r3,100582c <_malloc_r+0x1c4>
 1005818:	00800504 	movi	r2,20
 100581c:	10c07836 	bltu	r2,r3,1005a00 <_malloc_r+0x398>
 1005820:	198016c4 	addi	r6,r3,91
 1005824:	300490fa 	slli	r2,r6,3
 1005828:	003fbc06 	br	100571c <_malloc_r+0xb4>
 100582c:	8804d1ba 	srli	r2,r17,6
 1005830:	11800e04 	addi	r6,r2,56
 1005834:	300490fa 	slli	r2,r6,3
 1005838:	003fb806 	br	100571c <_malloc_r+0xb4>
 100583c:	00807fc4 	movi	r2,511
 1005840:	1140bb36 	bltu	r2,r5,1005b30 <_malloc_r+0x4c8>
 1005844:	2806d0fa 	srli	r3,r5,3
 1005848:	573ffe04 	addi	fp,r10,-8
 100584c:	00800044 	movi	r2,1
 1005850:	180890fa 	slli	r4,r3,3
 1005854:	1807d0ba 	srai	r3,r3,2
 1005858:	e1c00117 	ldw	r7,4(fp)
 100585c:	5909883a 	add	r4,r11,r4
 1005860:	21400217 	ldw	r5,8(r4)
 1005864:	10c4983a 	sll	r2,r2,r3
 1005868:	81000315 	stw	r4,12(r16)
 100586c:	81400215 	stw	r5,8(r16)
 1005870:	388eb03a 	or	r7,r7,r2
 1005874:	2c000315 	stw	r16,12(r5)
 1005878:	24000215 	stw	r16,8(r4)
 100587c:	e1c00115 	stw	r7,4(fp)
 1005880:	4807883a 	mov	r3,r9
 1005884:	4800cd16 	blt	r9,zero,1005bbc <_malloc_r+0x554>
 1005888:	1807d0ba 	srai	r3,r3,2
 100588c:	00800044 	movi	r2,1
 1005890:	10c8983a 	sll	r4,r2,r3
 1005894:	39004436 	bltu	r7,r4,10059a8 <_malloc_r+0x340>
 1005898:	21c4703a 	and	r2,r4,r7
 100589c:	10000a1e 	bne	r2,zero,10058c8 <_malloc_r+0x260>
 10058a0:	2109883a 	add	r4,r4,r4
 10058a4:	00bfff04 	movi	r2,-4
 10058a8:	4884703a 	and	r2,r9,r2
 10058ac:	3906703a 	and	r3,r7,r4
 10058b0:	12400104 	addi	r9,r2,4
 10058b4:	1800041e 	bne	r3,zero,10058c8 <_malloc_r+0x260>
 10058b8:	2109883a 	add	r4,r4,r4
 10058bc:	3904703a 	and	r2,r7,r4
 10058c0:	4a400104 	addi	r9,r9,4
 10058c4:	103ffc26 	beq	r2,zero,10058b8 <_malloc_r+0x250>
 10058c8:	480490fa 	slli	r2,r9,3
 10058cc:	4819883a 	mov	r12,r9
 10058d0:	023fff04 	movi	r8,-4
 10058d4:	589b883a 	add	r13,r11,r2
 10058d8:	6807883a 	mov	r3,r13
 10058dc:	014003c4 	movi	r5,15
 10058e0:	1c000317 	ldw	r16,12(r3)
 10058e4:	1c00041e 	bne	r3,r16,10058f8 <_malloc_r+0x290>
 10058e8:	0000a706 	br	1005b88 <_malloc_r+0x520>
 10058ec:	3000ab0e 	bge	r6,zero,1005b9c <_malloc_r+0x534>
 10058f0:	84000317 	ldw	r16,12(r16)
 10058f4:	1c00a426 	beq	r3,r16,1005b88 <_malloc_r+0x520>
 10058f8:	80800117 	ldw	r2,4(r16)
 10058fc:	1204703a 	and	r2,r2,r8
 1005900:	144dc83a 	sub	r6,r2,r17
 1005904:	29bff90e 	bge	r5,r6,10058ec <_malloc_r+0x284>
 1005908:	81000317 	ldw	r4,12(r16)
 100590c:	80c00217 	ldw	r3,8(r16)
 1005910:	89400054 	ori	r5,r17,1
 1005914:	8445883a 	add	r2,r16,r17
 1005918:	20c00215 	stw	r3,8(r4)
 100591c:	19000315 	stw	r4,12(r3)
 1005920:	81400115 	stw	r5,4(r16)
 1005924:	1187883a 	add	r3,r2,r6
 1005928:	31000054 	ori	r4,r6,1
 100592c:	50800315 	stw	r2,12(r10)
 1005930:	50800215 	stw	r2,8(r10)
 1005934:	19800015 	stw	r6,0(r3)
 1005938:	11000115 	stw	r4,4(r2)
 100593c:	12800215 	stw	r10,8(r2)
 1005940:	12800315 	stw	r10,12(r2)
 1005944:	9009883a 	mov	r4,r18
 1005948:	100add40 	call	100add4 <__malloc_unlock>
 100594c:	80c00204 	addi	r3,r16,8
 1005950:	003f5906 	br	10056b8 <_malloc_r+0x50>
 1005954:	8109883a 	add	r4,r16,r4
 1005958:	20800117 	ldw	r2,4(r4)
 100595c:	80c00217 	ldw	r3,8(r16)
 1005960:	81400317 	ldw	r5,12(r16)
 1005964:	10800054 	ori	r2,r2,1
 1005968:	20800115 	stw	r2,4(r4)
 100596c:	28c00215 	stw	r3,8(r5)
 1005970:	19400315 	stw	r5,12(r3)
 1005974:	9009883a 	mov	r4,r18
 1005978:	100add40 	call	100add4 <__malloc_unlock>
 100597c:	80c00204 	addi	r3,r16,8
 1005980:	003f4d06 	br	10056b8 <_malloc_r+0x50>
 1005984:	80800204 	addi	r2,r16,8
 1005988:	14000317 	ldw	r16,12(r2)
 100598c:	143f911e 	bne	r2,r16,10057d4 <_malloc_r+0x16c>
 1005990:	1a400084 	addi	r9,r3,2
 1005994:	003f7306 	br	1005764 <_malloc_r+0xfc>
 1005998:	88c00054 	ori	r3,r17,1
 100599c:	8445883a 	add	r2,r16,r17
 10059a0:	80c00115 	stw	r3,4(r16)
 10059a4:	003fdf06 	br	1005924 <_malloc_r+0x2bc>
 10059a8:	e4000217 	ldw	r16,8(fp)
 10059ac:	00bfff04 	movi	r2,-4
 10059b0:	80c00117 	ldw	r3,4(r16)
 10059b4:	802d883a 	mov	r22,r16
 10059b8:	18aa703a 	and	r21,r3,r2
 10059bc:	ac401636 	bltu	r21,r17,1005a18 <_malloc_r+0x3b0>
 10059c0:	ac49c83a 	sub	r4,r21,r17
 10059c4:	008003c4 	movi	r2,15
 10059c8:	1100130e 	bge	r2,r4,1005a18 <_malloc_r+0x3b0>
 10059cc:	88800054 	ori	r2,r17,1
 10059d0:	8447883a 	add	r3,r16,r17
 10059d4:	80800115 	stw	r2,4(r16)
 10059d8:	20800054 	ori	r2,r4,1
 10059dc:	18800115 	stw	r2,4(r3)
 10059e0:	e0c00215 	stw	r3,8(fp)
 10059e4:	9009883a 	mov	r4,r18
 10059e8:	100add40 	call	100add4 <__malloc_unlock>
 10059ec:	80c00204 	addi	r3,r16,8
 10059f0:	003f3106 	br	10056b8 <_malloc_r+0x50>
 10059f4:	39c00117 	ldw	r7,4(r7)
 10059f8:	573ffe04 	addi	fp,r10,-8
 10059fc:	003fa006 	br	1005880 <_malloc_r+0x218>
 1005a00:	00801504 	movi	r2,84
 1005a04:	10c06736 	bltu	r2,r3,1005ba4 <_malloc_r+0x53c>
 1005a08:	8804d33a 	srli	r2,r17,12
 1005a0c:	11801b84 	addi	r6,r2,110
 1005a10:	300490fa 	slli	r2,r6,3
 1005a14:	003f4106 	br	100571c <_malloc_r+0xb4>
 1005a18:	d0a72a17 	ldw	r2,-25432(gp)
 1005a1c:	d0e00517 	ldw	r3,-32748(gp)
 1005a20:	053fffc4 	movi	r20,-1
 1005a24:	10800404 	addi	r2,r2,16
 1005a28:	88a7883a 	add	r19,r17,r2
 1005a2c:	1d000326 	beq	r3,r20,1005a3c <_malloc_r+0x3d4>
 1005a30:	98c3ffc4 	addi	r3,r19,4095
 1005a34:	00bc0004 	movi	r2,-4096
 1005a38:	18a6703a 	and	r19,r3,r2
 1005a3c:	9009883a 	mov	r4,r18
 1005a40:	980b883a 	mov	r5,r19
 1005a44:	10078e80 	call	10078e8 <_sbrk_r>
 1005a48:	1009883a 	mov	r4,r2
 1005a4c:	15000426 	beq	r2,r20,1005a60 <_malloc_r+0x3f8>
 1005a50:	854b883a 	add	r5,r16,r21
 1005a54:	1029883a 	mov	r20,r2
 1005a58:	11405a2e 	bgeu	r2,r5,1005bc4 <_malloc_r+0x55c>
 1005a5c:	87000c26 	beq	r16,fp,1005a90 <_malloc_r+0x428>
 1005a60:	e4000217 	ldw	r16,8(fp)
 1005a64:	80c00117 	ldw	r3,4(r16)
 1005a68:	00bfff04 	movi	r2,-4
 1005a6c:	1884703a 	and	r2,r3,r2
 1005a70:	14400336 	bltu	r2,r17,1005a80 <_malloc_r+0x418>
 1005a74:	1449c83a 	sub	r4,r2,r17
 1005a78:	008003c4 	movi	r2,15
 1005a7c:	113fd316 	blt	r2,r4,10059cc <_malloc_r+0x364>
 1005a80:	9009883a 	mov	r4,r18
 1005a84:	100add40 	call	100add4 <__malloc_unlock>
 1005a88:	0007883a 	mov	r3,zero
 1005a8c:	003f0a06 	br	10056b8 <_malloc_r+0x50>
 1005a90:	05c04074 	movhi	r23,257
 1005a94:	bdc8af04 	addi	r23,r23,8892
 1005a98:	b8800017 	ldw	r2,0(r23)
 1005a9c:	988d883a 	add	r6,r19,r2
 1005aa0:	b9800015 	stw	r6,0(r23)
 1005aa4:	d0e00517 	ldw	r3,-32748(gp)
 1005aa8:	00bfffc4 	movi	r2,-1
 1005aac:	18808e26 	beq	r3,r2,1005ce8 <_malloc_r+0x680>
 1005ab0:	2145c83a 	sub	r2,r4,r5
 1005ab4:	3085883a 	add	r2,r6,r2
 1005ab8:	b8800015 	stw	r2,0(r23)
 1005abc:	20c001cc 	andi	r3,r4,7
 1005ac0:	18005f1e 	bne	r3,zero,1005c40 <_malloc_r+0x5d8>
 1005ac4:	000b883a 	mov	r5,zero
 1005ac8:	a4c5883a 	add	r2,r20,r19
 1005acc:	1083ffcc 	andi	r2,r2,4095
 1005ad0:	00c40004 	movi	r3,4096
 1005ad4:	1887c83a 	sub	r3,r3,r2
 1005ad8:	28e7883a 	add	r19,r5,r3
 1005adc:	9009883a 	mov	r4,r18
 1005ae0:	980b883a 	mov	r5,r19
 1005ae4:	10078e80 	call	10078e8 <_sbrk_r>
 1005ae8:	1007883a 	mov	r3,r2
 1005aec:	00bfffc4 	movi	r2,-1
 1005af0:	18807a26 	beq	r3,r2,1005cdc <_malloc_r+0x674>
 1005af4:	1d05c83a 	sub	r2,r3,r20
 1005af8:	9885883a 	add	r2,r19,r2
 1005afc:	10c00054 	ori	r3,r2,1
 1005b00:	b8800017 	ldw	r2,0(r23)
 1005b04:	a021883a 	mov	r16,r20
 1005b08:	a0c00115 	stw	r3,4(r20)
 1005b0c:	9885883a 	add	r2,r19,r2
 1005b10:	b8800015 	stw	r2,0(r23)
 1005b14:	e5000215 	stw	r20,8(fp)
 1005b18:	b7003626 	beq	r22,fp,1005bf4 <_malloc_r+0x58c>
 1005b1c:	018003c4 	movi	r6,15
 1005b20:	35404b36 	bltu	r6,r21,1005c50 <_malloc_r+0x5e8>
 1005b24:	00800044 	movi	r2,1
 1005b28:	a0800115 	stw	r2,4(r20)
 1005b2c:	003fcd06 	br	1005a64 <_malloc_r+0x3fc>
 1005b30:	2808d27a 	srli	r4,r5,9
 1005b34:	2000371e 	bne	r4,zero,1005c14 <_malloc_r+0x5ac>
 1005b38:	2808d0fa 	srli	r4,r5,3
 1005b3c:	200690fa 	slli	r3,r4,3
 1005b40:	1ad1883a 	add	r8,r3,r11
 1005b44:	41800217 	ldw	r6,8(r8)
 1005b48:	41805b26 	beq	r8,r6,1005cb8 <_malloc_r+0x650>
 1005b4c:	30800117 	ldw	r2,4(r6)
 1005b50:	00ffff04 	movi	r3,-4
 1005b54:	10c4703a 	and	r2,r2,r3
 1005b58:	2880022e 	bgeu	r5,r2,1005b64 <_malloc_r+0x4fc>
 1005b5c:	31800217 	ldw	r6,8(r6)
 1005b60:	41bffa1e 	bne	r8,r6,1005b4c <_malloc_r+0x4e4>
 1005b64:	32000317 	ldw	r8,12(r6)
 1005b68:	39c00117 	ldw	r7,4(r7)
 1005b6c:	82000315 	stw	r8,12(r16)
 1005b70:	81800215 	stw	r6,8(r16)
 1005b74:	07004074 	movhi	fp,257
 1005b78:	e73b7e04 	addi	fp,fp,-4616
 1005b7c:	34000315 	stw	r16,12(r6)
 1005b80:	44000215 	stw	r16,8(r8)
 1005b84:	003f3e06 	br	1005880 <_malloc_r+0x218>
 1005b88:	63000044 	addi	r12,r12,1
 1005b8c:	608000cc 	andi	r2,r12,3
 1005b90:	10005d26 	beq	r2,zero,1005d08 <_malloc_r+0x6a0>
 1005b94:	18c00204 	addi	r3,r3,8
 1005b98:	003f5106 	br	10058e0 <_malloc_r+0x278>
 1005b9c:	8089883a 	add	r4,r16,r2
 1005ba0:	003f6d06 	br	1005958 <_malloc_r+0x2f0>
 1005ba4:	00805504 	movi	r2,340
 1005ba8:	10c02036 	bltu	r2,r3,1005c2c <_malloc_r+0x5c4>
 1005bac:	8804d3fa 	srli	r2,r17,15
 1005bb0:	11801dc4 	addi	r6,r2,119
 1005bb4:	300490fa 	slli	r2,r6,3
 1005bb8:	003ed806 	br	100571c <_malloc_r+0xb4>
 1005bbc:	48c000c4 	addi	r3,r9,3
 1005bc0:	003f3106 	br	1005888 <_malloc_r+0x220>
 1005bc4:	05c04074 	movhi	r23,257
 1005bc8:	bdc8af04 	addi	r23,r23,8892
 1005bcc:	b8800017 	ldw	r2,0(r23)
 1005bd0:	988d883a 	add	r6,r19,r2
 1005bd4:	b9800015 	stw	r6,0(r23)
 1005bd8:	293fb21e 	bne	r5,r4,1005aa4 <_malloc_r+0x43c>
 1005bdc:	2083ffcc 	andi	r2,r4,4095
 1005be0:	103fb01e 	bne	r2,zero,1005aa4 <_malloc_r+0x43c>
 1005be4:	e4000217 	ldw	r16,8(fp)
 1005be8:	9d45883a 	add	r2,r19,r21
 1005bec:	10800054 	ori	r2,r2,1
 1005bf0:	80800115 	stw	r2,4(r16)
 1005bf4:	b8c00017 	ldw	r3,0(r23)
 1005bf8:	d0a72b17 	ldw	r2,-25428(gp)
 1005bfc:	10c0012e 	bgeu	r2,r3,1005c04 <_malloc_r+0x59c>
 1005c00:	d0e72b15 	stw	r3,-25428(gp)
 1005c04:	d0a72c17 	ldw	r2,-25424(gp)
 1005c08:	10ff962e 	bgeu	r2,r3,1005a64 <_malloc_r+0x3fc>
 1005c0c:	d0e72c15 	stw	r3,-25424(gp)
 1005c10:	003f9406 	br	1005a64 <_malloc_r+0x3fc>
 1005c14:	00800104 	movi	r2,4
 1005c18:	11001e36 	bltu	r2,r4,1005c94 <_malloc_r+0x62c>
 1005c1c:	2804d1ba 	srli	r2,r5,6
 1005c20:	11000e04 	addi	r4,r2,56
 1005c24:	200690fa 	slli	r3,r4,3
 1005c28:	003fc506 	br	1005b40 <_malloc_r+0x4d8>
 1005c2c:	00815504 	movi	r2,1364
 1005c30:	10c01d2e 	bgeu	r2,r3,1005ca8 <_malloc_r+0x640>
 1005c34:	01801f84 	movi	r6,126
 1005c38:	0080fc04 	movi	r2,1008
 1005c3c:	003eb706 	br	100571c <_malloc_r+0xb4>
 1005c40:	00800204 	movi	r2,8
 1005c44:	10cbc83a 	sub	r5,r2,r3
 1005c48:	2169883a 	add	r20,r4,r5
 1005c4c:	003f9e06 	br	1005ac8 <_malloc_r+0x460>
 1005c50:	00bffe04 	movi	r2,-8
 1005c54:	a93ffd04 	addi	r4,r21,-12
 1005c58:	2088703a 	and	r4,r4,r2
 1005c5c:	b10b883a 	add	r5,r22,r4
 1005c60:	00c00144 	movi	r3,5
 1005c64:	28c00215 	stw	r3,8(r5)
 1005c68:	28c00115 	stw	r3,4(r5)
 1005c6c:	b0800117 	ldw	r2,4(r22)
 1005c70:	1080004c 	andi	r2,r2,1
 1005c74:	2084b03a 	or	r2,r4,r2
 1005c78:	b0800115 	stw	r2,4(r22)
 1005c7c:	313fdd2e 	bgeu	r6,r4,1005bf4 <_malloc_r+0x58c>
 1005c80:	b1400204 	addi	r5,r22,8
 1005c84:	9009883a 	mov	r4,r18
 1005c88:	1004ae00 	call	1004ae0 <_free_r>
 1005c8c:	e4000217 	ldw	r16,8(fp)
 1005c90:	003fd806 	br	1005bf4 <_malloc_r+0x58c>
 1005c94:	00800504 	movi	r2,20
 1005c98:	11001536 	bltu	r2,r4,1005cf0 <_malloc_r+0x688>
 1005c9c:	210016c4 	addi	r4,r4,91
 1005ca0:	200690fa 	slli	r3,r4,3
 1005ca4:	003fa606 	br	1005b40 <_malloc_r+0x4d8>
 1005ca8:	8804d4ba 	srli	r2,r17,18
 1005cac:	11801f04 	addi	r6,r2,124
 1005cb0:	300490fa 	slli	r2,r6,3
 1005cb4:	003e9906 	br	100571c <_malloc_r+0xb4>
 1005cb8:	2009d0ba 	srai	r4,r4,2
 1005cbc:	01404074 	movhi	r5,257
 1005cc0:	297b7e04 	addi	r5,r5,-4616
 1005cc4:	00c00044 	movi	r3,1
 1005cc8:	28800117 	ldw	r2,4(r5)
 1005ccc:	1906983a 	sll	r3,r3,r4
 1005cd0:	10c4b03a 	or	r2,r2,r3
 1005cd4:	28800115 	stw	r2,4(r5)
 1005cd8:	003fa306 	br	1005b68 <_malloc_r+0x500>
 1005cdc:	0027883a 	mov	r19,zero
 1005ce0:	00c00044 	movi	r3,1
 1005ce4:	003f8606 	br	1005b00 <_malloc_r+0x498>
 1005ce8:	d1200515 	stw	r4,-32748(gp)
 1005cec:	003f7306 	br	1005abc <_malloc_r+0x454>
 1005cf0:	00801504 	movi	r2,84
 1005cf4:	11001936 	bltu	r2,r4,1005d5c <_malloc_r+0x6f4>
 1005cf8:	2804d33a 	srli	r2,r5,12
 1005cfc:	11001b84 	addi	r4,r2,110
 1005d00:	200690fa 	slli	r3,r4,3
 1005d04:	003f8e06 	br	1005b40 <_malloc_r+0x4d8>
 1005d08:	480b883a 	mov	r5,r9
 1005d0c:	6807883a 	mov	r3,r13
 1005d10:	288000cc 	andi	r2,r5,3
 1005d14:	18fffe04 	addi	r3,r3,-8
 1005d18:	297fffc4 	addi	r5,r5,-1
 1005d1c:	10001526 	beq	r2,zero,1005d74 <_malloc_r+0x70c>
 1005d20:	18800217 	ldw	r2,8(r3)
 1005d24:	10fffa26 	beq	r2,r3,1005d10 <_malloc_r+0x6a8>
 1005d28:	2109883a 	add	r4,r4,r4
 1005d2c:	393f1e36 	bltu	r7,r4,10059a8 <_malloc_r+0x340>
 1005d30:	203f1d26 	beq	r4,zero,10059a8 <_malloc_r+0x340>
 1005d34:	21c4703a 	and	r2,r4,r7
 1005d38:	10000226 	beq	r2,zero,1005d44 <_malloc_r+0x6dc>
 1005d3c:	6013883a 	mov	r9,r12
 1005d40:	003ee106 	br	10058c8 <_malloc_r+0x260>
 1005d44:	2109883a 	add	r4,r4,r4
 1005d48:	3904703a 	and	r2,r7,r4
 1005d4c:	63000104 	addi	r12,r12,4
 1005d50:	103ffc26 	beq	r2,zero,1005d44 <_malloc_r+0x6dc>
 1005d54:	6013883a 	mov	r9,r12
 1005d58:	003edb06 	br	10058c8 <_malloc_r+0x260>
 1005d5c:	00805504 	movi	r2,340
 1005d60:	11000836 	bltu	r2,r4,1005d84 <_malloc_r+0x71c>
 1005d64:	2804d3fa 	srli	r2,r5,15
 1005d68:	11001dc4 	addi	r4,r2,119
 1005d6c:	200690fa 	slli	r3,r4,3
 1005d70:	003f7306 	br	1005b40 <_malloc_r+0x4d8>
 1005d74:	0104303a 	nor	r2,zero,r4
 1005d78:	388e703a 	and	r7,r7,r2
 1005d7c:	e1c00115 	stw	r7,4(fp)
 1005d80:	003fe906 	br	1005d28 <_malloc_r+0x6c0>
 1005d84:	00815504 	movi	r2,1364
 1005d88:	1100032e 	bgeu	r2,r4,1005d98 <_malloc_r+0x730>
 1005d8c:	01001f84 	movi	r4,126
 1005d90:	00c0fc04 	movi	r3,1008
 1005d94:	003f6a06 	br	1005b40 <_malloc_r+0x4d8>
 1005d98:	2804d4ba 	srli	r2,r5,18
 1005d9c:	11001f04 	addi	r4,r2,124
 1005da0:	200690fa 	slli	r3,r4,3
 1005da4:	003f6606 	br	1005b40 <_malloc_r+0x4d8>

01005da8 <memchr>:
 1005da8:	008000c4 	movi	r2,3
 1005dac:	29403fcc 	andi	r5,r5,255
 1005db0:	2007883a 	mov	r3,r4
 1005db4:	1180022e 	bgeu	r2,r6,1005dc0 <memchr+0x18>
 1005db8:	2084703a 	and	r2,r4,r2
 1005dbc:	10000b26 	beq	r2,zero,1005dec <memchr+0x44>
 1005dc0:	313fffc4 	addi	r4,r6,-1
 1005dc4:	3000051e 	bne	r6,zero,1005ddc <memchr+0x34>
 1005dc8:	00002c06 	br	1005e7c <memchr+0xd4>
 1005dcc:	213fffc4 	addi	r4,r4,-1
 1005dd0:	00bfffc4 	movi	r2,-1
 1005dd4:	18c00044 	addi	r3,r3,1
 1005dd8:	20802826 	beq	r4,r2,1005e7c <memchr+0xd4>
 1005ddc:	18800003 	ldbu	r2,0(r3)
 1005de0:	28bffa1e 	bne	r5,r2,1005dcc <memchr+0x24>
 1005de4:	1805883a 	mov	r2,r3
 1005de8:	f800283a 	ret
 1005dec:	0011883a 	mov	r8,zero
 1005df0:	0007883a 	mov	r3,zero
 1005df4:	01c00104 	movi	r7,4
 1005df8:	4004923a 	slli	r2,r8,8
 1005dfc:	18c00044 	addi	r3,r3,1
 1005e00:	1151883a 	add	r8,r2,r5
 1005e04:	19fffc1e 	bne	r3,r7,1005df8 <memchr+0x50>
 1005e08:	02bfbff4 	movhi	r10,65279
 1005e0c:	52bfbfc4 	addi	r10,r10,-257
 1005e10:	02602074 	movhi	r9,32897
 1005e14:	4a602004 	addi	r9,r9,-32640
 1005e18:	02c000c4 	movi	r11,3
 1005e1c:	20800017 	ldw	r2,0(r4)
 1005e20:	31bfff04 	addi	r6,r6,-4
 1005e24:	200f883a 	mov	r7,r4
 1005e28:	1204f03a 	xor	r2,r2,r8
 1005e2c:	1287883a 	add	r3,r2,r10
 1005e30:	1a46703a 	and	r3,r3,r9
 1005e34:	0084303a 	nor	r2,zero,r2
 1005e38:	10c4703a 	and	r2,r2,r3
 1005e3c:	10000b26 	beq	r2,zero,1005e6c <memchr+0xc4>
 1005e40:	20800003 	ldbu	r2,0(r4)
 1005e44:	28800f26 	beq	r5,r2,1005e84 <memchr+0xdc>
 1005e48:	20800043 	ldbu	r2,1(r4)
 1005e4c:	21c00044 	addi	r7,r4,1
 1005e50:	28800c26 	beq	r5,r2,1005e84 <memchr+0xdc>
 1005e54:	20800083 	ldbu	r2,2(r4)
 1005e58:	21c00084 	addi	r7,r4,2
 1005e5c:	28800926 	beq	r5,r2,1005e84 <memchr+0xdc>
 1005e60:	208000c3 	ldbu	r2,3(r4)
 1005e64:	21c000c4 	addi	r7,r4,3
 1005e68:	28800626 	beq	r5,r2,1005e84 <memchr+0xdc>
 1005e6c:	21000104 	addi	r4,r4,4
 1005e70:	59bfea36 	bltu	r11,r6,1005e1c <memchr+0x74>
 1005e74:	2007883a 	mov	r3,r4
 1005e78:	003fd106 	br	1005dc0 <memchr+0x18>
 1005e7c:	0005883a 	mov	r2,zero
 1005e80:	f800283a 	ret
 1005e84:	3805883a 	mov	r2,r7
 1005e88:	f800283a 	ret

01005e8c <memcpy>:
 1005e8c:	01c003c4 	movi	r7,15
 1005e90:	2007883a 	mov	r3,r4
 1005e94:	3980032e 	bgeu	r7,r6,1005ea4 <memcpy+0x18>
 1005e98:	2904b03a 	or	r2,r5,r4
 1005e9c:	108000cc 	andi	r2,r2,3
 1005ea0:	10000926 	beq	r2,zero,1005ec8 <memcpy+0x3c>
 1005ea4:	30000626 	beq	r6,zero,1005ec0 <memcpy+0x34>
 1005ea8:	30cd883a 	add	r6,r6,r3
 1005eac:	28800003 	ldbu	r2,0(r5)
 1005eb0:	29400044 	addi	r5,r5,1
 1005eb4:	18800005 	stb	r2,0(r3)
 1005eb8:	18c00044 	addi	r3,r3,1
 1005ebc:	30fffb1e 	bne	r6,r3,1005eac <memcpy+0x20>
 1005ec0:	2005883a 	mov	r2,r4
 1005ec4:	f800283a 	ret
 1005ec8:	3811883a 	mov	r8,r7
 1005ecc:	200f883a 	mov	r7,r4
 1005ed0:	28c00017 	ldw	r3,0(r5)
 1005ed4:	31bffc04 	addi	r6,r6,-16
 1005ed8:	38c00015 	stw	r3,0(r7)
 1005edc:	28800117 	ldw	r2,4(r5)
 1005ee0:	38800115 	stw	r2,4(r7)
 1005ee4:	28c00217 	ldw	r3,8(r5)
 1005ee8:	38c00215 	stw	r3,8(r7)
 1005eec:	28800317 	ldw	r2,12(r5)
 1005ef0:	29400404 	addi	r5,r5,16
 1005ef4:	38800315 	stw	r2,12(r7)
 1005ef8:	39c00404 	addi	r7,r7,16
 1005efc:	41bff436 	bltu	r8,r6,1005ed0 <memcpy+0x44>
 1005f00:	008000c4 	movi	r2,3
 1005f04:	1180072e 	bgeu	r2,r6,1005f24 <memcpy+0x98>
 1005f08:	1007883a 	mov	r3,r2
 1005f0c:	28800017 	ldw	r2,0(r5)
 1005f10:	31bfff04 	addi	r6,r6,-4
 1005f14:	29400104 	addi	r5,r5,4
 1005f18:	38800015 	stw	r2,0(r7)
 1005f1c:	39c00104 	addi	r7,r7,4
 1005f20:	19bffa36 	bltu	r3,r6,1005f0c <memcpy+0x80>
 1005f24:	3807883a 	mov	r3,r7
 1005f28:	003fde06 	br	1005ea4 <memcpy+0x18>

01005f2c <memmove>:
 1005f2c:	2807883a 	mov	r3,r5
 1005f30:	2011883a 	mov	r8,r4
 1005f34:	29000c2e 	bgeu	r5,r4,1005f68 <memmove+0x3c>
 1005f38:	298f883a 	add	r7,r5,r6
 1005f3c:	21c00a2e 	bgeu	r4,r7,1005f68 <memmove+0x3c>
 1005f40:	30000726 	beq	r6,zero,1005f60 <memmove+0x34>
 1005f44:	2187883a 	add	r3,r4,r6
 1005f48:	198dc83a 	sub	r6,r3,r6
 1005f4c:	39ffffc4 	addi	r7,r7,-1
 1005f50:	38800003 	ldbu	r2,0(r7)
 1005f54:	18ffffc4 	addi	r3,r3,-1
 1005f58:	18800005 	stb	r2,0(r3)
 1005f5c:	19bffb1e 	bne	r3,r6,1005f4c <memmove+0x20>
 1005f60:	2005883a 	mov	r2,r4
 1005f64:	f800283a 	ret
 1005f68:	01c003c4 	movi	r7,15
 1005f6c:	39800a36 	bltu	r7,r6,1005f98 <memmove+0x6c>
 1005f70:	303ffb26 	beq	r6,zero,1005f60 <memmove+0x34>
 1005f74:	400f883a 	mov	r7,r8
 1005f78:	320d883a 	add	r6,r6,r8
 1005f7c:	28800003 	ldbu	r2,0(r5)
 1005f80:	29400044 	addi	r5,r5,1
 1005f84:	38800005 	stb	r2,0(r7)
 1005f88:	39c00044 	addi	r7,r7,1
 1005f8c:	39bffb1e 	bne	r7,r6,1005f7c <memmove+0x50>
 1005f90:	2005883a 	mov	r2,r4
 1005f94:	f800283a 	ret
 1005f98:	1904b03a 	or	r2,r3,r4
 1005f9c:	108000cc 	andi	r2,r2,3
 1005fa0:	103ff31e 	bne	r2,zero,1005f70 <memmove+0x44>
 1005fa4:	3811883a 	mov	r8,r7
 1005fa8:	180b883a 	mov	r5,r3
 1005fac:	200f883a 	mov	r7,r4
 1005fb0:	28c00017 	ldw	r3,0(r5)
 1005fb4:	31bffc04 	addi	r6,r6,-16
 1005fb8:	38c00015 	stw	r3,0(r7)
 1005fbc:	28800117 	ldw	r2,4(r5)
 1005fc0:	38800115 	stw	r2,4(r7)
 1005fc4:	28c00217 	ldw	r3,8(r5)
 1005fc8:	38c00215 	stw	r3,8(r7)
 1005fcc:	28800317 	ldw	r2,12(r5)
 1005fd0:	29400404 	addi	r5,r5,16
 1005fd4:	38800315 	stw	r2,12(r7)
 1005fd8:	39c00404 	addi	r7,r7,16
 1005fdc:	41bff436 	bltu	r8,r6,1005fb0 <memmove+0x84>
 1005fe0:	008000c4 	movi	r2,3
 1005fe4:	1180072e 	bgeu	r2,r6,1006004 <memmove+0xd8>
 1005fe8:	1007883a 	mov	r3,r2
 1005fec:	28800017 	ldw	r2,0(r5)
 1005ff0:	31bfff04 	addi	r6,r6,-4
 1005ff4:	29400104 	addi	r5,r5,4
 1005ff8:	38800015 	stw	r2,0(r7)
 1005ffc:	39c00104 	addi	r7,r7,4
 1006000:	19bffa36 	bltu	r3,r6,1005fec <memmove+0xc0>
 1006004:	3811883a 	mov	r8,r7
 1006008:	003fd906 	br	1005f70 <memmove+0x44>

0100600c <memset>:
 100600c:	008000c4 	movi	r2,3
 1006010:	29403fcc 	andi	r5,r5,255
 1006014:	2007883a 	mov	r3,r4
 1006018:	1180022e 	bgeu	r2,r6,1006024 <memset+0x18>
 100601c:	2084703a 	and	r2,r4,r2
 1006020:	10000826 	beq	r2,zero,1006044 <memset+0x38>
 1006024:	30000526 	beq	r6,zero,100603c <memset+0x30>
 1006028:	2805883a 	mov	r2,r5
 100602c:	30cd883a 	add	r6,r6,r3
 1006030:	18800005 	stb	r2,0(r3)
 1006034:	18c00044 	addi	r3,r3,1
 1006038:	19bffd1e 	bne	r3,r6,1006030 <memset+0x24>
 100603c:	2005883a 	mov	r2,r4
 1006040:	f800283a 	ret
 1006044:	2804923a 	slli	r2,r5,8
 1006048:	020003c4 	movi	r8,15
 100604c:	200f883a 	mov	r7,r4
 1006050:	2884b03a 	or	r2,r5,r2
 1006054:	1006943a 	slli	r3,r2,16
 1006058:	10c6b03a 	or	r3,r2,r3
 100605c:	41800a2e 	bgeu	r8,r6,1006088 <memset+0x7c>
 1006060:	4005883a 	mov	r2,r8
 1006064:	31bffc04 	addi	r6,r6,-16
 1006068:	38c00015 	stw	r3,0(r7)
 100606c:	38c00115 	stw	r3,4(r7)
 1006070:	38c00215 	stw	r3,8(r7)
 1006074:	38c00315 	stw	r3,12(r7)
 1006078:	39c00404 	addi	r7,r7,16
 100607c:	11bff936 	bltu	r2,r6,1006064 <memset+0x58>
 1006080:	008000c4 	movi	r2,3
 1006084:	1180052e 	bgeu	r2,r6,100609c <memset+0x90>
 1006088:	31bfff04 	addi	r6,r6,-4
 100608c:	008000c4 	movi	r2,3
 1006090:	38c00015 	stw	r3,0(r7)
 1006094:	39c00104 	addi	r7,r7,4
 1006098:	11bffb36 	bltu	r2,r6,1006088 <memset+0x7c>
 100609c:	3807883a 	mov	r3,r7
 10060a0:	003fe006 	br	1006024 <memset+0x18>

010060a4 <_Bfree>:
 10060a4:	28000826 	beq	r5,zero,10060c8 <_Bfree+0x24>
 10060a8:	28800117 	ldw	r2,4(r5)
 10060ac:	21001317 	ldw	r4,76(r4)
 10060b0:	1085883a 	add	r2,r2,r2
 10060b4:	1085883a 	add	r2,r2,r2
 10060b8:	1105883a 	add	r2,r2,r4
 10060bc:	10c00017 	ldw	r3,0(r2)
 10060c0:	28c00015 	stw	r3,0(r5)
 10060c4:	11400015 	stw	r5,0(r2)
 10060c8:	f800283a 	ret

010060cc <__hi0bits>:
 10060cc:	20bfffec 	andhi	r2,r4,65535
 10060d0:	10001426 	beq	r2,zero,1006124 <__hi0bits+0x58>
 10060d4:	0007883a 	mov	r3,zero
 10060d8:	20bfc02c 	andhi	r2,r4,65280
 10060dc:	1000021e 	bne	r2,zero,10060e8 <__hi0bits+0x1c>
 10060e0:	2008923a 	slli	r4,r4,8
 10060e4:	18c00204 	addi	r3,r3,8
 10060e8:	20bc002c 	andhi	r2,r4,61440
 10060ec:	1000021e 	bne	r2,zero,10060f8 <__hi0bits+0x2c>
 10060f0:	2008913a 	slli	r4,r4,4
 10060f4:	18c00104 	addi	r3,r3,4
 10060f8:	20b0002c 	andhi	r2,r4,49152
 10060fc:	1000031e 	bne	r2,zero,100610c <__hi0bits+0x40>
 1006100:	2105883a 	add	r2,r4,r4
 1006104:	18c00084 	addi	r3,r3,2
 1006108:	1089883a 	add	r4,r2,r2
 100610c:	20000316 	blt	r4,zero,100611c <__hi0bits+0x50>
 1006110:	2090002c 	andhi	r2,r4,16384
 1006114:	10000626 	beq	r2,zero,1006130 <__hi0bits+0x64>
 1006118:	18c00044 	addi	r3,r3,1
 100611c:	1805883a 	mov	r2,r3
 1006120:	f800283a 	ret
 1006124:	2008943a 	slli	r4,r4,16
 1006128:	00c00404 	movi	r3,16
 100612c:	003fea06 	br	10060d8 <__hi0bits+0xc>
 1006130:	00c00804 	movi	r3,32
 1006134:	1805883a 	mov	r2,r3
 1006138:	f800283a 	ret

0100613c <__lo0bits>:
 100613c:	20c00017 	ldw	r3,0(r4)
 1006140:	188001cc 	andi	r2,r3,7
 1006144:	10000a26 	beq	r2,zero,1006170 <__lo0bits+0x34>
 1006148:	1880004c 	andi	r2,r3,1
 100614c:	1005003a 	cmpeq	r2,r2,zero
 1006150:	10002126 	beq	r2,zero,10061d8 <__lo0bits+0x9c>
 1006154:	1880008c 	andi	r2,r3,2
 1006158:	1000251e 	bne	r2,zero,10061f0 <__lo0bits+0xb4>
 100615c:	1804d0ba 	srli	r2,r3,2
 1006160:	01400084 	movi	r5,2
 1006164:	20800015 	stw	r2,0(r4)
 1006168:	2805883a 	mov	r2,r5
 100616c:	f800283a 	ret
 1006170:	18bfffcc 	andi	r2,r3,65535
 1006174:	10001526 	beq	r2,zero,10061cc <__lo0bits+0x90>
 1006178:	000b883a 	mov	r5,zero
 100617c:	18803fcc 	andi	r2,r3,255
 1006180:	1000021e 	bne	r2,zero,100618c <__lo0bits+0x50>
 1006184:	1806d23a 	srli	r3,r3,8
 1006188:	29400204 	addi	r5,r5,8
 100618c:	188003cc 	andi	r2,r3,15
 1006190:	1000021e 	bne	r2,zero,100619c <__lo0bits+0x60>
 1006194:	1806d13a 	srli	r3,r3,4
 1006198:	29400104 	addi	r5,r5,4
 100619c:	188000cc 	andi	r2,r3,3
 10061a0:	1000021e 	bne	r2,zero,10061ac <__lo0bits+0x70>
 10061a4:	1806d0ba 	srli	r3,r3,2
 10061a8:	29400084 	addi	r5,r5,2
 10061ac:	1880004c 	andi	r2,r3,1
 10061b0:	1000031e 	bne	r2,zero,10061c0 <__lo0bits+0x84>
 10061b4:	1806d07a 	srli	r3,r3,1
 10061b8:	18000a26 	beq	r3,zero,10061e4 <__lo0bits+0xa8>
 10061bc:	29400044 	addi	r5,r5,1
 10061c0:	2805883a 	mov	r2,r5
 10061c4:	20c00015 	stw	r3,0(r4)
 10061c8:	f800283a 	ret
 10061cc:	1806d43a 	srli	r3,r3,16
 10061d0:	01400404 	movi	r5,16
 10061d4:	003fe906 	br	100617c <__lo0bits+0x40>
 10061d8:	000b883a 	mov	r5,zero
 10061dc:	2805883a 	mov	r2,r5
 10061e0:	f800283a 	ret
 10061e4:	01400804 	movi	r5,32
 10061e8:	2805883a 	mov	r2,r5
 10061ec:	f800283a 	ret
 10061f0:	1804d07a 	srli	r2,r3,1
 10061f4:	01400044 	movi	r5,1
 10061f8:	20800015 	stw	r2,0(r4)
 10061fc:	003fda06 	br	1006168 <__lo0bits+0x2c>

01006200 <__mcmp>:
 1006200:	20800417 	ldw	r2,16(r4)
 1006204:	28c00417 	ldw	r3,16(r5)
 1006208:	10cfc83a 	sub	r7,r2,r3
 100620c:	38000c1e 	bne	r7,zero,1006240 <__mcmp+0x40>
 1006210:	18c5883a 	add	r2,r3,r3
 1006214:	1085883a 	add	r2,r2,r2
 1006218:	10c00504 	addi	r3,r2,20
 100621c:	21000504 	addi	r4,r4,20
 1006220:	28cb883a 	add	r5,r5,r3
 1006224:	2085883a 	add	r2,r4,r2
 1006228:	10bfff04 	addi	r2,r2,-4
 100622c:	297fff04 	addi	r5,r5,-4
 1006230:	11800017 	ldw	r6,0(r2)
 1006234:	28c00017 	ldw	r3,0(r5)
 1006238:	30c0031e 	bne	r6,r3,1006248 <__mcmp+0x48>
 100623c:	20bffa36 	bltu	r4,r2,1006228 <__mcmp+0x28>
 1006240:	3805883a 	mov	r2,r7
 1006244:	f800283a 	ret
 1006248:	30c00336 	bltu	r6,r3,1006258 <__mcmp+0x58>
 100624c:	01c00044 	movi	r7,1
 1006250:	3805883a 	mov	r2,r7
 1006254:	f800283a 	ret
 1006258:	01ffffc4 	movi	r7,-1
 100625c:	003ff806 	br	1006240 <__mcmp+0x40>

01006260 <__ulp>:
 1006260:	295ffc2c 	andhi	r5,r5,32752
 1006264:	013f3034 	movhi	r4,64704
 1006268:	290b883a 	add	r5,r5,r4
 100626c:	0145c83a 	sub	r2,zero,r5
 1006270:	1007d53a 	srai	r3,r2,20
 1006274:	000d883a 	mov	r6,zero
 1006278:	0140040e 	bge	zero,r5,100628c <__ulp+0x2c>
 100627c:	280f883a 	mov	r7,r5
 1006280:	3807883a 	mov	r3,r7
 1006284:	3005883a 	mov	r2,r6
 1006288:	f800283a 	ret
 100628c:	008004c4 	movi	r2,19
 1006290:	193ffb04 	addi	r4,r3,-20
 1006294:	10c00c0e 	bge	r2,r3,10062c8 <__ulp+0x68>
 1006298:	008007c4 	movi	r2,31
 100629c:	1107c83a 	sub	r3,r2,r4
 10062a0:	00800784 	movi	r2,30
 10062a4:	01400044 	movi	r5,1
 10062a8:	11000216 	blt	r2,r4,10062b4 <__ulp+0x54>
 10062ac:	00800044 	movi	r2,1
 10062b0:	10ca983a 	sll	r5,r2,r3
 10062b4:	000f883a 	mov	r7,zero
 10062b8:	280d883a 	mov	r6,r5
 10062bc:	3807883a 	mov	r3,r7
 10062c0:	3005883a 	mov	r2,r6
 10062c4:	f800283a 	ret
 10062c8:	00800234 	movhi	r2,8
 10062cc:	10cfd83a 	sra	r7,r2,r3
 10062d0:	000d883a 	mov	r6,zero
 10062d4:	3005883a 	mov	r2,r6
 10062d8:	3807883a 	mov	r3,r7
 10062dc:	f800283a 	ret

010062e0 <__b2d>:
 10062e0:	20800417 	ldw	r2,16(r4)
 10062e4:	defff904 	addi	sp,sp,-28
 10062e8:	dd000415 	stw	r20,16(sp)
 10062ec:	1085883a 	add	r2,r2,r2
 10062f0:	25000504 	addi	r20,r4,20
 10062f4:	1085883a 	add	r2,r2,r2
 10062f8:	dc000015 	stw	r16,0(sp)
 10062fc:	a0a1883a 	add	r16,r20,r2
 1006300:	dd400515 	stw	r21,20(sp)
 1006304:	857fff17 	ldw	r21,-4(r16)
 1006308:	dc400115 	stw	r17,4(sp)
 100630c:	dfc00615 	stw	ra,24(sp)
 1006310:	a809883a 	mov	r4,r21
 1006314:	2823883a 	mov	r17,r5
 1006318:	dcc00315 	stw	r19,12(sp)
 100631c:	dc800215 	stw	r18,8(sp)
 1006320:	10060cc0 	call	10060cc <__hi0bits>
 1006324:	100b883a 	mov	r5,r2
 1006328:	00800804 	movi	r2,32
 100632c:	1145c83a 	sub	r2,r2,r5
 1006330:	88800015 	stw	r2,0(r17)
 1006334:	00800284 	movi	r2,10
 1006338:	80ffff04 	addi	r3,r16,-4
 100633c:	11401416 	blt	r2,r5,1006390 <__b2d+0xb0>
 1006340:	008002c4 	movi	r2,11
 1006344:	1149c83a 	sub	r4,r2,r5
 1006348:	a0c02736 	bltu	r20,r3,10063e8 <__b2d+0x108>
 100634c:	000d883a 	mov	r6,zero
 1006350:	28800544 	addi	r2,r5,21
 1006354:	a906d83a 	srl	r3,r21,r4
 1006358:	a884983a 	sll	r2,r21,r2
 100635c:	1ccffc34 	orhi	r19,r3,16368
 1006360:	11a4b03a 	or	r18,r2,r6
 1006364:	9005883a 	mov	r2,r18
 1006368:	9807883a 	mov	r3,r19
 100636c:	dfc00617 	ldw	ra,24(sp)
 1006370:	dd400517 	ldw	r21,20(sp)
 1006374:	dd000417 	ldw	r20,16(sp)
 1006378:	dcc00317 	ldw	r19,12(sp)
 100637c:	dc800217 	ldw	r18,8(sp)
 1006380:	dc400117 	ldw	r17,4(sp)
 1006384:	dc000017 	ldw	r16,0(sp)
 1006388:	dec00704 	addi	sp,sp,28
 100638c:	f800283a 	ret
 1006390:	a0c00e36 	bltu	r20,r3,10063cc <__b2d+0xec>
 1006394:	293ffd44 	addi	r4,r5,-11
 1006398:	000d883a 	mov	r6,zero
 100639c:	20000f26 	beq	r4,zero,10063dc <__b2d+0xfc>
 10063a0:	00800804 	movi	r2,32
 10063a4:	110bc83a 	sub	r5,r2,r4
 10063a8:	a0c01236 	bltu	r20,r3,10063f4 <__b2d+0x114>
 10063ac:	000f883a 	mov	r7,zero
 10063b0:	a904983a 	sll	r2,r21,r4
 10063b4:	3146d83a 	srl	r3,r6,r5
 10063b8:	3108983a 	sll	r4,r6,r4
 10063bc:	108ffc34 	orhi	r2,r2,16368
 10063c0:	18a6b03a 	or	r19,r3,r2
 10063c4:	3924b03a 	or	r18,r7,r4
 10063c8:	003fe606 	br	1006364 <__b2d+0x84>
 10063cc:	293ffd44 	addi	r4,r5,-11
 10063d0:	81bffe17 	ldw	r6,-8(r16)
 10063d4:	80fffe04 	addi	r3,r16,-8
 10063d8:	203ff11e 	bne	r4,zero,10063a0 <__b2d+0xc0>
 10063dc:	accffc34 	orhi	r19,r21,16368
 10063e0:	3025883a 	mov	r18,r6
 10063e4:	003fdf06 	br	1006364 <__b2d+0x84>
 10063e8:	18bfff17 	ldw	r2,-4(r3)
 10063ec:	110cd83a 	srl	r6,r2,r4
 10063f0:	003fd706 	br	1006350 <__b2d+0x70>
 10063f4:	18bfff17 	ldw	r2,-4(r3)
 10063f8:	114ed83a 	srl	r7,r2,r5
 10063fc:	003fec06 	br	10063b0 <__b2d+0xd0>

01006400 <__ratio>:
 1006400:	defff904 	addi	sp,sp,-28
 1006404:	dc400215 	stw	r17,8(sp)
 1006408:	2823883a 	mov	r17,r5
 100640c:	d80b883a 	mov	r5,sp
 1006410:	dfc00615 	stw	ra,24(sp)
 1006414:	dd000515 	stw	r20,20(sp)
 1006418:	dcc00415 	stw	r19,16(sp)
 100641c:	dc800315 	stw	r18,12(sp)
 1006420:	2025883a 	mov	r18,r4
 1006424:	10062e00 	call	10062e0 <__b2d>
 1006428:	8809883a 	mov	r4,r17
 100642c:	d9400104 	addi	r5,sp,4
 1006430:	1027883a 	mov	r19,r2
 1006434:	1829883a 	mov	r20,r3
 1006438:	10062e00 	call	10062e0 <__b2d>
 100643c:	89000417 	ldw	r4,16(r17)
 1006440:	91c00417 	ldw	r7,16(r18)
 1006444:	d9800117 	ldw	r6,4(sp)
 1006448:	180b883a 	mov	r5,r3
 100644c:	390fc83a 	sub	r7,r7,r4
 1006450:	1009883a 	mov	r4,r2
 1006454:	d8800017 	ldw	r2,0(sp)
 1006458:	380e917a 	slli	r7,r7,5
 100645c:	2011883a 	mov	r8,r4
 1006460:	1185c83a 	sub	r2,r2,r6
 1006464:	11c5883a 	add	r2,r2,r7
 1006468:	1006953a 	slli	r3,r2,20
 100646c:	2813883a 	mov	r9,r5
 1006470:	00800d0e 	bge	zero,r2,10064a8 <__ratio+0xa8>
 1006474:	1d29883a 	add	r20,r3,r20
 1006478:	a00b883a 	mov	r5,r20
 100647c:	480f883a 	mov	r7,r9
 1006480:	9809883a 	mov	r4,r19
 1006484:	400d883a 	mov	r6,r8
 1006488:	10095940 	call	1009594 <__divdf3>
 100648c:	dfc00617 	ldw	ra,24(sp)
 1006490:	dd000517 	ldw	r20,20(sp)
 1006494:	dcc00417 	ldw	r19,16(sp)
 1006498:	dc800317 	ldw	r18,12(sp)
 100649c:	dc400217 	ldw	r17,8(sp)
 10064a0:	dec00704 	addi	sp,sp,28
 10064a4:	f800283a 	ret
 10064a8:	28d3c83a 	sub	r9,r5,r3
 10064ac:	003ff206 	br	1006478 <__ratio+0x78>

010064b0 <_mprec_log10>:
 10064b0:	defffe04 	addi	sp,sp,-8
 10064b4:	008005c4 	movi	r2,23
 10064b8:	dc000015 	stw	r16,0(sp)
 10064bc:	dfc00115 	stw	ra,4(sp)
 10064c0:	2021883a 	mov	r16,r4
 10064c4:	11000c16 	blt	r2,r4,10064f8 <_mprec_log10+0x48>
 10064c8:	200490fa 	slli	r2,r4,3
 10064cc:	00c04074 	movhi	r3,257
 10064d0:	18f9ad04 	addi	r3,r3,-6476
 10064d4:	10c5883a 	add	r2,r2,r3
 10064d8:	12400117 	ldw	r9,4(r2)
 10064dc:	12000017 	ldw	r8,0(r2)
 10064e0:	4807883a 	mov	r3,r9
 10064e4:	4005883a 	mov	r2,r8
 10064e8:	dfc00117 	ldw	ra,4(sp)
 10064ec:	dc000017 	ldw	r16,0(sp)
 10064f0:	dec00204 	addi	sp,sp,8
 10064f4:	f800283a 	ret
 10064f8:	0011883a 	mov	r8,zero
 10064fc:	024ffc34 	movhi	r9,16368
 1006500:	0005883a 	mov	r2,zero
 1006504:	00d00934 	movhi	r3,16420
 1006508:	480b883a 	mov	r5,r9
 100650c:	4009883a 	mov	r4,r8
 1006510:	180f883a 	mov	r7,r3
 1006514:	100d883a 	mov	r6,r2
 1006518:	10091d00 	call	10091d0 <__muldf3>
 100651c:	843fffc4 	addi	r16,r16,-1
 1006520:	1011883a 	mov	r8,r2
 1006524:	1813883a 	mov	r9,r3
 1006528:	803ff51e 	bne	r16,zero,1006500 <_mprec_log10+0x50>
 100652c:	4005883a 	mov	r2,r8
 1006530:	4807883a 	mov	r3,r9
 1006534:	dfc00117 	ldw	ra,4(sp)
 1006538:	dc000017 	ldw	r16,0(sp)
 100653c:	dec00204 	addi	sp,sp,8
 1006540:	f800283a 	ret

01006544 <__copybits>:
 1006544:	297fffc4 	addi	r5,r5,-1
 1006548:	30800417 	ldw	r2,16(r6)
 100654c:	280bd17a 	srai	r5,r5,5
 1006550:	31800504 	addi	r6,r6,20
 1006554:	1085883a 	add	r2,r2,r2
 1006558:	294b883a 	add	r5,r5,r5
 100655c:	294b883a 	add	r5,r5,r5
 1006560:	1085883a 	add	r2,r2,r2
 1006564:	290b883a 	add	r5,r5,r4
 1006568:	3087883a 	add	r3,r6,r2
 100656c:	29400104 	addi	r5,r5,4
 1006570:	30c0052e 	bgeu	r6,r3,1006588 <__copybits+0x44>
 1006574:	30800017 	ldw	r2,0(r6)
 1006578:	31800104 	addi	r6,r6,4
 100657c:	20800015 	stw	r2,0(r4)
 1006580:	21000104 	addi	r4,r4,4
 1006584:	30fffb36 	bltu	r6,r3,1006574 <__copybits+0x30>
 1006588:	2140032e 	bgeu	r4,r5,1006598 <__copybits+0x54>
 100658c:	20000015 	stw	zero,0(r4)
 1006590:	21000104 	addi	r4,r4,4
 1006594:	217ffd36 	bltu	r4,r5,100658c <__copybits+0x48>
 1006598:	f800283a 	ret

0100659c <__any_on>:
 100659c:	20800417 	ldw	r2,16(r4)
 10065a0:	2807d17a 	srai	r3,r5,5
 10065a4:	21000504 	addi	r4,r4,20
 10065a8:	10c00d0e 	bge	r2,r3,10065e0 <__any_on+0x44>
 10065ac:	1085883a 	add	r2,r2,r2
 10065b0:	1085883a 	add	r2,r2,r2
 10065b4:	208d883a 	add	r6,r4,r2
 10065b8:	2180182e 	bgeu	r4,r6,100661c <__any_on+0x80>
 10065bc:	30bfff17 	ldw	r2,-4(r6)
 10065c0:	30ffff04 	addi	r3,r6,-4
 10065c4:	1000041e 	bne	r2,zero,10065d8 <__any_on+0x3c>
 10065c8:	20c0142e 	bgeu	r4,r3,100661c <__any_on+0x80>
 10065cc:	18ffff04 	addi	r3,r3,-4
 10065d0:	18800017 	ldw	r2,0(r3)
 10065d4:	103ffc26 	beq	r2,zero,10065c8 <__any_on+0x2c>
 10065d8:	00800044 	movi	r2,1
 10065dc:	f800283a 	ret
 10065e0:	18800a0e 	bge	r3,r2,100660c <__any_on+0x70>
 10065e4:	294007cc 	andi	r5,r5,31
 10065e8:	28000826 	beq	r5,zero,100660c <__any_on+0x70>
 10065ec:	18c5883a 	add	r2,r3,r3
 10065f0:	1085883a 	add	r2,r2,r2
 10065f4:	208d883a 	add	r6,r4,r2
 10065f8:	30c00017 	ldw	r3,0(r6)
 10065fc:	1944d83a 	srl	r2,r3,r5
 1006600:	1144983a 	sll	r2,r2,r5
 1006604:	18bff41e 	bne	r3,r2,10065d8 <__any_on+0x3c>
 1006608:	003feb06 	br	10065b8 <__any_on+0x1c>
 100660c:	18c5883a 	add	r2,r3,r3
 1006610:	1085883a 	add	r2,r2,r2
 1006614:	208d883a 	add	r6,r4,r2
 1006618:	003fe706 	br	10065b8 <__any_on+0x1c>
 100661c:	0005883a 	mov	r2,zero
 1006620:	f800283a 	ret

01006624 <_Balloc>:
 1006624:	20c01317 	ldw	r3,76(r4)
 1006628:	defffb04 	addi	sp,sp,-20
 100662c:	dcc00315 	stw	r19,12(sp)
 1006630:	dc800215 	stw	r18,8(sp)
 1006634:	dfc00415 	stw	ra,16(sp)
 1006638:	2825883a 	mov	r18,r5
 100663c:	dc400115 	stw	r17,4(sp)
 1006640:	dc000015 	stw	r16,0(sp)
 1006644:	2027883a 	mov	r19,r4
 1006648:	01800404 	movi	r6,16
 100664c:	01400104 	movi	r5,4
 1006650:	18001726 	beq	r3,zero,10066b0 <_Balloc+0x8c>
 1006654:	01400044 	movi	r5,1
 1006658:	9485883a 	add	r2,r18,r18
 100665c:	2ca2983a 	sll	r17,r5,r18
 1006660:	1085883a 	add	r2,r2,r2
 1006664:	10c7883a 	add	r3,r2,r3
 1006668:	1c000017 	ldw	r16,0(r3)
 100666c:	8c4d883a 	add	r6,r17,r17
 1006670:	318d883a 	add	r6,r6,r6
 1006674:	9809883a 	mov	r4,r19
 1006678:	31800504 	addi	r6,r6,20
 100667c:	80001226 	beq	r16,zero,10066c8 <_Balloc+0xa4>
 1006680:	80800017 	ldw	r2,0(r16)
 1006684:	18800015 	stw	r2,0(r3)
 1006688:	80000415 	stw	zero,16(r16)
 100668c:	80000315 	stw	zero,12(r16)
 1006690:	8005883a 	mov	r2,r16
 1006694:	dfc00417 	ldw	ra,16(sp)
 1006698:	dcc00317 	ldw	r19,12(sp)
 100669c:	dc800217 	ldw	r18,8(sp)
 10066a0:	dc400117 	ldw	r17,4(sp)
 10066a4:	dc000017 	ldw	r16,0(sp)
 10066a8:	dec00504 	addi	sp,sp,20
 10066ac:	f800283a 	ret
 10066b0:	1007d240 	call	1007d24 <_calloc_r>
 10066b4:	1007883a 	mov	r3,r2
 10066b8:	0021883a 	mov	r16,zero
 10066bc:	98801315 	stw	r2,76(r19)
 10066c0:	103fe41e 	bne	r2,zero,1006654 <_Balloc+0x30>
 10066c4:	003ff206 	br	1006690 <_Balloc+0x6c>
 10066c8:	1007d240 	call	1007d24 <_calloc_r>
 10066cc:	103ff026 	beq	r2,zero,1006690 <_Balloc+0x6c>
 10066d0:	1021883a 	mov	r16,r2
 10066d4:	14800115 	stw	r18,4(r2)
 10066d8:	14400215 	stw	r17,8(r2)
 10066dc:	003fea06 	br	1006688 <_Balloc+0x64>

010066e0 <__d2b>:
 10066e0:	defff504 	addi	sp,sp,-44
 10066e4:	dcc00515 	stw	r19,20(sp)
 10066e8:	04c00044 	movi	r19,1
 10066ec:	dc000215 	stw	r16,8(sp)
 10066f0:	2821883a 	mov	r16,r5
 10066f4:	980b883a 	mov	r5,r19
 10066f8:	ddc00915 	stw	r23,36(sp)
 10066fc:	dd800815 	stw	r22,32(sp)
 1006700:	dd400715 	stw	r21,28(sp)
 1006704:	dd000615 	stw	r20,24(sp)
 1006708:	dc800415 	stw	r18,16(sp)
 100670c:	dc400315 	stw	r17,12(sp)
 1006710:	dfc00a15 	stw	ra,40(sp)
 1006714:	3023883a 	mov	r17,r6
 1006718:	382d883a 	mov	r22,r7
 100671c:	ddc00b17 	ldw	r23,44(sp)
 1006720:	10066240 	call	1006624 <_Balloc>
 1006724:	1025883a 	mov	r18,r2
 1006728:	00a00034 	movhi	r2,32768
 100672c:	10bfffc4 	addi	r2,r2,-1
 1006730:	8888703a 	and	r4,r17,r2
 1006734:	202ad53a 	srli	r21,r4,20
 1006738:	00800434 	movhi	r2,16
 100673c:	10bfffc4 	addi	r2,r2,-1
 1006740:	8886703a 	and	r3,r17,r2
 1006744:	a829003a 	cmpeq	r20,r21,zero
 1006748:	800b883a 	mov	r5,r16
 100674c:	d8c00115 	stw	r3,4(sp)
 1006750:	94000504 	addi	r16,r18,20
 1006754:	a000021e 	bne	r20,zero,1006760 <__d2b+0x80>
 1006758:	18c00434 	orhi	r3,r3,16
 100675c:	d8c00115 	stw	r3,4(sp)
 1006760:	28002726 	beq	r5,zero,1006800 <__d2b+0x120>
 1006764:	d809883a 	mov	r4,sp
 1006768:	d9400015 	stw	r5,0(sp)
 100676c:	100613c0 	call	100613c <__lo0bits>
 1006770:	100d883a 	mov	r6,r2
 1006774:	10003526 	beq	r2,zero,100684c <__d2b+0x16c>
 1006778:	d8c00117 	ldw	r3,4(sp)
 100677c:	00800804 	movi	r2,32
 1006780:	1185c83a 	sub	r2,r2,r6
 1006784:	d9000017 	ldw	r4,0(sp)
 1006788:	1886983a 	sll	r3,r3,r2
 100678c:	1906b03a 	or	r3,r3,r4
 1006790:	90c00515 	stw	r3,20(r18)
 1006794:	d8c00117 	ldw	r3,4(sp)
 1006798:	1986d83a 	srl	r3,r3,r6
 100679c:	d8c00115 	stw	r3,4(sp)
 10067a0:	180b003a 	cmpeq	r5,r3,zero
 10067a4:	00800084 	movi	r2,2
 10067a8:	114bc83a 	sub	r5,r2,r5
 10067ac:	80c00115 	stw	r3,4(r16)
 10067b0:	91400415 	stw	r5,16(r18)
 10067b4:	a0001a1e 	bne	r20,zero,1006820 <__d2b+0x140>
 10067b8:	3545883a 	add	r2,r6,r21
 10067bc:	10bef344 	addi	r2,r2,-1075
 10067c0:	00c00d44 	movi	r3,53
 10067c4:	b0800015 	stw	r2,0(r22)
 10067c8:	1987c83a 	sub	r3,r3,r6
 10067cc:	b8c00015 	stw	r3,0(r23)
 10067d0:	9005883a 	mov	r2,r18
 10067d4:	dfc00a17 	ldw	ra,40(sp)
 10067d8:	ddc00917 	ldw	r23,36(sp)
 10067dc:	dd800817 	ldw	r22,32(sp)
 10067e0:	dd400717 	ldw	r21,28(sp)
 10067e4:	dd000617 	ldw	r20,24(sp)
 10067e8:	dcc00517 	ldw	r19,20(sp)
 10067ec:	dc800417 	ldw	r18,16(sp)
 10067f0:	dc400317 	ldw	r17,12(sp)
 10067f4:	dc000217 	ldw	r16,8(sp)
 10067f8:	dec00b04 	addi	sp,sp,44
 10067fc:	f800283a 	ret
 1006800:	d9000104 	addi	r4,sp,4
 1006804:	100613c0 	call	100613c <__lo0bits>
 1006808:	11800804 	addi	r6,r2,32
 100680c:	d8800117 	ldw	r2,4(sp)
 1006810:	94c00415 	stw	r19,16(r18)
 1006814:	980b883a 	mov	r5,r19
 1006818:	90800515 	stw	r2,20(r18)
 100681c:	a03fe626 	beq	r20,zero,10067b8 <__d2b+0xd8>
 1006820:	2945883a 	add	r2,r5,r5
 1006824:	1085883a 	add	r2,r2,r2
 1006828:	1405883a 	add	r2,r2,r16
 100682c:	113fff17 	ldw	r4,-4(r2)
 1006830:	30fef384 	addi	r3,r6,-1074
 1006834:	2820917a 	slli	r16,r5,5
 1006838:	b0c00015 	stw	r3,0(r22)
 100683c:	10060cc0 	call	10060cc <__hi0bits>
 1006840:	80a1c83a 	sub	r16,r16,r2
 1006844:	bc000015 	stw	r16,0(r23)
 1006848:	003fe106 	br	10067d0 <__d2b+0xf0>
 100684c:	d8800017 	ldw	r2,0(sp)
 1006850:	90800515 	stw	r2,20(r18)
 1006854:	d8c00117 	ldw	r3,4(sp)
 1006858:	003fd106 	br	10067a0 <__d2b+0xc0>

0100685c <__mdiff>:
 100685c:	defffb04 	addi	sp,sp,-20
 1006860:	dc000015 	stw	r16,0(sp)
 1006864:	2821883a 	mov	r16,r5
 1006868:	dc800215 	stw	r18,8(sp)
 100686c:	300b883a 	mov	r5,r6
 1006870:	2025883a 	mov	r18,r4
 1006874:	8009883a 	mov	r4,r16
 1006878:	dc400115 	stw	r17,4(sp)
 100687c:	dfc00415 	stw	ra,16(sp)
 1006880:	dcc00315 	stw	r19,12(sp)
 1006884:	3023883a 	mov	r17,r6
 1006888:	10062000 	call	1006200 <__mcmp>
 100688c:	10004226 	beq	r2,zero,1006998 <__mdiff+0x13c>
 1006890:	10005016 	blt	r2,zero,10069d4 <__mdiff+0x178>
 1006894:	0027883a 	mov	r19,zero
 1006898:	81400117 	ldw	r5,4(r16)
 100689c:	9009883a 	mov	r4,r18
 10068a0:	10066240 	call	1006624 <_Balloc>
 10068a4:	1019883a 	mov	r12,r2
 10068a8:	82800417 	ldw	r10,16(r16)
 10068ac:	88800417 	ldw	r2,16(r17)
 10068b0:	81800504 	addi	r6,r16,20
 10068b4:	5287883a 	add	r3,r10,r10
 10068b8:	1085883a 	add	r2,r2,r2
 10068bc:	18c7883a 	add	r3,r3,r3
 10068c0:	1085883a 	add	r2,r2,r2
 10068c4:	8a000504 	addi	r8,r17,20
 10068c8:	64c00315 	stw	r19,12(r12)
 10068cc:	30db883a 	add	r13,r6,r3
 10068d0:	4097883a 	add	r11,r8,r2
 10068d4:	61c00504 	addi	r7,r12,20
 10068d8:	0013883a 	mov	r9,zero
 10068dc:	31000017 	ldw	r4,0(r6)
 10068e0:	41400017 	ldw	r5,0(r8)
 10068e4:	42000104 	addi	r8,r8,4
 10068e8:	20bfffcc 	andi	r2,r4,65535
 10068ec:	28ffffcc 	andi	r3,r5,65535
 10068f0:	10c5c83a 	sub	r2,r2,r3
 10068f4:	1245883a 	add	r2,r2,r9
 10068f8:	2008d43a 	srli	r4,r4,16
 10068fc:	280ad43a 	srli	r5,r5,16
 1006900:	1007d43a 	srai	r3,r2,16
 1006904:	3880000d 	sth	r2,0(r7)
 1006908:	2149c83a 	sub	r4,r4,r5
 100690c:	20c9883a 	add	r4,r4,r3
 1006910:	3900008d 	sth	r4,2(r7)
 1006914:	31800104 	addi	r6,r6,4
 1006918:	39c00104 	addi	r7,r7,4
 100691c:	2013d43a 	srai	r9,r4,16
 1006920:	42ffee36 	bltu	r8,r11,10068dc <__mdiff+0x80>
 1006924:	33400c2e 	bgeu	r6,r13,1006958 <__mdiff+0xfc>
 1006928:	30800017 	ldw	r2,0(r6)
 100692c:	31800104 	addi	r6,r6,4
 1006930:	10ffffcc 	andi	r3,r2,65535
 1006934:	1a47883a 	add	r3,r3,r9
 1006938:	1004d43a 	srli	r2,r2,16
 100693c:	1809d43a 	srai	r4,r3,16
 1006940:	38c0000d 	sth	r3,0(r7)
 1006944:	1105883a 	add	r2,r2,r4
 1006948:	3880008d 	sth	r2,2(r7)
 100694c:	1013d43a 	srai	r9,r2,16
 1006950:	39c00104 	addi	r7,r7,4
 1006954:	337ff436 	bltu	r6,r13,1006928 <__mdiff+0xcc>
 1006958:	38bfff17 	ldw	r2,-4(r7)
 100695c:	38ffff04 	addi	r3,r7,-4
 1006960:	1000041e 	bne	r2,zero,1006974 <__mdiff+0x118>
 1006964:	18ffff04 	addi	r3,r3,-4
 1006968:	18800017 	ldw	r2,0(r3)
 100696c:	52bfffc4 	addi	r10,r10,-1
 1006970:	103ffc26 	beq	r2,zero,1006964 <__mdiff+0x108>
 1006974:	6005883a 	mov	r2,r12
 1006978:	62800415 	stw	r10,16(r12)
 100697c:	dfc00417 	ldw	ra,16(sp)
 1006980:	dcc00317 	ldw	r19,12(sp)
 1006984:	dc800217 	ldw	r18,8(sp)
 1006988:	dc400117 	ldw	r17,4(sp)
 100698c:	dc000017 	ldw	r16,0(sp)
 1006990:	dec00504 	addi	sp,sp,20
 1006994:	f800283a 	ret
 1006998:	9009883a 	mov	r4,r18
 100699c:	000b883a 	mov	r5,zero
 10069a0:	10066240 	call	1006624 <_Balloc>
 10069a4:	1019883a 	mov	r12,r2
 10069a8:	00800044 	movi	r2,1
 10069ac:	60800415 	stw	r2,16(r12)
 10069b0:	6005883a 	mov	r2,r12
 10069b4:	60000515 	stw	zero,20(r12)
 10069b8:	dfc00417 	ldw	ra,16(sp)
 10069bc:	dcc00317 	ldw	r19,12(sp)
 10069c0:	dc800217 	ldw	r18,8(sp)
 10069c4:	dc400117 	ldw	r17,4(sp)
 10069c8:	dc000017 	ldw	r16,0(sp)
 10069cc:	dec00504 	addi	sp,sp,20
 10069d0:	f800283a 	ret
 10069d4:	880d883a 	mov	r6,r17
 10069d8:	04c00044 	movi	r19,1
 10069dc:	8023883a 	mov	r17,r16
 10069e0:	3021883a 	mov	r16,r6
 10069e4:	003fac06 	br	1006898 <__mdiff+0x3c>

010069e8 <__lshift>:
 10069e8:	defff904 	addi	sp,sp,-28
 10069ec:	28800417 	ldw	r2,16(r5)
 10069f0:	dc000015 	stw	r16,0(sp)
 10069f4:	3021d17a 	srai	r16,r6,5
 10069f8:	28c00217 	ldw	r3,8(r5)
 10069fc:	10800044 	addi	r2,r2,1
 1006a00:	dc400115 	stw	r17,4(sp)
 1006a04:	80a3883a 	add	r17,r16,r2
 1006a08:	dd400515 	stw	r21,20(sp)
 1006a0c:	dd000415 	stw	r20,16(sp)
 1006a10:	dc800215 	stw	r18,8(sp)
 1006a14:	dfc00615 	stw	ra,24(sp)
 1006a18:	2825883a 	mov	r18,r5
 1006a1c:	dcc00315 	stw	r19,12(sp)
 1006a20:	3029883a 	mov	r20,r6
 1006a24:	202b883a 	mov	r21,r4
 1006a28:	29400117 	ldw	r5,4(r5)
 1006a2c:	1c40030e 	bge	r3,r17,1006a3c <__lshift+0x54>
 1006a30:	18c7883a 	add	r3,r3,r3
 1006a34:	29400044 	addi	r5,r5,1
 1006a38:	1c7ffd16 	blt	r3,r17,1006a30 <__lshift+0x48>
 1006a3c:	a809883a 	mov	r4,r21
 1006a40:	10066240 	call	1006624 <_Balloc>
 1006a44:	1027883a 	mov	r19,r2
 1006a48:	11400504 	addi	r5,r2,20
 1006a4c:	0400090e 	bge	zero,r16,1006a74 <__lshift+0x8c>
 1006a50:	2805883a 	mov	r2,r5
 1006a54:	0007883a 	mov	r3,zero
 1006a58:	18c00044 	addi	r3,r3,1
 1006a5c:	10000015 	stw	zero,0(r2)
 1006a60:	10800104 	addi	r2,r2,4
 1006a64:	80fffc1e 	bne	r16,r3,1006a58 <__lshift+0x70>
 1006a68:	8405883a 	add	r2,r16,r16
 1006a6c:	1085883a 	add	r2,r2,r2
 1006a70:	288b883a 	add	r5,r5,r2
 1006a74:	90800417 	ldw	r2,16(r18)
 1006a78:	91000504 	addi	r4,r18,20
 1006a7c:	a18007cc 	andi	r6,r20,31
 1006a80:	1085883a 	add	r2,r2,r2
 1006a84:	1085883a 	add	r2,r2,r2
 1006a88:	208f883a 	add	r7,r4,r2
 1006a8c:	30001e26 	beq	r6,zero,1006b08 <__lshift+0x120>
 1006a90:	00800804 	movi	r2,32
 1006a94:	1191c83a 	sub	r8,r2,r6
 1006a98:	0007883a 	mov	r3,zero
 1006a9c:	20800017 	ldw	r2,0(r4)
 1006aa0:	1184983a 	sll	r2,r2,r6
 1006aa4:	1884b03a 	or	r2,r3,r2
 1006aa8:	28800015 	stw	r2,0(r5)
 1006aac:	20c00017 	ldw	r3,0(r4)
 1006ab0:	21000104 	addi	r4,r4,4
 1006ab4:	29400104 	addi	r5,r5,4
 1006ab8:	1a06d83a 	srl	r3,r3,r8
 1006abc:	21fff736 	bltu	r4,r7,1006a9c <__lshift+0xb4>
 1006ac0:	28c00015 	stw	r3,0(r5)
 1006ac4:	18000126 	beq	r3,zero,1006acc <__lshift+0xe4>
 1006ac8:	8c400044 	addi	r17,r17,1
 1006acc:	88bfffc4 	addi	r2,r17,-1
 1006ad0:	98800415 	stw	r2,16(r19)
 1006ad4:	a809883a 	mov	r4,r21
 1006ad8:	900b883a 	mov	r5,r18
 1006adc:	10060a40 	call	10060a4 <_Bfree>
 1006ae0:	9805883a 	mov	r2,r19
 1006ae4:	dfc00617 	ldw	ra,24(sp)
 1006ae8:	dd400517 	ldw	r21,20(sp)
 1006aec:	dd000417 	ldw	r20,16(sp)
 1006af0:	dcc00317 	ldw	r19,12(sp)
 1006af4:	dc800217 	ldw	r18,8(sp)
 1006af8:	dc400117 	ldw	r17,4(sp)
 1006afc:	dc000017 	ldw	r16,0(sp)
 1006b00:	dec00704 	addi	sp,sp,28
 1006b04:	f800283a 	ret
 1006b08:	20800017 	ldw	r2,0(r4)
 1006b0c:	21000104 	addi	r4,r4,4
 1006b10:	28800015 	stw	r2,0(r5)
 1006b14:	29400104 	addi	r5,r5,4
 1006b18:	21ffec2e 	bgeu	r4,r7,1006acc <__lshift+0xe4>
 1006b1c:	20800017 	ldw	r2,0(r4)
 1006b20:	21000104 	addi	r4,r4,4
 1006b24:	28800015 	stw	r2,0(r5)
 1006b28:	29400104 	addi	r5,r5,4
 1006b2c:	21fff636 	bltu	r4,r7,1006b08 <__lshift+0x120>
 1006b30:	003fe606 	br	1006acc <__lshift+0xe4>

01006b34 <__multiply>:
 1006b34:	defff904 	addi	sp,sp,-28
 1006b38:	dcc00315 	stw	r19,12(sp)
 1006b3c:	dc800215 	stw	r18,8(sp)
 1006b40:	2cc00417 	ldw	r19,16(r5)
 1006b44:	34800417 	ldw	r18,16(r6)
 1006b48:	dd000415 	stw	r20,16(sp)
 1006b4c:	dc400115 	stw	r17,4(sp)
 1006b50:	dfc00615 	stw	ra,24(sp)
 1006b54:	dd400515 	stw	r21,20(sp)
 1006b58:	dc000015 	stw	r16,0(sp)
 1006b5c:	2823883a 	mov	r17,r5
 1006b60:	3029883a 	mov	r20,r6
 1006b64:	9c80040e 	bge	r19,r18,1006b78 <__multiply+0x44>
 1006b68:	9027883a 	mov	r19,r18
 1006b6c:	2c800417 	ldw	r18,16(r5)
 1006b70:	2829883a 	mov	r20,r5
 1006b74:	3023883a 	mov	r17,r6
 1006b78:	88800217 	ldw	r2,8(r17)
 1006b7c:	9ca1883a 	add	r16,r19,r18
 1006b80:	89400117 	ldw	r5,4(r17)
 1006b84:	1400010e 	bge	r2,r16,1006b8c <__multiply+0x58>
 1006b88:	29400044 	addi	r5,r5,1
 1006b8c:	10066240 	call	1006624 <_Balloc>
 1006b90:	102b883a 	mov	r21,r2
 1006b94:	8405883a 	add	r2,r16,r16
 1006b98:	1085883a 	add	r2,r2,r2
 1006b9c:	a9000504 	addi	r4,r21,20
 1006ba0:	209d883a 	add	r14,r4,r2
 1006ba4:	2380042e 	bgeu	r4,r14,1006bb8 <__multiply+0x84>
 1006ba8:	2005883a 	mov	r2,r4
 1006bac:	10000015 	stw	zero,0(r2)
 1006bb0:	10800104 	addi	r2,r2,4
 1006bb4:	13bffd36 	bltu	r2,r14,1006bac <__multiply+0x78>
 1006bb8:	9485883a 	add	r2,r18,r18
 1006bbc:	9cc7883a 	add	r3,r19,r19
 1006bc0:	a1800504 	addi	r6,r20,20
 1006bc4:	1085883a 	add	r2,r2,r2
 1006bc8:	8b400504 	addi	r13,r17,20
 1006bcc:	18c7883a 	add	r3,r3,r3
 1006bd0:	309f883a 	add	r15,r6,r2
 1006bd4:	68d7883a 	add	r11,r13,r3
 1006bd8:	33c03b2e 	bgeu	r6,r15,1006cc8 <__multiply+0x194>
 1006bdc:	2019883a 	mov	r12,r4
 1006be0:	30800017 	ldw	r2,0(r6)
 1006be4:	127fffcc 	andi	r9,r2,65535
 1006be8:	48001826 	beq	r9,zero,1006c4c <__multiply+0x118>
 1006bec:	6811883a 	mov	r8,r13
 1006bf0:	600f883a 	mov	r7,r12
 1006bf4:	0015883a 	mov	r10,zero
 1006bf8:	40c00017 	ldw	r3,0(r8)
 1006bfc:	39400017 	ldw	r5,0(r7)
 1006c00:	42000104 	addi	r8,r8,4
 1006c04:	193fffcc 	andi	r4,r3,65535
 1006c08:	4909383a 	mul	r4,r9,r4
 1006c0c:	1806d43a 	srli	r3,r3,16
 1006c10:	28bfffcc 	andi	r2,r5,65535
 1006c14:	5085883a 	add	r2,r10,r2
 1006c18:	2089883a 	add	r4,r4,r2
 1006c1c:	48c7383a 	mul	r3,r9,r3
 1006c20:	280ad43a 	srli	r5,r5,16
 1006c24:	2004d43a 	srli	r2,r4,16
 1006c28:	3900000d 	sth	r4,0(r7)
 1006c2c:	1947883a 	add	r3,r3,r5
 1006c30:	10c5883a 	add	r2,r2,r3
 1006c34:	3880008d 	sth	r2,2(r7)
 1006c38:	1014d43a 	srli	r10,r2,16
 1006c3c:	39c00104 	addi	r7,r7,4
 1006c40:	42ffed36 	bltu	r8,r11,1006bf8 <__multiply+0xc4>
 1006c44:	3a800015 	stw	r10,0(r7)
 1006c48:	30800017 	ldw	r2,0(r6)
 1006c4c:	1012d43a 	srli	r9,r2,16
 1006c50:	48001926 	beq	r9,zero,1006cb8 <__multiply+0x184>
 1006c54:	60800017 	ldw	r2,0(r12)
 1006c58:	6811883a 	mov	r8,r13
 1006c5c:	600f883a 	mov	r7,r12
 1006c60:	0015883a 	mov	r10,zero
 1006c64:	100b883a 	mov	r5,r2
 1006c68:	41000017 	ldw	r4,0(r8)
 1006c6c:	2806d43a 	srli	r3,r5,16
 1006c70:	3880000d 	sth	r2,0(r7)
 1006c74:	20bfffcc 	andi	r2,r4,65535
 1006c78:	4885383a 	mul	r2,r9,r2
 1006c7c:	50c7883a 	add	r3,r10,r3
 1006c80:	2008d43a 	srli	r4,r4,16
 1006c84:	10c5883a 	add	r2,r2,r3
 1006c88:	3880008d 	sth	r2,2(r7)
 1006c8c:	39c00104 	addi	r7,r7,4
 1006c90:	39400017 	ldw	r5,0(r7)
 1006c94:	4909383a 	mul	r4,r9,r4
 1006c98:	1004d43a 	srli	r2,r2,16
 1006c9c:	28ffffcc 	andi	r3,r5,65535
 1006ca0:	20c9883a 	add	r4,r4,r3
 1006ca4:	1105883a 	add	r2,r2,r4
 1006ca8:	42000104 	addi	r8,r8,4
 1006cac:	1014d43a 	srli	r10,r2,16
 1006cb0:	42ffed36 	bltu	r8,r11,1006c68 <__multiply+0x134>
 1006cb4:	38800015 	stw	r2,0(r7)
 1006cb8:	31800104 	addi	r6,r6,4
 1006cbc:	33c0022e 	bgeu	r6,r15,1006cc8 <__multiply+0x194>
 1006cc0:	63000104 	addi	r12,r12,4
 1006cc4:	003fc606 	br	1006be0 <__multiply+0xac>
 1006cc8:	0400090e 	bge	zero,r16,1006cf0 <__multiply+0x1bc>
 1006ccc:	70bfff17 	ldw	r2,-4(r14)
 1006cd0:	70ffff04 	addi	r3,r14,-4
 1006cd4:	10000326 	beq	r2,zero,1006ce4 <__multiply+0x1b0>
 1006cd8:	00000506 	br	1006cf0 <__multiply+0x1bc>
 1006cdc:	18800017 	ldw	r2,0(r3)
 1006ce0:	1000031e 	bne	r2,zero,1006cf0 <__multiply+0x1bc>
 1006ce4:	843fffc4 	addi	r16,r16,-1
 1006ce8:	18ffff04 	addi	r3,r3,-4
 1006cec:	803ffb1e 	bne	r16,zero,1006cdc <__multiply+0x1a8>
 1006cf0:	a805883a 	mov	r2,r21
 1006cf4:	ac000415 	stw	r16,16(r21)
 1006cf8:	dfc00617 	ldw	ra,24(sp)
 1006cfc:	dd400517 	ldw	r21,20(sp)
 1006d00:	dd000417 	ldw	r20,16(sp)
 1006d04:	dcc00317 	ldw	r19,12(sp)
 1006d08:	dc800217 	ldw	r18,8(sp)
 1006d0c:	dc400117 	ldw	r17,4(sp)
 1006d10:	dc000017 	ldw	r16,0(sp)
 1006d14:	dec00704 	addi	sp,sp,28
 1006d18:	f800283a 	ret

01006d1c <__i2b>:
 1006d1c:	defffd04 	addi	sp,sp,-12
 1006d20:	dc000015 	stw	r16,0(sp)
 1006d24:	04000044 	movi	r16,1
 1006d28:	dc800115 	stw	r18,4(sp)
 1006d2c:	2825883a 	mov	r18,r5
 1006d30:	800b883a 	mov	r5,r16
 1006d34:	dfc00215 	stw	ra,8(sp)
 1006d38:	10066240 	call	1006624 <_Balloc>
 1006d3c:	14000415 	stw	r16,16(r2)
 1006d40:	14800515 	stw	r18,20(r2)
 1006d44:	dfc00217 	ldw	ra,8(sp)
 1006d48:	dc800117 	ldw	r18,4(sp)
 1006d4c:	dc000017 	ldw	r16,0(sp)
 1006d50:	dec00304 	addi	sp,sp,12
 1006d54:	f800283a 	ret

01006d58 <__multadd>:
 1006d58:	defffa04 	addi	sp,sp,-24
 1006d5c:	dc800215 	stw	r18,8(sp)
 1006d60:	2c800417 	ldw	r18,16(r5)
 1006d64:	dd000415 	stw	r20,16(sp)
 1006d68:	dcc00315 	stw	r19,12(sp)
 1006d6c:	dc000015 	stw	r16,0(sp)
 1006d70:	dfc00515 	stw	ra,20(sp)
 1006d74:	3821883a 	mov	r16,r7
 1006d78:	dc400115 	stw	r17,4(sp)
 1006d7c:	2827883a 	mov	r19,r5
 1006d80:	2029883a 	mov	r20,r4
 1006d84:	2a000504 	addi	r8,r5,20
 1006d88:	000f883a 	mov	r7,zero
 1006d8c:	40800017 	ldw	r2,0(r8)
 1006d90:	39c00044 	addi	r7,r7,1
 1006d94:	10ffffcc 	andi	r3,r2,65535
 1006d98:	1987383a 	mul	r3,r3,r6
 1006d9c:	1004d43a 	srli	r2,r2,16
 1006da0:	1c07883a 	add	r3,r3,r16
 1006da4:	180ad43a 	srli	r5,r3,16
 1006da8:	1185383a 	mul	r2,r2,r6
 1006dac:	18ffffcc 	andi	r3,r3,65535
 1006db0:	1145883a 	add	r2,r2,r5
 1006db4:	1008943a 	slli	r4,r2,16
 1006db8:	1020d43a 	srli	r16,r2,16
 1006dbc:	20c9883a 	add	r4,r4,r3
 1006dc0:	41000015 	stw	r4,0(r8)
 1006dc4:	42000104 	addi	r8,r8,4
 1006dc8:	3cbff016 	blt	r7,r18,1006d8c <__multadd+0x34>
 1006dcc:	80000826 	beq	r16,zero,1006df0 <__multadd+0x98>
 1006dd0:	98800217 	ldw	r2,8(r19)
 1006dd4:	90800f0e 	bge	r18,r2,1006e14 <__multadd+0xbc>
 1006dd8:	9485883a 	add	r2,r18,r18
 1006ddc:	1085883a 	add	r2,r2,r2
 1006de0:	14c5883a 	add	r2,r2,r19
 1006de4:	90c00044 	addi	r3,r18,1
 1006de8:	14000515 	stw	r16,20(r2)
 1006dec:	98c00415 	stw	r3,16(r19)
 1006df0:	9805883a 	mov	r2,r19
 1006df4:	dfc00517 	ldw	ra,20(sp)
 1006df8:	dd000417 	ldw	r20,16(sp)
 1006dfc:	dcc00317 	ldw	r19,12(sp)
 1006e00:	dc800217 	ldw	r18,8(sp)
 1006e04:	dc400117 	ldw	r17,4(sp)
 1006e08:	dc000017 	ldw	r16,0(sp)
 1006e0c:	dec00604 	addi	sp,sp,24
 1006e10:	f800283a 	ret
 1006e14:	99400117 	ldw	r5,4(r19)
 1006e18:	a009883a 	mov	r4,r20
 1006e1c:	29400044 	addi	r5,r5,1
 1006e20:	10066240 	call	1006624 <_Balloc>
 1006e24:	99800417 	ldw	r6,16(r19)
 1006e28:	99400304 	addi	r5,r19,12
 1006e2c:	11000304 	addi	r4,r2,12
 1006e30:	318d883a 	add	r6,r6,r6
 1006e34:	318d883a 	add	r6,r6,r6
 1006e38:	31800204 	addi	r6,r6,8
 1006e3c:	1023883a 	mov	r17,r2
 1006e40:	1005e8c0 	call	1005e8c <memcpy>
 1006e44:	980b883a 	mov	r5,r19
 1006e48:	a009883a 	mov	r4,r20
 1006e4c:	10060a40 	call	10060a4 <_Bfree>
 1006e50:	8827883a 	mov	r19,r17
 1006e54:	003fe006 	br	1006dd8 <__multadd+0x80>

01006e58 <__pow5mult>:
 1006e58:	defffa04 	addi	sp,sp,-24
 1006e5c:	308000cc 	andi	r2,r6,3
 1006e60:	dd000415 	stw	r20,16(sp)
 1006e64:	dcc00315 	stw	r19,12(sp)
 1006e68:	dc000015 	stw	r16,0(sp)
 1006e6c:	dfc00515 	stw	ra,20(sp)
 1006e70:	dc800215 	stw	r18,8(sp)
 1006e74:	dc400115 	stw	r17,4(sp)
 1006e78:	3021883a 	mov	r16,r6
 1006e7c:	2027883a 	mov	r19,r4
 1006e80:	2829883a 	mov	r20,r5
 1006e84:	10002b1e 	bne	r2,zero,1006f34 <__pow5mult+0xdc>
 1006e88:	8025d0ba 	srai	r18,r16,2
 1006e8c:	90001b26 	beq	r18,zero,1006efc <__pow5mult+0xa4>
 1006e90:	9c001217 	ldw	r16,72(r19)
 1006e94:	8000081e 	bne	r16,zero,1006eb8 <__pow5mult+0x60>
 1006e98:	00003006 	br	1006f5c <__pow5mult+0x104>
 1006e9c:	800b883a 	mov	r5,r16
 1006ea0:	800d883a 	mov	r6,r16
 1006ea4:	9809883a 	mov	r4,r19
 1006ea8:	90001426 	beq	r18,zero,1006efc <__pow5mult+0xa4>
 1006eac:	80800017 	ldw	r2,0(r16)
 1006eb0:	10001b26 	beq	r2,zero,1006f20 <__pow5mult+0xc8>
 1006eb4:	1021883a 	mov	r16,r2
 1006eb8:	9080004c 	andi	r2,r18,1
 1006ebc:	1005003a 	cmpeq	r2,r2,zero
 1006ec0:	9025d07a 	srai	r18,r18,1
 1006ec4:	800d883a 	mov	r6,r16
 1006ec8:	9809883a 	mov	r4,r19
 1006ecc:	a00b883a 	mov	r5,r20
 1006ed0:	103ff21e 	bne	r2,zero,1006e9c <__pow5mult+0x44>
 1006ed4:	1006b340 	call	1006b34 <__multiply>
 1006ed8:	a00b883a 	mov	r5,r20
 1006edc:	9809883a 	mov	r4,r19
 1006ee0:	1023883a 	mov	r17,r2
 1006ee4:	10060a40 	call	10060a4 <_Bfree>
 1006ee8:	8829883a 	mov	r20,r17
 1006eec:	800b883a 	mov	r5,r16
 1006ef0:	800d883a 	mov	r6,r16
 1006ef4:	9809883a 	mov	r4,r19
 1006ef8:	903fec1e 	bne	r18,zero,1006eac <__pow5mult+0x54>
 1006efc:	a005883a 	mov	r2,r20
 1006f00:	dfc00517 	ldw	ra,20(sp)
 1006f04:	dd000417 	ldw	r20,16(sp)
 1006f08:	dcc00317 	ldw	r19,12(sp)
 1006f0c:	dc800217 	ldw	r18,8(sp)
 1006f10:	dc400117 	ldw	r17,4(sp)
 1006f14:	dc000017 	ldw	r16,0(sp)
 1006f18:	dec00604 	addi	sp,sp,24
 1006f1c:	f800283a 	ret
 1006f20:	1006b340 	call	1006b34 <__multiply>
 1006f24:	80800015 	stw	r2,0(r16)
 1006f28:	1021883a 	mov	r16,r2
 1006f2c:	10000015 	stw	zero,0(r2)
 1006f30:	003fe106 	br	1006eb8 <__pow5mult+0x60>
 1006f34:	1085883a 	add	r2,r2,r2
 1006f38:	00c04074 	movhi	r3,257
 1006f3c:	18f9f304 	addi	r3,r3,-6196
 1006f40:	1085883a 	add	r2,r2,r2
 1006f44:	10c5883a 	add	r2,r2,r3
 1006f48:	11bfff17 	ldw	r6,-4(r2)
 1006f4c:	000f883a 	mov	r7,zero
 1006f50:	1006d580 	call	1006d58 <__multadd>
 1006f54:	1029883a 	mov	r20,r2
 1006f58:	003fcb06 	br	1006e88 <__pow5mult+0x30>
 1006f5c:	9809883a 	mov	r4,r19
 1006f60:	01409c44 	movi	r5,625
 1006f64:	1006d1c0 	call	1006d1c <__i2b>
 1006f68:	98801215 	stw	r2,72(r19)
 1006f6c:	1021883a 	mov	r16,r2
 1006f70:	10000015 	stw	zero,0(r2)
 1006f74:	003fd006 	br	1006eb8 <__pow5mult+0x60>

01006f78 <__s2b>:
 1006f78:	defff904 	addi	sp,sp,-28
 1006f7c:	dcc00315 	stw	r19,12(sp)
 1006f80:	dc800215 	stw	r18,8(sp)
 1006f84:	2827883a 	mov	r19,r5
 1006f88:	2025883a 	mov	r18,r4
 1006f8c:	01400244 	movi	r5,9
 1006f90:	39000204 	addi	r4,r7,8
 1006f94:	dd000415 	stw	r20,16(sp)
 1006f98:	dc400115 	stw	r17,4(sp)
 1006f9c:	dfc00615 	stw	ra,24(sp)
 1006fa0:	dd400515 	stw	r21,20(sp)
 1006fa4:	dc000015 	stw	r16,0(sp)
 1006fa8:	3829883a 	mov	r20,r7
 1006fac:	3023883a 	mov	r17,r6
 1006fb0:	1009e740 	call	1009e74 <__divsi3>
 1006fb4:	00c00044 	movi	r3,1
 1006fb8:	1880350e 	bge	r3,r2,1007090 <__s2b+0x118>
 1006fbc:	000b883a 	mov	r5,zero
 1006fc0:	18c7883a 	add	r3,r3,r3
 1006fc4:	29400044 	addi	r5,r5,1
 1006fc8:	18bffd16 	blt	r3,r2,1006fc0 <__s2b+0x48>
 1006fcc:	9009883a 	mov	r4,r18
 1006fd0:	10066240 	call	1006624 <_Balloc>
 1006fd4:	1011883a 	mov	r8,r2
 1006fd8:	d8800717 	ldw	r2,28(sp)
 1006fdc:	00c00044 	movi	r3,1
 1006fe0:	01800244 	movi	r6,9
 1006fe4:	40800515 	stw	r2,20(r8)
 1006fe8:	40c00415 	stw	r3,16(r8)
 1006fec:	3440260e 	bge	r6,r17,1007088 <__s2b+0x110>
 1006ff0:	3021883a 	mov	r16,r6
 1006ff4:	99ab883a 	add	r21,r19,r6
 1006ff8:	9c05883a 	add	r2,r19,r16
 1006ffc:	11c00007 	ldb	r7,0(r2)
 1007000:	400b883a 	mov	r5,r8
 1007004:	9009883a 	mov	r4,r18
 1007008:	39fff404 	addi	r7,r7,-48
 100700c:	01800284 	movi	r6,10
 1007010:	1006d580 	call	1006d58 <__multadd>
 1007014:	84000044 	addi	r16,r16,1
 1007018:	1011883a 	mov	r8,r2
 100701c:	8c3ff61e 	bne	r17,r16,1006ff8 <__s2b+0x80>
 1007020:	ac45883a 	add	r2,r21,r17
 1007024:	117ffe04 	addi	r5,r2,-8
 1007028:	880d883a 	mov	r6,r17
 100702c:	35000c0e 	bge	r6,r20,1007060 <__s2b+0xe8>
 1007030:	a185c83a 	sub	r2,r20,r6
 1007034:	2821883a 	mov	r16,r5
 1007038:	28a3883a 	add	r17,r5,r2
 100703c:	81c00007 	ldb	r7,0(r16)
 1007040:	400b883a 	mov	r5,r8
 1007044:	9009883a 	mov	r4,r18
 1007048:	39fff404 	addi	r7,r7,-48
 100704c:	01800284 	movi	r6,10
 1007050:	1006d580 	call	1006d58 <__multadd>
 1007054:	84000044 	addi	r16,r16,1
 1007058:	1011883a 	mov	r8,r2
 100705c:	847ff71e 	bne	r16,r17,100703c <__s2b+0xc4>
 1007060:	4005883a 	mov	r2,r8
 1007064:	dfc00617 	ldw	ra,24(sp)
 1007068:	dd400517 	ldw	r21,20(sp)
 100706c:	dd000417 	ldw	r20,16(sp)
 1007070:	dcc00317 	ldw	r19,12(sp)
 1007074:	dc800217 	ldw	r18,8(sp)
 1007078:	dc400117 	ldw	r17,4(sp)
 100707c:	dc000017 	ldw	r16,0(sp)
 1007080:	dec00704 	addi	sp,sp,28
 1007084:	f800283a 	ret
 1007088:	99400284 	addi	r5,r19,10
 100708c:	003fe706 	br	100702c <__s2b+0xb4>
 1007090:	000b883a 	mov	r5,zero
 1007094:	003fcd06 	br	1006fcc <__s2b+0x54>

01007098 <putc>:
 1007098:	defffc04 	addi	sp,sp,-16
 100709c:	dc800215 	stw	r18,8(sp)
 10070a0:	04804074 	movhi	r18,257
 10070a4:	94817b04 	addi	r18,r18,1516
 10070a8:	90c00017 	ldw	r3,0(r18)
 10070ac:	dc400115 	stw	r17,4(sp)
 10070b0:	dc000015 	stw	r16,0(sp)
 10070b4:	dfc00315 	stw	ra,12(sp)
 10070b8:	2023883a 	mov	r17,r4
 10070bc:	2821883a 	mov	r16,r5
 10070c0:	18000226 	beq	r3,zero,10070cc <putc+0x34>
 10070c4:	18800e17 	ldw	r2,56(r3)
 10070c8:	10001126 	beq	r2,zero,1007110 <putc+0x78>
 10070cc:	80800217 	ldw	r2,8(r16)
 10070d0:	10ffffc4 	addi	r3,r2,-1
 10070d4:	80c00215 	stw	r3,8(r16)
 10070d8:	18001316 	blt	r3,zero,1007128 <putc+0x90>
 10070dc:	80800017 	ldw	r2,0(r16)
 10070e0:	14400005 	stb	r17,0(r2)
 10070e4:	80c00017 	ldw	r3,0(r16)
 10070e8:	18800044 	addi	r2,r3,1
 10070ec:	18c00003 	ldbu	r3,0(r3)
 10070f0:	80800015 	stw	r2,0(r16)
 10070f4:	1805883a 	mov	r2,r3
 10070f8:	dfc00317 	ldw	ra,12(sp)
 10070fc:	dc800217 	ldw	r18,8(sp)
 1007100:	dc400117 	ldw	r17,4(sp)
 1007104:	dc000017 	ldw	r16,0(sp)
 1007108:	dec00404 	addi	sp,sp,16
 100710c:	f800283a 	ret
 1007110:	1809883a 	mov	r4,r3
 1007114:	100475c0 	call	100475c <__sinit>
 1007118:	80800217 	ldw	r2,8(r16)
 100711c:	10ffffc4 	addi	r3,r2,-1
 1007120:	80c00215 	stw	r3,8(r16)
 1007124:	183fed0e 	bge	r3,zero,10070dc <putc+0x44>
 1007128:	80800617 	ldw	r2,24(r16)
 100712c:	18800f16 	blt	r3,r2,100716c <putc+0xd4>
 1007130:	80800017 	ldw	r2,0(r16)
 1007134:	14400005 	stb	r17,0(r2)
 1007138:	81000017 	ldw	r4,0(r16)
 100713c:	00800284 	movi	r2,10
 1007140:	20c00003 	ldbu	r3,0(r4)
 1007144:	18801226 	beq	r3,r2,1007190 <putc+0xf8>
 1007148:	20800044 	addi	r2,r4,1
 100714c:	80800015 	stw	r2,0(r16)
 1007150:	1805883a 	mov	r2,r3
 1007154:	dfc00317 	ldw	ra,12(sp)
 1007158:	dc800217 	ldw	r18,8(sp)
 100715c:	dc400117 	ldw	r17,4(sp)
 1007160:	dc000017 	ldw	r16,0(sp)
 1007164:	dec00404 	addi	sp,sp,16
 1007168:	f800283a 	ret
 100716c:	91000017 	ldw	r4,0(r18)
 1007170:	880b883a 	mov	r5,r17
 1007174:	800d883a 	mov	r6,r16
 1007178:	dfc00317 	ldw	ra,12(sp)
 100717c:	dc800217 	ldw	r18,8(sp)
 1007180:	dc400117 	ldw	r17,4(sp)
 1007184:	dc000017 	ldw	r16,0(sp)
 1007188:	dec00404 	addi	sp,sp,16
 100718c:	1007b601 	jmpi	1007b60 <__swbuf_r>
 1007190:	91000017 	ldw	r4,0(r18)
 1007194:	180b883a 	mov	r5,r3
 1007198:	003ff606 	br	1007174 <putc+0xdc>

0100719c <_putc_r>:
 100719c:	defffc04 	addi	sp,sp,-16
 10071a0:	dc400215 	stw	r17,8(sp)
 10071a4:	dc000115 	stw	r16,4(sp)
 10071a8:	dfc00315 	stw	ra,12(sp)
 10071ac:	2021883a 	mov	r16,r4
 10071b0:	2823883a 	mov	r17,r5
 10071b4:	20000226 	beq	r4,zero,10071c0 <_putc_r+0x24>
 10071b8:	20800e17 	ldw	r2,56(r4)
 10071bc:	10001026 	beq	r2,zero,1007200 <_putc_r+0x64>
 10071c0:	30800217 	ldw	r2,8(r6)
 10071c4:	10ffffc4 	addi	r3,r2,-1
 10071c8:	30c00215 	stw	r3,8(r6)
 10071cc:	18001316 	blt	r3,zero,100721c <_putc_r+0x80>
 10071d0:	30800017 	ldw	r2,0(r6)
 10071d4:	14400005 	stb	r17,0(r2)
 10071d8:	30c00017 	ldw	r3,0(r6)
 10071dc:	18800044 	addi	r2,r3,1
 10071e0:	18c00003 	ldbu	r3,0(r3)
 10071e4:	30800015 	stw	r2,0(r6)
 10071e8:	1805883a 	mov	r2,r3
 10071ec:	dfc00317 	ldw	ra,12(sp)
 10071f0:	dc400217 	ldw	r17,8(sp)
 10071f4:	dc000117 	ldw	r16,4(sp)
 10071f8:	dec00404 	addi	sp,sp,16
 10071fc:	f800283a 	ret
 1007200:	d9800015 	stw	r6,0(sp)
 1007204:	100475c0 	call	100475c <__sinit>
 1007208:	d9800017 	ldw	r6,0(sp)
 100720c:	30800217 	ldw	r2,8(r6)
 1007210:	10ffffc4 	addi	r3,r2,-1
 1007214:	30c00215 	stw	r3,8(r6)
 1007218:	183fed0e 	bge	r3,zero,10071d0 <_putc_r+0x34>
 100721c:	30800617 	ldw	r2,24(r6)
 1007220:	18800e16 	blt	r3,r2,100725c <_putc_r+0xc0>
 1007224:	30800017 	ldw	r2,0(r6)
 1007228:	14400005 	stb	r17,0(r2)
 100722c:	31000017 	ldw	r4,0(r6)
 1007230:	00800284 	movi	r2,10
 1007234:	20c00003 	ldbu	r3,0(r4)
 1007238:	18800f26 	beq	r3,r2,1007278 <_putc_r+0xdc>
 100723c:	20800044 	addi	r2,r4,1
 1007240:	30800015 	stw	r2,0(r6)
 1007244:	1805883a 	mov	r2,r3
 1007248:	dfc00317 	ldw	ra,12(sp)
 100724c:	dc400217 	ldw	r17,8(sp)
 1007250:	dc000117 	ldw	r16,4(sp)
 1007254:	dec00404 	addi	sp,sp,16
 1007258:	f800283a 	ret
 100725c:	8009883a 	mov	r4,r16
 1007260:	880b883a 	mov	r5,r17
 1007264:	dfc00317 	ldw	ra,12(sp)
 1007268:	dc400217 	ldw	r17,8(sp)
 100726c:	dc000117 	ldw	r16,4(sp)
 1007270:	dec00404 	addi	sp,sp,16
 1007274:	1007b601 	jmpi	1007b60 <__swbuf_r>
 1007278:	8009883a 	mov	r4,r16
 100727c:	180b883a 	mov	r5,r3
 1007280:	003ff806 	br	1007264 <_putc_r+0xc8>

01007284 <_realloc_r>:
 1007284:	defff404 	addi	sp,sp,-48
 1007288:	dd800815 	stw	r22,32(sp)
 100728c:	dc800415 	stw	r18,16(sp)
 1007290:	dc400315 	stw	r17,12(sp)
 1007294:	dfc00b15 	stw	ra,44(sp)
 1007298:	df000a15 	stw	fp,40(sp)
 100729c:	ddc00915 	stw	r23,36(sp)
 10072a0:	dd400715 	stw	r21,28(sp)
 10072a4:	dd000615 	stw	r20,24(sp)
 10072a8:	dcc00515 	stw	r19,20(sp)
 10072ac:	dc000215 	stw	r16,8(sp)
 10072b0:	2825883a 	mov	r18,r5
 10072b4:	3023883a 	mov	r17,r6
 10072b8:	202d883a 	mov	r22,r4
 10072bc:	2800c926 	beq	r5,zero,10075e4 <_realloc_r+0x360>
 10072c0:	100adb40 	call	100adb4 <__malloc_lock>
 10072c4:	943ffe04 	addi	r16,r18,-8
 10072c8:	88c002c4 	addi	r3,r17,11
 10072cc:	00800584 	movi	r2,22
 10072d0:	82000117 	ldw	r8,4(r16)
 10072d4:	10c01b2e 	bgeu	r2,r3,1007344 <_realloc_r+0xc0>
 10072d8:	00bffe04 	movi	r2,-8
 10072dc:	188e703a 	and	r7,r3,r2
 10072e0:	3839883a 	mov	fp,r7
 10072e4:	38001a16 	blt	r7,zero,1007350 <_realloc_r+0xcc>
 10072e8:	e4401936 	bltu	fp,r17,1007350 <_realloc_r+0xcc>
 10072ec:	013fff04 	movi	r4,-4
 10072f0:	4126703a 	and	r19,r8,r4
 10072f4:	99c02616 	blt	r19,r7,1007390 <_realloc_r+0x10c>
 10072f8:	802b883a 	mov	r21,r16
 10072fc:	9829883a 	mov	r20,r19
 1007300:	84000204 	addi	r16,r16,8
 1007304:	a80f883a 	mov	r7,r21
 1007308:	a70dc83a 	sub	r6,r20,fp
 100730c:	008003c4 	movi	r2,15
 1007310:	1180c136 	bltu	r2,r6,1007618 <_realloc_r+0x394>
 1007314:	38800117 	ldw	r2,4(r7)
 1007318:	a549883a 	add	r4,r20,r21
 100731c:	1080004c 	andi	r2,r2,1
 1007320:	a084b03a 	or	r2,r20,r2
 1007324:	38800115 	stw	r2,4(r7)
 1007328:	20c00117 	ldw	r3,4(r4)
 100732c:	18c00054 	ori	r3,r3,1
 1007330:	20c00115 	stw	r3,4(r4)
 1007334:	b009883a 	mov	r4,r22
 1007338:	100add40 	call	100add4 <__malloc_unlock>
 100733c:	8023883a 	mov	r17,r16
 1007340:	00000606 	br	100735c <_realloc_r+0xd8>
 1007344:	01c00404 	movi	r7,16
 1007348:	3839883a 	mov	fp,r7
 100734c:	e47fe72e 	bgeu	fp,r17,10072ec <_realloc_r+0x68>
 1007350:	00800304 	movi	r2,12
 1007354:	0023883a 	mov	r17,zero
 1007358:	b0800015 	stw	r2,0(r22)
 100735c:	8805883a 	mov	r2,r17
 1007360:	dfc00b17 	ldw	ra,44(sp)
 1007364:	df000a17 	ldw	fp,40(sp)
 1007368:	ddc00917 	ldw	r23,36(sp)
 100736c:	dd800817 	ldw	r22,32(sp)
 1007370:	dd400717 	ldw	r21,28(sp)
 1007374:	dd000617 	ldw	r20,24(sp)
 1007378:	dcc00517 	ldw	r19,20(sp)
 100737c:	dc800417 	ldw	r18,16(sp)
 1007380:	dc400317 	ldw	r17,12(sp)
 1007384:	dc000217 	ldw	r16,8(sp)
 1007388:	dec00c04 	addi	sp,sp,48
 100738c:	f800283a 	ret
 1007390:	00804074 	movhi	r2,257
 1007394:	10bb7e04 	addi	r2,r2,-4616
 1007398:	12400217 	ldw	r9,8(r2)
 100739c:	84cd883a 	add	r6,r16,r19
 10073a0:	802b883a 	mov	r21,r16
 10073a4:	3240b926 	beq	r6,r9,100768c <_realloc_r+0x408>
 10073a8:	31400117 	ldw	r5,4(r6)
 10073ac:	00bfff84 	movi	r2,-2
 10073b0:	2884703a 	and	r2,r5,r2
 10073b4:	1185883a 	add	r2,r2,r6
 10073b8:	10c00117 	ldw	r3,4(r2)
 10073bc:	18c0004c 	andi	r3,r3,1
 10073c0:	1807003a 	cmpeq	r3,r3,zero
 10073c4:	1800a326 	beq	r3,zero,1007654 <_realloc_r+0x3d0>
 10073c8:	2908703a 	and	r4,r5,r4
 10073cc:	9929883a 	add	r20,r19,r4
 10073d0:	a1c0a30e 	bge	r20,r7,1007660 <_realloc_r+0x3dc>
 10073d4:	4080004c 	andi	r2,r8,1
 10073d8:	1000551e 	bne	r2,zero,1007530 <_realloc_r+0x2ac>
 10073dc:	80800017 	ldw	r2,0(r16)
 10073e0:	80afc83a 	sub	r23,r16,r2
 10073e4:	b8c00117 	ldw	r3,4(r23)
 10073e8:	00bfff04 	movi	r2,-4
 10073ec:	1884703a 	and	r2,r3,r2
 10073f0:	30002e26 	beq	r6,zero,10074ac <_realloc_r+0x228>
 10073f4:	3240b926 	beq	r6,r9,10076dc <_realloc_r+0x458>
 10073f8:	98a9883a 	add	r20,r19,r2
 10073fc:	2509883a 	add	r4,r4,r20
 1007400:	d9000015 	stw	r4,0(sp)
 1007404:	21c02a16 	blt	r4,r7,10074b0 <_realloc_r+0x22c>
 1007408:	30800317 	ldw	r2,12(r6)
 100740c:	30c00217 	ldw	r3,8(r6)
 1007410:	01400904 	movi	r5,36
 1007414:	99bfff04 	addi	r6,r19,-4
 1007418:	18800315 	stw	r2,12(r3)
 100741c:	10c00215 	stw	r3,8(r2)
 1007420:	b9000317 	ldw	r4,12(r23)
 1007424:	b8800217 	ldw	r2,8(r23)
 1007428:	b82b883a 	mov	r21,r23
 100742c:	bc000204 	addi	r16,r23,8
 1007430:	20800215 	stw	r2,8(r4)
 1007434:	11000315 	stw	r4,12(r2)
 1007438:	2980e436 	bltu	r5,r6,10077cc <_realloc_r+0x548>
 100743c:	008004c4 	movi	r2,19
 1007440:	9009883a 	mov	r4,r18
 1007444:	8011883a 	mov	r8,r16
 1007448:	11800f2e 	bgeu	r2,r6,1007488 <_realloc_r+0x204>
 100744c:	90800017 	ldw	r2,0(r18)
 1007450:	ba000404 	addi	r8,r23,16
 1007454:	91000204 	addi	r4,r18,8
 1007458:	b8800215 	stw	r2,8(r23)
 100745c:	90c00117 	ldw	r3,4(r18)
 1007460:	008006c4 	movi	r2,27
 1007464:	b8c00315 	stw	r3,12(r23)
 1007468:	1180072e 	bgeu	r2,r6,1007488 <_realloc_r+0x204>
 100746c:	90c00217 	ldw	r3,8(r18)
 1007470:	ba000604 	addi	r8,r23,24
 1007474:	91000404 	addi	r4,r18,16
 1007478:	b8c00415 	stw	r3,16(r23)
 100747c:	90800317 	ldw	r2,12(r18)
 1007480:	b8800515 	stw	r2,20(r23)
 1007484:	3140e726 	beq	r6,r5,1007824 <_realloc_r+0x5a0>
 1007488:	20800017 	ldw	r2,0(r4)
 100748c:	dd000017 	ldw	r20,0(sp)
 1007490:	b80f883a 	mov	r7,r23
 1007494:	40800015 	stw	r2,0(r8)
 1007498:	20c00117 	ldw	r3,4(r4)
 100749c:	40c00115 	stw	r3,4(r8)
 10074a0:	20800217 	ldw	r2,8(r4)
 10074a4:	40800215 	stw	r2,8(r8)
 10074a8:	003f9706 	br	1007308 <_realloc_r+0x84>
 10074ac:	98a9883a 	add	r20,r19,r2
 10074b0:	a1c01f16 	blt	r20,r7,1007530 <_realloc_r+0x2ac>
 10074b4:	b8c00317 	ldw	r3,12(r23)
 10074b8:	b8800217 	ldw	r2,8(r23)
 10074bc:	99bfff04 	addi	r6,r19,-4
 10074c0:	01400904 	movi	r5,36
 10074c4:	b82b883a 	mov	r21,r23
 10074c8:	18800215 	stw	r2,8(r3)
 10074cc:	10c00315 	stw	r3,12(r2)
 10074d0:	bc000204 	addi	r16,r23,8
 10074d4:	2980c336 	bltu	r5,r6,10077e4 <_realloc_r+0x560>
 10074d8:	008004c4 	movi	r2,19
 10074dc:	9009883a 	mov	r4,r18
 10074e0:	8011883a 	mov	r8,r16
 10074e4:	11800f2e 	bgeu	r2,r6,1007524 <_realloc_r+0x2a0>
 10074e8:	90800017 	ldw	r2,0(r18)
 10074ec:	ba000404 	addi	r8,r23,16
 10074f0:	91000204 	addi	r4,r18,8
 10074f4:	b8800215 	stw	r2,8(r23)
 10074f8:	90c00117 	ldw	r3,4(r18)
 10074fc:	008006c4 	movi	r2,27
 1007500:	b8c00315 	stw	r3,12(r23)
 1007504:	1180072e 	bgeu	r2,r6,1007524 <_realloc_r+0x2a0>
 1007508:	90c00217 	ldw	r3,8(r18)
 100750c:	ba000604 	addi	r8,r23,24
 1007510:	91000404 	addi	r4,r18,16
 1007514:	b8c00415 	stw	r3,16(r23)
 1007518:	90800317 	ldw	r2,12(r18)
 100751c:	b8800515 	stw	r2,20(r23)
 1007520:	3140c726 	beq	r6,r5,1007840 <_realloc_r+0x5bc>
 1007524:	20800017 	ldw	r2,0(r4)
 1007528:	b80f883a 	mov	r7,r23
 100752c:	003fd906 	br	1007494 <_realloc_r+0x210>
 1007530:	880b883a 	mov	r5,r17
 1007534:	b009883a 	mov	r4,r22
 1007538:	10056680 	call	1005668 <_malloc_r>
 100753c:	1023883a 	mov	r17,r2
 1007540:	10002526 	beq	r2,zero,10075d8 <_realloc_r+0x354>
 1007544:	80800117 	ldw	r2,4(r16)
 1007548:	00ffff84 	movi	r3,-2
 100754c:	893ffe04 	addi	r4,r17,-8
 1007550:	10c4703a 	and	r2,r2,r3
 1007554:	8085883a 	add	r2,r16,r2
 1007558:	20809526 	beq	r4,r2,10077b0 <_realloc_r+0x52c>
 100755c:	99bfff04 	addi	r6,r19,-4
 1007560:	01c00904 	movi	r7,36
 1007564:	39804536 	bltu	r7,r6,100767c <_realloc_r+0x3f8>
 1007568:	008004c4 	movi	r2,19
 100756c:	9009883a 	mov	r4,r18
 1007570:	880b883a 	mov	r5,r17
 1007574:	11800f2e 	bgeu	r2,r6,10075b4 <_realloc_r+0x330>
 1007578:	90800017 	ldw	r2,0(r18)
 100757c:	89400204 	addi	r5,r17,8
 1007580:	91000204 	addi	r4,r18,8
 1007584:	88800015 	stw	r2,0(r17)
 1007588:	90c00117 	ldw	r3,4(r18)
 100758c:	008006c4 	movi	r2,27
 1007590:	88c00115 	stw	r3,4(r17)
 1007594:	1180072e 	bgeu	r2,r6,10075b4 <_realloc_r+0x330>
 1007598:	90c00217 	ldw	r3,8(r18)
 100759c:	89400404 	addi	r5,r17,16
 10075a0:	91000404 	addi	r4,r18,16
 10075a4:	88c00215 	stw	r3,8(r17)
 10075a8:	90800317 	ldw	r2,12(r18)
 10075ac:	88800315 	stw	r2,12(r17)
 10075b0:	31c09126 	beq	r6,r7,10077f8 <_realloc_r+0x574>
 10075b4:	20800017 	ldw	r2,0(r4)
 10075b8:	28800015 	stw	r2,0(r5)
 10075bc:	20c00117 	ldw	r3,4(r4)
 10075c0:	28c00115 	stw	r3,4(r5)
 10075c4:	20800217 	ldw	r2,8(r4)
 10075c8:	28800215 	stw	r2,8(r5)
 10075cc:	900b883a 	mov	r5,r18
 10075d0:	b009883a 	mov	r4,r22
 10075d4:	1004ae00 	call	1004ae0 <_free_r>
 10075d8:	b009883a 	mov	r4,r22
 10075dc:	100add40 	call	100add4 <__malloc_unlock>
 10075e0:	003f5e06 	br	100735c <_realloc_r+0xd8>
 10075e4:	300b883a 	mov	r5,r6
 10075e8:	dfc00b17 	ldw	ra,44(sp)
 10075ec:	df000a17 	ldw	fp,40(sp)
 10075f0:	ddc00917 	ldw	r23,36(sp)
 10075f4:	dd800817 	ldw	r22,32(sp)
 10075f8:	dd400717 	ldw	r21,28(sp)
 10075fc:	dd000617 	ldw	r20,24(sp)
 1007600:	dcc00517 	ldw	r19,20(sp)
 1007604:	dc800417 	ldw	r18,16(sp)
 1007608:	dc400317 	ldw	r17,12(sp)
 100760c:	dc000217 	ldw	r16,8(sp)
 1007610:	dec00c04 	addi	sp,sp,48
 1007614:	10056681 	jmpi	1005668 <_malloc_r>
 1007618:	38800117 	ldw	r2,4(r7)
 100761c:	e54b883a 	add	r5,fp,r21
 1007620:	31000054 	ori	r4,r6,1
 1007624:	1080004c 	andi	r2,r2,1
 1007628:	1704b03a 	or	r2,r2,fp
 100762c:	38800115 	stw	r2,4(r7)
 1007630:	29000115 	stw	r4,4(r5)
 1007634:	2987883a 	add	r3,r5,r6
 1007638:	18800117 	ldw	r2,4(r3)
 100763c:	29400204 	addi	r5,r5,8
 1007640:	b009883a 	mov	r4,r22
 1007644:	10800054 	ori	r2,r2,1
 1007648:	18800115 	stw	r2,4(r3)
 100764c:	1004ae00 	call	1004ae0 <_free_r>
 1007650:	003f3806 	br	1007334 <_realloc_r+0xb0>
 1007654:	000d883a 	mov	r6,zero
 1007658:	0009883a 	mov	r4,zero
 100765c:	003f5d06 	br	10073d4 <_realloc_r+0x150>
 1007660:	30c00217 	ldw	r3,8(r6)
 1007664:	30800317 	ldw	r2,12(r6)
 1007668:	800f883a 	mov	r7,r16
 100766c:	84000204 	addi	r16,r16,8
 1007670:	10c00215 	stw	r3,8(r2)
 1007674:	18800315 	stw	r2,12(r3)
 1007678:	003f2306 	br	1007308 <_realloc_r+0x84>
 100767c:	8809883a 	mov	r4,r17
 1007680:	900b883a 	mov	r5,r18
 1007684:	1005f2c0 	call	1005f2c <memmove>
 1007688:	003fd006 	br	10075cc <_realloc_r+0x348>
 100768c:	30800117 	ldw	r2,4(r6)
 1007690:	e0c00404 	addi	r3,fp,16
 1007694:	1108703a 	and	r4,r2,r4
 1007698:	9905883a 	add	r2,r19,r4
 100769c:	10ff4d16 	blt	r2,r3,10073d4 <_realloc_r+0x150>
 10076a0:	1705c83a 	sub	r2,r2,fp
 10076a4:	870b883a 	add	r5,r16,fp
 10076a8:	10800054 	ori	r2,r2,1
 10076ac:	28800115 	stw	r2,4(r5)
 10076b0:	80c00117 	ldw	r3,4(r16)
 10076b4:	00804074 	movhi	r2,257
 10076b8:	10bb7e04 	addi	r2,r2,-4616
 10076bc:	b009883a 	mov	r4,r22
 10076c0:	18c0004c 	andi	r3,r3,1
 10076c4:	e0c6b03a 	or	r3,fp,r3
 10076c8:	11400215 	stw	r5,8(r2)
 10076cc:	80c00115 	stw	r3,4(r16)
 10076d0:	100add40 	call	100add4 <__malloc_unlock>
 10076d4:	84400204 	addi	r17,r16,8
 10076d8:	003f2006 	br	100735c <_realloc_r+0xd8>
 10076dc:	98a9883a 	add	r20,r19,r2
 10076e0:	2509883a 	add	r4,r4,r20
 10076e4:	e0800404 	addi	r2,fp,16
 10076e8:	d9000115 	stw	r4,4(sp)
 10076ec:	20bf7016 	blt	r4,r2,10074b0 <_realloc_r+0x22c>
 10076f0:	b8c00317 	ldw	r3,12(r23)
 10076f4:	b8800217 	ldw	r2,8(r23)
 10076f8:	99bfff04 	addi	r6,r19,-4
 10076fc:	01400904 	movi	r5,36
 1007700:	18800215 	stw	r2,8(r3)
 1007704:	10c00315 	stw	r3,12(r2)
 1007708:	bc400204 	addi	r17,r23,8
 100770c:	29804136 	bltu	r5,r6,1007814 <_realloc_r+0x590>
 1007710:	008004c4 	movi	r2,19
 1007714:	9009883a 	mov	r4,r18
 1007718:	880f883a 	mov	r7,r17
 100771c:	11800f2e 	bgeu	r2,r6,100775c <_realloc_r+0x4d8>
 1007720:	90800017 	ldw	r2,0(r18)
 1007724:	b9c00404 	addi	r7,r23,16
 1007728:	91000204 	addi	r4,r18,8
 100772c:	b8800215 	stw	r2,8(r23)
 1007730:	90c00117 	ldw	r3,4(r18)
 1007734:	008006c4 	movi	r2,27
 1007738:	b8c00315 	stw	r3,12(r23)
 100773c:	1180072e 	bgeu	r2,r6,100775c <_realloc_r+0x4d8>
 1007740:	90c00217 	ldw	r3,8(r18)
 1007744:	b9c00604 	addi	r7,r23,24
 1007748:	91000404 	addi	r4,r18,16
 100774c:	b8c00415 	stw	r3,16(r23)
 1007750:	90800317 	ldw	r2,12(r18)
 1007754:	b8800515 	stw	r2,20(r23)
 1007758:	31404026 	beq	r6,r5,100785c <_realloc_r+0x5d8>
 100775c:	20800017 	ldw	r2,0(r4)
 1007760:	38800015 	stw	r2,0(r7)
 1007764:	20c00117 	ldw	r3,4(r4)
 1007768:	38c00115 	stw	r3,4(r7)
 100776c:	20800217 	ldw	r2,8(r4)
 1007770:	38800215 	stw	r2,8(r7)
 1007774:	d8c00117 	ldw	r3,4(sp)
 1007778:	bf0b883a 	add	r5,r23,fp
 100777c:	b009883a 	mov	r4,r22
 1007780:	1f05c83a 	sub	r2,r3,fp
 1007784:	10800054 	ori	r2,r2,1
 1007788:	28800115 	stw	r2,4(r5)
 100778c:	b8c00117 	ldw	r3,4(r23)
 1007790:	00804074 	movhi	r2,257
 1007794:	10bb7e04 	addi	r2,r2,-4616
 1007798:	11400215 	stw	r5,8(r2)
 100779c:	18c0004c 	andi	r3,r3,1
 10077a0:	e0c6b03a 	or	r3,fp,r3
 10077a4:	b8c00115 	stw	r3,4(r23)
 10077a8:	100add40 	call	100add4 <__malloc_unlock>
 10077ac:	003eeb06 	br	100735c <_realloc_r+0xd8>
 10077b0:	20800117 	ldw	r2,4(r4)
 10077b4:	00ffff04 	movi	r3,-4
 10077b8:	800f883a 	mov	r7,r16
 10077bc:	10c4703a 	and	r2,r2,r3
 10077c0:	98a9883a 	add	r20,r19,r2
 10077c4:	84000204 	addi	r16,r16,8
 10077c8:	003ecf06 	br	1007308 <_realloc_r+0x84>
 10077cc:	900b883a 	mov	r5,r18
 10077d0:	8009883a 	mov	r4,r16
 10077d4:	1005f2c0 	call	1005f2c <memmove>
 10077d8:	dd000017 	ldw	r20,0(sp)
 10077dc:	b80f883a 	mov	r7,r23
 10077e0:	003ec906 	br	1007308 <_realloc_r+0x84>
 10077e4:	900b883a 	mov	r5,r18
 10077e8:	8009883a 	mov	r4,r16
 10077ec:	1005f2c0 	call	1005f2c <memmove>
 10077f0:	b80f883a 	mov	r7,r23
 10077f4:	003ec406 	br	1007308 <_realloc_r+0x84>
 10077f8:	90c00417 	ldw	r3,16(r18)
 10077fc:	89400604 	addi	r5,r17,24
 1007800:	91000604 	addi	r4,r18,24
 1007804:	88c00415 	stw	r3,16(r17)
 1007808:	90800517 	ldw	r2,20(r18)
 100780c:	88800515 	stw	r2,20(r17)
 1007810:	003f6806 	br	10075b4 <_realloc_r+0x330>
 1007814:	900b883a 	mov	r5,r18
 1007818:	8809883a 	mov	r4,r17
 100781c:	1005f2c0 	call	1005f2c <memmove>
 1007820:	003fd406 	br	1007774 <_realloc_r+0x4f0>
 1007824:	90c00417 	ldw	r3,16(r18)
 1007828:	91000604 	addi	r4,r18,24
 100782c:	ba000804 	addi	r8,r23,32
 1007830:	b8c00615 	stw	r3,24(r23)
 1007834:	90800517 	ldw	r2,20(r18)
 1007838:	b8800715 	stw	r2,28(r23)
 100783c:	003f1206 	br	1007488 <_realloc_r+0x204>
 1007840:	90c00417 	ldw	r3,16(r18)
 1007844:	91000604 	addi	r4,r18,24
 1007848:	ba000804 	addi	r8,r23,32
 100784c:	b8c00615 	stw	r3,24(r23)
 1007850:	90800517 	ldw	r2,20(r18)
 1007854:	b8800715 	stw	r2,28(r23)
 1007858:	003f3206 	br	1007524 <_realloc_r+0x2a0>
 100785c:	90c00417 	ldw	r3,16(r18)
 1007860:	91000604 	addi	r4,r18,24
 1007864:	b9c00804 	addi	r7,r23,32
 1007868:	b8c00615 	stw	r3,24(r23)
 100786c:	90800517 	ldw	r2,20(r18)
 1007870:	b8800715 	stw	r2,28(r23)
 1007874:	003fb906 	br	100775c <_realloc_r+0x4d8>

01007878 <__isinfd>:
 1007878:	200d883a 	mov	r6,r4
 100787c:	0109c83a 	sub	r4,zero,r4
 1007880:	2188b03a 	or	r4,r4,r6
 1007884:	2008d7fa 	srli	r4,r4,31
 1007888:	00a00034 	movhi	r2,32768
 100788c:	10bfffc4 	addi	r2,r2,-1
 1007890:	1144703a 	and	r2,r2,r5
 1007894:	2088b03a 	or	r4,r4,r2
 1007898:	009ffc34 	movhi	r2,32752
 100789c:	1105c83a 	sub	r2,r2,r4
 10078a0:	0087c83a 	sub	r3,zero,r2
 10078a4:	10c4b03a 	or	r2,r2,r3
 10078a8:	1004d7fa 	srli	r2,r2,31
 10078ac:	00c00044 	movi	r3,1
 10078b0:	1885c83a 	sub	r2,r3,r2
 10078b4:	f800283a 	ret

010078b8 <__isnand>:
 10078b8:	200d883a 	mov	r6,r4
 10078bc:	0109c83a 	sub	r4,zero,r4
 10078c0:	2188b03a 	or	r4,r4,r6
 10078c4:	2008d7fa 	srli	r4,r4,31
 10078c8:	00a00034 	movhi	r2,32768
 10078cc:	10bfffc4 	addi	r2,r2,-1
 10078d0:	1144703a 	and	r2,r2,r5
 10078d4:	2088b03a 	or	r4,r4,r2
 10078d8:	009ffc34 	movhi	r2,32752
 10078dc:	1105c83a 	sub	r2,r2,r4
 10078e0:	1004d7fa 	srli	r2,r2,31
 10078e4:	f800283a 	ret

010078e8 <_sbrk_r>:
 10078e8:	defffd04 	addi	sp,sp,-12
 10078ec:	dc000015 	stw	r16,0(sp)
 10078f0:	04004074 	movhi	r16,257
 10078f4:	8408a804 	addi	r16,r16,8864
 10078f8:	dc400115 	stw	r17,4(sp)
 10078fc:	80000015 	stw	zero,0(r16)
 1007900:	2023883a 	mov	r17,r4
 1007904:	2809883a 	mov	r4,r5
 1007908:	dfc00215 	stw	ra,8(sp)
 100790c:	100afd40 	call	100afd4 <sbrk>
 1007910:	1007883a 	mov	r3,r2
 1007914:	00bfffc4 	movi	r2,-1
 1007918:	18800626 	beq	r3,r2,1007934 <_sbrk_r+0x4c>
 100791c:	1805883a 	mov	r2,r3
 1007920:	dfc00217 	ldw	ra,8(sp)
 1007924:	dc400117 	ldw	r17,4(sp)
 1007928:	dc000017 	ldw	r16,0(sp)
 100792c:	dec00304 	addi	sp,sp,12
 1007930:	f800283a 	ret
 1007934:	80800017 	ldw	r2,0(r16)
 1007938:	103ff826 	beq	r2,zero,100791c <_sbrk_r+0x34>
 100793c:	88800015 	stw	r2,0(r17)
 1007940:	1805883a 	mov	r2,r3
 1007944:	dfc00217 	ldw	ra,8(sp)
 1007948:	dc400117 	ldw	r17,4(sp)
 100794c:	dc000017 	ldw	r16,0(sp)
 1007950:	dec00304 	addi	sp,sp,12
 1007954:	f800283a 	ret

01007958 <__sclose>:
 1007958:	2940038f 	ldh	r5,14(r5)
 100795c:	1007dd81 	jmpi	1007dd8 <_close_r>

01007960 <__sseek>:
 1007960:	defffe04 	addi	sp,sp,-8
 1007964:	dc000015 	stw	r16,0(sp)
 1007968:	2821883a 	mov	r16,r5
 100796c:	2940038f 	ldh	r5,14(r5)
 1007970:	dfc00115 	stw	ra,4(sp)
 1007974:	10080500 	call	1008050 <_lseek_r>
 1007978:	1007883a 	mov	r3,r2
 100797c:	00bfffc4 	movi	r2,-1
 1007980:	18800926 	beq	r3,r2,10079a8 <__sseek+0x48>
 1007984:	8080030b 	ldhu	r2,12(r16)
 1007988:	80c01415 	stw	r3,80(r16)
 100798c:	10840014 	ori	r2,r2,4096
 1007990:	8080030d 	sth	r2,12(r16)
 1007994:	1805883a 	mov	r2,r3
 1007998:	dfc00117 	ldw	ra,4(sp)
 100799c:	dc000017 	ldw	r16,0(sp)
 10079a0:	dec00204 	addi	sp,sp,8
 10079a4:	f800283a 	ret
 10079a8:	8080030b 	ldhu	r2,12(r16)
 10079ac:	10bbffcc 	andi	r2,r2,61439
 10079b0:	8080030d 	sth	r2,12(r16)
 10079b4:	1805883a 	mov	r2,r3
 10079b8:	dfc00117 	ldw	ra,4(sp)
 10079bc:	dc000017 	ldw	r16,0(sp)
 10079c0:	dec00204 	addi	sp,sp,8
 10079c4:	f800283a 	ret

010079c8 <__swrite>:
 10079c8:	2880030b 	ldhu	r2,12(r5)
 10079cc:	defffb04 	addi	sp,sp,-20
 10079d0:	dcc00315 	stw	r19,12(sp)
 10079d4:	1080400c 	andi	r2,r2,256
 10079d8:	dc800215 	stw	r18,8(sp)
 10079dc:	dc400115 	stw	r17,4(sp)
 10079e0:	dc000015 	stw	r16,0(sp)
 10079e4:	3027883a 	mov	r19,r6
 10079e8:	3825883a 	mov	r18,r7
 10079ec:	dfc00415 	stw	ra,16(sp)
 10079f0:	2821883a 	mov	r16,r5
 10079f4:	000d883a 	mov	r6,zero
 10079f8:	01c00084 	movi	r7,2
 10079fc:	2023883a 	mov	r17,r4
 1007a00:	10000226 	beq	r2,zero,1007a0c <__swrite+0x44>
 1007a04:	2940038f 	ldh	r5,14(r5)
 1007a08:	10080500 	call	1008050 <_lseek_r>
 1007a0c:	8080030b 	ldhu	r2,12(r16)
 1007a10:	8140038f 	ldh	r5,14(r16)
 1007a14:	8809883a 	mov	r4,r17
 1007a18:	10bbffcc 	andi	r2,r2,61439
 1007a1c:	980d883a 	mov	r6,r19
 1007a20:	900f883a 	mov	r7,r18
 1007a24:	8080030d 	sth	r2,12(r16)
 1007a28:	dfc00417 	ldw	ra,16(sp)
 1007a2c:	dcc00317 	ldw	r19,12(sp)
 1007a30:	dc800217 	ldw	r18,8(sp)
 1007a34:	dc400117 	ldw	r17,4(sp)
 1007a38:	dc000017 	ldw	r16,0(sp)
 1007a3c:	dec00504 	addi	sp,sp,20
 1007a40:	1007cac1 	jmpi	1007cac <_write_r>

01007a44 <__sread>:
 1007a44:	defffe04 	addi	sp,sp,-8
 1007a48:	dc000015 	stw	r16,0(sp)
 1007a4c:	2821883a 	mov	r16,r5
 1007a50:	2940038f 	ldh	r5,14(r5)
 1007a54:	dfc00115 	stw	ra,4(sp)
 1007a58:	10080c80 	call	10080c8 <_read_r>
 1007a5c:	1007883a 	mov	r3,r2
 1007a60:	10000816 	blt	r2,zero,1007a84 <__sread+0x40>
 1007a64:	80801417 	ldw	r2,80(r16)
 1007a68:	10c5883a 	add	r2,r2,r3
 1007a6c:	80801415 	stw	r2,80(r16)
 1007a70:	1805883a 	mov	r2,r3
 1007a74:	dfc00117 	ldw	ra,4(sp)
 1007a78:	dc000017 	ldw	r16,0(sp)
 1007a7c:	dec00204 	addi	sp,sp,8
 1007a80:	f800283a 	ret
 1007a84:	8080030b 	ldhu	r2,12(r16)
 1007a88:	10bbffcc 	andi	r2,r2,61439
 1007a8c:	8080030d 	sth	r2,12(r16)
 1007a90:	1805883a 	mov	r2,r3
 1007a94:	dfc00117 	ldw	ra,4(sp)
 1007a98:	dc000017 	ldw	r16,0(sp)
 1007a9c:	dec00204 	addi	sp,sp,8
 1007aa0:	f800283a 	ret

01007aa4 <strcmp>:
 1007aa4:	2144b03a 	or	r2,r4,r5
 1007aa8:	108000cc 	andi	r2,r2,3
 1007aac:	10001d1e 	bne	r2,zero,1007b24 <strcmp+0x80>
 1007ab0:	200f883a 	mov	r7,r4
 1007ab4:	28800017 	ldw	r2,0(r5)
 1007ab8:	21000017 	ldw	r4,0(r4)
 1007abc:	280d883a 	mov	r6,r5
 1007ac0:	2080161e 	bne	r4,r2,1007b1c <strcmp+0x78>
 1007ac4:	023fbff4 	movhi	r8,65279
 1007ac8:	423fbfc4 	addi	r8,r8,-257
 1007acc:	2207883a 	add	r3,r4,r8
 1007ad0:	01602074 	movhi	r5,32897
 1007ad4:	29602004 	addi	r5,r5,-32640
 1007ad8:	1946703a 	and	r3,r3,r5
 1007adc:	0104303a 	nor	r2,zero,r4
 1007ae0:	10c4703a 	and	r2,r2,r3
 1007ae4:	10001c1e 	bne	r2,zero,1007b58 <strcmp+0xb4>
 1007ae8:	4013883a 	mov	r9,r8
 1007aec:	2811883a 	mov	r8,r5
 1007af0:	00000106 	br	1007af8 <strcmp+0x54>
 1007af4:	1800181e 	bne	r3,zero,1007b58 <strcmp+0xb4>
 1007af8:	39c00104 	addi	r7,r7,4
 1007afc:	39000017 	ldw	r4,0(r7)
 1007b00:	31800104 	addi	r6,r6,4
 1007b04:	31400017 	ldw	r5,0(r6)
 1007b08:	2245883a 	add	r2,r4,r9
 1007b0c:	1204703a 	and	r2,r2,r8
 1007b10:	0106303a 	nor	r3,zero,r4
 1007b14:	1886703a 	and	r3,r3,r2
 1007b18:	217ff626 	beq	r4,r5,1007af4 <strcmp+0x50>
 1007b1c:	3809883a 	mov	r4,r7
 1007b20:	300b883a 	mov	r5,r6
 1007b24:	20c00007 	ldb	r3,0(r4)
 1007b28:	1800051e 	bne	r3,zero,1007b40 <strcmp+0x9c>
 1007b2c:	00000606 	br	1007b48 <strcmp+0xa4>
 1007b30:	21000044 	addi	r4,r4,1
 1007b34:	20c00007 	ldb	r3,0(r4)
 1007b38:	29400044 	addi	r5,r5,1
 1007b3c:	18000226 	beq	r3,zero,1007b48 <strcmp+0xa4>
 1007b40:	28800007 	ldb	r2,0(r5)
 1007b44:	18bffa26 	beq	r3,r2,1007b30 <strcmp+0x8c>
 1007b48:	20c00003 	ldbu	r3,0(r4)
 1007b4c:	28800003 	ldbu	r2,0(r5)
 1007b50:	1885c83a 	sub	r2,r3,r2
 1007b54:	f800283a 	ret
 1007b58:	0005883a 	mov	r2,zero
 1007b5c:	f800283a 	ret

01007b60 <__swbuf_r>:
 1007b60:	defffc04 	addi	sp,sp,-16
 1007b64:	dc400215 	stw	r17,8(sp)
 1007b68:	dc000115 	stw	r16,4(sp)
 1007b6c:	dfc00315 	stw	ra,12(sp)
 1007b70:	2023883a 	mov	r17,r4
 1007b74:	2821883a 	mov	r16,r5
 1007b78:	20000226 	beq	r4,zero,1007b84 <__swbuf_r+0x24>
 1007b7c:	20800e17 	ldw	r2,56(r4)
 1007b80:	10002f26 	beq	r2,zero,1007c40 <__swbuf_r+0xe0>
 1007b84:	3080030b 	ldhu	r2,12(r6)
 1007b88:	30c00617 	ldw	r3,24(r6)
 1007b8c:	1080020c 	andi	r2,r2,8
 1007b90:	30c00215 	stw	r3,8(r6)
 1007b94:	10002226 	beq	r2,zero,1007c20 <__swbuf_r+0xc0>
 1007b98:	30c00417 	ldw	r3,16(r6)
 1007b9c:	18002026 	beq	r3,zero,1007c20 <__swbuf_r+0xc0>
 1007ba0:	31000017 	ldw	r4,0(r6)
 1007ba4:	30800517 	ldw	r2,20(r6)
 1007ba8:	20c7c83a 	sub	r3,r4,r3
 1007bac:	18802f0e 	bge	r3,r2,1007c6c <__swbuf_r+0x10c>
 1007bb0:	19400044 	addi	r5,r3,1
 1007bb4:	30800217 	ldw	r2,8(r6)
 1007bb8:	84003fcc 	andi	r16,r16,255
 1007bbc:	20c00044 	addi	r3,r4,1
 1007bc0:	10bfffc4 	addi	r2,r2,-1
 1007bc4:	30800215 	stw	r2,8(r6)
 1007bc8:	24000005 	stb	r16,0(r4)
 1007bcc:	30800517 	ldw	r2,20(r6)
 1007bd0:	30c00015 	stw	r3,0(r6)
 1007bd4:	11400c26 	beq	r2,r5,1007c08 <__swbuf_r+0xa8>
 1007bd8:	3080030b 	ldhu	r2,12(r6)
 1007bdc:	1080004c 	andi	r2,r2,1
 1007be0:	1005003a 	cmpeq	r2,r2,zero
 1007be4:	10000626 	beq	r2,zero,1007c00 <__swbuf_r+0xa0>
 1007be8:	8005883a 	mov	r2,r16
 1007bec:	dfc00317 	ldw	ra,12(sp)
 1007bf0:	dc400217 	ldw	r17,8(sp)
 1007bf4:	dc000117 	ldw	r16,4(sp)
 1007bf8:	dec00404 	addi	sp,sp,16
 1007bfc:	f800283a 	ret
 1007c00:	00800284 	movi	r2,10
 1007c04:	80bff81e 	bne	r16,r2,1007be8 <__swbuf_r+0x88>
 1007c08:	8809883a 	mov	r4,r17
 1007c0c:	300b883a 	mov	r5,r6
 1007c10:	10044c40 	call	10044c4 <_fflush_r>
 1007c14:	103ff426 	beq	r2,zero,1007be8 <__swbuf_r+0x88>
 1007c18:	043fffc4 	movi	r16,-1
 1007c1c:	003ff206 	br	1007be8 <__swbuf_r+0x88>
 1007c20:	300b883a 	mov	r5,r6
 1007c24:	8809883a 	mov	r4,r17
 1007c28:	d9800015 	stw	r6,0(sp)
 1007c2c:	1002bbc0 	call	1002bbc <__swsetup_r>
 1007c30:	d9800017 	ldw	r6,0(sp)
 1007c34:	1000061e 	bne	r2,zero,1007c50 <__swbuf_r+0xf0>
 1007c38:	30c00417 	ldw	r3,16(r6)
 1007c3c:	003fd806 	br	1007ba0 <__swbuf_r+0x40>
 1007c40:	d9800015 	stw	r6,0(sp)
 1007c44:	100475c0 	call	100475c <__sinit>
 1007c48:	d9800017 	ldw	r6,0(sp)
 1007c4c:	003fcd06 	br	1007b84 <__swbuf_r+0x24>
 1007c50:	3080030b 	ldhu	r2,12(r6)
 1007c54:	00c00244 	movi	r3,9
 1007c58:	043fffc4 	movi	r16,-1
 1007c5c:	10801014 	ori	r2,r2,64
 1007c60:	3080030d 	sth	r2,12(r6)
 1007c64:	88c00015 	stw	r3,0(r17)
 1007c68:	003fdf06 	br	1007be8 <__swbuf_r+0x88>
 1007c6c:	300b883a 	mov	r5,r6
 1007c70:	8809883a 	mov	r4,r17
 1007c74:	d9800015 	stw	r6,0(sp)
 1007c78:	10044c40 	call	10044c4 <_fflush_r>
 1007c7c:	d9800017 	ldw	r6,0(sp)
 1007c80:	103fe51e 	bne	r2,zero,1007c18 <__swbuf_r+0xb8>
 1007c84:	31000017 	ldw	r4,0(r6)
 1007c88:	01400044 	movi	r5,1
 1007c8c:	003fc906 	br	1007bb4 <__swbuf_r+0x54>

01007c90 <__swbuf>:
 1007c90:	01804074 	movhi	r6,257
 1007c94:	31817b04 	addi	r6,r6,1516
 1007c98:	2007883a 	mov	r3,r4
 1007c9c:	31000017 	ldw	r4,0(r6)
 1007ca0:	280d883a 	mov	r6,r5
 1007ca4:	180b883a 	mov	r5,r3
 1007ca8:	1007b601 	jmpi	1007b60 <__swbuf_r>

01007cac <_write_r>:
 1007cac:	defffd04 	addi	sp,sp,-12
 1007cb0:	dc000015 	stw	r16,0(sp)
 1007cb4:	04004074 	movhi	r16,257
 1007cb8:	8408a804 	addi	r16,r16,8864
 1007cbc:	dc400115 	stw	r17,4(sp)
 1007cc0:	80000015 	stw	zero,0(r16)
 1007cc4:	2023883a 	mov	r17,r4
 1007cc8:	2809883a 	mov	r4,r5
 1007ccc:	300b883a 	mov	r5,r6
 1007cd0:	380d883a 	mov	r6,r7
 1007cd4:	dfc00215 	stw	ra,8(sp)
 1007cd8:	100b0900 	call	100b090 <write>
 1007cdc:	1007883a 	mov	r3,r2
 1007ce0:	00bfffc4 	movi	r2,-1
 1007ce4:	18800626 	beq	r3,r2,1007d00 <_write_r+0x54>
 1007ce8:	1805883a 	mov	r2,r3
 1007cec:	dfc00217 	ldw	ra,8(sp)
 1007cf0:	dc400117 	ldw	r17,4(sp)
 1007cf4:	dc000017 	ldw	r16,0(sp)
 1007cf8:	dec00304 	addi	sp,sp,12
 1007cfc:	f800283a 	ret
 1007d00:	80800017 	ldw	r2,0(r16)
 1007d04:	103ff826 	beq	r2,zero,1007ce8 <_write_r+0x3c>
 1007d08:	88800015 	stw	r2,0(r17)
 1007d0c:	1805883a 	mov	r2,r3
 1007d10:	dfc00217 	ldw	ra,8(sp)
 1007d14:	dc400117 	ldw	r17,4(sp)
 1007d18:	dc000017 	ldw	r16,0(sp)
 1007d1c:	dec00304 	addi	sp,sp,12
 1007d20:	f800283a 	ret

01007d24 <_calloc_r>:
 1007d24:	298b383a 	mul	r5,r5,r6
 1007d28:	defffe04 	addi	sp,sp,-8
 1007d2c:	dc000015 	stw	r16,0(sp)
 1007d30:	dfc00115 	stw	ra,4(sp)
 1007d34:	10056680 	call	1005668 <_malloc_r>
 1007d38:	1021883a 	mov	r16,r2
 1007d3c:	01c00904 	movi	r7,36
 1007d40:	10000d26 	beq	r2,zero,1007d78 <_calloc_r+0x54>
 1007d44:	10ffff17 	ldw	r3,-4(r2)
 1007d48:	1009883a 	mov	r4,r2
 1007d4c:	00bfff04 	movi	r2,-4
 1007d50:	1886703a 	and	r3,r3,r2
 1007d54:	1887883a 	add	r3,r3,r2
 1007d58:	180d883a 	mov	r6,r3
 1007d5c:	000b883a 	mov	r5,zero
 1007d60:	38c01736 	bltu	r7,r3,1007dc0 <_calloc_r+0x9c>
 1007d64:	008004c4 	movi	r2,19
 1007d68:	10c00836 	bltu	r2,r3,1007d8c <_calloc_r+0x68>
 1007d6c:	20000215 	stw	zero,8(r4)
 1007d70:	20000015 	stw	zero,0(r4)
 1007d74:	20000115 	stw	zero,4(r4)
 1007d78:	8005883a 	mov	r2,r16
 1007d7c:	dfc00117 	ldw	ra,4(sp)
 1007d80:	dc000017 	ldw	r16,0(sp)
 1007d84:	dec00204 	addi	sp,sp,8
 1007d88:	f800283a 	ret
 1007d8c:	008006c4 	movi	r2,27
 1007d90:	80000015 	stw	zero,0(r16)
 1007d94:	80000115 	stw	zero,4(r16)
 1007d98:	81000204 	addi	r4,r16,8
 1007d9c:	10fff32e 	bgeu	r2,r3,1007d6c <_calloc_r+0x48>
 1007da0:	80000215 	stw	zero,8(r16)
 1007da4:	80000315 	stw	zero,12(r16)
 1007da8:	81000404 	addi	r4,r16,16
 1007dac:	19ffef1e 	bne	r3,r7,1007d6c <_calloc_r+0x48>
 1007db0:	81000604 	addi	r4,r16,24
 1007db4:	80000415 	stw	zero,16(r16)
 1007db8:	80000515 	stw	zero,20(r16)
 1007dbc:	003feb06 	br	1007d6c <_calloc_r+0x48>
 1007dc0:	100600c0 	call	100600c <memset>
 1007dc4:	8005883a 	mov	r2,r16
 1007dc8:	dfc00117 	ldw	ra,4(sp)
 1007dcc:	dc000017 	ldw	r16,0(sp)
 1007dd0:	dec00204 	addi	sp,sp,8
 1007dd4:	f800283a 	ret

01007dd8 <_close_r>:
 1007dd8:	defffd04 	addi	sp,sp,-12
 1007ddc:	dc000015 	stw	r16,0(sp)
 1007de0:	04004074 	movhi	r16,257
 1007de4:	8408a804 	addi	r16,r16,8864
 1007de8:	dc400115 	stw	r17,4(sp)
 1007dec:	80000015 	stw	zero,0(r16)
 1007df0:	2023883a 	mov	r17,r4
 1007df4:	2809883a 	mov	r4,r5
 1007df8:	dfc00215 	stw	ra,8(sp)
 1007dfc:	100a5700 	call	100a570 <close>
 1007e00:	1007883a 	mov	r3,r2
 1007e04:	00bfffc4 	movi	r2,-1
 1007e08:	18800626 	beq	r3,r2,1007e24 <_close_r+0x4c>
 1007e0c:	1805883a 	mov	r2,r3
 1007e10:	dfc00217 	ldw	ra,8(sp)
 1007e14:	dc400117 	ldw	r17,4(sp)
 1007e18:	dc000017 	ldw	r16,0(sp)
 1007e1c:	dec00304 	addi	sp,sp,12
 1007e20:	f800283a 	ret
 1007e24:	80800017 	ldw	r2,0(r16)
 1007e28:	103ff826 	beq	r2,zero,1007e0c <_close_r+0x34>
 1007e2c:	88800015 	stw	r2,0(r17)
 1007e30:	1805883a 	mov	r2,r3
 1007e34:	dfc00217 	ldw	ra,8(sp)
 1007e38:	dc400117 	ldw	r17,4(sp)
 1007e3c:	dc000017 	ldw	r16,0(sp)
 1007e40:	dec00304 	addi	sp,sp,12
 1007e44:	f800283a 	ret

01007e48 <_fclose_r>:
 1007e48:	defffc04 	addi	sp,sp,-16
 1007e4c:	dc400115 	stw	r17,4(sp)
 1007e50:	dc000015 	stw	r16,0(sp)
 1007e54:	dfc00315 	stw	ra,12(sp)
 1007e58:	dc800215 	stw	r18,8(sp)
 1007e5c:	2821883a 	mov	r16,r5
 1007e60:	2023883a 	mov	r17,r4
 1007e64:	28002926 	beq	r5,zero,1007f0c <_fclose_r+0xc4>
 1007e68:	100474c0 	call	100474c <__sfp_lock_acquire>
 1007e6c:	88000226 	beq	r17,zero,1007e78 <_fclose_r+0x30>
 1007e70:	88800e17 	ldw	r2,56(r17)
 1007e74:	10002d26 	beq	r2,zero,1007f2c <_fclose_r+0xe4>
 1007e78:	8080030f 	ldh	r2,12(r16)
 1007e7c:	10002226 	beq	r2,zero,1007f08 <_fclose_r+0xc0>
 1007e80:	8809883a 	mov	r4,r17
 1007e84:	800b883a 	mov	r5,r16
 1007e88:	10044c40 	call	10044c4 <_fflush_r>
 1007e8c:	1025883a 	mov	r18,r2
 1007e90:	80800b17 	ldw	r2,44(r16)
 1007e94:	10000426 	beq	r2,zero,1007ea8 <_fclose_r+0x60>
 1007e98:	81400717 	ldw	r5,28(r16)
 1007e9c:	8809883a 	mov	r4,r17
 1007ea0:	103ee83a 	callr	r2
 1007ea4:	10002a16 	blt	r2,zero,1007f50 <_fclose_r+0x108>
 1007ea8:	8080030b 	ldhu	r2,12(r16)
 1007eac:	1080200c 	andi	r2,r2,128
 1007eb0:	1000231e 	bne	r2,zero,1007f40 <_fclose_r+0xf8>
 1007eb4:	81400c17 	ldw	r5,48(r16)
 1007eb8:	28000526 	beq	r5,zero,1007ed0 <_fclose_r+0x88>
 1007ebc:	80801004 	addi	r2,r16,64
 1007ec0:	28800226 	beq	r5,r2,1007ecc <_fclose_r+0x84>
 1007ec4:	8809883a 	mov	r4,r17
 1007ec8:	1004ae00 	call	1004ae0 <_free_r>
 1007ecc:	80000c15 	stw	zero,48(r16)
 1007ed0:	81401117 	ldw	r5,68(r16)
 1007ed4:	28000326 	beq	r5,zero,1007ee4 <_fclose_r+0x9c>
 1007ed8:	8809883a 	mov	r4,r17
 1007edc:	1004ae00 	call	1004ae0 <_free_r>
 1007ee0:	80001115 	stw	zero,68(r16)
 1007ee4:	8000030d 	sth	zero,12(r16)
 1007ee8:	10047500 	call	1004750 <__sfp_lock_release>
 1007eec:	9005883a 	mov	r2,r18
 1007ef0:	dfc00317 	ldw	ra,12(sp)
 1007ef4:	dc800217 	ldw	r18,8(sp)
 1007ef8:	dc400117 	ldw	r17,4(sp)
 1007efc:	dc000017 	ldw	r16,0(sp)
 1007f00:	dec00404 	addi	sp,sp,16
 1007f04:	f800283a 	ret
 1007f08:	10047500 	call	1004750 <__sfp_lock_release>
 1007f0c:	0025883a 	mov	r18,zero
 1007f10:	9005883a 	mov	r2,r18
 1007f14:	dfc00317 	ldw	ra,12(sp)
 1007f18:	dc800217 	ldw	r18,8(sp)
 1007f1c:	dc400117 	ldw	r17,4(sp)
 1007f20:	dc000017 	ldw	r16,0(sp)
 1007f24:	dec00404 	addi	sp,sp,16
 1007f28:	f800283a 	ret
 1007f2c:	8809883a 	mov	r4,r17
 1007f30:	100475c0 	call	100475c <__sinit>
 1007f34:	8080030f 	ldh	r2,12(r16)
 1007f38:	103fd11e 	bne	r2,zero,1007e80 <_fclose_r+0x38>
 1007f3c:	003ff206 	br	1007f08 <_fclose_r+0xc0>
 1007f40:	81400417 	ldw	r5,16(r16)
 1007f44:	8809883a 	mov	r4,r17
 1007f48:	1004ae00 	call	1004ae0 <_free_r>
 1007f4c:	003fd906 	br	1007eb4 <_fclose_r+0x6c>
 1007f50:	04bfffc4 	movi	r18,-1
 1007f54:	003fd406 	br	1007ea8 <_fclose_r+0x60>

01007f58 <fclose>:
 1007f58:	00804074 	movhi	r2,257
 1007f5c:	10817b04 	addi	r2,r2,1516
 1007f60:	200b883a 	mov	r5,r4
 1007f64:	11000017 	ldw	r4,0(r2)
 1007f68:	1007e481 	jmpi	1007e48 <_fclose_r>

01007f6c <_fstat_r>:
 1007f6c:	defffd04 	addi	sp,sp,-12
 1007f70:	dc000015 	stw	r16,0(sp)
 1007f74:	04004074 	movhi	r16,257
 1007f78:	8408a804 	addi	r16,r16,8864
 1007f7c:	dc400115 	stw	r17,4(sp)
 1007f80:	80000015 	stw	zero,0(r16)
 1007f84:	2023883a 	mov	r17,r4
 1007f88:	2809883a 	mov	r4,r5
 1007f8c:	300b883a 	mov	r5,r6
 1007f90:	dfc00215 	stw	ra,8(sp)
 1007f94:	100a6f80 	call	100a6f8 <fstat>
 1007f98:	1007883a 	mov	r3,r2
 1007f9c:	00bfffc4 	movi	r2,-1
 1007fa0:	18800626 	beq	r3,r2,1007fbc <_fstat_r+0x50>
 1007fa4:	1805883a 	mov	r2,r3
 1007fa8:	dfc00217 	ldw	ra,8(sp)
 1007fac:	dc400117 	ldw	r17,4(sp)
 1007fb0:	dc000017 	ldw	r16,0(sp)
 1007fb4:	dec00304 	addi	sp,sp,12
 1007fb8:	f800283a 	ret
 1007fbc:	80800017 	ldw	r2,0(r16)
 1007fc0:	103ff826 	beq	r2,zero,1007fa4 <_fstat_r+0x38>
 1007fc4:	88800015 	stw	r2,0(r17)
 1007fc8:	1805883a 	mov	r2,r3
 1007fcc:	dfc00217 	ldw	ra,8(sp)
 1007fd0:	dc400117 	ldw	r17,4(sp)
 1007fd4:	dc000017 	ldw	r16,0(sp)
 1007fd8:	dec00304 	addi	sp,sp,12
 1007fdc:	f800283a 	ret

01007fe0 <_isatty_r>:
 1007fe0:	defffd04 	addi	sp,sp,-12
 1007fe4:	dc000015 	stw	r16,0(sp)
 1007fe8:	04004074 	movhi	r16,257
 1007fec:	8408a804 	addi	r16,r16,8864
 1007ff0:	dc400115 	stw	r17,4(sp)
 1007ff4:	80000015 	stw	zero,0(r16)
 1007ff8:	2023883a 	mov	r17,r4
 1007ffc:	2809883a 	mov	r4,r5
 1008000:	dfc00215 	stw	ra,8(sp)
 1008004:	100a9ec0 	call	100a9ec <isatty>
 1008008:	1007883a 	mov	r3,r2
 100800c:	00bfffc4 	movi	r2,-1
 1008010:	18800626 	beq	r3,r2,100802c <_isatty_r+0x4c>
 1008014:	1805883a 	mov	r2,r3
 1008018:	dfc00217 	ldw	ra,8(sp)
 100801c:	dc400117 	ldw	r17,4(sp)
 1008020:	dc000017 	ldw	r16,0(sp)
 1008024:	dec00304 	addi	sp,sp,12
 1008028:	f800283a 	ret
 100802c:	80800017 	ldw	r2,0(r16)
 1008030:	103ff826 	beq	r2,zero,1008014 <_isatty_r+0x34>
 1008034:	88800015 	stw	r2,0(r17)
 1008038:	1805883a 	mov	r2,r3
 100803c:	dfc00217 	ldw	ra,8(sp)
 1008040:	dc400117 	ldw	r17,4(sp)
 1008044:	dc000017 	ldw	r16,0(sp)
 1008048:	dec00304 	addi	sp,sp,12
 100804c:	f800283a 	ret

01008050 <_lseek_r>:
 1008050:	defffd04 	addi	sp,sp,-12
 1008054:	dc000015 	stw	r16,0(sp)
 1008058:	04004074 	movhi	r16,257
 100805c:	8408a804 	addi	r16,r16,8864
 1008060:	dc400115 	stw	r17,4(sp)
 1008064:	80000015 	stw	zero,0(r16)
 1008068:	2023883a 	mov	r17,r4
 100806c:	2809883a 	mov	r4,r5
 1008070:	300b883a 	mov	r5,r6
 1008074:	380d883a 	mov	r6,r7
 1008078:	dfc00215 	stw	ra,8(sp)
 100807c:	100abf80 	call	100abf8 <lseek>
 1008080:	1007883a 	mov	r3,r2
 1008084:	00bfffc4 	movi	r2,-1
 1008088:	18800626 	beq	r3,r2,10080a4 <_lseek_r+0x54>
 100808c:	1805883a 	mov	r2,r3
 1008090:	dfc00217 	ldw	ra,8(sp)
 1008094:	dc400117 	ldw	r17,4(sp)
 1008098:	dc000017 	ldw	r16,0(sp)
 100809c:	dec00304 	addi	sp,sp,12
 10080a0:	f800283a 	ret
 10080a4:	80800017 	ldw	r2,0(r16)
 10080a8:	103ff826 	beq	r2,zero,100808c <_lseek_r+0x3c>
 10080ac:	88800015 	stw	r2,0(r17)
 10080b0:	1805883a 	mov	r2,r3
 10080b4:	dfc00217 	ldw	ra,8(sp)
 10080b8:	dc400117 	ldw	r17,4(sp)
 10080bc:	dc000017 	ldw	r16,0(sp)
 10080c0:	dec00304 	addi	sp,sp,12
 10080c4:	f800283a 	ret

010080c8 <_read_r>:
 10080c8:	defffd04 	addi	sp,sp,-12
 10080cc:	dc000015 	stw	r16,0(sp)
 10080d0:	04004074 	movhi	r16,257
 10080d4:	8408a804 	addi	r16,r16,8864
 10080d8:	dc400115 	stw	r17,4(sp)
 10080dc:	80000015 	stw	zero,0(r16)
 10080e0:	2023883a 	mov	r17,r4
 10080e4:	2809883a 	mov	r4,r5
 10080e8:	300b883a 	mov	r5,r6
 10080ec:	380d883a 	mov	r6,r7
 10080f0:	dfc00215 	stw	ra,8(sp)
 10080f4:	100adf40 	call	100adf4 <read>
 10080f8:	1007883a 	mov	r3,r2
 10080fc:	00bfffc4 	movi	r2,-1
 1008100:	18800626 	beq	r3,r2,100811c <_read_r+0x54>
 1008104:	1805883a 	mov	r2,r3
 1008108:	dfc00217 	ldw	ra,8(sp)
 100810c:	dc400117 	ldw	r17,4(sp)
 1008110:	dc000017 	ldw	r16,0(sp)
 1008114:	dec00304 	addi	sp,sp,12
 1008118:	f800283a 	ret
 100811c:	80800017 	ldw	r2,0(r16)
 1008120:	103ff826 	beq	r2,zero,1008104 <_read_r+0x3c>
 1008124:	88800015 	stw	r2,0(r17)
 1008128:	1805883a 	mov	r2,r3
 100812c:	dfc00217 	ldw	ra,8(sp)
 1008130:	dc400117 	ldw	r17,4(sp)
 1008134:	dc000017 	ldw	r16,0(sp)
 1008138:	dec00304 	addi	sp,sp,12
 100813c:	f800283a 	ret

01008140 <__udivdi3>:
 1008140:	defff004 	addi	sp,sp,-64
 1008144:	2005883a 	mov	r2,r4
 1008148:	3011883a 	mov	r8,r6
 100814c:	df000e15 	stw	fp,56(sp)
 1008150:	dd000a15 	stw	r20,40(sp)
 1008154:	dc000615 	stw	r16,24(sp)
 1008158:	dfc00f15 	stw	ra,60(sp)
 100815c:	ddc00d15 	stw	r23,52(sp)
 1008160:	dd800c15 	stw	r22,48(sp)
 1008164:	dd400b15 	stw	r21,44(sp)
 1008168:	dcc00915 	stw	r19,36(sp)
 100816c:	dc800815 	stw	r18,32(sp)
 1008170:	dc400715 	stw	r17,28(sp)
 1008174:	4021883a 	mov	r16,r8
 1008178:	1039883a 	mov	fp,r2
 100817c:	2829883a 	mov	r20,r5
 1008180:	38003b1e 	bne	r7,zero,1008270 <__udivdi3+0x130>
 1008184:	2a005c36 	bltu	r5,r8,10082f8 <__udivdi3+0x1b8>
 1008188:	4000a626 	beq	r8,zero,1008424 <__udivdi3+0x2e4>
 100818c:	00bfffd4 	movui	r2,65535
 1008190:	14009e36 	bltu	r2,r16,100840c <__udivdi3+0x2cc>
 1008194:	00803fc4 	movi	r2,255
 1008198:	14013d36 	bltu	r2,r16,1008690 <__udivdi3+0x550>
 100819c:	000b883a 	mov	r5,zero
 10081a0:	0005883a 	mov	r2,zero
 10081a4:	8084d83a 	srl	r2,r16,r2
 10081a8:	01004074 	movhi	r4,257
 10081ac:	2139fb04 	addi	r4,r4,-6164
 10081b0:	01800804 	movi	r6,32
 10081b4:	1105883a 	add	r2,r2,r4
 10081b8:	10c00003 	ldbu	r3,0(r2)
 10081bc:	28c7883a 	add	r3,r5,r3
 10081c0:	30edc83a 	sub	r22,r6,r3
 10081c4:	b000ee1e 	bne	r22,zero,1008580 <__udivdi3+0x440>
 10081c8:	802ad43a 	srli	r21,r16,16
 10081cc:	00800044 	movi	r2,1
 10081d0:	a423c83a 	sub	r17,r20,r16
 10081d4:	85ffffcc 	andi	r23,r16,65535
 10081d8:	d8800315 	stw	r2,12(sp)
 10081dc:	8809883a 	mov	r4,r17
 10081e0:	a80b883a 	mov	r5,r21
 10081e4:	1009f340 	call	1009f34 <__udivsi3>
 10081e8:	8809883a 	mov	r4,r17
 10081ec:	a80b883a 	mov	r5,r21
 10081f0:	102d883a 	mov	r22,r2
 10081f4:	1009f3c0 	call	1009f3c <__umodsi3>
 10081f8:	1004943a 	slli	r2,r2,16
 10081fc:	e006d43a 	srli	r3,fp,16
 1008200:	bda3383a 	mul	r17,r23,r22
 1008204:	10c4b03a 	or	r2,r2,r3
 1008208:	1440042e 	bgeu	r2,r17,100821c <__udivdi3+0xdc>
 100820c:	1405883a 	add	r2,r2,r16
 1008210:	b5bfffc4 	addi	r22,r22,-1
 1008214:	14000136 	bltu	r2,r16,100821c <__udivdi3+0xdc>
 1008218:	14413d36 	bltu	r2,r17,1008710 <__udivdi3+0x5d0>
 100821c:	1463c83a 	sub	r17,r2,r17
 1008220:	8809883a 	mov	r4,r17
 1008224:	a80b883a 	mov	r5,r21
 1008228:	1009f340 	call	1009f34 <__udivsi3>
 100822c:	8809883a 	mov	r4,r17
 1008230:	a80b883a 	mov	r5,r21
 1008234:	1029883a 	mov	r20,r2
 1008238:	1009f3c0 	call	1009f3c <__umodsi3>
 100823c:	1004943a 	slli	r2,r2,16
 1008240:	bd09383a 	mul	r4,r23,r20
 1008244:	e0ffffcc 	andi	r3,fp,65535
 1008248:	10c4b03a 	or	r2,r2,r3
 100824c:	1100042e 	bgeu	r2,r4,1008260 <__udivdi3+0x120>
 1008250:	8085883a 	add	r2,r16,r2
 1008254:	a53fffc4 	addi	r20,r20,-1
 1008258:	14000136 	bltu	r2,r16,1008260 <__udivdi3+0x120>
 100825c:	11012036 	bltu	r2,r4,10086e0 <__udivdi3+0x5a0>
 1008260:	b004943a 	slli	r2,r22,16
 1008264:	d9000317 	ldw	r4,12(sp)
 1008268:	a084b03a 	or	r2,r20,r2
 100826c:	00001506 	br	10082c4 <__udivdi3+0x184>
 1008270:	380d883a 	mov	r6,r7
 1008274:	29c06236 	bltu	r5,r7,1008400 <__udivdi3+0x2c0>
 1008278:	00bfffd4 	movui	r2,65535
 100827c:	11c05a36 	bltu	r2,r7,10083e8 <__udivdi3+0x2a8>
 1008280:	00803fc4 	movi	r2,255
 1008284:	11c0fc36 	bltu	r2,r7,1008678 <__udivdi3+0x538>
 1008288:	000b883a 	mov	r5,zero
 100828c:	0005883a 	mov	r2,zero
 1008290:	3084d83a 	srl	r2,r6,r2
 1008294:	01004074 	movhi	r4,257
 1008298:	2139fb04 	addi	r4,r4,-6164
 100829c:	01c00804 	movi	r7,32
 10082a0:	1105883a 	add	r2,r2,r4
 10082a4:	10c00003 	ldbu	r3,0(r2)
 10082a8:	28c7883a 	add	r3,r5,r3
 10082ac:	38efc83a 	sub	r23,r7,r3
 10082b0:	b800691e 	bne	r23,zero,1008458 <__udivdi3+0x318>
 10082b4:	35000136 	bltu	r6,r20,10082bc <__udivdi3+0x17c>
 10082b8:	e4005136 	bltu	fp,r16,1008400 <__udivdi3+0x2c0>
 10082bc:	00800044 	movi	r2,1
 10082c0:	0009883a 	mov	r4,zero
 10082c4:	2007883a 	mov	r3,r4
 10082c8:	dfc00f17 	ldw	ra,60(sp)
 10082cc:	df000e17 	ldw	fp,56(sp)
 10082d0:	ddc00d17 	ldw	r23,52(sp)
 10082d4:	dd800c17 	ldw	r22,48(sp)
 10082d8:	dd400b17 	ldw	r21,44(sp)
 10082dc:	dd000a17 	ldw	r20,40(sp)
 10082e0:	dcc00917 	ldw	r19,36(sp)
 10082e4:	dc800817 	ldw	r18,32(sp)
 10082e8:	dc400717 	ldw	r17,28(sp)
 10082ec:	dc000617 	ldw	r16,24(sp)
 10082f0:	dec01004 	addi	sp,sp,64
 10082f4:	f800283a 	ret
 10082f8:	00bfffd4 	movui	r2,65535
 10082fc:	12005036 	bltu	r2,r8,1008440 <__udivdi3+0x300>
 1008300:	00803fc4 	movi	r2,255
 1008304:	1200e836 	bltu	r2,r8,10086a8 <__udivdi3+0x568>
 1008308:	000b883a 	mov	r5,zero
 100830c:	0005883a 	mov	r2,zero
 1008310:	8084d83a 	srl	r2,r16,r2
 1008314:	01004074 	movhi	r4,257
 1008318:	2139fb04 	addi	r4,r4,-6164
 100831c:	01800804 	movi	r6,32
 1008320:	1105883a 	add	r2,r2,r4
 1008324:	10c00003 	ldbu	r3,0(r2)
 1008328:	28c7883a 	add	r3,r5,r3
 100832c:	30cbc83a 	sub	r5,r6,r3
 1008330:	28000626 	beq	r5,zero,100834c <__udivdi3+0x20c>
 1008334:	3145c83a 	sub	r2,r6,r5
 1008338:	e084d83a 	srl	r2,fp,r2
 100833c:	a146983a 	sll	r3,r20,r5
 1008340:	e178983a 	sll	fp,fp,r5
 1008344:	8160983a 	sll	r16,r16,r5
 1008348:	18a8b03a 	or	r20,r3,r2
 100834c:	802ad43a 	srli	r21,r16,16
 1008350:	a009883a 	mov	r4,r20
 1008354:	85ffffcc 	andi	r23,r16,65535
 1008358:	a80b883a 	mov	r5,r21
 100835c:	1009f340 	call	1009f34 <__udivsi3>
 1008360:	a009883a 	mov	r4,r20
 1008364:	a80b883a 	mov	r5,r21
 1008368:	102d883a 	mov	r22,r2
 100836c:	1009f3c0 	call	1009f3c <__umodsi3>
 1008370:	1004943a 	slli	r2,r2,16
 1008374:	e006d43a 	srli	r3,fp,16
 1008378:	bda3383a 	mul	r17,r23,r22
 100837c:	10c4b03a 	or	r2,r2,r3
 1008380:	1440042e 	bgeu	r2,r17,1008394 <__udivdi3+0x254>
 1008384:	1405883a 	add	r2,r2,r16
 1008388:	b5bfffc4 	addi	r22,r22,-1
 100838c:	14000136 	bltu	r2,r16,1008394 <__udivdi3+0x254>
 1008390:	1440d536 	bltu	r2,r17,10086e8 <__udivdi3+0x5a8>
 1008394:	1463c83a 	sub	r17,r2,r17
 1008398:	8809883a 	mov	r4,r17
 100839c:	a80b883a 	mov	r5,r21
 10083a0:	1009f340 	call	1009f34 <__udivsi3>
 10083a4:	8809883a 	mov	r4,r17
 10083a8:	a80b883a 	mov	r5,r21
 10083ac:	1029883a 	mov	r20,r2
 10083b0:	1009f3c0 	call	1009f3c <__umodsi3>
 10083b4:	1004943a 	slli	r2,r2,16
 10083b8:	bd09383a 	mul	r4,r23,r20
 10083bc:	e0ffffcc 	andi	r3,fp,65535
 10083c0:	10c4b03a 	or	r2,r2,r3
 10083c4:	1100042e 	bgeu	r2,r4,10083d8 <__udivdi3+0x298>
 10083c8:	8085883a 	add	r2,r16,r2
 10083cc:	a53fffc4 	addi	r20,r20,-1
 10083d0:	14000136 	bltu	r2,r16,10083d8 <__udivdi3+0x298>
 10083d4:	1100c736 	bltu	r2,r4,10086f4 <__udivdi3+0x5b4>
 10083d8:	b004943a 	slli	r2,r22,16
 10083dc:	0009883a 	mov	r4,zero
 10083e0:	a084b03a 	or	r2,r20,r2
 10083e4:	003fb706 	br	10082c4 <__udivdi3+0x184>
 10083e8:	00804034 	movhi	r2,256
 10083ec:	10bfffc4 	addi	r2,r2,-1
 10083f0:	11c0a436 	bltu	r2,r7,1008684 <__udivdi3+0x544>
 10083f4:	01400404 	movi	r5,16
 10083f8:	2805883a 	mov	r2,r5
 10083fc:	003fa406 	br	1008290 <__udivdi3+0x150>
 1008400:	0005883a 	mov	r2,zero
 1008404:	0009883a 	mov	r4,zero
 1008408:	003fae06 	br	10082c4 <__udivdi3+0x184>
 100840c:	00804034 	movhi	r2,256
 1008410:	10bfffc4 	addi	r2,r2,-1
 1008414:	1400a136 	bltu	r2,r16,100869c <__udivdi3+0x55c>
 1008418:	01400404 	movi	r5,16
 100841c:	2805883a 	mov	r2,r5
 1008420:	003f6006 	br	10081a4 <__udivdi3+0x64>
 1008424:	01000044 	movi	r4,1
 1008428:	000b883a 	mov	r5,zero
 100842c:	1009f340 	call	1009f34 <__udivsi3>
 1008430:	1021883a 	mov	r16,r2
 1008434:	00bfffd4 	movui	r2,65535
 1008438:	143ff436 	bltu	r2,r16,100840c <__udivdi3+0x2cc>
 100843c:	003f5506 	br	1008194 <__udivdi3+0x54>
 1008440:	00804034 	movhi	r2,256
 1008444:	10bfffc4 	addi	r2,r2,-1
 1008448:	12009a36 	bltu	r2,r8,10086b4 <__udivdi3+0x574>
 100844c:	01400404 	movi	r5,16
 1008450:	2805883a 	mov	r2,r5
 1008454:	003fae06 	br	1008310 <__udivdi3+0x1d0>
 1008458:	3dc5c83a 	sub	r2,r7,r23
 100845c:	35c8983a 	sll	r4,r6,r23
 1008460:	8086d83a 	srl	r3,r16,r2
 1008464:	a0a2d83a 	srl	r17,r20,r2
 1008468:	e084d83a 	srl	r2,fp,r2
 100846c:	20eab03a 	or	r21,r4,r3
 1008470:	a82cd43a 	srli	r22,r21,16
 1008474:	a5c6983a 	sll	r3,r20,r23
 1008478:	8809883a 	mov	r4,r17
 100847c:	b00b883a 	mov	r5,r22
 1008480:	1886b03a 	or	r3,r3,r2
 1008484:	d8c00215 	stw	r3,8(sp)
 1008488:	1009f340 	call	1009f34 <__udivsi3>
 100848c:	8809883a 	mov	r4,r17
 1008490:	b00b883a 	mov	r5,r22
 1008494:	1029883a 	mov	r20,r2
 1008498:	1009f3c0 	call	1009f3c <__umodsi3>
 100849c:	a8ffffcc 	andi	r3,r21,65535
 10084a0:	d8c00515 	stw	r3,20(sp)
 10084a4:	d9000217 	ldw	r4,8(sp)
 10084a8:	d9400517 	ldw	r5,20(sp)
 10084ac:	1004943a 	slli	r2,r2,16
 10084b0:	2006d43a 	srli	r3,r4,16
 10084b4:	85e0983a 	sll	r16,r16,r23
 10084b8:	2d23383a 	mul	r17,r5,r20
 10084bc:	10c4b03a 	or	r2,r2,r3
 10084c0:	dc000015 	stw	r16,0(sp)
 10084c4:	1440032e 	bgeu	r2,r17,10084d4 <__udivdi3+0x394>
 10084c8:	1545883a 	add	r2,r2,r21
 10084cc:	a53fffc4 	addi	r20,r20,-1
 10084d0:	15407f2e 	bgeu	r2,r21,10086d0 <__udivdi3+0x590>
 10084d4:	1463c83a 	sub	r17,r2,r17
 10084d8:	8809883a 	mov	r4,r17
 10084dc:	b00b883a 	mov	r5,r22
 10084e0:	1009f340 	call	1009f34 <__udivsi3>
 10084e4:	8809883a 	mov	r4,r17
 10084e8:	b00b883a 	mov	r5,r22
 10084ec:	1021883a 	mov	r16,r2
 10084f0:	1009f3c0 	call	1009f3c <__umodsi3>
 10084f4:	d8c00517 	ldw	r3,20(sp)
 10084f8:	d9000217 	ldw	r4,8(sp)
 10084fc:	1004943a 	slli	r2,r2,16
 1008500:	1c0f383a 	mul	r7,r3,r16
 1008504:	20ffffcc 	andi	r3,r4,65535
 1008508:	10e2b03a 	or	r17,r2,r3
 100850c:	89c0032e 	bgeu	r17,r7,100851c <__udivdi3+0x3dc>
 1008510:	8d63883a 	add	r17,r17,r21
 1008514:	843fffc4 	addi	r16,r16,-1
 1008518:	8d40692e 	bgeu	r17,r21,10086c0 <__udivdi3+0x580>
 100851c:	a008943a 	slli	r4,r20,16
 1008520:	d9400017 	ldw	r5,0(sp)
 1008524:	89e3c83a 	sub	r17,r17,r7
 1008528:	8110b03a 	or	r8,r16,r4
 100852c:	280cd43a 	srli	r6,r5,16
 1008530:	28ffffcc 	andi	r3,r5,65535
 1008534:	40bfffcc 	andi	r2,r8,65535
 1008538:	400ad43a 	srli	r5,r8,16
 100853c:	10d3383a 	mul	r9,r2,r3
 1008540:	1185383a 	mul	r2,r2,r6
 1008544:	28c7383a 	mul	r3,r5,r3
 1008548:	4808d43a 	srli	r4,r9,16
 100854c:	298b383a 	mul	r5,r5,r6
 1008550:	10c5883a 	add	r2,r2,r3
 1008554:	2089883a 	add	r4,r4,r2
 1008558:	20c0022e 	bgeu	r4,r3,1008564 <__udivdi3+0x424>
 100855c:	00800074 	movhi	r2,1
 1008560:	288b883a 	add	r5,r5,r2
 1008564:	2004d43a 	srli	r2,r4,16
 1008568:	288b883a 	add	r5,r5,r2
 100856c:	89403f36 	bltu	r17,r5,100866c <__udivdi3+0x52c>
 1008570:	89403926 	beq	r17,r5,1008658 <__udivdi3+0x518>
 1008574:	4005883a 	mov	r2,r8
 1008578:	0009883a 	mov	r4,zero
 100857c:	003f5106 	br	10082c4 <__udivdi3+0x184>
 1008580:	85a0983a 	sll	r16,r16,r22
 1008584:	3585c83a 	sub	r2,r6,r22
 1008588:	a0a2d83a 	srl	r17,r20,r2
 100858c:	802ad43a 	srli	r21,r16,16
 1008590:	e084d83a 	srl	r2,fp,r2
 1008594:	a586983a 	sll	r3,r20,r22
 1008598:	8809883a 	mov	r4,r17
 100859c:	a80b883a 	mov	r5,r21
 10085a0:	1886b03a 	or	r3,r3,r2
 10085a4:	d8c00115 	stw	r3,4(sp)
 10085a8:	1009f340 	call	1009f34 <__udivsi3>
 10085ac:	8809883a 	mov	r4,r17
 10085b0:	a80b883a 	mov	r5,r21
 10085b4:	d8800415 	stw	r2,16(sp)
 10085b8:	1009f3c0 	call	1009f3c <__umodsi3>
 10085bc:	d9000117 	ldw	r4,4(sp)
 10085c0:	d9400417 	ldw	r5,16(sp)
 10085c4:	1004943a 	slli	r2,r2,16
 10085c8:	85ffffcc 	andi	r23,r16,65535
 10085cc:	2006d43a 	srli	r3,r4,16
 10085d0:	b963383a 	mul	r17,r23,r5
 10085d4:	10c4b03a 	or	r2,r2,r3
 10085d8:	1440042e 	bgeu	r2,r17,10085ec <__udivdi3+0x4ac>
 10085dc:	297fffc4 	addi	r5,r5,-1
 10085e0:	1405883a 	add	r2,r2,r16
 10085e4:	d9400415 	stw	r5,16(sp)
 10085e8:	1400442e 	bgeu	r2,r16,10086fc <__udivdi3+0x5bc>
 10085ec:	1463c83a 	sub	r17,r2,r17
 10085f0:	8809883a 	mov	r4,r17
 10085f4:	a80b883a 	mov	r5,r21
 10085f8:	1009f340 	call	1009f34 <__udivsi3>
 10085fc:	8809883a 	mov	r4,r17
 1008600:	a80b883a 	mov	r5,r21
 1008604:	1029883a 	mov	r20,r2
 1008608:	1009f3c0 	call	1009f3c <__umodsi3>
 100860c:	d9400117 	ldw	r5,4(sp)
 1008610:	1004943a 	slli	r2,r2,16
 1008614:	bd09383a 	mul	r4,r23,r20
 1008618:	28ffffcc 	andi	r3,r5,65535
 100861c:	10c6b03a 	or	r3,r2,r3
 1008620:	1900062e 	bgeu	r3,r4,100863c <__udivdi3+0x4fc>
 1008624:	1c07883a 	add	r3,r3,r16
 1008628:	a53fffc4 	addi	r20,r20,-1
 100862c:	1c000336 	bltu	r3,r16,100863c <__udivdi3+0x4fc>
 1008630:	1900022e 	bgeu	r3,r4,100863c <__udivdi3+0x4fc>
 1008634:	a53fffc4 	addi	r20,r20,-1
 1008638:	1c07883a 	add	r3,r3,r16
 100863c:	d9400417 	ldw	r5,16(sp)
 1008640:	e5b8983a 	sll	fp,fp,r22
 1008644:	1923c83a 	sub	r17,r3,r4
 1008648:	2804943a 	slli	r2,r5,16
 100864c:	a0a8b03a 	or	r20,r20,r2
 1008650:	dd000315 	stw	r20,12(sp)
 1008654:	003ee106 	br	10081dc <__udivdi3+0x9c>
 1008658:	2004943a 	slli	r2,r4,16
 100865c:	e5c8983a 	sll	r4,fp,r23
 1008660:	48ffffcc 	andi	r3,r9,65535
 1008664:	10c5883a 	add	r2,r2,r3
 1008668:	20bfc22e 	bgeu	r4,r2,1008574 <__udivdi3+0x434>
 100866c:	40bfffc4 	addi	r2,r8,-1
 1008670:	0009883a 	mov	r4,zero
 1008674:	003f1306 	br	10082c4 <__udivdi3+0x184>
 1008678:	01400204 	movi	r5,8
 100867c:	2805883a 	mov	r2,r5
 1008680:	003f0306 	br	1008290 <__udivdi3+0x150>
 1008684:	01400604 	movi	r5,24
 1008688:	2805883a 	mov	r2,r5
 100868c:	003f0006 	br	1008290 <__udivdi3+0x150>
 1008690:	01400204 	movi	r5,8
 1008694:	2805883a 	mov	r2,r5
 1008698:	003ec206 	br	10081a4 <__udivdi3+0x64>
 100869c:	01400604 	movi	r5,24
 10086a0:	2805883a 	mov	r2,r5
 10086a4:	003ebf06 	br	10081a4 <__udivdi3+0x64>
 10086a8:	01400204 	movi	r5,8
 10086ac:	2805883a 	mov	r2,r5
 10086b0:	003f1706 	br	1008310 <__udivdi3+0x1d0>
 10086b4:	01400604 	movi	r5,24
 10086b8:	2805883a 	mov	r2,r5
 10086bc:	003f1406 	br	1008310 <__udivdi3+0x1d0>
 10086c0:	89ff962e 	bgeu	r17,r7,100851c <__udivdi3+0x3dc>
 10086c4:	8d63883a 	add	r17,r17,r21
 10086c8:	843fffc4 	addi	r16,r16,-1
 10086cc:	003f9306 	br	100851c <__udivdi3+0x3dc>
 10086d0:	147f802e 	bgeu	r2,r17,10084d4 <__udivdi3+0x394>
 10086d4:	a53fffc4 	addi	r20,r20,-1
 10086d8:	1545883a 	add	r2,r2,r21
 10086dc:	003f7d06 	br	10084d4 <__udivdi3+0x394>
 10086e0:	a53fffc4 	addi	r20,r20,-1
 10086e4:	003ede06 	br	1008260 <__udivdi3+0x120>
 10086e8:	b5bfffc4 	addi	r22,r22,-1
 10086ec:	1405883a 	add	r2,r2,r16
 10086f0:	003f2806 	br	1008394 <__udivdi3+0x254>
 10086f4:	a53fffc4 	addi	r20,r20,-1
 10086f8:	003f3706 	br	10083d8 <__udivdi3+0x298>
 10086fc:	147fbb2e 	bgeu	r2,r17,10085ec <__udivdi3+0x4ac>
 1008700:	297fffc4 	addi	r5,r5,-1
 1008704:	1405883a 	add	r2,r2,r16
 1008708:	d9400415 	stw	r5,16(sp)
 100870c:	003fb706 	br	10085ec <__udivdi3+0x4ac>
 1008710:	b5bfffc4 	addi	r22,r22,-1
 1008714:	1405883a 	add	r2,r2,r16
 1008718:	003ec006 	br	100821c <__udivdi3+0xdc>

0100871c <__umoddi3>:
 100871c:	defff104 	addi	sp,sp,-60
 1008720:	dd800b15 	stw	r22,44(sp)
 1008724:	dd000915 	stw	r20,36(sp)
 1008728:	dc000515 	stw	r16,20(sp)
 100872c:	dfc00e15 	stw	ra,56(sp)
 1008730:	df000d15 	stw	fp,52(sp)
 1008734:	ddc00c15 	stw	r23,48(sp)
 1008738:	dd400a15 	stw	r21,40(sp)
 100873c:	dcc00815 	stw	r19,32(sp)
 1008740:	dc800715 	stw	r18,28(sp)
 1008744:	dc400615 	stw	r17,24(sp)
 1008748:	3021883a 	mov	r16,r6
 100874c:	202d883a 	mov	r22,r4
 1008750:	2829883a 	mov	r20,r5
 1008754:	38002b1e 	bne	r7,zero,1008804 <__umoddi3+0xe8>
 1008758:	29805036 	bltu	r5,r6,100889c <__umoddi3+0x180>
 100875c:	30008a26 	beq	r6,zero,1008988 <__umoddi3+0x26c>
 1008760:	00bfffd4 	movui	r2,65535
 1008764:	14008236 	bltu	r2,r16,1008970 <__umoddi3+0x254>
 1008768:	00803fc4 	movi	r2,255
 100876c:	14013636 	bltu	r2,r16,1008c48 <__umoddi3+0x52c>
 1008770:	000b883a 	mov	r5,zero
 1008774:	0005883a 	mov	r2,zero
 1008778:	8084d83a 	srl	r2,r16,r2
 100877c:	01004074 	movhi	r4,257
 1008780:	2139fb04 	addi	r4,r4,-6164
 1008784:	01800804 	movi	r6,32
 1008788:	1105883a 	add	r2,r2,r4
 100878c:	10c00003 	ldbu	r3,0(r2)
 1008790:	28c7883a 	add	r3,r5,r3
 1008794:	30efc83a 	sub	r23,r6,r3
 1008798:	b800941e 	bne	r23,zero,10089ec <__umoddi3+0x2d0>
 100879c:	802ad43a 	srli	r21,r16,16
 10087a0:	a423c83a 	sub	r17,r20,r16
 10087a4:	0039883a 	mov	fp,zero
 10087a8:	853fffcc 	andi	r20,r16,65535
 10087ac:	8809883a 	mov	r4,r17
 10087b0:	a80b883a 	mov	r5,r21
 10087b4:	1009f340 	call	1009f34 <__udivsi3>
 10087b8:	8809883a 	mov	r4,r17
 10087bc:	a80b883a 	mov	r5,r21
 10087c0:	a0a3383a 	mul	r17,r20,r2
 10087c4:	1009f3c0 	call	1009f3c <__umodsi3>
 10087c8:	1004943a 	slli	r2,r2,16
 10087cc:	b006d43a 	srli	r3,r22,16
 10087d0:	10c4b03a 	or	r2,r2,r3
 10087d4:	1440032e 	bgeu	r2,r17,10087e4 <__umoddi3+0xc8>
 10087d8:	1405883a 	add	r2,r2,r16
 10087dc:	14000136 	bltu	r2,r16,10087e4 <__umoddi3+0xc8>
 10087e0:	14413536 	bltu	r2,r17,1008cb8 <__umoddi3+0x59c>
 10087e4:	1463c83a 	sub	r17,r2,r17
 10087e8:	8809883a 	mov	r4,r17
 10087ec:	a80b883a 	mov	r5,r21
 10087f0:	1009f340 	call	1009f34 <__udivsi3>
 10087f4:	8809883a 	mov	r4,r17
 10087f8:	a0a3383a 	mul	r17,r20,r2
 10087fc:	a80b883a 	mov	r5,r21
 1008800:	00004d06 	br	1008938 <__umoddi3+0x21c>
 1008804:	380d883a 	mov	r6,r7
 1008808:	29c0102e 	bgeu	r5,r7,100884c <__umoddi3+0x130>
 100880c:	2011883a 	mov	r8,r4
 1008810:	2813883a 	mov	r9,r5
 1008814:	4005883a 	mov	r2,r8
 1008818:	4807883a 	mov	r3,r9
 100881c:	dfc00e17 	ldw	ra,56(sp)
 1008820:	df000d17 	ldw	fp,52(sp)
 1008824:	ddc00c17 	ldw	r23,48(sp)
 1008828:	dd800b17 	ldw	r22,44(sp)
 100882c:	dd400a17 	ldw	r21,40(sp)
 1008830:	dd000917 	ldw	r20,36(sp)
 1008834:	dcc00817 	ldw	r19,32(sp)
 1008838:	dc800717 	ldw	r18,28(sp)
 100883c:	dc400617 	ldw	r17,24(sp)
 1008840:	dc000517 	ldw	r16,20(sp)
 1008844:	dec00f04 	addi	sp,sp,60
 1008848:	f800283a 	ret
 100884c:	00bfffd4 	movui	r2,65535
 1008850:	11c05a36 	bltu	r2,r7,10089bc <__umoddi3+0x2a0>
 1008854:	00803fc4 	movi	r2,255
 1008858:	11c0fe36 	bltu	r2,r7,1008c54 <__umoddi3+0x538>
 100885c:	000b883a 	mov	r5,zero
 1008860:	0005883a 	mov	r2,zero
 1008864:	3084d83a 	srl	r2,r6,r2
 1008868:	01004074 	movhi	r4,257
 100886c:	2139fb04 	addi	r4,r4,-6164
 1008870:	01c00804 	movi	r7,32
 1008874:	1105883a 	add	r2,r2,r4
 1008878:	10c00003 	ldbu	r3,0(r2)
 100887c:	28c7883a 	add	r3,r5,r3
 1008880:	38ebc83a 	sub	r21,r7,r3
 1008884:	a800851e 	bne	r21,zero,1008a9c <__umoddi3+0x380>
 1008888:	35005236 	bltu	r6,r20,10089d4 <__umoddi3+0x2b8>
 100888c:	b400512e 	bgeu	r22,r16,10089d4 <__umoddi3+0x2b8>
 1008890:	b011883a 	mov	r8,r22
 1008894:	a013883a 	mov	r9,r20
 1008898:	003fde06 	br	1008814 <__umoddi3+0xf8>
 100889c:	00bfffd4 	movui	r2,65535
 10088a0:	11804036 	bltu	r2,r6,10089a4 <__umoddi3+0x288>
 10088a4:	00803fc4 	movi	r2,255
 10088a8:	1180ed36 	bltu	r2,r6,1008c60 <__umoddi3+0x544>
 10088ac:	000b883a 	mov	r5,zero
 10088b0:	0005883a 	mov	r2,zero
 10088b4:	8084d83a 	srl	r2,r16,r2
 10088b8:	01004074 	movhi	r4,257
 10088bc:	2139fb04 	addi	r4,r4,-6164
 10088c0:	01800804 	movi	r6,32
 10088c4:	1105883a 	add	r2,r2,r4
 10088c8:	10c00003 	ldbu	r3,0(r2)
 10088cc:	28c7883a 	add	r3,r5,r3
 10088d0:	30c7c83a 	sub	r3,r6,r3
 10088d4:	1800bf1e 	bne	r3,zero,1008bd4 <__umoddi3+0x4b8>
 10088d8:	0039883a 	mov	fp,zero
 10088dc:	802ad43a 	srli	r21,r16,16
 10088e0:	a009883a 	mov	r4,r20
 10088e4:	85ffffcc 	andi	r23,r16,65535
 10088e8:	a80b883a 	mov	r5,r21
 10088ec:	1009f340 	call	1009f34 <__udivsi3>
 10088f0:	a009883a 	mov	r4,r20
 10088f4:	a80b883a 	mov	r5,r21
 10088f8:	b8a3383a 	mul	r17,r23,r2
 10088fc:	1009f3c0 	call	1009f3c <__umodsi3>
 1008900:	1004943a 	slli	r2,r2,16
 1008904:	b006d43a 	srli	r3,r22,16
 1008908:	10c4b03a 	or	r2,r2,r3
 100890c:	1440032e 	bgeu	r2,r17,100891c <__umoddi3+0x200>
 1008910:	1405883a 	add	r2,r2,r16
 1008914:	14000136 	bltu	r2,r16,100891c <__umoddi3+0x200>
 1008918:	1440e536 	bltu	r2,r17,1008cb0 <__umoddi3+0x594>
 100891c:	1463c83a 	sub	r17,r2,r17
 1008920:	8809883a 	mov	r4,r17
 1008924:	a80b883a 	mov	r5,r21
 1008928:	1009f340 	call	1009f34 <__udivsi3>
 100892c:	8809883a 	mov	r4,r17
 1008930:	b8a3383a 	mul	r17,r23,r2
 1008934:	a80b883a 	mov	r5,r21
 1008938:	1009f3c0 	call	1009f3c <__umodsi3>
 100893c:	1004943a 	slli	r2,r2,16
 1008940:	b0ffffcc 	andi	r3,r22,65535
 1008944:	10c4b03a 	or	r2,r2,r3
 1008948:	1440042e 	bgeu	r2,r17,100895c <__umoddi3+0x240>
 100894c:	1405883a 	add	r2,r2,r16
 1008950:	14000236 	bltu	r2,r16,100895c <__umoddi3+0x240>
 1008954:	1440012e 	bgeu	r2,r17,100895c <__umoddi3+0x240>
 1008958:	1405883a 	add	r2,r2,r16
 100895c:	1445c83a 	sub	r2,r2,r17
 1008960:	1724d83a 	srl	r18,r2,fp
 1008964:	0013883a 	mov	r9,zero
 1008968:	9011883a 	mov	r8,r18
 100896c:	003fa906 	br	1008814 <__umoddi3+0xf8>
 1008970:	00804034 	movhi	r2,256
 1008974:	10bfffc4 	addi	r2,r2,-1
 1008978:	1400b036 	bltu	r2,r16,1008c3c <__umoddi3+0x520>
 100897c:	01400404 	movi	r5,16
 1008980:	2805883a 	mov	r2,r5
 1008984:	003f7c06 	br	1008778 <__umoddi3+0x5c>
 1008988:	01000044 	movi	r4,1
 100898c:	000b883a 	mov	r5,zero
 1008990:	1009f340 	call	1009f34 <__udivsi3>
 1008994:	1021883a 	mov	r16,r2
 1008998:	00bfffd4 	movui	r2,65535
 100899c:	143ff436 	bltu	r2,r16,1008970 <__umoddi3+0x254>
 10089a0:	003f7106 	br	1008768 <__umoddi3+0x4c>
 10089a4:	00804034 	movhi	r2,256
 10089a8:	10bfffc4 	addi	r2,r2,-1
 10089ac:	1180af36 	bltu	r2,r6,1008c6c <__umoddi3+0x550>
 10089b0:	01400404 	movi	r5,16
 10089b4:	2805883a 	mov	r2,r5
 10089b8:	003fbe06 	br	10088b4 <__umoddi3+0x198>
 10089bc:	00804034 	movhi	r2,256
 10089c0:	10bfffc4 	addi	r2,r2,-1
 10089c4:	11c0ac36 	bltu	r2,r7,1008c78 <__umoddi3+0x55c>
 10089c8:	01400404 	movi	r5,16
 10089cc:	2805883a 	mov	r2,r5
 10089d0:	003fa406 	br	1008864 <__umoddi3+0x148>
 10089d4:	b409c83a 	sub	r4,r22,r16
 10089d8:	b105803a 	cmpltu	r2,r22,r4
 10089dc:	a187c83a 	sub	r3,r20,r6
 10089e0:	18a9c83a 	sub	r20,r3,r2
 10089e4:	202d883a 	mov	r22,r4
 10089e8:	003fa906 	br	1008890 <__umoddi3+0x174>
 10089ec:	85e0983a 	sll	r16,r16,r23
 10089f0:	35c5c83a 	sub	r2,r6,r23
 10089f4:	a0a2d83a 	srl	r17,r20,r2
 10089f8:	802ad43a 	srli	r21,r16,16
 10089fc:	b084d83a 	srl	r2,r22,r2
 1008a00:	a5c6983a 	sll	r3,r20,r23
 1008a04:	8809883a 	mov	r4,r17
 1008a08:	a80b883a 	mov	r5,r21
 1008a0c:	1886b03a 	or	r3,r3,r2
 1008a10:	d8c00115 	stw	r3,4(sp)
 1008a14:	853fffcc 	andi	r20,r16,65535
 1008a18:	1009f340 	call	1009f34 <__udivsi3>
 1008a1c:	8809883a 	mov	r4,r17
 1008a20:	a80b883a 	mov	r5,r21
 1008a24:	a0a3383a 	mul	r17,r20,r2
 1008a28:	1009f3c0 	call	1009f3c <__umodsi3>
 1008a2c:	d9000117 	ldw	r4,4(sp)
 1008a30:	1004943a 	slli	r2,r2,16
 1008a34:	b839883a 	mov	fp,r23
 1008a38:	2006d43a 	srli	r3,r4,16
 1008a3c:	10c4b03a 	or	r2,r2,r3
 1008a40:	1440022e 	bgeu	r2,r17,1008a4c <__umoddi3+0x330>
 1008a44:	1405883a 	add	r2,r2,r16
 1008a48:	1400962e 	bgeu	r2,r16,1008ca4 <__umoddi3+0x588>
 1008a4c:	1463c83a 	sub	r17,r2,r17
 1008a50:	8809883a 	mov	r4,r17
 1008a54:	a80b883a 	mov	r5,r21
 1008a58:	1009f340 	call	1009f34 <__udivsi3>
 1008a5c:	8809883a 	mov	r4,r17
 1008a60:	a80b883a 	mov	r5,r21
 1008a64:	a0a3383a 	mul	r17,r20,r2
 1008a68:	1009f3c0 	call	1009f3c <__umodsi3>
 1008a6c:	d9400117 	ldw	r5,4(sp)
 1008a70:	1004943a 	slli	r2,r2,16
 1008a74:	28ffffcc 	andi	r3,r5,65535
 1008a78:	10c4b03a 	or	r2,r2,r3
 1008a7c:	1440042e 	bgeu	r2,r17,1008a90 <__umoddi3+0x374>
 1008a80:	1405883a 	add	r2,r2,r16
 1008a84:	14000236 	bltu	r2,r16,1008a90 <__umoddi3+0x374>
 1008a88:	1440012e 	bgeu	r2,r17,1008a90 <__umoddi3+0x374>
 1008a8c:	1405883a 	add	r2,r2,r16
 1008a90:	b5ec983a 	sll	r22,r22,r23
 1008a94:	1463c83a 	sub	r17,r2,r17
 1008a98:	003f4406 	br	10087ac <__umoddi3+0x90>
 1008a9c:	3d4fc83a 	sub	r7,r7,r21
 1008aa0:	3546983a 	sll	r3,r6,r21
 1008aa4:	81c4d83a 	srl	r2,r16,r7
 1008aa8:	a1e2d83a 	srl	r17,r20,r7
 1008aac:	a54c983a 	sll	r6,r20,r21
 1008ab0:	18aeb03a 	or	r23,r3,r2
 1008ab4:	b828d43a 	srli	r20,r23,16
 1008ab8:	b1c4d83a 	srl	r2,r22,r7
 1008abc:	8809883a 	mov	r4,r17
 1008ac0:	a00b883a 	mov	r5,r20
 1008ac4:	308cb03a 	or	r6,r6,r2
 1008ac8:	d9c00315 	stw	r7,12(sp)
 1008acc:	d9800215 	stw	r6,8(sp)
 1008ad0:	1009f340 	call	1009f34 <__udivsi3>
 1008ad4:	8809883a 	mov	r4,r17
 1008ad8:	a00b883a 	mov	r5,r20
 1008adc:	1039883a 	mov	fp,r2
 1008ae0:	1009f3c0 	call	1009f3c <__umodsi3>
 1008ae4:	b8ffffcc 	andi	r3,r23,65535
 1008ae8:	d8c00415 	stw	r3,16(sp)
 1008aec:	d9000217 	ldw	r4,8(sp)
 1008af0:	d9400417 	ldw	r5,16(sp)
 1008af4:	1004943a 	slli	r2,r2,16
 1008af8:	2006d43a 	srli	r3,r4,16
 1008afc:	8560983a 	sll	r16,r16,r21
 1008b00:	2f23383a 	mul	r17,r5,fp
 1008b04:	10c4b03a 	or	r2,r2,r3
 1008b08:	dc000015 	stw	r16,0(sp)
 1008b0c:	b56c983a 	sll	r22,r22,r21
 1008b10:	1440032e 	bgeu	r2,r17,1008b20 <__umoddi3+0x404>
 1008b14:	15c5883a 	add	r2,r2,r23
 1008b18:	e73fffc4 	addi	fp,fp,-1
 1008b1c:	15c05d2e 	bgeu	r2,r23,1008c94 <__umoddi3+0x578>
 1008b20:	1463c83a 	sub	r17,r2,r17
 1008b24:	8809883a 	mov	r4,r17
 1008b28:	a00b883a 	mov	r5,r20
 1008b2c:	1009f340 	call	1009f34 <__udivsi3>
 1008b30:	8809883a 	mov	r4,r17
 1008b34:	a00b883a 	mov	r5,r20
 1008b38:	1021883a 	mov	r16,r2
 1008b3c:	1009f3c0 	call	1009f3c <__umodsi3>
 1008b40:	d8c00417 	ldw	r3,16(sp)
 1008b44:	d9000217 	ldw	r4,8(sp)
 1008b48:	1004943a 	slli	r2,r2,16
 1008b4c:	1c23383a 	mul	r17,r3,r16
 1008b50:	20ffffcc 	andi	r3,r4,65535
 1008b54:	10ceb03a 	or	r7,r2,r3
 1008b58:	3c40032e 	bgeu	r7,r17,1008b68 <__umoddi3+0x44c>
 1008b5c:	3dcf883a 	add	r7,r7,r23
 1008b60:	843fffc4 	addi	r16,r16,-1
 1008b64:	3dc0472e 	bgeu	r7,r23,1008c84 <__umoddi3+0x568>
 1008b68:	e004943a 	slli	r2,fp,16
 1008b6c:	d9400017 	ldw	r5,0(sp)
 1008b70:	3c4fc83a 	sub	r7,r7,r17
 1008b74:	8084b03a 	or	r2,r16,r2
 1008b78:	28ffffcc 	andi	r3,r5,65535
 1008b7c:	280cd43a 	srli	r6,r5,16
 1008b80:	100ad43a 	srli	r5,r2,16
 1008b84:	10bfffcc 	andi	r2,r2,65535
 1008b88:	10d1383a 	mul	r8,r2,r3
 1008b8c:	28c7383a 	mul	r3,r5,r3
 1008b90:	1185383a 	mul	r2,r2,r6
 1008b94:	4008d43a 	srli	r4,r8,16
 1008b98:	298b383a 	mul	r5,r5,r6
 1008b9c:	10c5883a 	add	r2,r2,r3
 1008ba0:	2089883a 	add	r4,r4,r2
 1008ba4:	20c0022e 	bgeu	r4,r3,1008bb0 <__umoddi3+0x494>
 1008ba8:	00800074 	movhi	r2,1
 1008bac:	288b883a 	add	r5,r5,r2
 1008bb0:	2004d43a 	srli	r2,r4,16
 1008bb4:	2008943a 	slli	r4,r4,16
 1008bb8:	40ffffcc 	andi	r3,r8,65535
 1008bbc:	288b883a 	add	r5,r5,r2
 1008bc0:	20c9883a 	add	r4,r4,r3
 1008bc4:	39400b36 	bltu	r7,r5,1008bf4 <__umoddi3+0x4d8>
 1008bc8:	39403d26 	beq	r7,r5,1008cc0 <__umoddi3+0x5a4>
 1008bcc:	394bc83a 	sub	r5,r7,r5
 1008bd0:	00000f06 	br	1008c10 <__umoddi3+0x4f4>
 1008bd4:	30c5c83a 	sub	r2,r6,r3
 1008bd8:	1839883a 	mov	fp,r3
 1008bdc:	b084d83a 	srl	r2,r22,r2
 1008be0:	a0c6983a 	sll	r3,r20,r3
 1008be4:	8720983a 	sll	r16,r16,fp
 1008be8:	b72c983a 	sll	r22,r22,fp
 1008bec:	18a8b03a 	or	r20,r3,r2
 1008bf0:	003f3a06 	br	10088dc <__umoddi3+0x1c0>
 1008bf4:	d8c00017 	ldw	r3,0(sp)
 1008bf8:	20c5c83a 	sub	r2,r4,r3
 1008bfc:	2089803a 	cmpltu	r4,r4,r2
 1008c00:	2dc7c83a 	sub	r3,r5,r23
 1008c04:	1907c83a 	sub	r3,r3,r4
 1008c08:	38cbc83a 	sub	r5,r7,r3
 1008c0c:	1009883a 	mov	r4,r2
 1008c10:	b105c83a 	sub	r2,r22,r4
 1008c14:	b087803a 	cmpltu	r3,r22,r2
 1008c18:	28c7c83a 	sub	r3,r5,r3
 1008c1c:	d9400317 	ldw	r5,12(sp)
 1008c20:	1544d83a 	srl	r2,r2,r21
 1008c24:	1948983a 	sll	r4,r3,r5
 1008c28:	1d46d83a 	srl	r3,r3,r21
 1008c2c:	20a4b03a 	or	r18,r4,r2
 1008c30:	9011883a 	mov	r8,r18
 1008c34:	1813883a 	mov	r9,r3
 1008c38:	003ef606 	br	1008814 <__umoddi3+0xf8>
 1008c3c:	01400604 	movi	r5,24
 1008c40:	2805883a 	mov	r2,r5
 1008c44:	003ecc06 	br	1008778 <__umoddi3+0x5c>
 1008c48:	01400204 	movi	r5,8
 1008c4c:	2805883a 	mov	r2,r5
 1008c50:	003ec906 	br	1008778 <__umoddi3+0x5c>
 1008c54:	01400204 	movi	r5,8
 1008c58:	2805883a 	mov	r2,r5
 1008c5c:	003f0106 	br	1008864 <__umoddi3+0x148>
 1008c60:	01400204 	movi	r5,8
 1008c64:	2805883a 	mov	r2,r5
 1008c68:	003f1206 	br	10088b4 <__umoddi3+0x198>
 1008c6c:	01400604 	movi	r5,24
 1008c70:	2805883a 	mov	r2,r5
 1008c74:	003f0f06 	br	10088b4 <__umoddi3+0x198>
 1008c78:	01400604 	movi	r5,24
 1008c7c:	2805883a 	mov	r2,r5
 1008c80:	003ef806 	br	1008864 <__umoddi3+0x148>
 1008c84:	3c7fb82e 	bgeu	r7,r17,1008b68 <__umoddi3+0x44c>
 1008c88:	843fffc4 	addi	r16,r16,-1
 1008c8c:	3dcf883a 	add	r7,r7,r23
 1008c90:	003fb506 	br	1008b68 <__umoddi3+0x44c>
 1008c94:	147fa22e 	bgeu	r2,r17,1008b20 <__umoddi3+0x404>
 1008c98:	e73fffc4 	addi	fp,fp,-1
 1008c9c:	15c5883a 	add	r2,r2,r23
 1008ca0:	003f9f06 	br	1008b20 <__umoddi3+0x404>
 1008ca4:	147f692e 	bgeu	r2,r17,1008a4c <__umoddi3+0x330>
 1008ca8:	1405883a 	add	r2,r2,r16
 1008cac:	003f6706 	br	1008a4c <__umoddi3+0x330>
 1008cb0:	1405883a 	add	r2,r2,r16
 1008cb4:	003f1906 	br	100891c <__umoddi3+0x200>
 1008cb8:	1405883a 	add	r2,r2,r16
 1008cbc:	003ec906 	br	10087e4 <__umoddi3+0xc8>
 1008cc0:	b13fcc36 	bltu	r22,r4,1008bf4 <__umoddi3+0x4d8>
 1008cc4:	000b883a 	mov	r5,zero
 1008cc8:	003fd106 	br	1008c10 <__umoddi3+0x4f4>

01008ccc <_fpadd_parts>:
 1008ccc:	defff804 	addi	sp,sp,-32
 1008cd0:	dcc00315 	stw	r19,12(sp)
 1008cd4:	2027883a 	mov	r19,r4
 1008cd8:	21000017 	ldw	r4,0(r4)
 1008cdc:	00c00044 	movi	r3,1
 1008ce0:	dd400515 	stw	r21,20(sp)
 1008ce4:	dd000415 	stw	r20,16(sp)
 1008ce8:	ddc00715 	stw	r23,28(sp)
 1008cec:	dd800615 	stw	r22,24(sp)
 1008cf0:	dc800215 	stw	r18,8(sp)
 1008cf4:	dc400115 	stw	r17,4(sp)
 1008cf8:	dc000015 	stw	r16,0(sp)
 1008cfc:	282b883a 	mov	r21,r5
 1008d00:	3029883a 	mov	r20,r6
 1008d04:	1900632e 	bgeu	r3,r4,1008e94 <_fpadd_parts+0x1c8>
 1008d08:	28800017 	ldw	r2,0(r5)
 1008d0c:	1880812e 	bgeu	r3,r2,1008f14 <_fpadd_parts+0x248>
 1008d10:	00c00104 	movi	r3,4
 1008d14:	20c0dc26 	beq	r4,r3,1009088 <_fpadd_parts+0x3bc>
 1008d18:	10c07e26 	beq	r2,r3,1008f14 <_fpadd_parts+0x248>
 1008d1c:	00c00084 	movi	r3,2
 1008d20:	10c06726 	beq	r2,r3,1008ec0 <_fpadd_parts+0x1f4>
 1008d24:	20c07b26 	beq	r4,r3,1008f14 <_fpadd_parts+0x248>
 1008d28:	9dc00217 	ldw	r23,8(r19)
 1008d2c:	28c00217 	ldw	r3,8(r5)
 1008d30:	9c400317 	ldw	r17,12(r19)
 1008d34:	2bc00317 	ldw	r15,12(r5)
 1008d38:	b8cdc83a 	sub	r6,r23,r3
 1008d3c:	9c800417 	ldw	r18,16(r19)
 1008d40:	2c000417 	ldw	r16,16(r5)
 1008d44:	3009883a 	mov	r4,r6
 1008d48:	30009716 	blt	r6,zero,1008fa8 <_fpadd_parts+0x2dc>
 1008d4c:	00800fc4 	movi	r2,63
 1008d50:	11806b16 	blt	r2,r6,1008f00 <_fpadd_parts+0x234>
 1008d54:	0100a40e 	bge	zero,r4,1008fe8 <_fpadd_parts+0x31c>
 1008d58:	35bff804 	addi	r22,r6,-32
 1008d5c:	b000bc16 	blt	r22,zero,1009050 <_fpadd_parts+0x384>
 1008d60:	8596d83a 	srl	r11,r16,r22
 1008d64:	0019883a 	mov	r12,zero
 1008d68:	0013883a 	mov	r9,zero
 1008d6c:	01000044 	movi	r4,1
 1008d70:	0015883a 	mov	r10,zero
 1008d74:	b000be16 	blt	r22,zero,1009070 <_fpadd_parts+0x3a4>
 1008d78:	2590983a 	sll	r8,r4,r22
 1008d7c:	000f883a 	mov	r7,zero
 1008d80:	00bfffc4 	movi	r2,-1
 1008d84:	3889883a 	add	r4,r7,r2
 1008d88:	408b883a 	add	r5,r8,r2
 1008d8c:	21cd803a 	cmpltu	r6,r4,r7
 1008d90:	314b883a 	add	r5,r6,r5
 1008d94:	7904703a 	and	r2,r15,r4
 1008d98:	8146703a 	and	r3,r16,r5
 1008d9c:	10c4b03a 	or	r2,r2,r3
 1008da0:	10000226 	beq	r2,zero,1008dac <_fpadd_parts+0xe0>
 1008da4:	02400044 	movi	r9,1
 1008da8:	0015883a 	mov	r10,zero
 1008dac:	5a5eb03a 	or	r15,r11,r9
 1008db0:	62a0b03a 	or	r16,r12,r10
 1008db4:	99400117 	ldw	r5,4(r19)
 1008db8:	a8800117 	ldw	r2,4(r21)
 1008dbc:	28806e26 	beq	r5,r2,1008f78 <_fpadd_parts+0x2ac>
 1008dc0:	28006626 	beq	r5,zero,1008f5c <_fpadd_parts+0x290>
 1008dc4:	7c45c83a 	sub	r2,r15,r17
 1008dc8:	7889803a 	cmpltu	r4,r15,r2
 1008dcc:	8487c83a 	sub	r3,r16,r18
 1008dd0:	1909c83a 	sub	r4,r3,r4
 1008dd4:	100d883a 	mov	r6,r2
 1008dd8:	200f883a 	mov	r7,r4
 1008ddc:	38007716 	blt	r7,zero,1008fbc <_fpadd_parts+0x2f0>
 1008de0:	a5c00215 	stw	r23,8(r20)
 1008de4:	a1c00415 	stw	r7,16(r20)
 1008de8:	a0000115 	stw	zero,4(r20)
 1008dec:	a1800315 	stw	r6,12(r20)
 1008df0:	a2000317 	ldw	r8,12(r20)
 1008df4:	a2400417 	ldw	r9,16(r20)
 1008df8:	00bfffc4 	movi	r2,-1
 1008dfc:	408b883a 	add	r5,r8,r2
 1008e00:	2a09803a 	cmpltu	r4,r5,r8
 1008e04:	488d883a 	add	r6,r9,r2
 1008e08:	01c40034 	movhi	r7,4096
 1008e0c:	39ffffc4 	addi	r7,r7,-1
 1008e10:	218d883a 	add	r6,r4,r6
 1008e14:	39801736 	bltu	r7,r6,1008e74 <_fpadd_parts+0x1a8>
 1008e18:	31c06526 	beq	r6,r7,1008fb0 <_fpadd_parts+0x2e4>
 1008e1c:	a3000217 	ldw	r12,8(r20)
 1008e20:	4209883a 	add	r4,r8,r8
 1008e24:	00bfffc4 	movi	r2,-1
 1008e28:	220f803a 	cmpltu	r7,r4,r8
 1008e2c:	4a4b883a 	add	r5,r9,r9
 1008e30:	394f883a 	add	r7,r7,r5
 1008e34:	2095883a 	add	r10,r4,r2
 1008e38:	3897883a 	add	r11,r7,r2
 1008e3c:	510d803a 	cmpltu	r6,r10,r4
 1008e40:	6099883a 	add	r12,r12,r2
 1008e44:	32d7883a 	add	r11,r6,r11
 1008e48:	00840034 	movhi	r2,4096
 1008e4c:	10bfffc4 	addi	r2,r2,-1
 1008e50:	2011883a 	mov	r8,r4
 1008e54:	3813883a 	mov	r9,r7
 1008e58:	a1000315 	stw	r4,12(r20)
 1008e5c:	a1c00415 	stw	r7,16(r20)
 1008e60:	a3000215 	stw	r12,8(r20)
 1008e64:	12c00336 	bltu	r2,r11,1008e74 <_fpadd_parts+0x1a8>
 1008e68:	58bfed1e 	bne	r11,r2,1008e20 <_fpadd_parts+0x154>
 1008e6c:	00bfff84 	movi	r2,-2
 1008e70:	12bfeb2e 	bgeu	r2,r10,1008e20 <_fpadd_parts+0x154>
 1008e74:	a2800417 	ldw	r10,16(r20)
 1008e78:	008000c4 	movi	r2,3
 1008e7c:	00c80034 	movhi	r3,8192
 1008e80:	18ffffc4 	addi	r3,r3,-1
 1008e84:	a2400317 	ldw	r9,12(r20)
 1008e88:	a0800015 	stw	r2,0(r20)
 1008e8c:	1a802336 	bltu	r3,r10,1008f1c <_fpadd_parts+0x250>
 1008e90:	a027883a 	mov	r19,r20
 1008e94:	9805883a 	mov	r2,r19
 1008e98:	ddc00717 	ldw	r23,28(sp)
 1008e9c:	dd800617 	ldw	r22,24(sp)
 1008ea0:	dd400517 	ldw	r21,20(sp)
 1008ea4:	dd000417 	ldw	r20,16(sp)
 1008ea8:	dcc00317 	ldw	r19,12(sp)
 1008eac:	dc800217 	ldw	r18,8(sp)
 1008eb0:	dc400117 	ldw	r17,4(sp)
 1008eb4:	dc000017 	ldw	r16,0(sp)
 1008eb8:	dec00804 	addi	sp,sp,32
 1008ebc:	f800283a 	ret
 1008ec0:	20fff41e 	bne	r4,r3,1008e94 <_fpadd_parts+0x1c8>
 1008ec4:	31000015 	stw	r4,0(r6)
 1008ec8:	98800117 	ldw	r2,4(r19)
 1008ecc:	30800115 	stw	r2,4(r6)
 1008ed0:	98c00217 	ldw	r3,8(r19)
 1008ed4:	30c00215 	stw	r3,8(r6)
 1008ed8:	98800317 	ldw	r2,12(r19)
 1008edc:	30800315 	stw	r2,12(r6)
 1008ee0:	98c00417 	ldw	r3,16(r19)
 1008ee4:	30c00415 	stw	r3,16(r6)
 1008ee8:	98800117 	ldw	r2,4(r19)
 1008eec:	28c00117 	ldw	r3,4(r5)
 1008ef0:	3027883a 	mov	r19,r6
 1008ef4:	10c4703a 	and	r2,r2,r3
 1008ef8:	30800115 	stw	r2,4(r6)
 1008efc:	003fe506 	br	1008e94 <_fpadd_parts+0x1c8>
 1008f00:	1dc02616 	blt	r3,r23,1008f9c <_fpadd_parts+0x2d0>
 1008f04:	0023883a 	mov	r17,zero
 1008f08:	182f883a 	mov	r23,r3
 1008f0c:	0025883a 	mov	r18,zero
 1008f10:	003fa806 	br	1008db4 <_fpadd_parts+0xe8>
 1008f14:	a827883a 	mov	r19,r21
 1008f18:	003fde06 	br	1008e94 <_fpadd_parts+0x1c8>
 1008f1c:	01800044 	movi	r6,1
 1008f20:	500497fa 	slli	r2,r10,31
 1008f24:	4808d07a 	srli	r4,r9,1
 1008f28:	518ad83a 	srl	r5,r10,r6
 1008f2c:	a2000217 	ldw	r8,8(r20)
 1008f30:	1108b03a 	or	r4,r2,r4
 1008f34:	0007883a 	mov	r3,zero
 1008f38:	4984703a 	and	r2,r9,r6
 1008f3c:	208cb03a 	or	r6,r4,r2
 1008f40:	28ceb03a 	or	r7,r5,r3
 1008f44:	42000044 	addi	r8,r8,1
 1008f48:	a027883a 	mov	r19,r20
 1008f4c:	a1c00415 	stw	r7,16(r20)
 1008f50:	a2000215 	stw	r8,8(r20)
 1008f54:	a1800315 	stw	r6,12(r20)
 1008f58:	003fce06 	br	1008e94 <_fpadd_parts+0x1c8>
 1008f5c:	8bc5c83a 	sub	r2,r17,r15
 1008f60:	8889803a 	cmpltu	r4,r17,r2
 1008f64:	9407c83a 	sub	r3,r18,r16
 1008f68:	1909c83a 	sub	r4,r3,r4
 1008f6c:	100d883a 	mov	r6,r2
 1008f70:	200f883a 	mov	r7,r4
 1008f74:	003f9906 	br	1008ddc <_fpadd_parts+0x110>
 1008f78:	7c45883a 	add	r2,r15,r17
 1008f7c:	13c9803a 	cmpltu	r4,r2,r15
 1008f80:	8487883a 	add	r3,r16,r18
 1008f84:	20c9883a 	add	r4,r4,r3
 1008f88:	a1400115 	stw	r5,4(r20)
 1008f8c:	a5c00215 	stw	r23,8(r20)
 1008f90:	a0800315 	stw	r2,12(r20)
 1008f94:	a1000415 	stw	r4,16(r20)
 1008f98:	003fb606 	br	1008e74 <_fpadd_parts+0x1a8>
 1008f9c:	001f883a 	mov	r15,zero
 1008fa0:	0021883a 	mov	r16,zero
 1008fa4:	003f8306 	br	1008db4 <_fpadd_parts+0xe8>
 1008fa8:	018dc83a 	sub	r6,zero,r6
 1008fac:	003f6706 	br	1008d4c <_fpadd_parts+0x80>
 1008fb0:	00bfff84 	movi	r2,-2
 1008fb4:	117faf36 	bltu	r2,r5,1008e74 <_fpadd_parts+0x1a8>
 1008fb8:	003f9806 	br	1008e1c <_fpadd_parts+0x150>
 1008fbc:	0005883a 	mov	r2,zero
 1008fc0:	1189c83a 	sub	r4,r2,r6
 1008fc4:	1105803a 	cmpltu	r2,r2,r4
 1008fc8:	01cbc83a 	sub	r5,zero,r7
 1008fcc:	2885c83a 	sub	r2,r5,r2
 1008fd0:	01800044 	movi	r6,1
 1008fd4:	a1800115 	stw	r6,4(r20)
 1008fd8:	a5c00215 	stw	r23,8(r20)
 1008fdc:	a1000315 	stw	r4,12(r20)
 1008fe0:	a0800415 	stw	r2,16(r20)
 1008fe4:	003f8206 	br	1008df0 <_fpadd_parts+0x124>
 1008fe8:	203f7226 	beq	r4,zero,1008db4 <_fpadd_parts+0xe8>
 1008fec:	35bff804 	addi	r22,r6,-32
 1008ff0:	b9af883a 	add	r23,r23,r6
 1008ff4:	b0003116 	blt	r22,zero,10090bc <_fpadd_parts+0x3f0>
 1008ff8:	959ad83a 	srl	r13,r18,r22
 1008ffc:	001d883a 	mov	r14,zero
 1009000:	000f883a 	mov	r7,zero
 1009004:	01000044 	movi	r4,1
 1009008:	0011883a 	mov	r8,zero
 100900c:	b0002516 	blt	r22,zero,10090a4 <_fpadd_parts+0x3d8>
 1009010:	2594983a 	sll	r10,r4,r22
 1009014:	0013883a 	mov	r9,zero
 1009018:	00bfffc4 	movi	r2,-1
 100901c:	4889883a 	add	r4,r9,r2
 1009020:	508b883a 	add	r5,r10,r2
 1009024:	224d803a 	cmpltu	r6,r4,r9
 1009028:	314b883a 	add	r5,r6,r5
 100902c:	8904703a 	and	r2,r17,r4
 1009030:	9146703a 	and	r3,r18,r5
 1009034:	10c4b03a 	or	r2,r2,r3
 1009038:	10000226 	beq	r2,zero,1009044 <_fpadd_parts+0x378>
 100903c:	01c00044 	movi	r7,1
 1009040:	0011883a 	mov	r8,zero
 1009044:	69e2b03a 	or	r17,r13,r7
 1009048:	7224b03a 	or	r18,r14,r8
 100904c:	003f5906 	br	1008db4 <_fpadd_parts+0xe8>
 1009050:	8407883a 	add	r3,r16,r16
 1009054:	008007c4 	movi	r2,31
 1009058:	1185c83a 	sub	r2,r2,r6
 100905c:	1886983a 	sll	r3,r3,r2
 1009060:	7996d83a 	srl	r11,r15,r6
 1009064:	8198d83a 	srl	r12,r16,r6
 1009068:	1ad6b03a 	or	r11,r3,r11
 100906c:	003f3e06 	br	1008d68 <_fpadd_parts+0x9c>
 1009070:	2006d07a 	srli	r3,r4,1
 1009074:	008007c4 	movi	r2,31
 1009078:	1185c83a 	sub	r2,r2,r6
 100907c:	1890d83a 	srl	r8,r3,r2
 1009080:	218e983a 	sll	r7,r4,r6
 1009084:	003f3e06 	br	1008d80 <_fpadd_parts+0xb4>
 1009088:	113f821e 	bne	r2,r4,1008e94 <_fpadd_parts+0x1c8>
 100908c:	28c00117 	ldw	r3,4(r5)
 1009090:	98800117 	ldw	r2,4(r19)
 1009094:	10ff7f26 	beq	r2,r3,1008e94 <_fpadd_parts+0x1c8>
 1009098:	04c04074 	movhi	r19,257
 100909c:	9cf9f604 	addi	r19,r19,-6184
 10090a0:	003f7c06 	br	1008e94 <_fpadd_parts+0x1c8>
 10090a4:	2006d07a 	srli	r3,r4,1
 10090a8:	008007c4 	movi	r2,31
 10090ac:	1185c83a 	sub	r2,r2,r6
 10090b0:	1894d83a 	srl	r10,r3,r2
 10090b4:	2192983a 	sll	r9,r4,r6
 10090b8:	003fd706 	br	1009018 <_fpadd_parts+0x34c>
 10090bc:	9487883a 	add	r3,r18,r18
 10090c0:	008007c4 	movi	r2,31
 10090c4:	1185c83a 	sub	r2,r2,r6
 10090c8:	1886983a 	sll	r3,r3,r2
 10090cc:	899ad83a 	srl	r13,r17,r6
 10090d0:	919cd83a 	srl	r14,r18,r6
 10090d4:	1b5ab03a 	or	r13,r3,r13
 10090d8:	003fc906 	br	1009000 <_fpadd_parts+0x334>

010090dc <__subdf3>:
 10090dc:	deffea04 	addi	sp,sp,-88
 10090e0:	dcc01415 	stw	r19,80(sp)
 10090e4:	dcc00404 	addi	r19,sp,16
 10090e8:	2011883a 	mov	r8,r4
 10090ec:	2813883a 	mov	r9,r5
 10090f0:	dc401315 	stw	r17,76(sp)
 10090f4:	d809883a 	mov	r4,sp
 10090f8:	980b883a 	mov	r5,r19
 10090fc:	dc400904 	addi	r17,sp,36
 1009100:	dfc01515 	stw	ra,84(sp)
 1009104:	da400115 	stw	r9,4(sp)
 1009108:	d9c00315 	stw	r7,12(sp)
 100910c:	da000015 	stw	r8,0(sp)
 1009110:	d9800215 	stw	r6,8(sp)
 1009114:	100a3700 	call	100a370 <__unpack_d>
 1009118:	d9000204 	addi	r4,sp,8
 100911c:	880b883a 	mov	r5,r17
 1009120:	100a3700 	call	100a370 <__unpack_d>
 1009124:	d8800a17 	ldw	r2,40(sp)
 1009128:	880b883a 	mov	r5,r17
 100912c:	9809883a 	mov	r4,r19
 1009130:	d9800e04 	addi	r6,sp,56
 1009134:	1080005c 	xori	r2,r2,1
 1009138:	d8800a15 	stw	r2,40(sp)
 100913c:	1008ccc0 	call	1008ccc <_fpadd_parts>
 1009140:	1009883a 	mov	r4,r2
 1009144:	100a05c0 	call	100a05c <__pack_d>
 1009148:	dfc01517 	ldw	ra,84(sp)
 100914c:	dcc01417 	ldw	r19,80(sp)
 1009150:	dc401317 	ldw	r17,76(sp)
 1009154:	dec01604 	addi	sp,sp,88
 1009158:	f800283a 	ret

0100915c <__adddf3>:
 100915c:	deffea04 	addi	sp,sp,-88
 1009160:	dcc01415 	stw	r19,80(sp)
 1009164:	dcc00404 	addi	r19,sp,16
 1009168:	2011883a 	mov	r8,r4
 100916c:	2813883a 	mov	r9,r5
 1009170:	dc401315 	stw	r17,76(sp)
 1009174:	d809883a 	mov	r4,sp
 1009178:	980b883a 	mov	r5,r19
 100917c:	dc400904 	addi	r17,sp,36
 1009180:	dfc01515 	stw	ra,84(sp)
 1009184:	da400115 	stw	r9,4(sp)
 1009188:	d9c00315 	stw	r7,12(sp)
 100918c:	da000015 	stw	r8,0(sp)
 1009190:	d9800215 	stw	r6,8(sp)
 1009194:	100a3700 	call	100a370 <__unpack_d>
 1009198:	d9000204 	addi	r4,sp,8
 100919c:	880b883a 	mov	r5,r17
 10091a0:	100a3700 	call	100a370 <__unpack_d>
 10091a4:	d9800e04 	addi	r6,sp,56
 10091a8:	9809883a 	mov	r4,r19
 10091ac:	880b883a 	mov	r5,r17
 10091b0:	1008ccc0 	call	1008ccc <_fpadd_parts>
 10091b4:	1009883a 	mov	r4,r2
 10091b8:	100a05c0 	call	100a05c <__pack_d>
 10091bc:	dfc01517 	ldw	ra,84(sp)
 10091c0:	dcc01417 	ldw	r19,80(sp)
 10091c4:	dc401317 	ldw	r17,76(sp)
 10091c8:	dec01604 	addi	sp,sp,88
 10091cc:	f800283a 	ret

010091d0 <__muldf3>:
 10091d0:	deffe004 	addi	sp,sp,-128
 10091d4:	dc401815 	stw	r17,96(sp)
 10091d8:	dc400404 	addi	r17,sp,16
 10091dc:	2011883a 	mov	r8,r4
 10091e0:	2813883a 	mov	r9,r5
 10091e4:	dc001715 	stw	r16,92(sp)
 10091e8:	d809883a 	mov	r4,sp
 10091ec:	880b883a 	mov	r5,r17
 10091f0:	dc000904 	addi	r16,sp,36
 10091f4:	dfc01f15 	stw	ra,124(sp)
 10091f8:	da400115 	stw	r9,4(sp)
 10091fc:	d9c00315 	stw	r7,12(sp)
 1009200:	da000015 	stw	r8,0(sp)
 1009204:	d9800215 	stw	r6,8(sp)
 1009208:	ddc01e15 	stw	r23,120(sp)
 100920c:	dd801d15 	stw	r22,116(sp)
 1009210:	dd401c15 	stw	r21,112(sp)
 1009214:	dd001b15 	stw	r20,108(sp)
 1009218:	dcc01a15 	stw	r19,104(sp)
 100921c:	dc801915 	stw	r18,100(sp)
 1009220:	100a3700 	call	100a370 <__unpack_d>
 1009224:	d9000204 	addi	r4,sp,8
 1009228:	800b883a 	mov	r5,r16
 100922c:	100a3700 	call	100a370 <__unpack_d>
 1009230:	d9000417 	ldw	r4,16(sp)
 1009234:	00800044 	movi	r2,1
 1009238:	1100102e 	bgeu	r2,r4,100927c <__muldf3+0xac>
 100923c:	d8c00917 	ldw	r3,36(sp)
 1009240:	10c0062e 	bgeu	r2,r3,100925c <__muldf3+0x8c>
 1009244:	00800104 	movi	r2,4
 1009248:	20800a26 	beq	r4,r2,1009274 <__muldf3+0xa4>
 100924c:	1880cc26 	beq	r3,r2,1009580 <__muldf3+0x3b0>
 1009250:	00800084 	movi	r2,2
 1009254:	20800926 	beq	r4,r2,100927c <__muldf3+0xac>
 1009258:	1880191e 	bne	r3,r2,10092c0 <__muldf3+0xf0>
 100925c:	d8c00a17 	ldw	r3,40(sp)
 1009260:	d8800517 	ldw	r2,20(sp)
 1009264:	8009883a 	mov	r4,r16
 1009268:	10c4c03a 	cmpne	r2,r2,r3
 100926c:	d8800a15 	stw	r2,40(sp)
 1009270:	00000706 	br	1009290 <__muldf3+0xc0>
 1009274:	00800084 	movi	r2,2
 1009278:	1880c326 	beq	r3,r2,1009588 <__muldf3+0x3b8>
 100927c:	d8800517 	ldw	r2,20(sp)
 1009280:	d8c00a17 	ldw	r3,40(sp)
 1009284:	8809883a 	mov	r4,r17
 1009288:	10c4c03a 	cmpne	r2,r2,r3
 100928c:	d8800515 	stw	r2,20(sp)
 1009290:	100a05c0 	call	100a05c <__pack_d>
 1009294:	dfc01f17 	ldw	ra,124(sp)
 1009298:	ddc01e17 	ldw	r23,120(sp)
 100929c:	dd801d17 	ldw	r22,116(sp)
 10092a0:	dd401c17 	ldw	r21,112(sp)
 10092a4:	dd001b17 	ldw	r20,108(sp)
 10092a8:	dcc01a17 	ldw	r19,104(sp)
 10092ac:	dc801917 	ldw	r18,100(sp)
 10092b0:	dc401817 	ldw	r17,96(sp)
 10092b4:	dc001717 	ldw	r16,92(sp)
 10092b8:	dec02004 	addi	sp,sp,128
 10092bc:	f800283a 	ret
 10092c0:	dd800717 	ldw	r22,28(sp)
 10092c4:	dc800c17 	ldw	r18,48(sp)
 10092c8:	002b883a 	mov	r21,zero
 10092cc:	0023883a 	mov	r17,zero
 10092d0:	a80b883a 	mov	r5,r21
 10092d4:	b00d883a 	mov	r6,r22
 10092d8:	880f883a 	mov	r7,r17
 10092dc:	ddc00817 	ldw	r23,32(sp)
 10092e0:	dcc00d17 	ldw	r19,52(sp)
 10092e4:	9009883a 	mov	r4,r18
 10092e8:	1009f440 	call	1009f44 <__muldi3>
 10092ec:	001b883a 	mov	r13,zero
 10092f0:	680f883a 	mov	r7,r13
 10092f4:	b009883a 	mov	r4,r22
 10092f8:	000b883a 	mov	r5,zero
 10092fc:	980d883a 	mov	r6,r19
 1009300:	b82d883a 	mov	r22,r23
 1009304:	002f883a 	mov	r23,zero
 1009308:	db401615 	stw	r13,88(sp)
 100930c:	d8801315 	stw	r2,76(sp)
 1009310:	d8c01415 	stw	r3,80(sp)
 1009314:	dcc01515 	stw	r19,84(sp)
 1009318:	1009f440 	call	1009f44 <__muldi3>
 100931c:	b00d883a 	mov	r6,r22
 1009320:	000b883a 	mov	r5,zero
 1009324:	9009883a 	mov	r4,r18
 1009328:	b80f883a 	mov	r7,r23
 100932c:	1021883a 	mov	r16,r2
 1009330:	1823883a 	mov	r17,r3
 1009334:	1009f440 	call	1009f44 <__muldi3>
 1009338:	8085883a 	add	r2,r16,r2
 100933c:	140d803a 	cmpltu	r6,r2,r16
 1009340:	88c7883a 	add	r3,r17,r3
 1009344:	30cd883a 	add	r6,r6,r3
 1009348:	1029883a 	mov	r20,r2
 100934c:	302b883a 	mov	r21,r6
 1009350:	da801317 	ldw	r10,76(sp)
 1009354:	dac01417 	ldw	r11,80(sp)
 1009358:	db001517 	ldw	r12,84(sp)
 100935c:	db401617 	ldw	r13,88(sp)
 1009360:	3440612e 	bgeu	r6,r17,10094e8 <__muldf3+0x318>
 1009364:	0009883a 	mov	r4,zero
 1009368:	5105883a 	add	r2,r10,r4
 100936c:	128d803a 	cmpltu	r6,r2,r10
 1009370:	5d07883a 	add	r3,r11,r20
 1009374:	30cd883a 	add	r6,r6,r3
 1009378:	0021883a 	mov	r16,zero
 100937c:	04400044 	movi	r17,1
 1009380:	1025883a 	mov	r18,r2
 1009384:	3027883a 	mov	r19,r6
 1009388:	32c06236 	bltu	r6,r11,1009514 <__muldf3+0x344>
 100938c:	59807a26 	beq	r11,r6,1009578 <__muldf3+0x3a8>
 1009390:	680b883a 	mov	r5,r13
 1009394:	b80f883a 	mov	r7,r23
 1009398:	6009883a 	mov	r4,r12
 100939c:	b00d883a 	mov	r6,r22
 10093a0:	1009f440 	call	1009f44 <__muldi3>
 10093a4:	1009883a 	mov	r4,r2
 10093a8:	000f883a 	mov	r7,zero
 10093ac:	1545883a 	add	r2,r2,r21
 10093b0:	1111803a 	cmpltu	r8,r2,r4
 10093b4:	19c7883a 	add	r3,r3,r7
 10093b8:	40c7883a 	add	r3,r8,r3
 10093bc:	88cb883a 	add	r5,r17,r3
 10093c0:	d8c00617 	ldw	r3,24(sp)
 10093c4:	8089883a 	add	r4,r16,r2
 10093c8:	d8800b17 	ldw	r2,44(sp)
 10093cc:	18c00104 	addi	r3,r3,4
 10093d0:	240d803a 	cmpltu	r6,r4,r16
 10093d4:	10c7883a 	add	r3,r2,r3
 10093d8:	2013883a 	mov	r9,r4
 10093dc:	d8800a17 	ldw	r2,40(sp)
 10093e0:	d9000517 	ldw	r4,20(sp)
 10093e4:	314d883a 	add	r6,r6,r5
 10093e8:	3015883a 	mov	r10,r6
 10093ec:	2088c03a 	cmpne	r4,r4,r2
 10093f0:	00880034 	movhi	r2,8192
 10093f4:	10bfffc4 	addi	r2,r2,-1
 10093f8:	d9000f15 	stw	r4,60(sp)
 10093fc:	d8c01015 	stw	r3,64(sp)
 1009400:	1180162e 	bgeu	r2,r6,100945c <__muldf3+0x28c>
 1009404:	1811883a 	mov	r8,r3
 1009408:	101f883a 	mov	r15,r2
 100940c:	980497fa 	slli	r2,r19,31
 1009410:	9016d07a 	srli	r11,r18,1
 1009414:	500697fa 	slli	r3,r10,31
 1009418:	480cd07a 	srli	r6,r9,1
 100941c:	500ed07a 	srli	r7,r10,1
 1009420:	12d6b03a 	or	r11,r2,r11
 1009424:	00800044 	movi	r2,1
 1009428:	198cb03a 	or	r6,r3,r6
 100942c:	4888703a 	and	r4,r9,r2
 1009430:	9818d07a 	srli	r12,r19,1
 1009434:	001b883a 	mov	r13,zero
 1009438:	03a00034 	movhi	r14,32768
 100943c:	3013883a 	mov	r9,r6
 1009440:	3815883a 	mov	r10,r7
 1009444:	4091883a 	add	r8,r8,r2
 1009448:	20000226 	beq	r4,zero,1009454 <__muldf3+0x284>
 100944c:	5b64b03a 	or	r18,r11,r13
 1009450:	63a6b03a 	or	r19,r12,r14
 1009454:	7abfed36 	bltu	r15,r10,100940c <__muldf3+0x23c>
 1009458:	da001015 	stw	r8,64(sp)
 100945c:	00840034 	movhi	r2,4096
 1009460:	10bfffc4 	addi	r2,r2,-1
 1009464:	12801436 	bltu	r2,r10,10094b8 <__muldf3+0x2e8>
 1009468:	da001017 	ldw	r8,64(sp)
 100946c:	101f883a 	mov	r15,r2
 1009470:	4a45883a 	add	r2,r9,r9
 1009474:	124d803a 	cmpltu	r6,r2,r9
 1009478:	5287883a 	add	r3,r10,r10
 100947c:	9497883a 	add	r11,r18,r18
 1009480:	5c8f803a 	cmpltu	r7,r11,r18
 1009484:	9cd9883a 	add	r12,r19,r19
 1009488:	01000044 	movi	r4,1
 100948c:	30cd883a 	add	r6,r6,r3
 1009490:	3b0f883a 	add	r7,r7,r12
 1009494:	423fffc4 	addi	r8,r8,-1
 1009498:	1013883a 	mov	r9,r2
 100949c:	3015883a 	mov	r10,r6
 10094a0:	111ab03a 	or	r13,r2,r4
 10094a4:	98003016 	blt	r19,zero,1009568 <__muldf3+0x398>
 10094a8:	5825883a 	mov	r18,r11
 10094ac:	3827883a 	mov	r19,r7
 10094b0:	7abfef2e 	bgeu	r15,r10,1009470 <__muldf3+0x2a0>
 10094b4:	da001015 	stw	r8,64(sp)
 10094b8:	00803fc4 	movi	r2,255
 10094bc:	488e703a 	and	r7,r9,r2
 10094c0:	00802004 	movi	r2,128
 10094c4:	0007883a 	mov	r3,zero
 10094c8:	0011883a 	mov	r8,zero
 10094cc:	38801826 	beq	r7,r2,1009530 <__muldf3+0x360>
 10094d0:	008000c4 	movi	r2,3
 10094d4:	d9000e04 	addi	r4,sp,56
 10094d8:	da801215 	stw	r10,72(sp)
 10094dc:	d8800e15 	stw	r2,56(sp)
 10094e0:	da401115 	stw	r9,68(sp)
 10094e4:	003f6a06 	br	1009290 <__muldf3+0xc0>
 10094e8:	89802126 	beq	r17,r6,1009570 <__muldf3+0x3a0>
 10094ec:	0009883a 	mov	r4,zero
 10094f0:	5105883a 	add	r2,r10,r4
 10094f4:	128d803a 	cmpltu	r6,r2,r10
 10094f8:	5d07883a 	add	r3,r11,r20
 10094fc:	30cd883a 	add	r6,r6,r3
 1009500:	0021883a 	mov	r16,zero
 1009504:	0023883a 	mov	r17,zero
 1009508:	1025883a 	mov	r18,r2
 100950c:	3027883a 	mov	r19,r6
 1009510:	32ff9e2e 	bgeu	r6,r11,100938c <__muldf3+0x1bc>
 1009514:	00800044 	movi	r2,1
 1009518:	8089883a 	add	r4,r16,r2
 100951c:	240d803a 	cmpltu	r6,r4,r16
 1009520:	344d883a 	add	r6,r6,r17
 1009524:	2021883a 	mov	r16,r4
 1009528:	3023883a 	mov	r17,r6
 100952c:	003f9806 	br	1009390 <__muldf3+0x1c0>
 1009530:	403fe71e 	bne	r8,zero,10094d0 <__muldf3+0x300>
 1009534:	01004004 	movi	r4,256
 1009538:	4904703a 	and	r2,r9,r4
 100953c:	10c4b03a 	or	r2,r2,r3
 1009540:	103fe31e 	bne	r2,zero,10094d0 <__muldf3+0x300>
 1009544:	94c4b03a 	or	r2,r18,r19
 1009548:	103fe126 	beq	r2,zero,10094d0 <__muldf3+0x300>
 100954c:	49c5883a 	add	r2,r9,r7
 1009550:	1251803a 	cmpltu	r8,r2,r9
 1009554:	4291883a 	add	r8,r8,r10
 1009558:	013fc004 	movi	r4,-256
 100955c:	1112703a 	and	r9,r2,r4
 1009560:	4015883a 	mov	r10,r8
 1009564:	003fda06 	br	10094d0 <__muldf3+0x300>
 1009568:	6813883a 	mov	r9,r13
 100956c:	003fce06 	br	10094a8 <__muldf3+0x2d8>
 1009570:	143f7c36 	bltu	r2,r16,1009364 <__muldf3+0x194>
 1009574:	003fdd06 	br	10094ec <__muldf3+0x31c>
 1009578:	12bf852e 	bgeu	r2,r10,1009390 <__muldf3+0x1c0>
 100957c:	003fe506 	br	1009514 <__muldf3+0x344>
 1009580:	00800084 	movi	r2,2
 1009584:	20bf351e 	bne	r4,r2,100925c <__muldf3+0x8c>
 1009588:	01004074 	movhi	r4,257
 100958c:	2139f604 	addi	r4,r4,-6184
 1009590:	003f3f06 	br	1009290 <__muldf3+0xc0>

01009594 <__divdf3>:
 1009594:	deffed04 	addi	sp,sp,-76
 1009598:	dcc01115 	stw	r19,68(sp)
 100959c:	dcc00404 	addi	r19,sp,16
 10095a0:	2011883a 	mov	r8,r4
 10095a4:	2813883a 	mov	r9,r5
 10095a8:	dc000e15 	stw	r16,56(sp)
 10095ac:	d809883a 	mov	r4,sp
 10095b0:	980b883a 	mov	r5,r19
 10095b4:	dc000904 	addi	r16,sp,36
 10095b8:	dfc01215 	stw	ra,72(sp)
 10095bc:	da400115 	stw	r9,4(sp)
 10095c0:	d9c00315 	stw	r7,12(sp)
 10095c4:	da000015 	stw	r8,0(sp)
 10095c8:	d9800215 	stw	r6,8(sp)
 10095cc:	dc801015 	stw	r18,64(sp)
 10095d0:	dc400f15 	stw	r17,60(sp)
 10095d4:	100a3700 	call	100a370 <__unpack_d>
 10095d8:	d9000204 	addi	r4,sp,8
 10095dc:	800b883a 	mov	r5,r16
 10095e0:	100a3700 	call	100a370 <__unpack_d>
 10095e4:	d9000417 	ldw	r4,16(sp)
 10095e8:	00800044 	movi	r2,1
 10095ec:	11000b2e 	bgeu	r2,r4,100961c <__divdf3+0x88>
 10095f0:	d9400917 	ldw	r5,36(sp)
 10095f4:	1140762e 	bgeu	r2,r5,10097d0 <__divdf3+0x23c>
 10095f8:	d8800517 	ldw	r2,20(sp)
 10095fc:	d8c00a17 	ldw	r3,40(sp)
 1009600:	01800104 	movi	r6,4
 1009604:	10c4f03a 	xor	r2,r2,r3
 1009608:	d8800515 	stw	r2,20(sp)
 100960c:	21800226 	beq	r4,r6,1009618 <__divdf3+0x84>
 1009610:	00800084 	movi	r2,2
 1009614:	2080141e 	bne	r4,r2,1009668 <__divdf3+0xd4>
 1009618:	29000926 	beq	r5,r4,1009640 <__divdf3+0xac>
 100961c:	9809883a 	mov	r4,r19
 1009620:	100a05c0 	call	100a05c <__pack_d>
 1009624:	dfc01217 	ldw	ra,72(sp)
 1009628:	dcc01117 	ldw	r19,68(sp)
 100962c:	dc801017 	ldw	r18,64(sp)
 1009630:	dc400f17 	ldw	r17,60(sp)
 1009634:	dc000e17 	ldw	r16,56(sp)
 1009638:	dec01304 	addi	sp,sp,76
 100963c:	f800283a 	ret
 1009640:	01004074 	movhi	r4,257
 1009644:	2139f604 	addi	r4,r4,-6184
 1009648:	100a05c0 	call	100a05c <__pack_d>
 100964c:	dfc01217 	ldw	ra,72(sp)
 1009650:	dcc01117 	ldw	r19,68(sp)
 1009654:	dc801017 	ldw	r18,64(sp)
 1009658:	dc400f17 	ldw	r17,60(sp)
 100965c:	dc000e17 	ldw	r16,56(sp)
 1009660:	dec01304 	addi	sp,sp,76
 1009664:	f800283a 	ret
 1009668:	29805b26 	beq	r5,r6,10097d8 <__divdf3+0x244>
 100966c:	28802d26 	beq	r5,r2,1009724 <__divdf3+0x190>
 1009670:	d8c00617 	ldw	r3,24(sp)
 1009674:	d8800b17 	ldw	r2,44(sp)
 1009678:	d9c00817 	ldw	r7,32(sp)
 100967c:	dc400d17 	ldw	r17,52(sp)
 1009680:	188bc83a 	sub	r5,r3,r2
 1009684:	d9800717 	ldw	r6,28(sp)
 1009688:	dc000c17 	ldw	r16,48(sp)
 100968c:	d9400615 	stw	r5,24(sp)
 1009690:	3c403836 	bltu	r7,r17,1009774 <__divdf3+0x1e0>
 1009694:	89c03626 	beq	r17,r7,1009770 <__divdf3+0x1dc>
 1009698:	0015883a 	mov	r10,zero
 100969c:	001d883a 	mov	r14,zero
 10096a0:	02c40034 	movhi	r11,4096
 10096a4:	001f883a 	mov	r15,zero
 10096a8:	003f883a 	mov	ra,zero
 10096ac:	04800f44 	movi	r18,61
 10096b0:	00000f06 	br	10096f0 <__divdf3+0x15c>
 10096b4:	601d883a 	mov	r14,r12
 10096b8:	681f883a 	mov	r15,r13
 10096bc:	400d883a 	mov	r6,r8
 10096c0:	100f883a 	mov	r7,r2
 10096c4:	3191883a 	add	r8,r6,r6
 10096c8:	5808d07a 	srli	r4,r11,1
 10096cc:	4185803a 	cmpltu	r2,r8,r6
 10096d0:	39d3883a 	add	r9,r7,r7
 10096d4:	28c6b03a 	or	r3,r5,r3
 10096d8:	1245883a 	add	r2,r2,r9
 10096dc:	1815883a 	mov	r10,r3
 10096e0:	2017883a 	mov	r11,r4
 10096e4:	400d883a 	mov	r6,r8
 10096e8:	100f883a 	mov	r7,r2
 10096ec:	fc801726 	beq	ra,r18,100974c <__divdf3+0x1b8>
 10096f0:	580a97fa 	slli	r5,r11,31
 10096f4:	5006d07a 	srli	r3,r10,1
 10096f8:	ffc00044 	addi	ra,ra,1
 10096fc:	3c7ff136 	bltu	r7,r17,10096c4 <__divdf3+0x130>
 1009700:	3411c83a 	sub	r8,r6,r16
 1009704:	3205803a 	cmpltu	r2,r6,r8
 1009708:	3c53c83a 	sub	r9,r7,r17
 100970c:	7298b03a 	or	r12,r14,r10
 1009710:	7adab03a 	or	r13,r15,r11
 1009714:	4885c83a 	sub	r2,r9,r2
 1009718:	89ffe61e 	bne	r17,r7,10096b4 <__divdf3+0x120>
 100971c:	343fe936 	bltu	r6,r16,10096c4 <__divdf3+0x130>
 1009720:	003fe406 	br	10096b4 <__divdf3+0x120>
 1009724:	9809883a 	mov	r4,r19
 1009728:	d9800415 	stw	r6,16(sp)
 100972c:	100a05c0 	call	100a05c <__pack_d>
 1009730:	dfc01217 	ldw	ra,72(sp)
 1009734:	dcc01117 	ldw	r19,68(sp)
 1009738:	dc801017 	ldw	r18,64(sp)
 100973c:	dc400f17 	ldw	r17,60(sp)
 1009740:	dc000e17 	ldw	r16,56(sp)
 1009744:	dec01304 	addi	sp,sp,76
 1009748:	f800283a 	ret
 100974c:	00803fc4 	movi	r2,255
 1009750:	7090703a 	and	r8,r14,r2
 1009754:	00802004 	movi	r2,128
 1009758:	0007883a 	mov	r3,zero
 100975c:	0013883a 	mov	r9,zero
 1009760:	40800d26 	beq	r8,r2,1009798 <__divdf3+0x204>
 1009764:	dbc00815 	stw	r15,32(sp)
 1009768:	db800715 	stw	r14,28(sp)
 100976c:	003fab06 	br	100961c <__divdf3+0x88>
 1009770:	343fc92e 	bgeu	r6,r16,1009698 <__divdf3+0x104>
 1009774:	3185883a 	add	r2,r6,r6
 1009778:	1189803a 	cmpltu	r4,r2,r6
 100977c:	39c7883a 	add	r3,r7,r7
 1009780:	20c9883a 	add	r4,r4,r3
 1009784:	297fffc4 	addi	r5,r5,-1
 1009788:	100d883a 	mov	r6,r2
 100978c:	200f883a 	mov	r7,r4
 1009790:	d9400615 	stw	r5,24(sp)
 1009794:	003fc006 	br	1009698 <__divdf3+0x104>
 1009798:	483ff21e 	bne	r9,zero,1009764 <__divdf3+0x1d0>
 100979c:	01004004 	movi	r4,256
 10097a0:	7104703a 	and	r2,r14,r4
 10097a4:	10c4b03a 	or	r2,r2,r3
 10097a8:	103fee1e 	bne	r2,zero,1009764 <__divdf3+0x1d0>
 10097ac:	31c4b03a 	or	r2,r6,r7
 10097b0:	103fec26 	beq	r2,zero,1009764 <__divdf3+0x1d0>
 10097b4:	7205883a 	add	r2,r14,r8
 10097b8:	1391803a 	cmpltu	r8,r2,r14
 10097bc:	43d1883a 	add	r8,r8,r15
 10097c0:	013fc004 	movi	r4,-256
 10097c4:	111c703a 	and	r14,r2,r4
 10097c8:	401f883a 	mov	r15,r8
 10097cc:	003fe506 	br	1009764 <__divdf3+0x1d0>
 10097d0:	8009883a 	mov	r4,r16
 10097d4:	003f9206 	br	1009620 <__divdf3+0x8c>
 10097d8:	9809883a 	mov	r4,r19
 10097dc:	d8000715 	stw	zero,28(sp)
 10097e0:	d8000815 	stw	zero,32(sp)
 10097e4:	d8000615 	stw	zero,24(sp)
 10097e8:	003f8d06 	br	1009620 <__divdf3+0x8c>

010097ec <__eqdf2>:
 10097ec:	deffef04 	addi	sp,sp,-68
 10097f0:	dc400f15 	stw	r17,60(sp)
 10097f4:	dc400404 	addi	r17,sp,16
 10097f8:	2005883a 	mov	r2,r4
 10097fc:	2807883a 	mov	r3,r5
 1009800:	dc000e15 	stw	r16,56(sp)
 1009804:	d809883a 	mov	r4,sp
 1009808:	880b883a 	mov	r5,r17
 100980c:	dc000904 	addi	r16,sp,36
 1009810:	d8c00115 	stw	r3,4(sp)
 1009814:	d8800015 	stw	r2,0(sp)
 1009818:	d9800215 	stw	r6,8(sp)
 100981c:	dfc01015 	stw	ra,64(sp)
 1009820:	d9c00315 	stw	r7,12(sp)
 1009824:	100a3700 	call	100a370 <__unpack_d>
 1009828:	d9000204 	addi	r4,sp,8
 100982c:	800b883a 	mov	r5,r16
 1009830:	100a3700 	call	100a370 <__unpack_d>
 1009834:	d8800417 	ldw	r2,16(sp)
 1009838:	00c00044 	movi	r3,1
 100983c:	180d883a 	mov	r6,r3
 1009840:	1880062e 	bgeu	r3,r2,100985c <__eqdf2+0x70>
 1009844:	d8800917 	ldw	r2,36(sp)
 1009848:	8809883a 	mov	r4,r17
 100984c:	800b883a 	mov	r5,r16
 1009850:	1880022e 	bgeu	r3,r2,100985c <__eqdf2+0x70>
 1009854:	100a4a80 	call	100a4a8 <__fpcmp_parts_d>
 1009858:	100d883a 	mov	r6,r2
 100985c:	3005883a 	mov	r2,r6
 1009860:	dfc01017 	ldw	ra,64(sp)
 1009864:	dc400f17 	ldw	r17,60(sp)
 1009868:	dc000e17 	ldw	r16,56(sp)
 100986c:	dec01104 	addi	sp,sp,68
 1009870:	f800283a 	ret

01009874 <__nedf2>:
 1009874:	deffef04 	addi	sp,sp,-68
 1009878:	dc400f15 	stw	r17,60(sp)
 100987c:	dc400404 	addi	r17,sp,16
 1009880:	2005883a 	mov	r2,r4
 1009884:	2807883a 	mov	r3,r5
 1009888:	dc000e15 	stw	r16,56(sp)
 100988c:	d809883a 	mov	r4,sp
 1009890:	880b883a 	mov	r5,r17
 1009894:	dc000904 	addi	r16,sp,36
 1009898:	d8c00115 	stw	r3,4(sp)
 100989c:	d8800015 	stw	r2,0(sp)
 10098a0:	d9800215 	stw	r6,8(sp)
 10098a4:	dfc01015 	stw	ra,64(sp)
 10098a8:	d9c00315 	stw	r7,12(sp)
 10098ac:	100a3700 	call	100a370 <__unpack_d>
 10098b0:	d9000204 	addi	r4,sp,8
 10098b4:	800b883a 	mov	r5,r16
 10098b8:	100a3700 	call	100a370 <__unpack_d>
 10098bc:	d8800417 	ldw	r2,16(sp)
 10098c0:	00c00044 	movi	r3,1
 10098c4:	180d883a 	mov	r6,r3
 10098c8:	1880062e 	bgeu	r3,r2,10098e4 <__nedf2+0x70>
 10098cc:	d8800917 	ldw	r2,36(sp)
 10098d0:	8809883a 	mov	r4,r17
 10098d4:	800b883a 	mov	r5,r16
 10098d8:	1880022e 	bgeu	r3,r2,10098e4 <__nedf2+0x70>
 10098dc:	100a4a80 	call	100a4a8 <__fpcmp_parts_d>
 10098e0:	100d883a 	mov	r6,r2
 10098e4:	3005883a 	mov	r2,r6
 10098e8:	dfc01017 	ldw	ra,64(sp)
 10098ec:	dc400f17 	ldw	r17,60(sp)
 10098f0:	dc000e17 	ldw	r16,56(sp)
 10098f4:	dec01104 	addi	sp,sp,68
 10098f8:	f800283a 	ret

010098fc <__gtdf2>:
 10098fc:	deffef04 	addi	sp,sp,-68
 1009900:	dc400f15 	stw	r17,60(sp)
 1009904:	dc400404 	addi	r17,sp,16
 1009908:	2005883a 	mov	r2,r4
 100990c:	2807883a 	mov	r3,r5
 1009910:	dc000e15 	stw	r16,56(sp)
 1009914:	d809883a 	mov	r4,sp
 1009918:	880b883a 	mov	r5,r17
 100991c:	dc000904 	addi	r16,sp,36
 1009920:	d8c00115 	stw	r3,4(sp)
 1009924:	d8800015 	stw	r2,0(sp)
 1009928:	d9800215 	stw	r6,8(sp)
 100992c:	dfc01015 	stw	ra,64(sp)
 1009930:	d9c00315 	stw	r7,12(sp)
 1009934:	100a3700 	call	100a370 <__unpack_d>
 1009938:	d9000204 	addi	r4,sp,8
 100993c:	800b883a 	mov	r5,r16
 1009940:	100a3700 	call	100a370 <__unpack_d>
 1009944:	d8800417 	ldw	r2,16(sp)
 1009948:	00c00044 	movi	r3,1
 100994c:	01bfffc4 	movi	r6,-1
 1009950:	1880062e 	bgeu	r3,r2,100996c <__gtdf2+0x70>
 1009954:	d8800917 	ldw	r2,36(sp)
 1009958:	8809883a 	mov	r4,r17
 100995c:	800b883a 	mov	r5,r16
 1009960:	1880022e 	bgeu	r3,r2,100996c <__gtdf2+0x70>
 1009964:	100a4a80 	call	100a4a8 <__fpcmp_parts_d>
 1009968:	100d883a 	mov	r6,r2
 100996c:	3005883a 	mov	r2,r6
 1009970:	dfc01017 	ldw	ra,64(sp)
 1009974:	dc400f17 	ldw	r17,60(sp)
 1009978:	dc000e17 	ldw	r16,56(sp)
 100997c:	dec01104 	addi	sp,sp,68
 1009980:	f800283a 	ret

01009984 <__gedf2>:
 1009984:	deffef04 	addi	sp,sp,-68
 1009988:	dc400f15 	stw	r17,60(sp)
 100998c:	dc400404 	addi	r17,sp,16
 1009990:	2005883a 	mov	r2,r4
 1009994:	2807883a 	mov	r3,r5
 1009998:	dc000e15 	stw	r16,56(sp)
 100999c:	d809883a 	mov	r4,sp
 10099a0:	880b883a 	mov	r5,r17
 10099a4:	dc000904 	addi	r16,sp,36
 10099a8:	d8c00115 	stw	r3,4(sp)
 10099ac:	d8800015 	stw	r2,0(sp)
 10099b0:	d9800215 	stw	r6,8(sp)
 10099b4:	dfc01015 	stw	ra,64(sp)
 10099b8:	d9c00315 	stw	r7,12(sp)
 10099bc:	100a3700 	call	100a370 <__unpack_d>
 10099c0:	d9000204 	addi	r4,sp,8
 10099c4:	800b883a 	mov	r5,r16
 10099c8:	100a3700 	call	100a370 <__unpack_d>
 10099cc:	d8800417 	ldw	r2,16(sp)
 10099d0:	00c00044 	movi	r3,1
 10099d4:	01bfffc4 	movi	r6,-1
 10099d8:	1880062e 	bgeu	r3,r2,10099f4 <__gedf2+0x70>
 10099dc:	d8800917 	ldw	r2,36(sp)
 10099e0:	8809883a 	mov	r4,r17
 10099e4:	800b883a 	mov	r5,r16
 10099e8:	1880022e 	bgeu	r3,r2,10099f4 <__gedf2+0x70>
 10099ec:	100a4a80 	call	100a4a8 <__fpcmp_parts_d>
 10099f0:	100d883a 	mov	r6,r2
 10099f4:	3005883a 	mov	r2,r6
 10099f8:	dfc01017 	ldw	ra,64(sp)
 10099fc:	dc400f17 	ldw	r17,60(sp)
 1009a00:	dc000e17 	ldw	r16,56(sp)
 1009a04:	dec01104 	addi	sp,sp,68
 1009a08:	f800283a 	ret

01009a0c <__ltdf2>:
 1009a0c:	deffef04 	addi	sp,sp,-68
 1009a10:	dc400f15 	stw	r17,60(sp)
 1009a14:	dc400404 	addi	r17,sp,16
 1009a18:	2005883a 	mov	r2,r4
 1009a1c:	2807883a 	mov	r3,r5
 1009a20:	dc000e15 	stw	r16,56(sp)
 1009a24:	d809883a 	mov	r4,sp
 1009a28:	880b883a 	mov	r5,r17
 1009a2c:	dc000904 	addi	r16,sp,36
 1009a30:	d8c00115 	stw	r3,4(sp)
 1009a34:	d8800015 	stw	r2,0(sp)
 1009a38:	d9800215 	stw	r6,8(sp)
 1009a3c:	dfc01015 	stw	ra,64(sp)
 1009a40:	d9c00315 	stw	r7,12(sp)
 1009a44:	100a3700 	call	100a370 <__unpack_d>
 1009a48:	d9000204 	addi	r4,sp,8
 1009a4c:	800b883a 	mov	r5,r16
 1009a50:	100a3700 	call	100a370 <__unpack_d>
 1009a54:	d8800417 	ldw	r2,16(sp)
 1009a58:	00c00044 	movi	r3,1
 1009a5c:	180d883a 	mov	r6,r3
 1009a60:	1880062e 	bgeu	r3,r2,1009a7c <__ltdf2+0x70>
 1009a64:	d8800917 	ldw	r2,36(sp)
 1009a68:	8809883a 	mov	r4,r17
 1009a6c:	800b883a 	mov	r5,r16
 1009a70:	1880022e 	bgeu	r3,r2,1009a7c <__ltdf2+0x70>
 1009a74:	100a4a80 	call	100a4a8 <__fpcmp_parts_d>
 1009a78:	100d883a 	mov	r6,r2
 1009a7c:	3005883a 	mov	r2,r6
 1009a80:	dfc01017 	ldw	ra,64(sp)
 1009a84:	dc400f17 	ldw	r17,60(sp)
 1009a88:	dc000e17 	ldw	r16,56(sp)
 1009a8c:	dec01104 	addi	sp,sp,68
 1009a90:	f800283a 	ret

01009a94 <__floatsidf>:
 1009a94:	2006d7fa 	srli	r3,r4,31
 1009a98:	defff604 	addi	sp,sp,-40
 1009a9c:	008000c4 	movi	r2,3
 1009aa0:	dfc00915 	stw	ra,36(sp)
 1009aa4:	dcc00815 	stw	r19,32(sp)
 1009aa8:	dc800715 	stw	r18,28(sp)
 1009aac:	dc400615 	stw	r17,24(sp)
 1009ab0:	dc000515 	stw	r16,20(sp)
 1009ab4:	d8800015 	stw	r2,0(sp)
 1009ab8:	d8c00115 	stw	r3,4(sp)
 1009abc:	20000f1e 	bne	r4,zero,1009afc <__floatsidf+0x68>
 1009ac0:	00800084 	movi	r2,2
 1009ac4:	d8800015 	stw	r2,0(sp)
 1009ac8:	d809883a 	mov	r4,sp
 1009acc:	100a05c0 	call	100a05c <__pack_d>
 1009ad0:	1009883a 	mov	r4,r2
 1009ad4:	180b883a 	mov	r5,r3
 1009ad8:	2005883a 	mov	r2,r4
 1009adc:	2807883a 	mov	r3,r5
 1009ae0:	dfc00917 	ldw	ra,36(sp)
 1009ae4:	dcc00817 	ldw	r19,32(sp)
 1009ae8:	dc800717 	ldw	r18,28(sp)
 1009aec:	dc400617 	ldw	r17,24(sp)
 1009af0:	dc000517 	ldw	r16,20(sp)
 1009af4:	dec00a04 	addi	sp,sp,40
 1009af8:	f800283a 	ret
 1009afc:	00800f04 	movi	r2,60
 1009b00:	1807003a 	cmpeq	r3,r3,zero
 1009b04:	d8800215 	stw	r2,8(sp)
 1009b08:	18001126 	beq	r3,zero,1009b50 <__floatsidf+0xbc>
 1009b0c:	0027883a 	mov	r19,zero
 1009b10:	2025883a 	mov	r18,r4
 1009b14:	d9000315 	stw	r4,12(sp)
 1009b18:	dcc00415 	stw	r19,16(sp)
 1009b1c:	1009fdc0 	call	1009fdc <__clzsi2>
 1009b20:	11000744 	addi	r4,r2,29
 1009b24:	013fe80e 	bge	zero,r4,1009ac8 <__floatsidf+0x34>
 1009b28:	10bfff44 	addi	r2,r2,-3
 1009b2c:	10000c16 	blt	r2,zero,1009b60 <__floatsidf+0xcc>
 1009b30:	90a2983a 	sll	r17,r18,r2
 1009b34:	0021883a 	mov	r16,zero
 1009b38:	d8800217 	ldw	r2,8(sp)
 1009b3c:	dc400415 	stw	r17,16(sp)
 1009b40:	dc000315 	stw	r16,12(sp)
 1009b44:	1105c83a 	sub	r2,r2,r4
 1009b48:	d8800215 	stw	r2,8(sp)
 1009b4c:	003fde06 	br	1009ac8 <__floatsidf+0x34>
 1009b50:	00a00034 	movhi	r2,32768
 1009b54:	20800a26 	beq	r4,r2,1009b80 <__floatsidf+0xec>
 1009b58:	0109c83a 	sub	r4,zero,r4
 1009b5c:	003feb06 	br	1009b0c <__floatsidf+0x78>
 1009b60:	9006d07a 	srli	r3,r18,1
 1009b64:	008007c4 	movi	r2,31
 1009b68:	1105c83a 	sub	r2,r2,r4
 1009b6c:	1886d83a 	srl	r3,r3,r2
 1009b70:	9922983a 	sll	r17,r19,r4
 1009b74:	9120983a 	sll	r16,r18,r4
 1009b78:	1c62b03a 	or	r17,r3,r17
 1009b7c:	003fee06 	br	1009b38 <__floatsidf+0xa4>
 1009b80:	0009883a 	mov	r4,zero
 1009b84:	01707834 	movhi	r5,49632
 1009b88:	003fd306 	br	1009ad8 <__floatsidf+0x44>

01009b8c <__fixdfsi>:
 1009b8c:	defff804 	addi	sp,sp,-32
 1009b90:	2005883a 	mov	r2,r4
 1009b94:	2807883a 	mov	r3,r5
 1009b98:	d809883a 	mov	r4,sp
 1009b9c:	d9400204 	addi	r5,sp,8
 1009ba0:	d8c00115 	stw	r3,4(sp)
 1009ba4:	d8800015 	stw	r2,0(sp)
 1009ba8:	dfc00715 	stw	ra,28(sp)
 1009bac:	100a3700 	call	100a370 <__unpack_d>
 1009bb0:	d8c00217 	ldw	r3,8(sp)
 1009bb4:	00800084 	movi	r2,2
 1009bb8:	1880051e 	bne	r3,r2,1009bd0 <__fixdfsi+0x44>
 1009bbc:	0007883a 	mov	r3,zero
 1009bc0:	1805883a 	mov	r2,r3
 1009bc4:	dfc00717 	ldw	ra,28(sp)
 1009bc8:	dec00804 	addi	sp,sp,32
 1009bcc:	f800283a 	ret
 1009bd0:	00800044 	movi	r2,1
 1009bd4:	10fff92e 	bgeu	r2,r3,1009bbc <__fixdfsi+0x30>
 1009bd8:	00800104 	movi	r2,4
 1009bdc:	18800426 	beq	r3,r2,1009bf0 <__fixdfsi+0x64>
 1009be0:	d8c00417 	ldw	r3,16(sp)
 1009be4:	183ff516 	blt	r3,zero,1009bbc <__fixdfsi+0x30>
 1009be8:	00800784 	movi	r2,30
 1009bec:	10c0080e 	bge	r2,r3,1009c10 <__fixdfsi+0x84>
 1009bf0:	d8800317 	ldw	r2,12(sp)
 1009bf4:	1000121e 	bne	r2,zero,1009c40 <__fixdfsi+0xb4>
 1009bf8:	00e00034 	movhi	r3,32768
 1009bfc:	18ffffc4 	addi	r3,r3,-1
 1009c00:	1805883a 	mov	r2,r3
 1009c04:	dfc00717 	ldw	ra,28(sp)
 1009c08:	dec00804 	addi	sp,sp,32
 1009c0c:	f800283a 	ret
 1009c10:	00800f04 	movi	r2,60
 1009c14:	10d1c83a 	sub	r8,r2,r3
 1009c18:	40bff804 	addi	r2,r8,-32
 1009c1c:	d9800517 	ldw	r6,20(sp)
 1009c20:	d9c00617 	ldw	r7,24(sp)
 1009c24:	10000816 	blt	r2,zero,1009c48 <__fixdfsi+0xbc>
 1009c28:	3888d83a 	srl	r4,r7,r2
 1009c2c:	d8800317 	ldw	r2,12(sp)
 1009c30:	2007883a 	mov	r3,r4
 1009c34:	103fe226 	beq	r2,zero,1009bc0 <__fixdfsi+0x34>
 1009c38:	0107c83a 	sub	r3,zero,r4
 1009c3c:	003fe006 	br	1009bc0 <__fixdfsi+0x34>
 1009c40:	00e00034 	movhi	r3,32768
 1009c44:	003fde06 	br	1009bc0 <__fixdfsi+0x34>
 1009c48:	39c7883a 	add	r3,r7,r7
 1009c4c:	008007c4 	movi	r2,31
 1009c50:	1205c83a 	sub	r2,r2,r8
 1009c54:	1886983a 	sll	r3,r3,r2
 1009c58:	3208d83a 	srl	r4,r6,r8
 1009c5c:	1908b03a 	or	r4,r3,r4
 1009c60:	003ff206 	br	1009c2c <__fixdfsi+0xa0>

01009c64 <__floatunsidf>:
 1009c64:	defff204 	addi	sp,sp,-56
 1009c68:	dfc00d15 	stw	ra,52(sp)
 1009c6c:	ddc00c15 	stw	r23,48(sp)
 1009c70:	dd800b15 	stw	r22,44(sp)
 1009c74:	dd400a15 	stw	r21,40(sp)
 1009c78:	dd000915 	stw	r20,36(sp)
 1009c7c:	dcc00815 	stw	r19,32(sp)
 1009c80:	dc800715 	stw	r18,28(sp)
 1009c84:	dc400615 	stw	r17,24(sp)
 1009c88:	dc000515 	stw	r16,20(sp)
 1009c8c:	d8000115 	stw	zero,4(sp)
 1009c90:	20000f1e 	bne	r4,zero,1009cd0 <__floatunsidf+0x6c>
 1009c94:	00800084 	movi	r2,2
 1009c98:	d8800015 	stw	r2,0(sp)
 1009c9c:	d809883a 	mov	r4,sp
 1009ca0:	100a05c0 	call	100a05c <__pack_d>
 1009ca4:	dfc00d17 	ldw	ra,52(sp)
 1009ca8:	ddc00c17 	ldw	r23,48(sp)
 1009cac:	dd800b17 	ldw	r22,44(sp)
 1009cb0:	dd400a17 	ldw	r21,40(sp)
 1009cb4:	dd000917 	ldw	r20,36(sp)
 1009cb8:	dcc00817 	ldw	r19,32(sp)
 1009cbc:	dc800717 	ldw	r18,28(sp)
 1009cc0:	dc400617 	ldw	r17,24(sp)
 1009cc4:	dc000517 	ldw	r16,20(sp)
 1009cc8:	dec00e04 	addi	sp,sp,56
 1009ccc:	f800283a 	ret
 1009cd0:	008000c4 	movi	r2,3
 1009cd4:	00c00f04 	movi	r3,60
 1009cd8:	002f883a 	mov	r23,zero
 1009cdc:	202d883a 	mov	r22,r4
 1009ce0:	d8800015 	stw	r2,0(sp)
 1009ce4:	d8c00215 	stw	r3,8(sp)
 1009ce8:	d9000315 	stw	r4,12(sp)
 1009cec:	ddc00415 	stw	r23,16(sp)
 1009cf0:	1009fdc0 	call	1009fdc <__clzsi2>
 1009cf4:	12400744 	addi	r9,r2,29
 1009cf8:	48000b16 	blt	r9,zero,1009d28 <__floatunsidf+0xc4>
 1009cfc:	483fe726 	beq	r9,zero,1009c9c <__floatunsidf+0x38>
 1009d00:	10bfff44 	addi	r2,r2,-3
 1009d04:	10002e16 	blt	r2,zero,1009dc0 <__floatunsidf+0x15c>
 1009d08:	b0a2983a 	sll	r17,r22,r2
 1009d0c:	0021883a 	mov	r16,zero
 1009d10:	d8800217 	ldw	r2,8(sp)
 1009d14:	dc400415 	stw	r17,16(sp)
 1009d18:	dc000315 	stw	r16,12(sp)
 1009d1c:	1245c83a 	sub	r2,r2,r9
 1009d20:	d8800215 	stw	r2,8(sp)
 1009d24:	003fdd06 	br	1009c9c <__floatunsidf+0x38>
 1009d28:	0255c83a 	sub	r10,zero,r9
 1009d2c:	51bff804 	addi	r6,r10,-32
 1009d30:	30001b16 	blt	r6,zero,1009da0 <__floatunsidf+0x13c>
 1009d34:	b9a8d83a 	srl	r20,r23,r6
 1009d38:	002b883a 	mov	r21,zero
 1009d3c:	000f883a 	mov	r7,zero
 1009d40:	01000044 	movi	r4,1
 1009d44:	0011883a 	mov	r8,zero
 1009d48:	30002516 	blt	r6,zero,1009de0 <__floatunsidf+0x17c>
 1009d4c:	21a6983a 	sll	r19,r4,r6
 1009d50:	0025883a 	mov	r18,zero
 1009d54:	00bfffc4 	movi	r2,-1
 1009d58:	9089883a 	add	r4,r18,r2
 1009d5c:	988b883a 	add	r5,r19,r2
 1009d60:	248d803a 	cmpltu	r6,r4,r18
 1009d64:	314b883a 	add	r5,r6,r5
 1009d68:	b104703a 	and	r2,r22,r4
 1009d6c:	b946703a 	and	r3,r23,r5
 1009d70:	10c4b03a 	or	r2,r2,r3
 1009d74:	10000226 	beq	r2,zero,1009d80 <__floatunsidf+0x11c>
 1009d78:	01c00044 	movi	r7,1
 1009d7c:	0011883a 	mov	r8,zero
 1009d80:	d9000217 	ldw	r4,8(sp)
 1009d84:	a1c4b03a 	or	r2,r20,r7
 1009d88:	aa06b03a 	or	r3,r21,r8
 1009d8c:	2249c83a 	sub	r4,r4,r9
 1009d90:	d8c00415 	stw	r3,16(sp)
 1009d94:	d9000215 	stw	r4,8(sp)
 1009d98:	d8800315 	stw	r2,12(sp)
 1009d9c:	003fbf06 	br	1009c9c <__floatunsidf+0x38>
 1009da0:	bdc7883a 	add	r3,r23,r23
 1009da4:	008007c4 	movi	r2,31
 1009da8:	1285c83a 	sub	r2,r2,r10
 1009dac:	1886983a 	sll	r3,r3,r2
 1009db0:	b2a8d83a 	srl	r20,r22,r10
 1009db4:	baaad83a 	srl	r21,r23,r10
 1009db8:	1d28b03a 	or	r20,r3,r20
 1009dbc:	003fdf06 	br	1009d3c <__floatunsidf+0xd8>
 1009dc0:	b006d07a 	srli	r3,r22,1
 1009dc4:	008007c4 	movi	r2,31
 1009dc8:	1245c83a 	sub	r2,r2,r9
 1009dcc:	1886d83a 	srl	r3,r3,r2
 1009dd0:	ba62983a 	sll	r17,r23,r9
 1009dd4:	b260983a 	sll	r16,r22,r9
 1009dd8:	1c62b03a 	or	r17,r3,r17
 1009ddc:	003fcc06 	br	1009d10 <__floatunsidf+0xac>
 1009de0:	2006d07a 	srli	r3,r4,1
 1009de4:	008007c4 	movi	r2,31
 1009de8:	1285c83a 	sub	r2,r2,r10
 1009dec:	18a6d83a 	srl	r19,r3,r2
 1009df0:	22a4983a 	sll	r18,r4,r10
 1009df4:	003fd706 	br	1009d54 <__floatunsidf+0xf0>

01009df8 <udivmodsi4>:
 1009df8:	29001b2e 	bgeu	r5,r4,1009e68 <udivmodsi4+0x70>
 1009dfc:	28001a16 	blt	r5,zero,1009e68 <udivmodsi4+0x70>
 1009e00:	00800044 	movi	r2,1
 1009e04:	0007883a 	mov	r3,zero
 1009e08:	01c007c4 	movi	r7,31
 1009e0c:	00000306 	br	1009e1c <udivmodsi4+0x24>
 1009e10:	19c01326 	beq	r3,r7,1009e60 <udivmodsi4+0x68>
 1009e14:	18c00044 	addi	r3,r3,1
 1009e18:	28000416 	blt	r5,zero,1009e2c <udivmodsi4+0x34>
 1009e1c:	294b883a 	add	r5,r5,r5
 1009e20:	1085883a 	add	r2,r2,r2
 1009e24:	293ffa36 	bltu	r5,r4,1009e10 <udivmodsi4+0x18>
 1009e28:	10000d26 	beq	r2,zero,1009e60 <udivmodsi4+0x68>
 1009e2c:	0007883a 	mov	r3,zero
 1009e30:	21400236 	bltu	r4,r5,1009e3c <udivmodsi4+0x44>
 1009e34:	2149c83a 	sub	r4,r4,r5
 1009e38:	1886b03a 	or	r3,r3,r2
 1009e3c:	1004d07a 	srli	r2,r2,1
 1009e40:	280ad07a 	srli	r5,r5,1
 1009e44:	103ffa1e 	bne	r2,zero,1009e30 <udivmodsi4+0x38>
 1009e48:	30000226 	beq	r6,zero,1009e54 <udivmodsi4+0x5c>
 1009e4c:	2005883a 	mov	r2,r4
 1009e50:	f800283a 	ret
 1009e54:	1809883a 	mov	r4,r3
 1009e58:	2005883a 	mov	r2,r4
 1009e5c:	f800283a 	ret
 1009e60:	0007883a 	mov	r3,zero
 1009e64:	003ff806 	br	1009e48 <udivmodsi4+0x50>
 1009e68:	00800044 	movi	r2,1
 1009e6c:	0007883a 	mov	r3,zero
 1009e70:	003fef06 	br	1009e30 <udivmodsi4+0x38>

01009e74 <__divsi3>:
 1009e74:	defffe04 	addi	sp,sp,-8
 1009e78:	dc000015 	stw	r16,0(sp)
 1009e7c:	dfc00115 	stw	ra,4(sp)
 1009e80:	0021883a 	mov	r16,zero
 1009e84:	20000c16 	blt	r4,zero,1009eb8 <__divsi3+0x44>
 1009e88:	000d883a 	mov	r6,zero
 1009e8c:	28000e16 	blt	r5,zero,1009ec8 <__divsi3+0x54>
 1009e90:	1009df80 	call	1009df8 <udivmodsi4>
 1009e94:	1007883a 	mov	r3,r2
 1009e98:	8005003a 	cmpeq	r2,r16,zero
 1009e9c:	1000011e 	bne	r2,zero,1009ea4 <__divsi3+0x30>
 1009ea0:	00c7c83a 	sub	r3,zero,r3
 1009ea4:	1805883a 	mov	r2,r3
 1009ea8:	dfc00117 	ldw	ra,4(sp)
 1009eac:	dc000017 	ldw	r16,0(sp)
 1009eb0:	dec00204 	addi	sp,sp,8
 1009eb4:	f800283a 	ret
 1009eb8:	0109c83a 	sub	r4,zero,r4
 1009ebc:	04000044 	movi	r16,1
 1009ec0:	000d883a 	mov	r6,zero
 1009ec4:	283ff20e 	bge	r5,zero,1009e90 <__divsi3+0x1c>
 1009ec8:	014bc83a 	sub	r5,zero,r5
 1009ecc:	8021003a 	cmpeq	r16,r16,zero
 1009ed0:	003fef06 	br	1009e90 <__divsi3+0x1c>

01009ed4 <__modsi3>:
 1009ed4:	deffff04 	addi	sp,sp,-4
 1009ed8:	dfc00015 	stw	ra,0(sp)
 1009edc:	01800044 	movi	r6,1
 1009ee0:	2807883a 	mov	r3,r5
 1009ee4:	20000416 	blt	r4,zero,1009ef8 <__modsi3+0x24>
 1009ee8:	28000c16 	blt	r5,zero,1009f1c <__modsi3+0x48>
 1009eec:	dfc00017 	ldw	ra,0(sp)
 1009ef0:	dec00104 	addi	sp,sp,4
 1009ef4:	1009df81 	jmpi	1009df8 <udivmodsi4>
 1009ef8:	0109c83a 	sub	r4,zero,r4
 1009efc:	28000b16 	blt	r5,zero,1009f2c <__modsi3+0x58>
 1009f00:	180b883a 	mov	r5,r3
 1009f04:	01800044 	movi	r6,1
 1009f08:	1009df80 	call	1009df8 <udivmodsi4>
 1009f0c:	0085c83a 	sub	r2,zero,r2
 1009f10:	dfc00017 	ldw	ra,0(sp)
 1009f14:	dec00104 	addi	sp,sp,4
 1009f18:	f800283a 	ret
 1009f1c:	014bc83a 	sub	r5,zero,r5
 1009f20:	dfc00017 	ldw	ra,0(sp)
 1009f24:	dec00104 	addi	sp,sp,4
 1009f28:	1009df81 	jmpi	1009df8 <udivmodsi4>
 1009f2c:	0147c83a 	sub	r3,zero,r5
 1009f30:	003ff306 	br	1009f00 <__modsi3+0x2c>

01009f34 <__udivsi3>:
 1009f34:	000d883a 	mov	r6,zero
 1009f38:	1009df81 	jmpi	1009df8 <udivmodsi4>

01009f3c <__umodsi3>:
 1009f3c:	01800044 	movi	r6,1
 1009f40:	1009df81 	jmpi	1009df8 <udivmodsi4>

01009f44 <__muldi3>:
 1009f44:	2011883a 	mov	r8,r4
 1009f48:	427fffcc 	andi	r9,r8,65535
 1009f4c:	4018d43a 	srli	r12,r8,16
 1009f50:	32bfffcc 	andi	r10,r6,65535
 1009f54:	3016d43a 	srli	r11,r6,16
 1009f58:	4a85383a 	mul	r2,r9,r10
 1009f5c:	6295383a 	mul	r10,r12,r10
 1009f60:	4ad3383a 	mul	r9,r9,r11
 1009f64:	113fffcc 	andi	r4,r2,65535
 1009f68:	1004d43a 	srli	r2,r2,16
 1009f6c:	4a93883a 	add	r9,r9,r10
 1009f70:	3807883a 	mov	r3,r7
 1009f74:	1245883a 	add	r2,r2,r9
 1009f78:	280f883a 	mov	r7,r5
 1009f7c:	180b883a 	mov	r5,r3
 1009f80:	1006943a 	slli	r3,r2,16
 1009f84:	defffd04 	addi	sp,sp,-12
 1009f88:	dc800215 	stw	r18,8(sp)
 1009f8c:	1907883a 	add	r3,r3,r4
 1009f90:	dc400115 	stw	r17,4(sp)
 1009f94:	dc000015 	stw	r16,0(sp)
 1009f98:	4165383a 	mul	r18,r8,r5
 1009f9c:	31e3383a 	mul	r17,r6,r7
 1009fa0:	1012d43a 	srli	r9,r2,16
 1009fa4:	62d9383a 	mul	r12,r12,r11
 1009fa8:	181f883a 	mov	r15,r3
 1009fac:	1280022e 	bgeu	r2,r10,1009fb8 <__muldi3+0x74>
 1009fb0:	00800074 	movhi	r2,1
 1009fb4:	6099883a 	add	r12,r12,r2
 1009fb8:	624d883a 	add	r6,r12,r9
 1009fbc:	9187883a 	add	r3,r18,r6
 1009fc0:	88c7883a 	add	r3,r17,r3
 1009fc4:	7805883a 	mov	r2,r15
 1009fc8:	dc800217 	ldw	r18,8(sp)
 1009fcc:	dc400117 	ldw	r17,4(sp)
 1009fd0:	dc000017 	ldw	r16,0(sp)
 1009fd4:	dec00304 	addi	sp,sp,12
 1009fd8:	f800283a 	ret

01009fdc <__clzsi2>:
 1009fdc:	00bfffd4 	movui	r2,65535
 1009fe0:	11000e36 	bltu	r2,r4,100a01c <__clzsi2+0x40>
 1009fe4:	00803fc4 	movi	r2,255
 1009fe8:	01400204 	movi	r5,8
 1009fec:	0007883a 	mov	r3,zero
 1009ff0:	11001036 	bltu	r2,r4,100a034 <__clzsi2+0x58>
 1009ff4:	000b883a 	mov	r5,zero
 1009ff8:	20c6d83a 	srl	r3,r4,r3
 1009ffc:	00804074 	movhi	r2,257
 100a000:	10b9fb04 	addi	r2,r2,-6164
 100a004:	1887883a 	add	r3,r3,r2
 100a008:	18800003 	ldbu	r2,0(r3)
 100a00c:	00c00804 	movi	r3,32
 100a010:	2885883a 	add	r2,r5,r2
 100a014:	1885c83a 	sub	r2,r3,r2
 100a018:	f800283a 	ret
 100a01c:	01400404 	movi	r5,16
 100a020:	00804034 	movhi	r2,256
 100a024:	10bfffc4 	addi	r2,r2,-1
 100a028:	2807883a 	mov	r3,r5
 100a02c:	113ff22e 	bgeu	r2,r4,1009ff8 <__clzsi2+0x1c>
 100a030:	01400604 	movi	r5,24
 100a034:	2807883a 	mov	r3,r5
 100a038:	20c6d83a 	srl	r3,r4,r3
 100a03c:	00804074 	movhi	r2,257
 100a040:	10b9fb04 	addi	r2,r2,-6164
 100a044:	1887883a 	add	r3,r3,r2
 100a048:	18800003 	ldbu	r2,0(r3)
 100a04c:	00c00804 	movi	r3,32
 100a050:	2885883a 	add	r2,r5,r2
 100a054:	1885c83a 	sub	r2,r3,r2
 100a058:	f800283a 	ret

0100a05c <__pack_d>:
 100a05c:	20c00017 	ldw	r3,0(r4)
 100a060:	defffd04 	addi	sp,sp,-12
 100a064:	dc000015 	stw	r16,0(sp)
 100a068:	dc800215 	stw	r18,8(sp)
 100a06c:	dc400115 	stw	r17,4(sp)
 100a070:	00800044 	movi	r2,1
 100a074:	22000317 	ldw	r8,12(r4)
 100a078:	001f883a 	mov	r15,zero
 100a07c:	22400417 	ldw	r9,16(r4)
 100a080:	24000117 	ldw	r16,4(r4)
 100a084:	10c0552e 	bgeu	r2,r3,100a1dc <__pack_d+0x180>
 100a088:	00800104 	movi	r2,4
 100a08c:	18804f26 	beq	r3,r2,100a1cc <__pack_d+0x170>
 100a090:	00800084 	movi	r2,2
 100a094:	18800226 	beq	r3,r2,100a0a0 <__pack_d+0x44>
 100a098:	4244b03a 	or	r2,r8,r9
 100a09c:	10001a1e 	bne	r2,zero,100a108 <__pack_d+0xac>
 100a0a0:	000d883a 	mov	r6,zero
 100a0a4:	000f883a 	mov	r7,zero
 100a0a8:	0011883a 	mov	r8,zero
 100a0ac:	00800434 	movhi	r2,16
 100a0b0:	10bfffc4 	addi	r2,r2,-1
 100a0b4:	301d883a 	mov	r14,r6
 100a0b8:	3884703a 	and	r2,r7,r2
 100a0bc:	400a953a 	slli	r5,r8,20
 100a0c0:	79bffc2c 	andhi	r6,r15,65520
 100a0c4:	308cb03a 	or	r6,r6,r2
 100a0c8:	00e00434 	movhi	r3,32784
 100a0cc:	18ffffc4 	addi	r3,r3,-1
 100a0d0:	800497fa 	slli	r2,r16,31
 100a0d4:	30c6703a 	and	r3,r6,r3
 100a0d8:	1946b03a 	or	r3,r3,r5
 100a0dc:	01600034 	movhi	r5,32768
 100a0e0:	297fffc4 	addi	r5,r5,-1
 100a0e4:	194a703a 	and	r5,r3,r5
 100a0e8:	288ab03a 	or	r5,r5,r2
 100a0ec:	2807883a 	mov	r3,r5
 100a0f0:	7005883a 	mov	r2,r14
 100a0f4:	dc800217 	ldw	r18,8(sp)
 100a0f8:	dc400117 	ldw	r17,4(sp)
 100a0fc:	dc000017 	ldw	r16,0(sp)
 100a100:	dec00304 	addi	sp,sp,12
 100a104:	f800283a 	ret
 100a108:	21000217 	ldw	r4,8(r4)
 100a10c:	00bf0084 	movi	r2,-1022
 100a110:	20803f16 	blt	r4,r2,100a210 <__pack_d+0x1b4>
 100a114:	0080ffc4 	movi	r2,1023
 100a118:	11002c16 	blt	r2,r4,100a1cc <__pack_d+0x170>
 100a11c:	00803fc4 	movi	r2,255
 100a120:	408c703a 	and	r6,r8,r2
 100a124:	00802004 	movi	r2,128
 100a128:	0007883a 	mov	r3,zero
 100a12c:	000f883a 	mov	r7,zero
 100a130:	2280ffc4 	addi	r10,r4,1023
 100a134:	30801e26 	beq	r6,r2,100a1b0 <__pack_d+0x154>
 100a138:	00801fc4 	movi	r2,127
 100a13c:	4089883a 	add	r4,r8,r2
 100a140:	220d803a 	cmpltu	r6,r4,r8
 100a144:	324d883a 	add	r6,r6,r9
 100a148:	2011883a 	mov	r8,r4
 100a14c:	3013883a 	mov	r9,r6
 100a150:	00880034 	movhi	r2,8192
 100a154:	10bfffc4 	addi	r2,r2,-1
 100a158:	12400d36 	bltu	r2,r9,100a190 <__pack_d+0x134>
 100a15c:	4804963a 	slli	r2,r9,24
 100a160:	400cd23a 	srli	r6,r8,8
 100a164:	480ed23a 	srli	r7,r9,8
 100a168:	013fffc4 	movi	r4,-1
 100a16c:	118cb03a 	or	r6,r2,r6
 100a170:	01400434 	movhi	r5,16
 100a174:	297fffc4 	addi	r5,r5,-1
 100a178:	3104703a 	and	r2,r6,r4
 100a17c:	3946703a 	and	r3,r7,r5
 100a180:	5201ffcc 	andi	r8,r10,2047
 100a184:	100d883a 	mov	r6,r2
 100a188:	180f883a 	mov	r7,r3
 100a18c:	003fc706 	br	100a0ac <__pack_d+0x50>
 100a190:	480897fa 	slli	r4,r9,31
 100a194:	4004d07a 	srli	r2,r8,1
 100a198:	4806d07a 	srli	r3,r9,1
 100a19c:	52800044 	addi	r10,r10,1
 100a1a0:	2084b03a 	or	r2,r4,r2
 100a1a4:	1011883a 	mov	r8,r2
 100a1a8:	1813883a 	mov	r9,r3
 100a1ac:	003feb06 	br	100a15c <__pack_d+0x100>
 100a1b0:	383fe11e 	bne	r7,zero,100a138 <__pack_d+0xdc>
 100a1b4:	01004004 	movi	r4,256
 100a1b8:	4104703a 	and	r2,r8,r4
 100a1bc:	10c4b03a 	or	r2,r2,r3
 100a1c0:	103fe326 	beq	r2,zero,100a150 <__pack_d+0xf4>
 100a1c4:	3005883a 	mov	r2,r6
 100a1c8:	003fdc06 	br	100a13c <__pack_d+0xe0>
 100a1cc:	000d883a 	mov	r6,zero
 100a1d0:	000f883a 	mov	r7,zero
 100a1d4:	0201ffc4 	movi	r8,2047
 100a1d8:	003fb406 	br	100a0ac <__pack_d+0x50>
 100a1dc:	0005883a 	mov	r2,zero
 100a1e0:	00c00234 	movhi	r3,8
 100a1e4:	408cb03a 	or	r6,r8,r2
 100a1e8:	48ceb03a 	or	r7,r9,r3
 100a1ec:	013fffc4 	movi	r4,-1
 100a1f0:	01400434 	movhi	r5,16
 100a1f4:	297fffc4 	addi	r5,r5,-1
 100a1f8:	3104703a 	and	r2,r6,r4
 100a1fc:	3946703a 	and	r3,r7,r5
 100a200:	100d883a 	mov	r6,r2
 100a204:	180f883a 	mov	r7,r3
 100a208:	0201ffc4 	movi	r8,2047
 100a20c:	003fa706 	br	100a0ac <__pack_d+0x50>
 100a210:	1109c83a 	sub	r4,r2,r4
 100a214:	00800e04 	movi	r2,56
 100a218:	11004316 	blt	r2,r4,100a328 <__pack_d+0x2cc>
 100a21c:	21fff804 	addi	r7,r4,-32
 100a220:	38004516 	blt	r7,zero,100a338 <__pack_d+0x2dc>
 100a224:	49d8d83a 	srl	r12,r9,r7
 100a228:	001b883a 	mov	r13,zero
 100a22c:	0023883a 	mov	r17,zero
 100a230:	01400044 	movi	r5,1
 100a234:	0025883a 	mov	r18,zero
 100a238:	38004716 	blt	r7,zero,100a358 <__pack_d+0x2fc>
 100a23c:	29d6983a 	sll	r11,r5,r7
 100a240:	0015883a 	mov	r10,zero
 100a244:	00bfffc4 	movi	r2,-1
 100a248:	5089883a 	add	r4,r10,r2
 100a24c:	588b883a 	add	r5,r11,r2
 100a250:	228d803a 	cmpltu	r6,r4,r10
 100a254:	314b883a 	add	r5,r6,r5
 100a258:	4104703a 	and	r2,r8,r4
 100a25c:	4946703a 	and	r3,r9,r5
 100a260:	10c4b03a 	or	r2,r2,r3
 100a264:	10000226 	beq	r2,zero,100a270 <__pack_d+0x214>
 100a268:	04400044 	movi	r17,1
 100a26c:	0025883a 	mov	r18,zero
 100a270:	00803fc4 	movi	r2,255
 100a274:	644eb03a 	or	r7,r12,r17
 100a278:	3892703a 	and	r9,r7,r2
 100a27c:	00802004 	movi	r2,128
 100a280:	6c90b03a 	or	r8,r13,r18
 100a284:	0015883a 	mov	r10,zero
 100a288:	48801626 	beq	r9,r2,100a2e4 <__pack_d+0x288>
 100a28c:	01001fc4 	movi	r4,127
 100a290:	3905883a 	add	r2,r7,r4
 100a294:	11cd803a 	cmpltu	r6,r2,r7
 100a298:	320d883a 	add	r6,r6,r8
 100a29c:	100f883a 	mov	r7,r2
 100a2a0:	00840034 	movhi	r2,4096
 100a2a4:	10bfffc4 	addi	r2,r2,-1
 100a2a8:	3011883a 	mov	r8,r6
 100a2ac:	0007883a 	mov	r3,zero
 100a2b0:	11801b36 	bltu	r2,r6,100a320 <__pack_d+0x2c4>
 100a2b4:	4004963a 	slli	r2,r8,24
 100a2b8:	3808d23a 	srli	r4,r7,8
 100a2bc:	400ad23a 	srli	r5,r8,8
 100a2c0:	1813883a 	mov	r9,r3
 100a2c4:	1108b03a 	or	r4,r2,r4
 100a2c8:	00bfffc4 	movi	r2,-1
 100a2cc:	00c00434 	movhi	r3,16
 100a2d0:	18ffffc4 	addi	r3,r3,-1
 100a2d4:	208c703a 	and	r6,r4,r2
 100a2d8:	28ce703a 	and	r7,r5,r3
 100a2dc:	4a01ffcc 	andi	r8,r9,2047
 100a2e0:	003f7206 	br	100a0ac <__pack_d+0x50>
 100a2e4:	503fe91e 	bne	r10,zero,100a28c <__pack_d+0x230>
 100a2e8:	01004004 	movi	r4,256
 100a2ec:	3904703a 	and	r2,r7,r4
 100a2f0:	0007883a 	mov	r3,zero
 100a2f4:	10c4b03a 	or	r2,r2,r3
 100a2f8:	10000626 	beq	r2,zero,100a314 <__pack_d+0x2b8>
 100a2fc:	3a45883a 	add	r2,r7,r9
 100a300:	11cd803a 	cmpltu	r6,r2,r7
 100a304:	320d883a 	add	r6,r6,r8
 100a308:	100f883a 	mov	r7,r2
 100a30c:	3011883a 	mov	r8,r6
 100a310:	0007883a 	mov	r3,zero
 100a314:	00840034 	movhi	r2,4096
 100a318:	10bfffc4 	addi	r2,r2,-1
 100a31c:	123fe52e 	bgeu	r2,r8,100a2b4 <__pack_d+0x258>
 100a320:	00c00044 	movi	r3,1
 100a324:	003fe306 	br	100a2b4 <__pack_d+0x258>
 100a328:	0009883a 	mov	r4,zero
 100a32c:	0013883a 	mov	r9,zero
 100a330:	000b883a 	mov	r5,zero
 100a334:	003fe406 	br	100a2c8 <__pack_d+0x26c>
 100a338:	4a47883a 	add	r3,r9,r9
 100a33c:	008007c4 	movi	r2,31
 100a340:	1105c83a 	sub	r2,r2,r4
 100a344:	1886983a 	sll	r3,r3,r2
 100a348:	4118d83a 	srl	r12,r8,r4
 100a34c:	491ad83a 	srl	r13,r9,r4
 100a350:	1b18b03a 	or	r12,r3,r12
 100a354:	003fb506 	br	100a22c <__pack_d+0x1d0>
 100a358:	2806d07a 	srli	r3,r5,1
 100a35c:	008007c4 	movi	r2,31
 100a360:	1105c83a 	sub	r2,r2,r4
 100a364:	1896d83a 	srl	r11,r3,r2
 100a368:	2914983a 	sll	r10,r5,r4
 100a36c:	003fb506 	br	100a244 <__pack_d+0x1e8>

0100a370 <__unpack_d>:
 100a370:	20c00117 	ldw	r3,4(r4)
 100a374:	22400017 	ldw	r9,0(r4)
 100a378:	00800434 	movhi	r2,16
 100a37c:	10bfffc4 	addi	r2,r2,-1
 100a380:	1808d53a 	srli	r4,r3,20
 100a384:	180cd7fa 	srli	r6,r3,31
 100a388:	1894703a 	and	r10,r3,r2
 100a38c:	2201ffcc 	andi	r8,r4,2047
 100a390:	281b883a 	mov	r13,r5
 100a394:	4817883a 	mov	r11,r9
 100a398:	29800115 	stw	r6,4(r5)
 100a39c:	5019883a 	mov	r12,r10
 100a3a0:	40001e1e 	bne	r8,zero,100a41c <__unpack_d+0xac>
 100a3a4:	4a84b03a 	or	r2,r9,r10
 100a3a8:	10001926 	beq	r2,zero,100a410 <__unpack_d+0xa0>
 100a3ac:	4804d63a 	srli	r2,r9,24
 100a3b0:	500c923a 	slli	r6,r10,8
 100a3b4:	013f0084 	movi	r4,-1022
 100a3b8:	00c40034 	movhi	r3,4096
 100a3bc:	18ffffc4 	addi	r3,r3,-1
 100a3c0:	118cb03a 	or	r6,r2,r6
 100a3c4:	008000c4 	movi	r2,3
 100a3c8:	480a923a 	slli	r5,r9,8
 100a3cc:	68800015 	stw	r2,0(r13)
 100a3d0:	69000215 	stw	r4,8(r13)
 100a3d4:	19800b36 	bltu	r3,r6,100a404 <__unpack_d+0x94>
 100a3d8:	200f883a 	mov	r7,r4
 100a3dc:	1811883a 	mov	r8,r3
 100a3e0:	2945883a 	add	r2,r5,r5
 100a3e4:	1149803a 	cmpltu	r4,r2,r5
 100a3e8:	3187883a 	add	r3,r6,r6
 100a3ec:	20c9883a 	add	r4,r4,r3
 100a3f0:	100b883a 	mov	r5,r2
 100a3f4:	200d883a 	mov	r6,r4
 100a3f8:	39ffffc4 	addi	r7,r7,-1
 100a3fc:	413ff82e 	bgeu	r8,r4,100a3e0 <__unpack_d+0x70>
 100a400:	69c00215 	stw	r7,8(r13)
 100a404:	69800415 	stw	r6,16(r13)
 100a408:	69400315 	stw	r5,12(r13)
 100a40c:	f800283a 	ret
 100a410:	00800084 	movi	r2,2
 100a414:	28800015 	stw	r2,0(r5)
 100a418:	f800283a 	ret
 100a41c:	0081ffc4 	movi	r2,2047
 100a420:	40800f26 	beq	r8,r2,100a460 <__unpack_d+0xf0>
 100a424:	480cd63a 	srli	r6,r9,24
 100a428:	5006923a 	slli	r3,r10,8
 100a42c:	4804923a 	slli	r2,r9,8
 100a430:	0009883a 	mov	r4,zero
 100a434:	30c6b03a 	or	r3,r6,r3
 100a438:	01440034 	movhi	r5,4096
 100a43c:	110cb03a 	or	r6,r2,r4
 100a440:	423f0044 	addi	r8,r8,-1023
 100a444:	194eb03a 	or	r7,r3,r5
 100a448:	008000c4 	movi	r2,3
 100a44c:	69c00415 	stw	r7,16(r13)
 100a450:	6a000215 	stw	r8,8(r13)
 100a454:	68800015 	stw	r2,0(r13)
 100a458:	69800315 	stw	r6,12(r13)
 100a45c:	f800283a 	ret
 100a460:	4a84b03a 	or	r2,r9,r10
 100a464:	1000031e 	bne	r2,zero,100a474 <__unpack_d+0x104>
 100a468:	00800104 	movi	r2,4
 100a46c:	28800015 	stw	r2,0(r5)
 100a470:	f800283a 	ret
 100a474:	0009883a 	mov	r4,zero
 100a478:	01400234 	movhi	r5,8
 100a47c:	4904703a 	and	r2,r9,r4
 100a480:	5146703a 	and	r3,r10,r5
 100a484:	10c4b03a 	or	r2,r2,r3
 100a488:	10000526 	beq	r2,zero,100a4a0 <__unpack_d+0x130>
 100a48c:	00800044 	movi	r2,1
 100a490:	68800015 	stw	r2,0(r13)
 100a494:	6b000415 	stw	r12,16(r13)
 100a498:	6ac00315 	stw	r11,12(r13)
 100a49c:	f800283a 	ret
 100a4a0:	68000015 	stw	zero,0(r13)
 100a4a4:	003ffb06 	br	100a494 <__unpack_d+0x124>

0100a4a8 <__fpcmp_parts_d>:
 100a4a8:	21800017 	ldw	r6,0(r4)
 100a4ac:	00c00044 	movi	r3,1
 100a4b0:	19800a2e 	bgeu	r3,r6,100a4dc <__fpcmp_parts_d+0x34>
 100a4b4:	28800017 	ldw	r2,0(r5)
 100a4b8:	1880082e 	bgeu	r3,r2,100a4dc <__fpcmp_parts_d+0x34>
 100a4bc:	00c00104 	movi	r3,4
 100a4c0:	30c02626 	beq	r6,r3,100a55c <__fpcmp_parts_d+0xb4>
 100a4c4:	10c02226 	beq	r2,r3,100a550 <__fpcmp_parts_d+0xa8>
 100a4c8:	00c00084 	movi	r3,2
 100a4cc:	30c00526 	beq	r6,r3,100a4e4 <__fpcmp_parts_d+0x3c>
 100a4d0:	10c0071e 	bne	r2,r3,100a4f0 <__fpcmp_parts_d+0x48>
 100a4d4:	20800117 	ldw	r2,4(r4)
 100a4d8:	1000091e 	bne	r2,zero,100a500 <__fpcmp_parts_d+0x58>
 100a4dc:	00800044 	movi	r2,1
 100a4e0:	f800283a 	ret
 100a4e4:	10c01a1e 	bne	r2,r3,100a550 <__fpcmp_parts_d+0xa8>
 100a4e8:	0005883a 	mov	r2,zero
 100a4ec:	f800283a 	ret
 100a4f0:	22000117 	ldw	r8,4(r4)
 100a4f4:	28800117 	ldw	r2,4(r5)
 100a4f8:	40800326 	beq	r8,r2,100a508 <__fpcmp_parts_d+0x60>
 100a4fc:	403ff726 	beq	r8,zero,100a4dc <__fpcmp_parts_d+0x34>
 100a500:	00bfffc4 	movi	r2,-1
 100a504:	f800283a 	ret
 100a508:	20c00217 	ldw	r3,8(r4)
 100a50c:	28800217 	ldw	r2,8(r5)
 100a510:	10fffa16 	blt	r2,r3,100a4fc <__fpcmp_parts_d+0x54>
 100a514:	18800916 	blt	r3,r2,100a53c <__fpcmp_parts_d+0x94>
 100a518:	21c00417 	ldw	r7,16(r4)
 100a51c:	28c00417 	ldw	r3,16(r5)
 100a520:	21800317 	ldw	r6,12(r4)
 100a524:	28800317 	ldw	r2,12(r5)
 100a528:	19fff436 	bltu	r3,r7,100a4fc <__fpcmp_parts_d+0x54>
 100a52c:	38c00526 	beq	r7,r3,100a544 <__fpcmp_parts_d+0x9c>
 100a530:	38c00236 	bltu	r7,r3,100a53c <__fpcmp_parts_d+0x94>
 100a534:	19ffec1e 	bne	r3,r7,100a4e8 <__fpcmp_parts_d+0x40>
 100a538:	30bfeb2e 	bgeu	r6,r2,100a4e8 <__fpcmp_parts_d+0x40>
 100a53c:	403fe71e 	bne	r8,zero,100a4dc <__fpcmp_parts_d+0x34>
 100a540:	003fef06 	br	100a500 <__fpcmp_parts_d+0x58>
 100a544:	11bffa2e 	bgeu	r2,r6,100a530 <__fpcmp_parts_d+0x88>
 100a548:	403fe426 	beq	r8,zero,100a4dc <__fpcmp_parts_d+0x34>
 100a54c:	003fec06 	br	100a500 <__fpcmp_parts_d+0x58>
 100a550:	28800117 	ldw	r2,4(r5)
 100a554:	103fe11e 	bne	r2,zero,100a4dc <__fpcmp_parts_d+0x34>
 100a558:	003fe906 	br	100a500 <__fpcmp_parts_d+0x58>
 100a55c:	11bfdd1e 	bne	r2,r6,100a4d4 <__fpcmp_parts_d+0x2c>
 100a560:	28c00117 	ldw	r3,4(r5)
 100a564:	20800117 	ldw	r2,4(r4)
 100a568:	1885c83a 	sub	r2,r3,r2
 100a56c:	f800283a 	ret

0100a570 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100a570:	defff804 	addi	sp,sp,-32
 100a574:	dfc00715 	stw	ra,28(sp)
 100a578:	df000615 	stw	fp,24(sp)
 100a57c:	df000604 	addi	fp,sp,24
 100a580:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100a584:	e0bffc17 	ldw	r2,-16(fp)
 100a588:	1004803a 	cmplt	r2,r2,zero
 100a58c:	1000081e 	bne	r2,zero,100a5b0 <close+0x40>
 100a590:	e0bffc17 	ldw	r2,-16(fp)
 100a594:	10800324 	muli	r2,r2,12
 100a598:	1007883a 	mov	r3,r2
 100a59c:	00804074 	movhi	r2,257
 100a5a0:	10bc8a04 	addi	r2,r2,-3544
 100a5a4:	1887883a 	add	r3,r3,r2
 100a5a8:	e0ffff15 	stw	r3,-4(fp)
 100a5ac:	00000106 	br	100a5b4 <close+0x44>
 100a5b0:	e03fff15 	stw	zero,-4(fp)
 100a5b4:	e0bfff17 	ldw	r2,-4(fp)
 100a5b8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a5bc:	e0bffb17 	ldw	r2,-20(fp)
 100a5c0:	1005003a 	cmpeq	r2,r2,zero
 100a5c4:	10001d1e 	bne	r2,zero,100a63c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a5c8:	e0bffb17 	ldw	r2,-20(fp)
 100a5cc:	10800017 	ldw	r2,0(r2)
 100a5d0:	10800417 	ldw	r2,16(r2)
 100a5d4:	1005003a 	cmpeq	r2,r2,zero
 100a5d8:	1000071e 	bne	r2,zero,100a5f8 <close+0x88>
 100a5dc:	e0bffb17 	ldw	r2,-20(fp)
 100a5e0:	10800017 	ldw	r2,0(r2)
 100a5e4:	10800417 	ldw	r2,16(r2)
 100a5e8:	e13ffb17 	ldw	r4,-20(fp)
 100a5ec:	103ee83a 	callr	r2
 100a5f0:	e0bffe15 	stw	r2,-8(fp)
 100a5f4:	00000106 	br	100a5fc <close+0x8c>
 100a5f8:	e03ffe15 	stw	zero,-8(fp)
 100a5fc:	e0bffe17 	ldw	r2,-8(fp)
 100a600:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a604:	e13ffc17 	ldw	r4,-16(fp)
 100a608:	100af740 	call	100af74 <alt_release_fd>
    if (rval < 0)
 100a60c:	e0bffa17 	ldw	r2,-24(fp)
 100a610:	1004403a 	cmpge	r2,r2,zero
 100a614:	1000071e 	bne	r2,zero,100a634 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100a618:	100a66c0 	call	100a66c <alt_get_errno>
 100a61c:	e0fffa17 	ldw	r3,-24(fp)
 100a620:	00c7c83a 	sub	r3,zero,r3
 100a624:	10c00015 	stw	r3,0(r2)
      return -1;
 100a628:	00bfffc4 	movi	r2,-1
 100a62c:	e0bffd15 	stw	r2,-12(fp)
 100a630:	00000806 	br	100a654 <close+0xe4>
    }
    return 0;
 100a634:	e03ffd15 	stw	zero,-12(fp)
 100a638:	00000606 	br	100a654 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a63c:	100a66c0 	call	100a66c <alt_get_errno>
 100a640:	1007883a 	mov	r3,r2
 100a644:	00801444 	movi	r2,81
 100a648:	18800015 	stw	r2,0(r3)
    return -1;
 100a64c:	00bfffc4 	movi	r2,-1
 100a650:	e0bffd15 	stw	r2,-12(fp)
 100a654:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a658:	e037883a 	mov	sp,fp
 100a65c:	dfc00117 	ldw	ra,4(sp)
 100a660:	df000017 	ldw	fp,0(sp)
 100a664:	dec00204 	addi	sp,sp,8
 100a668:	f800283a 	ret

0100a66c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a66c:	defffd04 	addi	sp,sp,-12
 100a670:	dfc00215 	stw	ra,8(sp)
 100a674:	df000115 	stw	fp,4(sp)
 100a678:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a67c:	00804074 	movhi	r2,257
 100a680:	10818604 	addi	r2,r2,1560
 100a684:	10800017 	ldw	r2,0(r2)
 100a688:	1005003a 	cmpeq	r2,r2,zero
 100a68c:	1000061e 	bne	r2,zero,100a6a8 <alt_get_errno+0x3c>
 100a690:	00804074 	movhi	r2,257
 100a694:	10818604 	addi	r2,r2,1560
 100a698:	10800017 	ldw	r2,0(r2)
 100a69c:	103ee83a 	callr	r2
 100a6a0:	e0bfff15 	stw	r2,-4(fp)
 100a6a4:	00000306 	br	100a6b4 <alt_get_errno+0x48>
 100a6a8:	00804074 	movhi	r2,257
 100a6ac:	1088a804 	addi	r2,r2,8864
 100a6b0:	e0bfff15 	stw	r2,-4(fp)
 100a6b4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a6b8:	e037883a 	mov	sp,fp
 100a6bc:	dfc00117 	ldw	ra,4(sp)
 100a6c0:	df000017 	ldw	fp,0(sp)
 100a6c4:	dec00204 	addi	sp,sp,8
 100a6c8:	f800283a 	ret

0100a6cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a6cc:	defffc04 	addi	sp,sp,-16
 100a6d0:	df000315 	stw	fp,12(sp)
 100a6d4:	df000304 	addi	fp,sp,12
 100a6d8:	e13ffd15 	stw	r4,-12(fp)
 100a6dc:	e17ffe15 	stw	r5,-8(fp)
 100a6e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a6e4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a6e8:	e037883a 	mov	sp,fp
 100a6ec:	df000017 	ldw	fp,0(sp)
 100a6f0:	dec00104 	addi	sp,sp,4
 100a6f4:	f800283a 	ret

0100a6f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a6f8:	defff904 	addi	sp,sp,-28
 100a6fc:	dfc00615 	stw	ra,24(sp)
 100a700:	df000515 	stw	fp,20(sp)
 100a704:	df000504 	addi	fp,sp,20
 100a708:	e13ffc15 	stw	r4,-16(fp)
 100a70c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a710:	e0bffc17 	ldw	r2,-16(fp)
 100a714:	1004803a 	cmplt	r2,r2,zero
 100a718:	1000081e 	bne	r2,zero,100a73c <fstat+0x44>
 100a71c:	e0bffc17 	ldw	r2,-16(fp)
 100a720:	10800324 	muli	r2,r2,12
 100a724:	1007883a 	mov	r3,r2
 100a728:	00804074 	movhi	r2,257
 100a72c:	10bc8a04 	addi	r2,r2,-3544
 100a730:	1887883a 	add	r3,r3,r2
 100a734:	e0ffff15 	stw	r3,-4(fp)
 100a738:	00000106 	br	100a740 <fstat+0x48>
 100a73c:	e03fff15 	stw	zero,-4(fp)
 100a740:	e0bfff17 	ldw	r2,-4(fp)
 100a744:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a748:	e0bffb17 	ldw	r2,-20(fp)
 100a74c:	1005003a 	cmpeq	r2,r2,zero
 100a750:	1000121e 	bne	r2,zero,100a79c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a754:	e0bffb17 	ldw	r2,-20(fp)
 100a758:	10800017 	ldw	r2,0(r2)
 100a75c:	10800817 	ldw	r2,32(r2)
 100a760:	1005003a 	cmpeq	r2,r2,zero
 100a764:	1000081e 	bne	r2,zero,100a788 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100a768:	e0bffb17 	ldw	r2,-20(fp)
 100a76c:	10800017 	ldw	r2,0(r2)
 100a770:	10800817 	ldw	r2,32(r2)
 100a774:	e13ffb17 	ldw	r4,-20(fp)
 100a778:	e17ffd17 	ldw	r5,-12(fp)
 100a77c:	103ee83a 	callr	r2
 100a780:	e0bffe15 	stw	r2,-8(fp)
 100a784:	00000b06 	br	100a7b4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a788:	e0fffd17 	ldw	r3,-12(fp)
 100a78c:	00880004 	movi	r2,8192
 100a790:	18800115 	stw	r2,4(r3)
      return 0;
 100a794:	e03ffe15 	stw	zero,-8(fp)
 100a798:	00000606 	br	100a7b4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a79c:	100a7cc0 	call	100a7cc <alt_get_errno>
 100a7a0:	1007883a 	mov	r3,r2
 100a7a4:	00801444 	movi	r2,81
 100a7a8:	18800015 	stw	r2,0(r3)
    return -1;
 100a7ac:	00bfffc4 	movi	r2,-1
 100a7b0:	e0bffe15 	stw	r2,-8(fp)
 100a7b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a7b8:	e037883a 	mov	sp,fp
 100a7bc:	dfc00117 	ldw	ra,4(sp)
 100a7c0:	df000017 	ldw	fp,0(sp)
 100a7c4:	dec00204 	addi	sp,sp,8
 100a7c8:	f800283a 	ret

0100a7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a7cc:	defffd04 	addi	sp,sp,-12
 100a7d0:	dfc00215 	stw	ra,8(sp)
 100a7d4:	df000115 	stw	fp,4(sp)
 100a7d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a7dc:	00804074 	movhi	r2,257
 100a7e0:	10818604 	addi	r2,r2,1560
 100a7e4:	10800017 	ldw	r2,0(r2)
 100a7e8:	1005003a 	cmpeq	r2,r2,zero
 100a7ec:	1000061e 	bne	r2,zero,100a808 <alt_get_errno+0x3c>
 100a7f0:	00804074 	movhi	r2,257
 100a7f4:	10818604 	addi	r2,r2,1560
 100a7f8:	10800017 	ldw	r2,0(r2)
 100a7fc:	103ee83a 	callr	r2
 100a800:	e0bfff15 	stw	r2,-4(fp)
 100a804:	00000306 	br	100a814 <alt_get_errno+0x48>
 100a808:	00804074 	movhi	r2,257
 100a80c:	1088a804 	addi	r2,r2,8864
 100a810:	e0bfff15 	stw	r2,-4(fp)
 100a814:	e0bfff17 	ldw	r2,-4(fp)
}
 100a818:	e037883a 	mov	sp,fp
 100a81c:	dfc00117 	ldw	ra,4(sp)
 100a820:	df000017 	ldw	fp,0(sp)
 100a824:	dec00204 	addi	sp,sp,8
 100a828:	f800283a 	ret

0100a82c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100a82c:	deffef04 	addi	sp,sp,-68
 100a830:	df001015 	stw	fp,64(sp)
 100a834:	df001004 	addi	fp,sp,64
 100a838:	e13ffc15 	stw	r4,-16(fp)
 100a83c:	e17ffd15 	stw	r5,-12(fp)
 100a840:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 100a844:	00bffa84 	movi	r2,-22
 100a848:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100a84c:	e0bffc17 	ldw	r2,-16(fp)
 100a850:	10800828 	cmpgeui	r2,r2,32
 100a854:	1000601e 	bne	r2,zero,100a9d8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a858:	0005303a 	rdctl	r2,status
 100a85c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a860:	e0fff917 	ldw	r3,-28(fp)
 100a864:	00bfff84 	movi	r2,-2
 100a868:	1884703a 	and	r2,r3,r2
 100a86c:	1001703a 	wrctl	status,r2
  
  return context;
 100a870:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100a874:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 100a878:	e0bffc17 	ldw	r2,-16(fp)
 100a87c:	00c04074 	movhi	r3,257
 100a880:	18c9fb04 	addi	r3,r3,10220
 100a884:	100490fa 	slli	r2,r2,3
 100a888:	10c7883a 	add	r3,r2,r3
 100a88c:	e0bffe17 	ldw	r2,-8(fp)
 100a890:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 100a894:	e0bffc17 	ldw	r2,-16(fp)
 100a898:	00c04074 	movhi	r3,257
 100a89c:	18c9fb04 	addi	r3,r3,10220
 100a8a0:	100490fa 	slli	r2,r2,3
 100a8a4:	10c5883a 	add	r2,r2,r3
 100a8a8:	10c00104 	addi	r3,r2,4
 100a8ac:	e0bffd17 	ldw	r2,-12(fp)
 100a8b0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100a8b4:	e0bffe17 	ldw	r2,-8(fp)
 100a8b8:	1005003a 	cmpeq	r2,r2,zero
 100a8bc:	1000201e 	bne	r2,zero,100a940 <alt_irq_register+0x114>
 100a8c0:	e0bffc17 	ldw	r2,-16(fp)
 100a8c4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a8c8:	0005303a 	rdctl	r2,status
 100a8cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a8d0:	e0fff617 	ldw	r3,-40(fp)
 100a8d4:	00bfff84 	movi	r2,-2
 100a8d8:	1884703a 	and	r2,r3,r2
 100a8dc:	1001703a 	wrctl	status,r2
  
  return context;
 100a8e0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100a8e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100a8e8:	e0fff717 	ldw	r3,-36(fp)
 100a8ec:	00800044 	movi	r2,1
 100a8f0:	10c4983a 	sll	r2,r2,r3
 100a8f4:	1007883a 	mov	r3,r2
 100a8f8:	00804074 	movhi	r2,257
 100a8fc:	1088a904 	addi	r2,r2,8868
 100a900:	10800017 	ldw	r2,0(r2)
 100a904:	1886b03a 	or	r3,r3,r2
 100a908:	00804074 	movhi	r2,257
 100a90c:	1088a904 	addi	r2,r2,8868
 100a910:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100a914:	00804074 	movhi	r2,257
 100a918:	1088a904 	addi	r2,r2,8868
 100a91c:	10800017 	ldw	r2,0(r2)
 100a920:	100170fa 	wrctl	ienable,r2
 100a924:	e0bff817 	ldw	r2,-32(fp)
 100a928:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a92c:	e0bff517 	ldw	r2,-44(fp)
 100a930:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100a934:	0005883a 	mov	r2,zero
 100a938:	e0bfff15 	stw	r2,-4(fp)
 100a93c:	00002006 	br	100a9c0 <alt_irq_register+0x194>
 100a940:	e0bffc17 	ldw	r2,-16(fp)
 100a944:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a948:	0005303a 	rdctl	r2,status
 100a94c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a950:	e0fff217 	ldw	r3,-56(fp)
 100a954:	00bfff84 	movi	r2,-2
 100a958:	1884703a 	and	r2,r3,r2
 100a95c:	1001703a 	wrctl	status,r2
  
  return context;
 100a960:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100a964:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100a968:	e0fff317 	ldw	r3,-52(fp)
 100a96c:	00800044 	movi	r2,1
 100a970:	10c4983a 	sll	r2,r2,r3
 100a974:	0084303a 	nor	r2,zero,r2
 100a978:	1007883a 	mov	r3,r2
 100a97c:	00804074 	movhi	r2,257
 100a980:	1088a904 	addi	r2,r2,8868
 100a984:	10800017 	ldw	r2,0(r2)
 100a988:	1886703a 	and	r3,r3,r2
 100a98c:	00804074 	movhi	r2,257
 100a990:	1088a904 	addi	r2,r2,8868
 100a994:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100a998:	00804074 	movhi	r2,257
 100a99c:	1088a904 	addi	r2,r2,8868
 100a9a0:	10800017 	ldw	r2,0(r2)
 100a9a4:	100170fa 	wrctl	ienable,r2
 100a9a8:	e0bff417 	ldw	r2,-48(fp)
 100a9ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a9b0:	e0bff117 	ldw	r2,-60(fp)
 100a9b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100a9b8:	0005883a 	mov	r2,zero
 100a9bc:	e0bfff15 	stw	r2,-4(fp)
 100a9c0:	e0bfff17 	ldw	r2,-4(fp)
 100a9c4:	e0bffb15 	stw	r2,-20(fp)
 100a9c8:	e0bffa17 	ldw	r2,-24(fp)
 100a9cc:	e0bff015 	stw	r2,-64(fp)
 100a9d0:	e0bff017 	ldw	r2,-64(fp)
 100a9d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100a9d8:	e0bffb17 	ldw	r2,-20(fp)
}
 100a9dc:	e037883a 	mov	sp,fp
 100a9e0:	df000017 	ldw	fp,0(sp)
 100a9e4:	dec00104 	addi	sp,sp,4
 100a9e8:	f800283a 	ret

0100a9ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a9ec:	deffeb04 	addi	sp,sp,-84
 100a9f0:	dfc01415 	stw	ra,80(sp)
 100a9f4:	df001315 	stw	fp,76(sp)
 100a9f8:	df001304 	addi	fp,sp,76
 100a9fc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100aa00:	e0bffd17 	ldw	r2,-12(fp)
 100aa04:	1004803a 	cmplt	r2,r2,zero
 100aa08:	1000081e 	bne	r2,zero,100aa2c <isatty+0x40>
 100aa0c:	e0bffd17 	ldw	r2,-12(fp)
 100aa10:	10800324 	muli	r2,r2,12
 100aa14:	1007883a 	mov	r3,r2
 100aa18:	00804074 	movhi	r2,257
 100aa1c:	10bc8a04 	addi	r2,r2,-3544
 100aa20:	1887883a 	add	r3,r3,r2
 100aa24:	e0ffff15 	stw	r3,-4(fp)
 100aa28:	00000106 	br	100aa30 <isatty+0x44>
 100aa2c:	e03fff15 	stw	zero,-4(fp)
 100aa30:	e0bfff17 	ldw	r2,-4(fp)
 100aa34:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100aa38:	e0bfed17 	ldw	r2,-76(fp)
 100aa3c:	1005003a 	cmpeq	r2,r2,zero
 100aa40:	10000f1e 	bne	r2,zero,100aa80 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100aa44:	e0bfed17 	ldw	r2,-76(fp)
 100aa48:	10800017 	ldw	r2,0(r2)
 100aa4c:	10800817 	ldw	r2,32(r2)
 100aa50:	1004c03a 	cmpne	r2,r2,zero
 100aa54:	1000031e 	bne	r2,zero,100aa64 <isatty+0x78>
    {
      return 1;
 100aa58:	00800044 	movi	r2,1
 100aa5c:	e0bffe15 	stw	r2,-8(fp)
 100aa60:	00000c06 	br	100aa94 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100aa64:	e17fee04 	addi	r5,fp,-72
 100aa68:	e13ffd17 	ldw	r4,-12(fp)
 100aa6c:	100a6f80 	call	100a6f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100aa70:	e0bfef17 	ldw	r2,-68(fp)
 100aa74:	10880020 	cmpeqi	r2,r2,8192
 100aa78:	e0bffe15 	stw	r2,-8(fp)
 100aa7c:	00000506 	br	100aa94 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100aa80:	100aaac0 	call	100aaac <alt_get_errno>
 100aa84:	1007883a 	mov	r3,r2
 100aa88:	00801444 	movi	r2,81
 100aa8c:	18800015 	stw	r2,0(r3)
    return 0;
 100aa90:	e03ffe15 	stw	zero,-8(fp)
 100aa94:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100aa98:	e037883a 	mov	sp,fp
 100aa9c:	dfc00117 	ldw	ra,4(sp)
 100aaa0:	df000017 	ldw	fp,0(sp)
 100aaa4:	dec00204 	addi	sp,sp,8
 100aaa8:	f800283a 	ret

0100aaac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aaac:	defffd04 	addi	sp,sp,-12
 100aab0:	dfc00215 	stw	ra,8(sp)
 100aab4:	df000115 	stw	fp,4(sp)
 100aab8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100aabc:	00804074 	movhi	r2,257
 100aac0:	10818604 	addi	r2,r2,1560
 100aac4:	10800017 	ldw	r2,0(r2)
 100aac8:	1005003a 	cmpeq	r2,r2,zero
 100aacc:	1000061e 	bne	r2,zero,100aae8 <alt_get_errno+0x3c>
 100aad0:	00804074 	movhi	r2,257
 100aad4:	10818604 	addi	r2,r2,1560
 100aad8:	10800017 	ldw	r2,0(r2)
 100aadc:	103ee83a 	callr	r2
 100aae0:	e0bfff15 	stw	r2,-4(fp)
 100aae4:	00000306 	br	100aaf4 <alt_get_errno+0x48>
 100aae8:	00804074 	movhi	r2,257
 100aaec:	1088a804 	addi	r2,r2,8864
 100aaf0:	e0bfff15 	stw	r2,-4(fp)
 100aaf4:	e0bfff17 	ldw	r2,-4(fp)
}
 100aaf8:	e037883a 	mov	sp,fp
 100aafc:	dfc00117 	ldw	ra,4(sp)
 100ab00:	df000017 	ldw	fp,0(sp)
 100ab04:	dec00204 	addi	sp,sp,8
 100ab08:	f800283a 	ret

0100ab0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100ab0c:	defffe04 	addi	sp,sp,-8
 100ab10:	dfc00115 	stw	ra,4(sp)
 100ab14:	df000015 	stw	fp,0(sp)
 100ab18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100ab1c:	01004074 	movhi	r4,257
 100ab20:	21018b04 	addi	r4,r4,1580
 100ab24:	01404074 	movhi	r5,257
 100ab28:	297a7b04 	addi	r5,r5,-5652
 100ab2c:	01804074 	movhi	r6,257
 100ab30:	31818b04 	addi	r6,r6,1580
 100ab34:	100ab8c0 	call	100ab8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100ab38:	01004034 	movhi	r4,256
 100ab3c:	21000804 	addi	r4,r4,32
 100ab40:	01404034 	movhi	r5,256
 100ab44:	29400804 	addi	r5,r5,32
 100ab48:	01804034 	movhi	r6,256
 100ab4c:	31806e04 	addi	r6,r6,440
 100ab50:	100ab8c0 	call	100ab8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100ab54:	01004074 	movhi	r4,257
 100ab58:	21395004 	addi	r4,r4,-6848
 100ab5c:	01404074 	movhi	r5,257
 100ab60:	29795004 	addi	r5,r5,-6848
 100ab64:	01804074 	movhi	r6,257
 100ab68:	31ba7b04 	addi	r6,r6,-5652
 100ab6c:	100ab8c0 	call	100ab8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100ab70:	100d5b80 	call	100d5b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100ab74:	100d86c0 	call	100d86c <alt_icache_flush_all>
}
 100ab78:	e037883a 	mov	sp,fp
 100ab7c:	dfc00117 	ldw	ra,4(sp)
 100ab80:	df000017 	ldw	fp,0(sp)
 100ab84:	dec00204 	addi	sp,sp,8
 100ab88:	f800283a 	ret

0100ab8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100ab8c:	defffc04 	addi	sp,sp,-16
 100ab90:	df000315 	stw	fp,12(sp)
 100ab94:	df000304 	addi	fp,sp,12
 100ab98:	e13ffd15 	stw	r4,-12(fp)
 100ab9c:	e17ffe15 	stw	r5,-8(fp)
 100aba0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100aba4:	e0fffe17 	ldw	r3,-8(fp)
 100aba8:	e0bffd17 	ldw	r2,-12(fp)
 100abac:	18800e26 	beq	r3,r2,100abe8 <alt_load_section+0x5c>
  {
    while( to != end )
 100abb0:	00000a06 	br	100abdc <alt_load_section+0x50>
    {
      *to++ = *from++;
 100abb4:	e0bffd17 	ldw	r2,-12(fp)
 100abb8:	10c00017 	ldw	r3,0(r2)
 100abbc:	e0bffe17 	ldw	r2,-8(fp)
 100abc0:	10c00015 	stw	r3,0(r2)
 100abc4:	e0bffe17 	ldw	r2,-8(fp)
 100abc8:	10800104 	addi	r2,r2,4
 100abcc:	e0bffe15 	stw	r2,-8(fp)
 100abd0:	e0bffd17 	ldw	r2,-12(fp)
 100abd4:	10800104 	addi	r2,r2,4
 100abd8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100abdc:	e0fffe17 	ldw	r3,-8(fp)
 100abe0:	e0bfff17 	ldw	r2,-4(fp)
 100abe4:	18bff31e 	bne	r3,r2,100abb4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100abe8:	e037883a 	mov	sp,fp
 100abec:	df000017 	ldw	fp,0(sp)
 100abf0:	dec00104 	addi	sp,sp,4
 100abf4:	f800283a 	ret

0100abf8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100abf8:	defff804 	addi	sp,sp,-32
 100abfc:	dfc00715 	stw	ra,28(sp)
 100ac00:	df000615 	stw	fp,24(sp)
 100ac04:	df000604 	addi	fp,sp,24
 100ac08:	e13ffc15 	stw	r4,-16(fp)
 100ac0c:	e17ffd15 	stw	r5,-12(fp)
 100ac10:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100ac14:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ac18:	e0bffc17 	ldw	r2,-16(fp)
 100ac1c:	1004803a 	cmplt	r2,r2,zero
 100ac20:	1000081e 	bne	r2,zero,100ac44 <lseek+0x4c>
 100ac24:	e0bffc17 	ldw	r2,-16(fp)
 100ac28:	10800324 	muli	r2,r2,12
 100ac2c:	1007883a 	mov	r3,r2
 100ac30:	00804074 	movhi	r2,257
 100ac34:	10bc8a04 	addi	r2,r2,-3544
 100ac38:	1887883a 	add	r3,r3,r2
 100ac3c:	e0ffff15 	stw	r3,-4(fp)
 100ac40:	00000106 	br	100ac48 <lseek+0x50>
 100ac44:	e03fff15 	stw	zero,-4(fp)
 100ac48:	e0bfff17 	ldw	r2,-4(fp)
 100ac4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100ac50:	e0bffb17 	ldw	r2,-20(fp)
 100ac54:	1005003a 	cmpeq	r2,r2,zero
 100ac58:	1000111e 	bne	r2,zero,100aca0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100ac5c:	e0bffb17 	ldw	r2,-20(fp)
 100ac60:	10800017 	ldw	r2,0(r2)
 100ac64:	10800717 	ldw	r2,28(r2)
 100ac68:	1005003a 	cmpeq	r2,r2,zero
 100ac6c:	1000091e 	bne	r2,zero,100ac94 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100ac70:	e0bffb17 	ldw	r2,-20(fp)
 100ac74:	10800017 	ldw	r2,0(r2)
 100ac78:	10800717 	ldw	r2,28(r2)
 100ac7c:	e13ffb17 	ldw	r4,-20(fp)
 100ac80:	e17ffd17 	ldw	r5,-12(fp)
 100ac84:	e1bffe17 	ldw	r6,-8(fp)
 100ac88:	103ee83a 	callr	r2
 100ac8c:	e0bffa15 	stw	r2,-24(fp)
 100ac90:	00000506 	br	100aca8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100ac94:	00bfde84 	movi	r2,-134
 100ac98:	e0bffa15 	stw	r2,-24(fp)
 100ac9c:	00000206 	br	100aca8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100aca0:	00bfebc4 	movi	r2,-81
 100aca4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100aca8:	e0bffa17 	ldw	r2,-24(fp)
 100acac:	1004403a 	cmpge	r2,r2,zero
 100acb0:	1000071e 	bne	r2,zero,100acd0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100acb4:	100ace80 	call	100ace8 <alt_get_errno>
 100acb8:	1007883a 	mov	r3,r2
 100acbc:	e0bffa17 	ldw	r2,-24(fp)
 100acc0:	0085c83a 	sub	r2,zero,r2
 100acc4:	18800015 	stw	r2,0(r3)
    rc = -1;
 100acc8:	00bfffc4 	movi	r2,-1
 100accc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100acd0:	e0bffa17 	ldw	r2,-24(fp)
}
 100acd4:	e037883a 	mov	sp,fp
 100acd8:	dfc00117 	ldw	ra,4(sp)
 100acdc:	df000017 	ldw	fp,0(sp)
 100ace0:	dec00204 	addi	sp,sp,8
 100ace4:	f800283a 	ret

0100ace8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ace8:	defffd04 	addi	sp,sp,-12
 100acec:	dfc00215 	stw	ra,8(sp)
 100acf0:	df000115 	stw	fp,4(sp)
 100acf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100acf8:	00804074 	movhi	r2,257
 100acfc:	10818604 	addi	r2,r2,1560
 100ad00:	10800017 	ldw	r2,0(r2)
 100ad04:	1005003a 	cmpeq	r2,r2,zero
 100ad08:	1000061e 	bne	r2,zero,100ad24 <alt_get_errno+0x3c>
 100ad0c:	00804074 	movhi	r2,257
 100ad10:	10818604 	addi	r2,r2,1560
 100ad14:	10800017 	ldw	r2,0(r2)
 100ad18:	103ee83a 	callr	r2
 100ad1c:	e0bfff15 	stw	r2,-4(fp)
 100ad20:	00000306 	br	100ad30 <alt_get_errno+0x48>
 100ad24:	00804074 	movhi	r2,257
 100ad28:	1088a804 	addi	r2,r2,8864
 100ad2c:	e0bfff15 	stw	r2,-4(fp)
 100ad30:	e0bfff17 	ldw	r2,-4(fp)
}
 100ad34:	e037883a 	mov	sp,fp
 100ad38:	dfc00117 	ldw	ra,4(sp)
 100ad3c:	df000017 	ldw	fp,0(sp)
 100ad40:	dec00204 	addi	sp,sp,8
 100ad44:	f800283a 	ret

0100ad48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100ad48:	defffd04 	addi	sp,sp,-12
 100ad4c:	dfc00215 	stw	ra,8(sp)
 100ad50:	df000115 	stw	fp,4(sp)
 100ad54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100ad58:	0009883a 	mov	r4,zero
 100ad5c:	100b2100 	call	100b210 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ad60:	100b2440 	call	100b244 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ad64:	01004074 	movhi	r4,257
 100ad68:	213a3e04 	addi	r4,r4,-5896
 100ad6c:	01404074 	movhi	r5,257
 100ad70:	297a3e04 	addi	r5,r5,-5896
 100ad74:	01804074 	movhi	r6,257
 100ad78:	31ba3e04 	addi	r6,r6,-5896
 100ad7c:	100d9600 	call	100d960 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ad80:	100d7100 	call	100d710 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ad84:	01004074 	movhi	r4,257
 100ad88:	2135dd04 	addi	r4,r4,-10380
 100ad8c:	100e0c80 	call	100e0c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ad90:	d1272f17 	ldw	r4,-25412(gp)
 100ad94:	d1673017 	ldw	r5,-25408(gp)
 100ad98:	d1a73117 	ldw	r6,-25404(gp)
 100ad9c:	10006b80 	call	10006b8 <main>
 100ada0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ada4:	01000044 	movi	r4,1
 100ada8:	100a5700 	call	100a570 <close>
  exit (result);
 100adac:	e13fff17 	ldw	r4,-4(fp)
 100adb0:	100e0dc0 	call	100e0dc <exit>

0100adb4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100adb4:	defffe04 	addi	sp,sp,-8
 100adb8:	df000115 	stw	fp,4(sp)
 100adbc:	df000104 	addi	fp,sp,4
 100adc0:	e13fff15 	stw	r4,-4(fp)
}
 100adc4:	e037883a 	mov	sp,fp
 100adc8:	df000017 	ldw	fp,0(sp)
 100adcc:	dec00104 	addi	sp,sp,4
 100add0:	f800283a 	ret

0100add4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100add4:	defffe04 	addi	sp,sp,-8
 100add8:	df000115 	stw	fp,4(sp)
 100addc:	df000104 	addi	fp,sp,4
 100ade0:	e13fff15 	stw	r4,-4(fp)
}
 100ade4:	e037883a 	mov	sp,fp
 100ade8:	df000017 	ldw	fp,0(sp)
 100adec:	dec00104 	addi	sp,sp,4
 100adf0:	f800283a 	ret

0100adf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100adf4:	defff704 	addi	sp,sp,-36
 100adf8:	dfc00815 	stw	ra,32(sp)
 100adfc:	df000715 	stw	fp,28(sp)
 100ae00:	df000704 	addi	fp,sp,28
 100ae04:	e13ffb15 	stw	r4,-20(fp)
 100ae08:	e17ffc15 	stw	r5,-16(fp)
 100ae0c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ae10:	e0bffb17 	ldw	r2,-20(fp)
 100ae14:	1004803a 	cmplt	r2,r2,zero
 100ae18:	1000081e 	bne	r2,zero,100ae3c <read+0x48>
 100ae1c:	e0bffb17 	ldw	r2,-20(fp)
 100ae20:	10800324 	muli	r2,r2,12
 100ae24:	1007883a 	mov	r3,r2
 100ae28:	00804074 	movhi	r2,257
 100ae2c:	10bc8a04 	addi	r2,r2,-3544
 100ae30:	1887883a 	add	r3,r3,r2
 100ae34:	e0ffff15 	stw	r3,-4(fp)
 100ae38:	00000106 	br	100ae40 <read+0x4c>
 100ae3c:	e03fff15 	stw	zero,-4(fp)
 100ae40:	e0bfff17 	ldw	r2,-4(fp)
 100ae44:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100ae48:	e0bffa17 	ldw	r2,-24(fp)
 100ae4c:	1005003a 	cmpeq	r2,r2,zero
 100ae50:	1000241e 	bne	r2,zero,100aee4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100ae54:	e0bffa17 	ldw	r2,-24(fp)
 100ae58:	10800217 	ldw	r2,8(r2)
 100ae5c:	108000cc 	andi	r2,r2,3
 100ae60:	10800060 	cmpeqi	r2,r2,1
 100ae64:	10001a1e 	bne	r2,zero,100aed0 <read+0xdc>
 100ae68:	e0bffa17 	ldw	r2,-24(fp)
 100ae6c:	10800017 	ldw	r2,0(r2)
 100ae70:	10800517 	ldw	r2,20(r2)
 100ae74:	1005003a 	cmpeq	r2,r2,zero
 100ae78:	1000151e 	bne	r2,zero,100aed0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100ae7c:	e0bffa17 	ldw	r2,-24(fp)
 100ae80:	10800017 	ldw	r2,0(r2)
 100ae84:	10800517 	ldw	r2,20(r2)
 100ae88:	e17ffc17 	ldw	r5,-16(fp)
 100ae8c:	e1bffd17 	ldw	r6,-12(fp)
 100ae90:	e13ffa17 	ldw	r4,-24(fp)
 100ae94:	103ee83a 	callr	r2
 100ae98:	e0bff915 	stw	r2,-28(fp)
 100ae9c:	e0bff917 	ldw	r2,-28(fp)
 100aea0:	1004403a 	cmpge	r2,r2,zero
 100aea4:	1000071e 	bne	r2,zero,100aec4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100aea8:	100af140 	call	100af14 <alt_get_errno>
 100aeac:	e0fff917 	ldw	r3,-28(fp)
 100aeb0:	00c7c83a 	sub	r3,zero,r3
 100aeb4:	10c00015 	stw	r3,0(r2)
          return -1;
 100aeb8:	00bfffc4 	movi	r2,-1
 100aebc:	e0bffe15 	stw	r2,-8(fp)
 100aec0:	00000e06 	br	100aefc <read+0x108>
        }
        return rval;
 100aec4:	e0bff917 	ldw	r2,-28(fp)
 100aec8:	e0bffe15 	stw	r2,-8(fp)
 100aecc:	00000b06 	br	100aefc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100aed0:	100af140 	call	100af14 <alt_get_errno>
 100aed4:	1007883a 	mov	r3,r2
 100aed8:	00800344 	movi	r2,13
 100aedc:	18800015 	stw	r2,0(r3)
 100aee0:	00000406 	br	100aef4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100aee4:	100af140 	call	100af14 <alt_get_errno>
 100aee8:	1007883a 	mov	r3,r2
 100aeec:	00801444 	movi	r2,81
 100aef0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100aef4:	00bfffc4 	movi	r2,-1
 100aef8:	e0bffe15 	stw	r2,-8(fp)
 100aefc:	e0bffe17 	ldw	r2,-8(fp)
}
 100af00:	e037883a 	mov	sp,fp
 100af04:	dfc00117 	ldw	ra,4(sp)
 100af08:	df000017 	ldw	fp,0(sp)
 100af0c:	dec00204 	addi	sp,sp,8
 100af10:	f800283a 	ret

0100af14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100af14:	defffd04 	addi	sp,sp,-12
 100af18:	dfc00215 	stw	ra,8(sp)
 100af1c:	df000115 	stw	fp,4(sp)
 100af20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100af24:	00804074 	movhi	r2,257
 100af28:	10818604 	addi	r2,r2,1560
 100af2c:	10800017 	ldw	r2,0(r2)
 100af30:	1005003a 	cmpeq	r2,r2,zero
 100af34:	1000061e 	bne	r2,zero,100af50 <alt_get_errno+0x3c>
 100af38:	00804074 	movhi	r2,257
 100af3c:	10818604 	addi	r2,r2,1560
 100af40:	10800017 	ldw	r2,0(r2)
 100af44:	103ee83a 	callr	r2
 100af48:	e0bfff15 	stw	r2,-4(fp)
 100af4c:	00000306 	br	100af5c <alt_get_errno+0x48>
 100af50:	00804074 	movhi	r2,257
 100af54:	1088a804 	addi	r2,r2,8864
 100af58:	e0bfff15 	stw	r2,-4(fp)
 100af5c:	e0bfff17 	ldw	r2,-4(fp)
}
 100af60:	e037883a 	mov	sp,fp
 100af64:	dfc00117 	ldw	ra,4(sp)
 100af68:	df000017 	ldw	fp,0(sp)
 100af6c:	dec00204 	addi	sp,sp,8
 100af70:	f800283a 	ret

0100af74 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100af74:	defffe04 	addi	sp,sp,-8
 100af78:	df000115 	stw	fp,4(sp)
 100af7c:	df000104 	addi	fp,sp,4
 100af80:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100af84:	e0bfff17 	ldw	r2,-4(fp)
 100af88:	108000d0 	cmplti	r2,r2,3
 100af8c:	10000d1e 	bne	r2,zero,100afc4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100af90:	e0bfff17 	ldw	r2,-4(fp)
 100af94:	00c04074 	movhi	r3,257
 100af98:	18fc8a04 	addi	r3,r3,-3544
 100af9c:	10800324 	muli	r2,r2,12
 100afa0:	10c5883a 	add	r2,r2,r3
 100afa4:	10800204 	addi	r2,r2,8
 100afa8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100afac:	e0bfff17 	ldw	r2,-4(fp)
 100afb0:	00c04074 	movhi	r3,257
 100afb4:	18fc8a04 	addi	r3,r3,-3544
 100afb8:	10800324 	muli	r2,r2,12
 100afbc:	10c5883a 	add	r2,r2,r3
 100afc0:	10000015 	stw	zero,0(r2)
  }
}
 100afc4:	e037883a 	mov	sp,fp
 100afc8:	df000017 	ldw	fp,0(sp)
 100afcc:	dec00104 	addi	sp,sp,4
 100afd0:	f800283a 	ret

0100afd4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100afd4:	defff804 	addi	sp,sp,-32
 100afd8:	df000715 	stw	fp,28(sp)
 100afdc:	df000704 	addi	fp,sp,28
 100afe0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100afe4:	0005303a 	rdctl	r2,status
 100afe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100afec:	e0fffb17 	ldw	r3,-20(fp)
 100aff0:	00bfff84 	movi	r2,-2
 100aff4:	1884703a 	and	r2,r3,r2
 100aff8:	1001703a 	wrctl	status,r2
  
  return context;
 100affc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100b000:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100b004:	d0a00d17 	ldw	r2,-32716(gp)
 100b008:	10c000c4 	addi	r3,r2,3
 100b00c:	00bfff04 	movi	r2,-4
 100b010:	1884703a 	and	r2,r3,r2
 100b014:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100b018:	d0e00d17 	ldw	r3,-32716(gp)
 100b01c:	e0bffe17 	ldw	r2,-8(fp)
 100b020:	1887883a 	add	r3,r3,r2
 100b024:	00806034 	movhi	r2,384
 100b028:	10800004 	addi	r2,r2,0
 100b02c:	10c0072e 	bgeu	r2,r3,100b04c <sbrk+0x78>
 100b030:	e0bffd17 	ldw	r2,-12(fp)
 100b034:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b038:	e0bffa17 	ldw	r2,-24(fp)
 100b03c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100b040:	00bfffc4 	movi	r2,-1
 100b044:	e0bfff15 	stw	r2,-4(fp)
 100b048:	00000c06 	br	100b07c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100b04c:	d0a00d17 	ldw	r2,-32716(gp)
 100b050:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100b054:	d0e00d17 	ldw	r3,-32716(gp)
 100b058:	e0bffe17 	ldw	r2,-8(fp)
 100b05c:	1885883a 	add	r2,r3,r2
 100b060:	d0a00d15 	stw	r2,-32716(gp)
 100b064:	e0bffd17 	ldw	r2,-12(fp)
 100b068:	e0bff915 	stw	r2,-28(fp)
 100b06c:	e0bff917 	ldw	r2,-28(fp)
 100b070:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100b074:	e0bffc17 	ldw	r2,-16(fp)
 100b078:	e0bfff15 	stw	r2,-4(fp)
 100b07c:	e0bfff17 	ldw	r2,-4(fp)
} 
 100b080:	e037883a 	mov	sp,fp
 100b084:	df000017 	ldw	fp,0(sp)
 100b088:	dec00104 	addi	sp,sp,4
 100b08c:	f800283a 	ret

0100b090 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100b090:	defff704 	addi	sp,sp,-36
 100b094:	dfc00815 	stw	ra,32(sp)
 100b098:	df000715 	stw	fp,28(sp)
 100b09c:	df000704 	addi	fp,sp,28
 100b0a0:	e13ffb15 	stw	r4,-20(fp)
 100b0a4:	e17ffc15 	stw	r5,-16(fp)
 100b0a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b0ac:	e0bffb17 	ldw	r2,-20(fp)
 100b0b0:	1004803a 	cmplt	r2,r2,zero
 100b0b4:	1000081e 	bne	r2,zero,100b0d8 <write+0x48>
 100b0b8:	e0bffb17 	ldw	r2,-20(fp)
 100b0bc:	10800324 	muli	r2,r2,12
 100b0c0:	1007883a 	mov	r3,r2
 100b0c4:	00804074 	movhi	r2,257
 100b0c8:	10bc8a04 	addi	r2,r2,-3544
 100b0cc:	1887883a 	add	r3,r3,r2
 100b0d0:	e0ffff15 	stw	r3,-4(fp)
 100b0d4:	00000106 	br	100b0dc <write+0x4c>
 100b0d8:	e03fff15 	stw	zero,-4(fp)
 100b0dc:	e0bfff17 	ldw	r2,-4(fp)
 100b0e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100b0e4:	e0bffa17 	ldw	r2,-24(fp)
 100b0e8:	1005003a 	cmpeq	r2,r2,zero
 100b0ec:	1000241e 	bne	r2,zero,100b180 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100b0f0:	e0bffa17 	ldw	r2,-24(fp)
 100b0f4:	10800217 	ldw	r2,8(r2)
 100b0f8:	108000cc 	andi	r2,r2,3
 100b0fc:	1005003a 	cmpeq	r2,r2,zero
 100b100:	10001a1e 	bne	r2,zero,100b16c <write+0xdc>
 100b104:	e0bffa17 	ldw	r2,-24(fp)
 100b108:	10800017 	ldw	r2,0(r2)
 100b10c:	10800617 	ldw	r2,24(r2)
 100b110:	1005003a 	cmpeq	r2,r2,zero
 100b114:	1000151e 	bne	r2,zero,100b16c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100b118:	e0bffa17 	ldw	r2,-24(fp)
 100b11c:	10800017 	ldw	r2,0(r2)
 100b120:	10800617 	ldw	r2,24(r2)
 100b124:	e17ffc17 	ldw	r5,-16(fp)
 100b128:	e1bffd17 	ldw	r6,-12(fp)
 100b12c:	e13ffa17 	ldw	r4,-24(fp)
 100b130:	103ee83a 	callr	r2
 100b134:	e0bff915 	stw	r2,-28(fp)
 100b138:	e0bff917 	ldw	r2,-28(fp)
 100b13c:	1004403a 	cmpge	r2,r2,zero
 100b140:	1000071e 	bne	r2,zero,100b160 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100b144:	100b1b00 	call	100b1b0 <alt_get_errno>
 100b148:	e0fff917 	ldw	r3,-28(fp)
 100b14c:	00c7c83a 	sub	r3,zero,r3
 100b150:	10c00015 	stw	r3,0(r2)
        return -1;
 100b154:	00bfffc4 	movi	r2,-1
 100b158:	e0bffe15 	stw	r2,-8(fp)
 100b15c:	00000e06 	br	100b198 <write+0x108>
      }
      return rval;
 100b160:	e0bff917 	ldw	r2,-28(fp)
 100b164:	e0bffe15 	stw	r2,-8(fp)
 100b168:	00000b06 	br	100b198 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100b16c:	100b1b00 	call	100b1b0 <alt_get_errno>
 100b170:	1007883a 	mov	r3,r2
 100b174:	00800344 	movi	r2,13
 100b178:	18800015 	stw	r2,0(r3)
 100b17c:	00000406 	br	100b190 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100b180:	100b1b00 	call	100b1b0 <alt_get_errno>
 100b184:	1007883a 	mov	r3,r2
 100b188:	00801444 	movi	r2,81
 100b18c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100b190:	00bfffc4 	movi	r2,-1
 100b194:	e0bffe15 	stw	r2,-8(fp)
 100b198:	e0bffe17 	ldw	r2,-8(fp)
}
 100b19c:	e037883a 	mov	sp,fp
 100b1a0:	dfc00117 	ldw	ra,4(sp)
 100b1a4:	df000017 	ldw	fp,0(sp)
 100b1a8:	dec00204 	addi	sp,sp,8
 100b1ac:	f800283a 	ret

0100b1b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b1b0:	defffd04 	addi	sp,sp,-12
 100b1b4:	dfc00215 	stw	ra,8(sp)
 100b1b8:	df000115 	stw	fp,4(sp)
 100b1bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b1c0:	00804074 	movhi	r2,257
 100b1c4:	10818604 	addi	r2,r2,1560
 100b1c8:	10800017 	ldw	r2,0(r2)
 100b1cc:	1005003a 	cmpeq	r2,r2,zero
 100b1d0:	1000061e 	bne	r2,zero,100b1ec <alt_get_errno+0x3c>
 100b1d4:	00804074 	movhi	r2,257
 100b1d8:	10818604 	addi	r2,r2,1560
 100b1dc:	10800017 	ldw	r2,0(r2)
 100b1e0:	103ee83a 	callr	r2
 100b1e4:	e0bfff15 	stw	r2,-4(fp)
 100b1e8:	00000306 	br	100b1f8 <alt_get_errno+0x48>
 100b1ec:	00804074 	movhi	r2,257
 100b1f0:	1088a804 	addi	r2,r2,8864
 100b1f4:	e0bfff15 	stw	r2,-4(fp)
 100b1f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b1fc:	e037883a 	mov	sp,fp
 100b200:	dfc00117 	ldw	ra,4(sp)
 100b204:	df000017 	ldw	fp,0(sp)
 100b208:	dec00204 	addi	sp,sp,8
 100b20c:	f800283a 	ret

0100b210 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100b210:	defffd04 	addi	sp,sp,-12
 100b214:	dfc00215 	stw	ra,8(sp)
 100b218:	df000115 	stw	fp,4(sp)
 100b21c:	df000104 	addi	fp,sp,4
 100b220:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100b224:	100de400 	call	100de40 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100b228:	00800044 	movi	r2,1
 100b22c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100b230:	e037883a 	mov	sp,fp
 100b234:	dfc00117 	ldw	ra,4(sp)
 100b238:	df000017 	ldw	fp,0(sp)
 100b23c:	dec00204 	addi	sp,sp,8
 100b240:	f800283a 	ret

0100b244 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100b244:	defffd04 	addi	sp,sp,-12
 100b248:	dfc00215 	stw	ra,8(sp)
 100b24c:	df000115 	stw	fp,4(sp)
 100b250:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100b254:	01110804 	movi	r4,17440
 100b258:	000b883a 	mov	r5,zero
 100b25c:	01800084 	movi	r6,2
 100b260:	01c0fa04 	movi	r7,1000
 100b264:	100c1100 	call	100c110 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_TIMER_INIT ( TIMER_3, timer_3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100b268:	01004074 	movhi	r4,257
 100b26c:	213cf404 	addi	r4,r4,-3120
 100b270:	000b883a 	mov	r5,zero
 100b274:	000d883a 	mov	r6,zero
 100b278:	100b73c0 	call	100b73c <altera_avalon_jtag_uart_init>
 100b27c:	01004074 	movhi	r4,257
 100b280:	213cea04 	addi	r4,r4,-3160
 100b284:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, av_config);
 100b288:	01004074 	movhi	r4,257
 100b28c:	21010204 	addi	r4,r4,1032
 100b290:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
 100b294:	01004074 	movhi	r4,257
 100b298:	21010e04 	addi	r4,r4,1080
 100b29c:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100b2a0:	01004074 	movhi	r4,257
 100b2a4:	21011a04 	addi	r4,r4,1128
 100b2a8:	100c2480 	call	100c248 <alt_up_character_lcd_init>
 100b2ac:	01004074 	movhi	r4,257
 100b2b0:	21011a04 	addi	r4,r4,1128
 100b2b4:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSH_BUTTON, push_button);
 100b2b8:	01004074 	movhi	r4,257
 100b2bc:	21012504 	addi	r4,r4,1172
 100b2c0:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 100b2c4:	01004074 	movhi	r4,257
 100b2c8:	21013004 	addi	r4,r4,1216
 100b2cc:	100c7f40 	call	100c7f4 <alt_up_ps2_init>
 100b2d0:	01004074 	movhi	r4,257
 100b2d4:	21013004 	addi	r4,r4,1216
 100b2d8:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 100b2dc:	01004074 	movhi	r4,257
 100b2e0:	21013e04 	addi	r4,r4,1272
 100b2e4:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 100b2e8:	00804074 	movhi	r2,257
 100b2ec:	10814904 	addi	r2,r2,1316
 100b2f0:	10800a17 	ldw	r2,40(r2)
 100b2f4:	10800104 	addi	r2,r2,4
 100b2f8:	10800017 	ldw	r2,0(r2)
 100b2fc:	10ffffcc 	andi	r3,r2,65535
 100b300:	00804074 	movhi	r2,257
 100b304:	10814904 	addi	r2,r2,1316
 100b308:	10c00c15 	stw	r3,48(r2)
 100b30c:	00804074 	movhi	r2,257
 100b310:	10814904 	addi	r2,r2,1316
 100b314:	10800a17 	ldw	r2,40(r2)
 100b318:	10800104 	addi	r2,r2,4
 100b31c:	10800017 	ldw	r2,0(r2)
 100b320:	1005d43a 	srai	r2,r2,16
 100b324:	10ffffcc 	andi	r3,r2,65535
 100b328:	00804074 	movhi	r2,257
 100b32c:	10814904 	addi	r2,r2,1316
 100b330:	10c00d15 	stw	r3,52(r2)
 100b334:	00804074 	movhi	r2,257
 100b338:	10814904 	addi	r2,r2,1316
 100b33c:	10800c17 	ldw	r2,48(r2)
 100b340:	10801068 	cmpgeui	r2,r2,65
 100b344:	1000081e 	bne	r2,zero,100b368 <alt_sys_init+0x124>
 100b348:	00c04074 	movhi	r3,257
 100b34c:	18c14904 	addi	r3,r3,1316
 100b350:	00800fc4 	movi	r2,63
 100b354:	18800f15 	stw	r2,60(r3)
 100b358:	00c04074 	movhi	r3,257
 100b35c:	18c14904 	addi	r3,r3,1316
 100b360:	00800184 	movi	r2,6
 100b364:	18801015 	stw	r2,64(r3)
 100b368:	00804074 	movhi	r2,257
 100b36c:	10814904 	addi	r2,r2,1316
 100b370:	10800d17 	ldw	r2,52(r2)
 100b374:	10800868 	cmpgeui	r2,r2,33
 100b378:	1000041e 	bne	r2,zero,100b38c <alt_sys_init+0x148>
 100b37c:	00c04074 	movhi	r3,257
 100b380:	18c14904 	addi	r3,r3,1316
 100b384:	008007c4 	movi	r2,31
 100b388:	18801115 	stw	r2,68(r3)
 100b38c:	01004074 	movhi	r4,257
 100b390:	21014904 	addi	r4,r4,1316
 100b394:	100d1600 	call	100d160 <alt_up_char_buffer_init>
 100b398:	01004074 	movhi	r4,257
 100b39c:	21014904 	addi	r4,r4,1316
 100b3a0:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 100b3a4:	00804074 	movhi	r2,257
 100b3a8:	10815b04 	addi	r2,r2,1388
 100b3ac:	10800a17 	ldw	r2,40(r2)
 100b3b0:	10800017 	ldw	r2,0(r2)
 100b3b4:	1007883a 	mov	r3,r2
 100b3b8:	00804074 	movhi	r2,257
 100b3bc:	10815b04 	addi	r2,r2,1388
 100b3c0:	10c00b15 	stw	r3,44(r2)
 100b3c4:	00804074 	movhi	r2,257
 100b3c8:	10815b04 	addi	r2,r2,1388
 100b3cc:	10800a17 	ldw	r2,40(r2)
 100b3d0:	10800104 	addi	r2,r2,4
 100b3d4:	10800017 	ldw	r2,0(r2)
 100b3d8:	1007883a 	mov	r3,r2
 100b3dc:	00804074 	movhi	r2,257
 100b3e0:	10815b04 	addi	r2,r2,1388
 100b3e4:	10c00c15 	stw	r3,48(r2)
 100b3e8:	00804074 	movhi	r2,257
 100b3ec:	10815b04 	addi	r2,r2,1388
 100b3f0:	10800a17 	ldw	r2,40(r2)
 100b3f4:	10800204 	addi	r2,r2,8
 100b3f8:	10800017 	ldw	r2,0(r2)
 100b3fc:	10ffffcc 	andi	r3,r2,65535
 100b400:	00804074 	movhi	r2,257
 100b404:	10815b04 	addi	r2,r2,1388
 100b408:	10c00f15 	stw	r3,60(r2)
 100b40c:	00804074 	movhi	r2,257
 100b410:	10815b04 	addi	r2,r2,1388
 100b414:	10800a17 	ldw	r2,40(r2)
 100b418:	10800204 	addi	r2,r2,8
 100b41c:	10800017 	ldw	r2,0(r2)
 100b420:	1005d43a 	srai	r2,r2,16
 100b424:	10ffffcc 	andi	r3,r2,65535
 100b428:	00804074 	movhi	r2,257
 100b42c:	10815b04 	addi	r2,r2,1388
 100b430:	10c01015 	stw	r3,64(r2)
 100b434:	00804074 	movhi	r2,257
 100b438:	10815b04 	addi	r2,r2,1388
 100b43c:	10800a17 	ldw	r2,40(r2)
 100b440:	10800304 	addi	r2,r2,12
 100b444:	10800017 	ldw	r2,0(r2)
 100b448:	1005d07a 	srai	r2,r2,1
 100b44c:	10c0004c 	andi	r3,r2,1
 100b450:	00804074 	movhi	r2,257
 100b454:	10815b04 	addi	r2,r2,1388
 100b458:	10c00d15 	stw	r3,52(r2)
 100b45c:	00804074 	movhi	r2,257
 100b460:	10815b04 	addi	r2,r2,1388
 100b464:	10800a17 	ldw	r2,40(r2)
 100b468:	10800304 	addi	r2,r2,12
 100b46c:	10800017 	ldw	r2,0(r2)
 100b470:	1005d13a 	srai	r2,r2,4
 100b474:	10c003cc 	andi	r3,r2,15
 100b478:	00804074 	movhi	r2,257
 100b47c:	10815b04 	addi	r2,r2,1388
 100b480:	10c00e15 	stw	r3,56(r2)
 100b484:	00804074 	movhi	r2,257
 100b488:	10815b04 	addi	r2,r2,1388
 100b48c:	10800a17 	ldw	r2,40(r2)
 100b490:	10800304 	addi	r2,r2,12
 100b494:	10800017 	ldw	r2,0(r2)
 100b498:	1005d43a 	srai	r2,r2,16
 100b49c:	1007883a 	mov	r3,r2
 100b4a0:	00bfffc4 	movi	r2,-1
 100b4a4:	1884703a 	and	r2,r3,r2
 100b4a8:	e0bfff45 	stb	r2,-3(fp)
 100b4ac:	00804074 	movhi	r2,257
 100b4b0:	10815b04 	addi	r2,r2,1388
 100b4b4:	10800a17 	ldw	r2,40(r2)
 100b4b8:	10800304 	addi	r2,r2,12
 100b4bc:	10800017 	ldw	r2,0(r2)
 100b4c0:	1005d63a 	srai	r2,r2,24
 100b4c4:	1007883a 	mov	r3,r2
 100b4c8:	00bfffc4 	movi	r2,-1
 100b4cc:	1884703a 	and	r2,r3,r2
 100b4d0:	e0bfff05 	stb	r2,-4(fp)
 100b4d4:	00804074 	movhi	r2,257
 100b4d8:	10815b04 	addi	r2,r2,1388
 100b4dc:	10800e17 	ldw	r2,56(r2)
 100b4e0:	10800058 	cmpnei	r2,r2,1
 100b4e4:	1000041e 	bne	r2,zero,100b4f8 <alt_sys_init+0x2b4>
 100b4e8:	00804074 	movhi	r2,257
 100b4ec:	10815b04 	addi	r2,r2,1388
 100b4f0:	10001115 	stw	zero,68(r2)
 100b4f4:	00000e06 	br	100b530 <alt_sys_init+0x2ec>
 100b4f8:	00804074 	movhi	r2,257
 100b4fc:	10815b04 	addi	r2,r2,1388
 100b500:	10800e17 	ldw	r2,56(r2)
 100b504:	10800098 	cmpnei	r2,r2,2
 100b508:	1000051e 	bne	r2,zero,100b520 <alt_sys_init+0x2dc>
 100b50c:	00c04074 	movhi	r3,257
 100b510:	18c15b04 	addi	r3,r3,1388
 100b514:	00800044 	movi	r2,1
 100b518:	18801115 	stw	r2,68(r3)
 100b51c:	00000406 	br	100b530 <alt_sys_init+0x2ec>
 100b520:	00c04074 	movhi	r3,257
 100b524:	18c15b04 	addi	r3,r3,1388
 100b528:	00800084 	movi	r2,2
 100b52c:	18801115 	stw	r2,68(r3)
 100b530:	e0ffff43 	ldbu	r3,-3(fp)
 100b534:	00800804 	movi	r2,32
 100b538:	10c7c83a 	sub	r3,r2,r3
 100b53c:	00bfffc4 	movi	r2,-1
 100b540:	10c6d83a 	srl	r3,r2,r3
 100b544:	00804074 	movhi	r2,257
 100b548:	10815b04 	addi	r2,r2,1388
 100b54c:	10c01215 	stw	r3,72(r2)
 100b550:	e0ffff43 	ldbu	r3,-3(fp)
 100b554:	00804074 	movhi	r2,257
 100b558:	10815b04 	addi	r2,r2,1388
 100b55c:	10801117 	ldw	r2,68(r2)
 100b560:	1887883a 	add	r3,r3,r2
 100b564:	00804074 	movhi	r2,257
 100b568:	10815b04 	addi	r2,r2,1388
 100b56c:	10c01315 	stw	r3,76(r2)
 100b570:	e0ffff03 	ldbu	r3,-4(fp)
 100b574:	00800804 	movi	r2,32
 100b578:	10c7c83a 	sub	r3,r2,r3
 100b57c:	00bfffc4 	movi	r2,-1
 100b580:	10c6d83a 	srl	r3,r2,r3
 100b584:	00804074 	movhi	r2,257
 100b588:	10815b04 	addi	r2,r2,1388
 100b58c:	10c01415 	stw	r3,80(r2)
 100b590:	01004074 	movhi	r4,257
 100b594:	21015b04 	addi	r4,r4,1388
 100b598:	100b5bc0 	call	100b5bc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, sd_card);
 100b59c:	01004074 	movhi	r4,257
 100b5a0:	21017004 	addi	r4,r4,1472
 100b5a4:	100b5bc0 	call	100b5bc <alt_dev_reg>
}
 100b5a8:	e037883a 	mov	sp,fp
 100b5ac:	dfc00117 	ldw	ra,4(sp)
 100b5b0:	df000017 	ldw	fp,0(sp)
 100b5b4:	dec00204 	addi	sp,sp,8
 100b5b8:	f800283a 	ret

0100b5bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100b5bc:	defffd04 	addi	sp,sp,-12
 100b5c0:	dfc00215 	stw	ra,8(sp)
 100b5c4:	df000115 	stw	fp,4(sp)
 100b5c8:	df000104 	addi	fp,sp,4
 100b5cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100b5d0:	e13fff17 	ldw	r4,-4(fp)
 100b5d4:	01404074 	movhi	r5,257
 100b5d8:	29418304 	addi	r5,r5,1548
 100b5dc:	100d5fc0 	call	100d5fc <alt_dev_llist_insert>
}
 100b5e0:	e037883a 	mov	sp,fp
 100b5e4:	dfc00117 	ldw	ra,4(sp)
 100b5e8:	df000017 	ldw	fp,0(sp)
 100b5ec:	dec00204 	addi	sp,sp,8
 100b5f0:	f800283a 	ret

0100b5f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100b5f4:	defffa04 	addi	sp,sp,-24
 100b5f8:	dfc00515 	stw	ra,20(sp)
 100b5fc:	df000415 	stw	fp,16(sp)
 100b600:	df000404 	addi	fp,sp,16
 100b604:	e13ffd15 	stw	r4,-12(fp)
 100b608:	e17ffe15 	stw	r5,-8(fp)
 100b60c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b610:	e0bffd17 	ldw	r2,-12(fp)
 100b614:	10800017 	ldw	r2,0(r2)
 100b618:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100b61c:	e0bffc17 	ldw	r2,-16(fp)
 100b620:	11000a04 	addi	r4,r2,40
 100b624:	e0bffd17 	ldw	r2,-12(fp)
 100b628:	11c00217 	ldw	r7,8(r2)
 100b62c:	e17ffe17 	ldw	r5,-8(fp)
 100b630:	e1bfff17 	ldw	r6,-4(fp)
 100b634:	100bc380 	call	100bc38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100b638:	e037883a 	mov	sp,fp
 100b63c:	dfc00117 	ldw	ra,4(sp)
 100b640:	df000017 	ldw	fp,0(sp)
 100b644:	dec00204 	addi	sp,sp,8
 100b648:	f800283a 	ret

0100b64c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100b64c:	defffa04 	addi	sp,sp,-24
 100b650:	dfc00515 	stw	ra,20(sp)
 100b654:	df000415 	stw	fp,16(sp)
 100b658:	df000404 	addi	fp,sp,16
 100b65c:	e13ffd15 	stw	r4,-12(fp)
 100b660:	e17ffe15 	stw	r5,-8(fp)
 100b664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b668:	e0bffd17 	ldw	r2,-12(fp)
 100b66c:	10800017 	ldw	r2,0(r2)
 100b670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100b674:	e0bffc17 	ldw	r2,-16(fp)
 100b678:	11000a04 	addi	r4,r2,40
 100b67c:	e0bffd17 	ldw	r2,-12(fp)
 100b680:	11c00217 	ldw	r7,8(r2)
 100b684:	e17ffe17 	ldw	r5,-8(fp)
 100b688:	e1bfff17 	ldw	r6,-4(fp)
 100b68c:	100be5c0 	call	100be5c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100b690:	e037883a 	mov	sp,fp
 100b694:	dfc00117 	ldw	ra,4(sp)
 100b698:	df000017 	ldw	fp,0(sp)
 100b69c:	dec00204 	addi	sp,sp,8
 100b6a0:	f800283a 	ret

0100b6a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100b6a4:	defffc04 	addi	sp,sp,-16
 100b6a8:	dfc00315 	stw	ra,12(sp)
 100b6ac:	df000215 	stw	fp,8(sp)
 100b6b0:	df000204 	addi	fp,sp,8
 100b6b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b6b8:	e0bfff17 	ldw	r2,-4(fp)
 100b6bc:	10800017 	ldw	r2,0(r2)
 100b6c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100b6c4:	e0bffe17 	ldw	r2,-8(fp)
 100b6c8:	11000a04 	addi	r4,r2,40
 100b6cc:	e0bfff17 	ldw	r2,-4(fp)
 100b6d0:	11400217 	ldw	r5,8(r2)
 100b6d4:	100bad00 	call	100bad0 <altera_avalon_jtag_uart_close>
}
 100b6d8:	e037883a 	mov	sp,fp
 100b6dc:	dfc00117 	ldw	ra,4(sp)
 100b6e0:	df000017 	ldw	fp,0(sp)
 100b6e4:	dec00204 	addi	sp,sp,8
 100b6e8:	f800283a 	ret

0100b6ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100b6ec:	defffa04 	addi	sp,sp,-24
 100b6f0:	dfc00515 	stw	ra,20(sp)
 100b6f4:	df000415 	stw	fp,16(sp)
 100b6f8:	df000404 	addi	fp,sp,16
 100b6fc:	e13ffd15 	stw	r4,-12(fp)
 100b700:	e17ffe15 	stw	r5,-8(fp)
 100b704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100b708:	e0bffd17 	ldw	r2,-12(fp)
 100b70c:	10800017 	ldw	r2,0(r2)
 100b710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100b714:	e0bffc17 	ldw	r2,-16(fp)
 100b718:	11000a04 	addi	r4,r2,40
 100b71c:	e17ffe17 	ldw	r5,-8(fp)
 100b720:	e1bfff17 	ldw	r6,-4(fp)
 100b724:	100bb440 	call	100bb44 <altera_avalon_jtag_uart_ioctl>
}
 100b728:	e037883a 	mov	sp,fp
 100b72c:	dfc00117 	ldw	ra,4(sp)
 100b730:	df000017 	ldw	fp,0(sp)
 100b734:	dec00204 	addi	sp,sp,8
 100b738:	f800283a 	ret

0100b73c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100b73c:	defffb04 	addi	sp,sp,-20
 100b740:	dfc00415 	stw	ra,16(sp)
 100b744:	df000315 	stw	fp,12(sp)
 100b748:	df000304 	addi	fp,sp,12
 100b74c:	e13ffd15 	stw	r4,-12(fp)
 100b750:	e17ffe15 	stw	r5,-8(fp)
 100b754:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b758:	e0fffd17 	ldw	r3,-12(fp)
 100b75c:	00800044 	movi	r2,1
 100b760:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100b764:	e0bffd17 	ldw	r2,-12(fp)
 100b768:	10800017 	ldw	r2,0(r2)
 100b76c:	11000104 	addi	r4,r2,4
 100b770:	e0bffd17 	ldw	r2,-12(fp)
 100b774:	10800817 	ldw	r2,32(r2)
 100b778:	1007883a 	mov	r3,r2
 100b77c:	2005883a 	mov	r2,r4
 100b780:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 100b784:	e13fff17 	ldw	r4,-4(fp)
 100b788:	e17ffd17 	ldw	r5,-12(fp)
 100b78c:	01804074 	movhi	r6,257
 100b790:	31adfd04 	addi	r6,r6,-18444
 100b794:	100a82c0 	call	100a82c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100b798:	e0bffd17 	ldw	r2,-12(fp)
 100b79c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100b7a0:	e0bffd17 	ldw	r2,-12(fp)
 100b7a4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100b7a8:	00804074 	movhi	r2,257
 100b7ac:	1088ad04 	addi	r2,r2,8884
 100b7b0:	10800017 	ldw	r2,0(r2)
 100b7b4:	100b883a 	mov	r5,r2
 100b7b8:	01804074 	movhi	r6,257
 100b7bc:	31ae8804 	addi	r6,r6,-17888
 100b7c0:	e1fffd17 	ldw	r7,-12(fp)
 100b7c4:	100d4640 	call	100d464 <alt_alarm_start>
 100b7c8:	1004403a 	cmpge	r2,r2,zero
 100b7cc:	1000041e 	bne	r2,zero,100b7e0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100b7d0:	e0fffd17 	ldw	r3,-12(fp)
 100b7d4:	00a00034 	movhi	r2,32768
 100b7d8:	10bfffc4 	addi	r2,r2,-1
 100b7dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100b7e0:	e037883a 	mov	sp,fp
 100b7e4:	dfc00117 	ldw	ra,4(sp)
 100b7e8:	df000017 	ldw	fp,0(sp)
 100b7ec:	dec00204 	addi	sp,sp,8
 100b7f0:	f800283a 	ret

0100b7f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100b7f4:	defff704 	addi	sp,sp,-36
 100b7f8:	df000815 	stw	fp,32(sp)
 100b7fc:	df000804 	addi	fp,sp,32
 100b800:	e13ffe15 	stw	r4,-8(fp)
 100b804:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100b808:	e0bffe17 	ldw	r2,-8(fp)
 100b80c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 100b810:	e0bffd17 	ldw	r2,-12(fp)
 100b814:	10800017 	ldw	r2,0(r2)
 100b818:	e0bffc15 	stw	r2,-16(fp)
 100b81c:	00000006 	br	100b820 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b820:	e0bffc17 	ldw	r2,-16(fp)
 100b824:	10800104 	addi	r2,r2,4
 100b828:	10800037 	ldwio	r2,0(r2)
 100b82c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100b830:	e0bffb17 	ldw	r2,-20(fp)
 100b834:	1080c00c 	andi	r2,r2,768
 100b838:	1005003a 	cmpeq	r2,r2,zero
 100b83c:	1000741e 	bne	r2,zero,100ba10 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100b840:	e0bffb17 	ldw	r2,-20(fp)
 100b844:	1080400c 	andi	r2,r2,256
 100b848:	1005003a 	cmpeq	r2,r2,zero
 100b84c:	1000351e 	bne	r2,zero,100b924 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100b850:	00800074 	movhi	r2,1
 100b854:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b858:	e0bffd17 	ldw	r2,-12(fp)
 100b85c:	10800a17 	ldw	r2,40(r2)
 100b860:	10800044 	addi	r2,r2,1
 100b864:	1081ffcc 	andi	r2,r2,2047
 100b868:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 100b86c:	e0bffd17 	ldw	r2,-12(fp)
 100b870:	10c00b17 	ldw	r3,44(r2)
 100b874:	e0bff917 	ldw	r2,-28(fp)
 100b878:	18801626 	beq	r3,r2,100b8d4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100b87c:	e0bffc17 	ldw	r2,-16(fp)
 100b880:	10800037 	ldwio	r2,0(r2)
 100b884:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100b888:	e0bffa17 	ldw	r2,-24(fp)
 100b88c:	10a0000c 	andi	r2,r2,32768
 100b890:	1005003a 	cmpeq	r2,r2,zero
 100b894:	10000f1e 	bne	r2,zero,100b8d4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100b898:	e0bffd17 	ldw	r2,-12(fp)
 100b89c:	10c00a17 	ldw	r3,40(r2)
 100b8a0:	e0bffa17 	ldw	r2,-24(fp)
 100b8a4:	1009883a 	mov	r4,r2
 100b8a8:	e0bffd17 	ldw	r2,-12(fp)
 100b8ac:	1885883a 	add	r2,r3,r2
 100b8b0:	10800e04 	addi	r2,r2,56
 100b8b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b8b8:	e0bffd17 	ldw	r2,-12(fp)
 100b8bc:	10800a17 	ldw	r2,40(r2)
 100b8c0:	10800044 	addi	r2,r2,1
 100b8c4:	10c1ffcc 	andi	r3,r2,2047
 100b8c8:	e0bffd17 	ldw	r2,-12(fp)
 100b8cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100b8d0:	003fe106 	br	100b858 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100b8d4:	e0bffa17 	ldw	r2,-24(fp)
 100b8d8:	10bfffec 	andhi	r2,r2,65535
 100b8dc:	1005003a 	cmpeq	r2,r2,zero
 100b8e0:	1000101e 	bne	r2,zero,100b924 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b8e4:	e0bffd17 	ldw	r2,-12(fp)
 100b8e8:	10c00817 	ldw	r3,32(r2)
 100b8ec:	00bfff84 	movi	r2,-2
 100b8f0:	1886703a 	and	r3,r3,r2
 100b8f4:	e0bffd17 	ldw	r2,-12(fp)
 100b8f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100b8fc:	e0bffc17 	ldw	r2,-16(fp)
 100b900:	11000104 	addi	r4,r2,4
 100b904:	e0bffd17 	ldw	r2,-12(fp)
 100b908:	10800817 	ldw	r2,32(r2)
 100b90c:	1007883a 	mov	r3,r2
 100b910:	2005883a 	mov	r2,r4
 100b914:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b918:	e0bffc17 	ldw	r2,-16(fp)
 100b91c:	10800104 	addi	r2,r2,4
 100b920:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100b924:	e0bffb17 	ldw	r2,-20(fp)
 100b928:	1080800c 	andi	r2,r2,512
 100b92c:	1005003a 	cmpeq	r2,r2,zero
 100b930:	103fbb1e 	bne	r2,zero,100b820 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100b934:	e0bffb17 	ldw	r2,-20(fp)
 100b938:	10bfffec 	andhi	r2,r2,65535
 100b93c:	1004d43a 	srli	r2,r2,16
 100b940:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b944:	00001506 	br	100b99c <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100b948:	e13ffc17 	ldw	r4,-16(fp)
 100b94c:	e0bffd17 	ldw	r2,-12(fp)
 100b950:	10c00d17 	ldw	r3,52(r2)
 100b954:	e0bffd17 	ldw	r2,-12(fp)
 100b958:	1885883a 	add	r2,r3,r2
 100b95c:	10820e04 	addi	r2,r2,2104
 100b960:	10800003 	ldbu	r2,0(r2)
 100b964:	10c03fcc 	andi	r3,r2,255
 100b968:	18c0201c 	xori	r3,r3,128
 100b96c:	18ffe004 	addi	r3,r3,-128
 100b970:	2005883a 	mov	r2,r4
 100b974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b978:	e0bffd17 	ldw	r2,-12(fp)
 100b97c:	10800d17 	ldw	r2,52(r2)
 100b980:	10800044 	addi	r2,r2,1
 100b984:	10c1ffcc 	andi	r3,r2,2047
 100b988:	e0bffd17 	ldw	r2,-12(fp)
 100b98c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100b990:	e0bff817 	ldw	r2,-32(fp)
 100b994:	10bfffc4 	addi	r2,r2,-1
 100b998:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b99c:	e0bff817 	ldw	r2,-32(fp)
 100b9a0:	1005003a 	cmpeq	r2,r2,zero
 100b9a4:	1000051e 	bne	r2,zero,100b9bc <altera_avalon_jtag_uart_irq+0x1c8>
 100b9a8:	e0bffd17 	ldw	r2,-12(fp)
 100b9ac:	10c00d17 	ldw	r3,52(r2)
 100b9b0:	e0bffd17 	ldw	r2,-12(fp)
 100b9b4:	10800c17 	ldw	r2,48(r2)
 100b9b8:	18bfe31e 	bne	r3,r2,100b948 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100b9bc:	e0bff817 	ldw	r2,-32(fp)
 100b9c0:	1005003a 	cmpeq	r2,r2,zero
 100b9c4:	103f961e 	bne	r2,zero,100b820 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b9c8:	e0bffd17 	ldw	r2,-12(fp)
 100b9cc:	10c00817 	ldw	r3,32(r2)
 100b9d0:	00bfff44 	movi	r2,-3
 100b9d4:	1886703a 	and	r3,r3,r2
 100b9d8:	e0bffd17 	ldw	r2,-12(fp)
 100b9dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b9e0:	e0bffd17 	ldw	r2,-12(fp)
 100b9e4:	10800017 	ldw	r2,0(r2)
 100b9e8:	11000104 	addi	r4,r2,4
 100b9ec:	e0bffd17 	ldw	r2,-12(fp)
 100b9f0:	10800817 	ldw	r2,32(r2)
 100b9f4:	1007883a 	mov	r3,r2
 100b9f8:	2005883a 	mov	r2,r4
 100b9fc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ba00:	e0bffc17 	ldw	r2,-16(fp)
 100ba04:	10800104 	addi	r2,r2,4
 100ba08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100ba0c:	003f8406 	br	100b820 <altera_avalon_jtag_uart_irq+0x2c>
}
 100ba10:	e037883a 	mov	sp,fp
 100ba14:	df000017 	ldw	fp,0(sp)
 100ba18:	dec00104 	addi	sp,sp,4
 100ba1c:	f800283a 	ret

0100ba20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100ba20:	defffc04 	addi	sp,sp,-16
 100ba24:	df000315 	stw	fp,12(sp)
 100ba28:	df000304 	addi	fp,sp,12
 100ba2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100ba30:	e0bfff17 	ldw	r2,-4(fp)
 100ba34:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100ba38:	e0bffe17 	ldw	r2,-8(fp)
 100ba3c:	10800017 	ldw	r2,0(r2)
 100ba40:	10800104 	addi	r2,r2,4
 100ba44:	10800037 	ldwio	r2,0(r2)
 100ba48:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100ba4c:	e0bffd17 	ldw	r2,-12(fp)
 100ba50:	1081000c 	andi	r2,r2,1024
 100ba54:	1005003a 	cmpeq	r2,r2,zero
 100ba58:	10000c1e 	bne	r2,zero,100ba8c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100ba5c:	e0bffe17 	ldw	r2,-8(fp)
 100ba60:	10800017 	ldw	r2,0(r2)
 100ba64:	11000104 	addi	r4,r2,4
 100ba68:	e0bffe17 	ldw	r2,-8(fp)
 100ba6c:	10800817 	ldw	r2,32(r2)
 100ba70:	10810014 	ori	r2,r2,1024
 100ba74:	1007883a 	mov	r3,r2
 100ba78:	2005883a 	mov	r2,r4
 100ba7c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100ba80:	e0bffe17 	ldw	r2,-8(fp)
 100ba84:	10000915 	stw	zero,36(r2)
 100ba88:	00000a06 	br	100bab4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100ba8c:	e0bffe17 	ldw	r2,-8(fp)
 100ba90:	10c00917 	ldw	r3,36(r2)
 100ba94:	00a00034 	movhi	r2,32768
 100ba98:	10bfff04 	addi	r2,r2,-4
 100ba9c:	10c00536 	bltu	r2,r3,100bab4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100baa0:	e0bffe17 	ldw	r2,-8(fp)
 100baa4:	10800917 	ldw	r2,36(r2)
 100baa8:	10c00044 	addi	r3,r2,1
 100baac:	e0bffe17 	ldw	r2,-8(fp)
 100bab0:	10c00915 	stw	r3,36(r2)
 100bab4:	00804074 	movhi	r2,257
 100bab8:	1088ad04 	addi	r2,r2,8884
 100babc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100bac0:	e037883a 	mov	sp,fp
 100bac4:	df000017 	ldw	fp,0(sp)
 100bac8:	dec00104 	addi	sp,sp,4
 100bacc:	f800283a 	ret

0100bad0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100bad0:	defffc04 	addi	sp,sp,-16
 100bad4:	df000315 	stw	fp,12(sp)
 100bad8:	df000304 	addi	fp,sp,12
 100badc:	e13ffd15 	stw	r4,-12(fp)
 100bae0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bae4:	00000706 	br	100bb04 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100bae8:	e0bffe17 	ldw	r2,-8(fp)
 100baec:	1090000c 	andi	r2,r2,16384
 100baf0:	1005003a 	cmpeq	r2,r2,zero
 100baf4:	1000031e 	bne	r2,zero,100bb04 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100baf8:	00bffd44 	movi	r2,-11
 100bafc:	e0bfff15 	stw	r2,-4(fp)
 100bb00:	00000b06 	br	100bb30 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bb04:	e0bffd17 	ldw	r2,-12(fp)
 100bb08:	10c00d17 	ldw	r3,52(r2)
 100bb0c:	e0bffd17 	ldw	r2,-12(fp)
 100bb10:	10800c17 	ldw	r2,48(r2)
 100bb14:	18800526 	beq	r3,r2,100bb2c <altera_avalon_jtag_uart_close+0x5c>
 100bb18:	e0bffd17 	ldw	r2,-12(fp)
 100bb1c:	10c00917 	ldw	r3,36(r2)
 100bb20:	e0bffd17 	ldw	r2,-12(fp)
 100bb24:	10800117 	ldw	r2,4(r2)
 100bb28:	18bfef36 	bltu	r3,r2,100bae8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100bb2c:	e03fff15 	stw	zero,-4(fp)
 100bb30:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb34:	e037883a 	mov	sp,fp
 100bb38:	df000017 	ldw	fp,0(sp)
 100bb3c:	dec00104 	addi	sp,sp,4
 100bb40:	f800283a 	ret

0100bb44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100bb44:	defff804 	addi	sp,sp,-32
 100bb48:	df000715 	stw	fp,28(sp)
 100bb4c:	df000704 	addi	fp,sp,28
 100bb50:	e13ffb15 	stw	r4,-20(fp)
 100bb54:	e17ffc15 	stw	r5,-16(fp)
 100bb58:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100bb5c:	00bff9c4 	movi	r2,-25
 100bb60:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100bb64:	e0bffc17 	ldw	r2,-16(fp)
 100bb68:	e0bfff15 	stw	r2,-4(fp)
 100bb6c:	e0ffff17 	ldw	r3,-4(fp)
 100bb70:	189a8060 	cmpeqi	r2,r3,27137
 100bb74:	1000041e 	bne	r2,zero,100bb88 <altera_avalon_jtag_uart_ioctl+0x44>
 100bb78:	e0ffff17 	ldw	r3,-4(fp)
 100bb7c:	189a80a0 	cmpeqi	r2,r3,27138
 100bb80:	10001b1e 	bne	r2,zero,100bbf0 <altera_avalon_jtag_uart_ioctl+0xac>
 100bb84:	00002706 	br	100bc24 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100bb88:	e0bffb17 	ldw	r2,-20(fp)
 100bb8c:	10c00117 	ldw	r3,4(r2)
 100bb90:	00a00034 	movhi	r2,32768
 100bb94:	10bfffc4 	addi	r2,r2,-1
 100bb98:	18802226 	beq	r3,r2,100bc24 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100bb9c:	e0bffd17 	ldw	r2,-12(fp)
 100bba0:	10800017 	ldw	r2,0(r2)
 100bba4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100bba8:	e0bff917 	ldw	r2,-28(fp)
 100bbac:	10800090 	cmplti	r2,r2,2
 100bbb0:	1000071e 	bne	r2,zero,100bbd0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bbb4:	e0fff917 	ldw	r3,-28(fp)
 100bbb8:	00a00034 	movhi	r2,32768
 100bbbc:	10bfffc4 	addi	r2,r2,-1
 100bbc0:	18800326 	beq	r3,r2,100bbd0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bbc4:	e0bff917 	ldw	r2,-28(fp)
 100bbc8:	e0bffe15 	stw	r2,-8(fp)
 100bbcc:	00000306 	br	100bbdc <altera_avalon_jtag_uart_ioctl+0x98>
 100bbd0:	00e00034 	movhi	r3,32768
 100bbd4:	18ffff84 	addi	r3,r3,-2
 100bbd8:	e0fffe15 	stw	r3,-8(fp)
 100bbdc:	e0bffb17 	ldw	r2,-20(fp)
 100bbe0:	e0fffe17 	ldw	r3,-8(fp)
 100bbe4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100bbe8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100bbec:	00000d06 	br	100bc24 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100bbf0:	e0bffb17 	ldw	r2,-20(fp)
 100bbf4:	10c00117 	ldw	r3,4(r2)
 100bbf8:	00a00034 	movhi	r2,32768
 100bbfc:	10bfffc4 	addi	r2,r2,-1
 100bc00:	18800826 	beq	r3,r2,100bc24 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100bc04:	e13ffd17 	ldw	r4,-12(fp)
 100bc08:	e0bffb17 	ldw	r2,-20(fp)
 100bc0c:	10c00917 	ldw	r3,36(r2)
 100bc10:	e0bffb17 	ldw	r2,-20(fp)
 100bc14:	10800117 	ldw	r2,4(r2)
 100bc18:	1885803a 	cmpltu	r2,r3,r2
 100bc1c:	20800015 	stw	r2,0(r4)
      rc = 0;
 100bc20:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100bc24:	e0bffa17 	ldw	r2,-24(fp)
}
 100bc28:	e037883a 	mov	sp,fp
 100bc2c:	df000017 	ldw	fp,0(sp)
 100bc30:	dec00104 	addi	sp,sp,4
 100bc34:	f800283a 	ret

0100bc38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100bc38:	defff204 	addi	sp,sp,-56
 100bc3c:	dfc00d15 	stw	ra,52(sp)
 100bc40:	df000c15 	stw	fp,48(sp)
 100bc44:	df000c04 	addi	fp,sp,48
 100bc48:	e13ffb15 	stw	r4,-20(fp)
 100bc4c:	e17ffc15 	stw	r5,-16(fp)
 100bc50:	e1bffd15 	stw	r6,-12(fp)
 100bc54:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100bc58:	e0bffc17 	ldw	r2,-16(fp)
 100bc5c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100bc60:	00004806 	br	100bd84 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100bc64:	e0bffb17 	ldw	r2,-20(fp)
 100bc68:	10800a17 	ldw	r2,40(r2)
 100bc6c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100bc70:	e0bffb17 	ldw	r2,-20(fp)
 100bc74:	10800b17 	ldw	r2,44(r2)
 100bc78:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100bc7c:	e0fff717 	ldw	r3,-36(fp)
 100bc80:	e0bff617 	ldw	r2,-40(fp)
 100bc84:	18800536 	bltu	r3,r2,100bc9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100bc88:	e0bff717 	ldw	r2,-36(fp)
 100bc8c:	e0fff617 	ldw	r3,-40(fp)
 100bc90:	10c5c83a 	sub	r2,r2,r3
 100bc94:	e0bff815 	stw	r2,-32(fp)
 100bc98:	00000406 	br	100bcac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100bc9c:	00820004 	movi	r2,2048
 100bca0:	e0fff617 	ldw	r3,-40(fp)
 100bca4:	10c5c83a 	sub	r2,r2,r3
 100bca8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100bcac:	e0bff817 	ldw	r2,-32(fp)
 100bcb0:	1005003a 	cmpeq	r2,r2,zero
 100bcb4:	10001f1e 	bne	r2,zero,100bd34 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100bcb8:	e0fffd17 	ldw	r3,-12(fp)
 100bcbc:	e0bff817 	ldw	r2,-32(fp)
 100bcc0:	1880022e 	bgeu	r3,r2,100bccc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100bcc4:	e0bffd17 	ldw	r2,-12(fp)
 100bcc8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100bccc:	e0bffb17 	ldw	r2,-20(fp)
 100bcd0:	10c00e04 	addi	r3,r2,56
 100bcd4:	e0bff617 	ldw	r2,-40(fp)
 100bcd8:	1887883a 	add	r3,r3,r2
 100bcdc:	e0bffa17 	ldw	r2,-24(fp)
 100bce0:	1009883a 	mov	r4,r2
 100bce4:	180b883a 	mov	r5,r3
 100bce8:	e1bff817 	ldw	r6,-32(fp)
 100bcec:	1005e8c0 	call	1005e8c <memcpy>
      ptr   += n;
 100bcf0:	e0fff817 	ldw	r3,-32(fp)
 100bcf4:	e0bffa17 	ldw	r2,-24(fp)
 100bcf8:	10c5883a 	add	r2,r2,r3
 100bcfc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100bd00:	e0fffd17 	ldw	r3,-12(fp)
 100bd04:	e0bff817 	ldw	r2,-32(fp)
 100bd08:	1885c83a 	sub	r2,r3,r2
 100bd0c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bd10:	e0fff617 	ldw	r3,-40(fp)
 100bd14:	e0bff817 	ldw	r2,-32(fp)
 100bd18:	1885883a 	add	r2,r3,r2
 100bd1c:	10c1ffcc 	andi	r3,r2,2047
 100bd20:	e0bffb17 	ldw	r2,-20(fp)
 100bd24:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100bd28:	e0bffd17 	ldw	r2,-12(fp)
 100bd2c:	10800048 	cmpgei	r2,r2,1
 100bd30:	103fcc1e 	bne	r2,zero,100bc64 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100bd34:	e0fffa17 	ldw	r3,-24(fp)
 100bd38:	e0bffc17 	ldw	r2,-16(fp)
 100bd3c:	1880141e 	bne	r3,r2,100bd90 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100bd40:	e0bffe17 	ldw	r2,-8(fp)
 100bd44:	1090000c 	andi	r2,r2,16384
 100bd48:	1004c03a 	cmpne	r2,r2,zero
 100bd4c:	1000101e 	bne	r2,zero,100bd90 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100bd50:	e0bffb17 	ldw	r2,-20(fp)
 100bd54:	10c00a17 	ldw	r3,40(r2)
 100bd58:	e0bff717 	ldw	r2,-36(fp)
 100bd5c:	1880051e 	bne	r3,r2,100bd74 <altera_avalon_jtag_uart_read+0x13c>
 100bd60:	e0bffb17 	ldw	r2,-20(fp)
 100bd64:	10c00917 	ldw	r3,36(r2)
 100bd68:	e0bffb17 	ldw	r2,-20(fp)
 100bd6c:	10800117 	ldw	r2,4(r2)
 100bd70:	18bff736 	bltu	r3,r2,100bd50 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100bd74:	e0bffb17 	ldw	r2,-20(fp)
 100bd78:	10c00a17 	ldw	r3,40(r2)
 100bd7c:	e0bff717 	ldw	r2,-36(fp)
 100bd80:	18800326 	beq	r3,r2,100bd90 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100bd84:	e0bffd17 	ldw	r2,-12(fp)
 100bd88:	10800048 	cmpgei	r2,r2,1
 100bd8c:	103fb51e 	bne	r2,zero,100bc64 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100bd90:	e0fffa17 	ldw	r3,-24(fp)
 100bd94:	e0bffc17 	ldw	r2,-16(fp)
 100bd98:	18801926 	beq	r3,r2,100be00 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bd9c:	0005303a 	rdctl	r2,status
 100bda0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bda4:	e0fff517 	ldw	r3,-44(fp)
 100bda8:	00bfff84 	movi	r2,-2
 100bdac:	1884703a 	and	r2,r3,r2
 100bdb0:	1001703a 	wrctl	status,r2
  
  return context;
 100bdb4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100bdb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100bdbc:	e0bffb17 	ldw	r2,-20(fp)
 100bdc0:	10800817 	ldw	r2,32(r2)
 100bdc4:	10c00054 	ori	r3,r2,1
 100bdc8:	e0bffb17 	ldw	r2,-20(fp)
 100bdcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100bdd0:	e0bffb17 	ldw	r2,-20(fp)
 100bdd4:	10800017 	ldw	r2,0(r2)
 100bdd8:	11000104 	addi	r4,r2,4
 100bddc:	e0bffb17 	ldw	r2,-20(fp)
 100bde0:	10800817 	ldw	r2,32(r2)
 100bde4:	1007883a 	mov	r3,r2
 100bde8:	2005883a 	mov	r2,r4
 100bdec:	10c00035 	stwio	r3,0(r2)
 100bdf0:	e0bff917 	ldw	r2,-28(fp)
 100bdf4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bdf8:	e0bff417 	ldw	r2,-48(fp)
 100bdfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100be00:	e0fffa17 	ldw	r3,-24(fp)
 100be04:	e0bffc17 	ldw	r2,-16(fp)
 100be08:	18800526 	beq	r3,r2,100be20 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100be0c:	e0fffa17 	ldw	r3,-24(fp)
 100be10:	e0bffc17 	ldw	r2,-16(fp)
 100be14:	1887c83a 	sub	r3,r3,r2
 100be18:	e0ffff15 	stw	r3,-4(fp)
 100be1c:	00000906 	br	100be44 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100be20:	e0bffe17 	ldw	r2,-8(fp)
 100be24:	1090000c 	andi	r2,r2,16384
 100be28:	1005003a 	cmpeq	r2,r2,zero
 100be2c:	1000031e 	bne	r2,zero,100be3c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100be30:	00bffd44 	movi	r2,-11
 100be34:	e0bfff15 	stw	r2,-4(fp)
 100be38:	00000206 	br	100be44 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100be3c:	00bffec4 	movi	r2,-5
 100be40:	e0bfff15 	stw	r2,-4(fp)
 100be44:	e0bfff17 	ldw	r2,-4(fp)
}
 100be48:	e037883a 	mov	sp,fp
 100be4c:	dfc00117 	ldw	ra,4(sp)
 100be50:	df000017 	ldw	fp,0(sp)
 100be54:	dec00204 	addi	sp,sp,8
 100be58:	f800283a 	ret

0100be5c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100be5c:	defff204 	addi	sp,sp,-56
 100be60:	dfc00d15 	stw	ra,52(sp)
 100be64:	df000c15 	stw	fp,48(sp)
 100be68:	df000c04 	addi	fp,sp,48
 100be6c:	e13ffb15 	stw	r4,-20(fp)
 100be70:	e17ffc15 	stw	r5,-16(fp)
 100be74:	e1bffd15 	stw	r6,-12(fp)
 100be78:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100be7c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100be80:	e0bffc17 	ldw	r2,-16(fp)
 100be84:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100be88:	00003a06 	br	100bf74 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100be8c:	e0bffb17 	ldw	r2,-20(fp)
 100be90:	10800c17 	ldw	r2,48(r2)
 100be94:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100be98:	e0bffb17 	ldw	r2,-20(fp)
 100be9c:	10800d17 	ldw	r2,52(r2)
 100bea0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100bea4:	e0fffa17 	ldw	r3,-24(fp)
 100bea8:	e0bff917 	ldw	r2,-28(fp)
 100beac:	1880062e 	bgeu	r3,r2,100bec8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100beb0:	e0fff917 	ldw	r3,-28(fp)
 100beb4:	e0bffa17 	ldw	r2,-24(fp)
 100beb8:	1885c83a 	sub	r2,r3,r2
 100bebc:	10bfffc4 	addi	r2,r2,-1
 100bec0:	e0bff815 	stw	r2,-32(fp)
 100bec4:	00000c06 	br	100bef8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100bec8:	e0bff917 	ldw	r2,-28(fp)
 100becc:	1005003a 	cmpeq	r2,r2,zero
 100bed0:	1000051e 	bne	r2,zero,100bee8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100bed4:	00820004 	movi	r2,2048
 100bed8:	e0fffa17 	ldw	r3,-24(fp)
 100bedc:	10c5c83a 	sub	r2,r2,r3
 100bee0:	e0bff815 	stw	r2,-32(fp)
 100bee4:	00000406 	br	100bef8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100bee8:	0081ffc4 	movi	r2,2047
 100beec:	e0fffa17 	ldw	r3,-24(fp)
 100bef0:	10c5c83a 	sub	r2,r2,r3
 100bef4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100bef8:	e0bff817 	ldw	r2,-32(fp)
 100befc:	1005003a 	cmpeq	r2,r2,zero
 100bf00:	10001f1e 	bne	r2,zero,100bf80 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100bf04:	e0fffd17 	ldw	r3,-12(fp)
 100bf08:	e0bff817 	ldw	r2,-32(fp)
 100bf0c:	1880022e 	bgeu	r3,r2,100bf18 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100bf10:	e0bffd17 	ldw	r2,-12(fp)
 100bf14:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100bf18:	e0bffb17 	ldw	r2,-20(fp)
 100bf1c:	10c20e04 	addi	r3,r2,2104
 100bf20:	e0bffa17 	ldw	r2,-24(fp)
 100bf24:	1885883a 	add	r2,r3,r2
 100bf28:	e0fffc17 	ldw	r3,-16(fp)
 100bf2c:	1009883a 	mov	r4,r2
 100bf30:	180b883a 	mov	r5,r3
 100bf34:	e1bff817 	ldw	r6,-32(fp)
 100bf38:	1005e8c0 	call	1005e8c <memcpy>
      ptr   += n;
 100bf3c:	e0fff817 	ldw	r3,-32(fp)
 100bf40:	e0bffc17 	ldw	r2,-16(fp)
 100bf44:	10c5883a 	add	r2,r2,r3
 100bf48:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100bf4c:	e0fffd17 	ldw	r3,-12(fp)
 100bf50:	e0bff817 	ldw	r2,-32(fp)
 100bf54:	1885c83a 	sub	r2,r3,r2
 100bf58:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bf5c:	e0fffa17 	ldw	r3,-24(fp)
 100bf60:	e0bff817 	ldw	r2,-32(fp)
 100bf64:	1885883a 	add	r2,r3,r2
 100bf68:	10c1ffcc 	andi	r3,r2,2047
 100bf6c:	e0bffb17 	ldw	r2,-20(fp)
 100bf70:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100bf74:	e0bffd17 	ldw	r2,-12(fp)
 100bf78:	10800048 	cmpgei	r2,r2,1
 100bf7c:	103fc31e 	bne	r2,zero,100be8c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bf80:	0005303a 	rdctl	r2,status
 100bf84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bf88:	e0fff517 	ldw	r3,-44(fp)
 100bf8c:	00bfff84 	movi	r2,-2
 100bf90:	1884703a 	and	r2,r3,r2
 100bf94:	1001703a 	wrctl	status,r2
  
  return context;
 100bf98:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100bf9c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100bfa0:	e0bffb17 	ldw	r2,-20(fp)
 100bfa4:	10800817 	ldw	r2,32(r2)
 100bfa8:	10c00094 	ori	r3,r2,2
 100bfac:	e0bffb17 	ldw	r2,-20(fp)
 100bfb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100bfb4:	e0bffb17 	ldw	r2,-20(fp)
 100bfb8:	10800017 	ldw	r2,0(r2)
 100bfbc:	11000104 	addi	r4,r2,4
 100bfc0:	e0bffb17 	ldw	r2,-20(fp)
 100bfc4:	10800817 	ldw	r2,32(r2)
 100bfc8:	1007883a 	mov	r3,r2
 100bfcc:	2005883a 	mov	r2,r4
 100bfd0:	10c00035 	stwio	r3,0(r2)
 100bfd4:	e0bff717 	ldw	r2,-36(fp)
 100bfd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bfdc:	e0bff417 	ldw	r2,-48(fp)
 100bfe0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100bfe4:	e0bffd17 	ldw	r2,-12(fp)
 100bfe8:	10800050 	cmplti	r2,r2,1
 100bfec:	1000111e 	bne	r2,zero,100c034 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100bff0:	e0bffe17 	ldw	r2,-8(fp)
 100bff4:	1090000c 	andi	r2,r2,16384
 100bff8:	1004c03a 	cmpne	r2,r2,zero
 100bffc:	1000101e 	bne	r2,zero,100c040 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100c000:	e0bffb17 	ldw	r2,-20(fp)
 100c004:	10c00d17 	ldw	r3,52(r2)
 100c008:	e0bff917 	ldw	r2,-28(fp)
 100c00c:	1880051e 	bne	r3,r2,100c024 <altera_avalon_jtag_uart_write+0x1c8>
 100c010:	e0bffb17 	ldw	r2,-20(fp)
 100c014:	10c00917 	ldw	r3,36(r2)
 100c018:	e0bffb17 	ldw	r2,-20(fp)
 100c01c:	10800117 	ldw	r2,4(r2)
 100c020:	18bff736 	bltu	r3,r2,100c000 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100c024:	e0bffb17 	ldw	r2,-20(fp)
 100c028:	10c00d17 	ldw	r3,52(r2)
 100c02c:	e0bff917 	ldw	r2,-28(fp)
 100c030:	18800326 	beq	r3,r2,100c040 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100c034:	e0bffd17 	ldw	r2,-12(fp)
 100c038:	10800048 	cmpgei	r2,r2,1
 100c03c:	103fcd1e 	bne	r2,zero,100bf74 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100c040:	e0fffc17 	ldw	r3,-16(fp)
 100c044:	e0bff617 	ldw	r2,-40(fp)
 100c048:	18800526 	beq	r3,r2,100c060 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100c04c:	e0fffc17 	ldw	r3,-16(fp)
 100c050:	e0bff617 	ldw	r2,-40(fp)
 100c054:	1887c83a 	sub	r3,r3,r2
 100c058:	e0ffff15 	stw	r3,-4(fp)
 100c05c:	00000906 	br	100c084 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100c060:	e0bffe17 	ldw	r2,-8(fp)
 100c064:	1090000c 	andi	r2,r2,16384
 100c068:	1005003a 	cmpeq	r2,r2,zero
 100c06c:	1000031e 	bne	r2,zero,100c07c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100c070:	00bffd44 	movi	r2,-11
 100c074:	e0bfff15 	stw	r2,-4(fp)
 100c078:	00000206 	br	100c084 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100c07c:	00bffec4 	movi	r2,-5
 100c080:	e0bfff15 	stw	r2,-4(fp)
 100c084:	e0bfff17 	ldw	r2,-4(fp)
}
 100c088:	e037883a 	mov	sp,fp
 100c08c:	dfc00117 	ldw	ra,4(sp)
 100c090:	df000017 	ldw	fp,0(sp)
 100c094:	dec00204 	addi	sp,sp,8
 100c098:	f800283a 	ret

0100c09c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100c09c:	defff904 	addi	sp,sp,-28
 100c0a0:	dfc00615 	stw	ra,24(sp)
 100c0a4:	df000515 	stw	fp,20(sp)
 100c0a8:	df000504 	addi	fp,sp,20
 100c0ac:	e13ffe15 	stw	r4,-8(fp)
 100c0b0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100c0b4:	e0bffe17 	ldw	r2,-8(fp)
 100c0b8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100c0bc:	e0bffe17 	ldw	r2,-8(fp)
 100c0c0:	10800104 	addi	r2,r2,4
 100c0c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c0c8:	0005303a 	rdctl	r2,status
 100c0cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c0d0:	e0fffc17 	ldw	r3,-16(fp)
 100c0d4:	00bfff84 	movi	r2,-2
 100c0d8:	1884703a 	and	r2,r3,r2
 100c0dc:	1001703a 	wrctl	status,r2
  
  return context;
 100c0e0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100c0e4:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 100c0e8:	100dd340 	call	100dd34 <alt_tick>
 100c0ec:	e0bffd17 	ldw	r2,-12(fp)
 100c0f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c0f4:	e0bffb17 	ldw	r2,-20(fp)
 100c0f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100c0fc:	e037883a 	mov	sp,fp
 100c100:	dfc00117 	ldw	ra,4(sp)
 100c104:	df000017 	ldw	fp,0(sp)
 100c108:	dec00204 	addi	sp,sp,8
 100c10c:	f800283a 	ret

0100c110 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100c110:	defff904 	addi	sp,sp,-28
 100c114:	dfc00615 	stw	ra,24(sp)
 100c118:	df000515 	stw	fp,20(sp)
 100c11c:	df000504 	addi	fp,sp,20
 100c120:	e13ffc15 	stw	r4,-16(fp)
 100c124:	e17ffd15 	stw	r5,-12(fp)
 100c128:	e1bffe15 	stw	r6,-8(fp)
 100c12c:	e1ffff15 	stw	r7,-4(fp)
 100c130:	e0bfff17 	ldw	r2,-4(fp)
 100c134:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100c138:	00804074 	movhi	r2,257
 100c13c:	1088ad04 	addi	r2,r2,8884
 100c140:	10800017 	ldw	r2,0(r2)
 100c144:	1004c03a 	cmpne	r2,r2,zero
 100c148:	1000041e 	bne	r2,zero,100c15c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100c14c:	00c04074 	movhi	r3,257
 100c150:	18c8ad04 	addi	r3,r3,8884
 100c154:	e0bffb17 	ldw	r2,-20(fp)
 100c158:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100c15c:	e0bffc17 	ldw	r2,-16(fp)
 100c160:	10800104 	addi	r2,r2,4
 100c164:	1007883a 	mov	r3,r2
 100c168:	008001c4 	movi	r2,7
 100c16c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100c170:	e13ffe17 	ldw	r4,-8(fp)
 100c174:	e17ffc17 	ldw	r5,-16(fp)
 100c178:	01804074 	movhi	r6,257
 100c17c:	31b02704 	addi	r6,r6,-16228
 100c180:	100a82c0 	call	100a82c <alt_irq_register>
#endif  
}
 100c184:	e037883a 	mov	sp,fp
 100c188:	dfc00117 	ldw	ra,4(sp)
 100c18c:	df000017 	ldw	fp,0(sp)
 100c190:	dec00204 	addi	sp,sp,8
 100c194:	f800283a 	ret

0100c198 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100c198:	defffc04 	addi	sp,sp,-16
 100c19c:	df000315 	stw	fp,12(sp)
 100c1a0:	df000304 	addi	fp,sp,12
 100c1a4:	e13ffe15 	stw	r4,-8(fp)
 100c1a8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100c1ac:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100c1b0:	e0bfff17 	ldw	r2,-4(fp)
 100c1b4:	1004c03a 	cmpne	r2,r2,zero
 100c1b8:	1000061e 	bne	r2,zero,100c1d4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100c1bc:	e0bffe17 	ldw	r2,-8(fp)
 100c1c0:	1007883a 	mov	r3,r2
 100c1c4:	e0bffd03 	ldbu	r2,-12(fp)
 100c1c8:	10c4b03a 	or	r2,r2,r3
 100c1cc:	e0bffd05 	stb	r2,-12(fp)
 100c1d0:	00000806 	br	100c1f4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100c1d4:	e0bffe17 	ldw	r2,-8(fp)
 100c1d8:	1007883a 	mov	r3,r2
 100c1dc:	e0bffd03 	ldbu	r2,-12(fp)
 100c1e0:	10c4b03a 	or	r2,r2,r3
 100c1e4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100c1e8:	e0bffd03 	ldbu	r2,-12(fp)
 100c1ec:	10801014 	ori	r2,r2,64
 100c1f0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100c1f4:	e0fffd03 	ldbu	r3,-12(fp)
 100c1f8:	00bfe004 	movi	r2,-128
 100c1fc:	1884b03a 	or	r2,r3,r2
 100c200:	10803fcc 	andi	r2,r2,255
}
 100c204:	e037883a 	mov	sp,fp
 100c208:	df000017 	ldw	fp,0(sp)
 100c20c:	dec00104 	addi	sp,sp,4
 100c210:	f800283a 	ret

0100c214 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100c214:	defffd04 	addi	sp,sp,-12
 100c218:	df000215 	stw	fp,8(sp)
 100c21c:	df000204 	addi	fp,sp,8
 100c220:	e13ffe15 	stw	r4,-8(fp)
 100c224:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100c228:	e0bffe17 	ldw	r2,-8(fp)
 100c22c:	10800a17 	ldw	r2,40(r2)
 100c230:	e0ffff03 	ldbu	r3,-4(fp)
 100c234:	10c00025 	stbio	r3,0(r2)
}
 100c238:	e037883a 	mov	sp,fp
 100c23c:	df000017 	ldw	fp,0(sp)
 100c240:	dec00104 	addi	sp,sp,4
 100c244:	f800283a 	ret

0100c248 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100c248:	defffe04 	addi	sp,sp,-8
 100c24c:	df000115 	stw	fp,4(sp)
 100c250:	df000104 	addi	fp,sp,4
 100c254:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100c258:	e0bfff17 	ldw	r2,-4(fp)
 100c25c:	10800a17 	ldw	r2,40(r2)
 100c260:	1007883a 	mov	r3,r2
 100c264:	00800044 	movi	r2,1
 100c268:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100c26c:	e037883a 	mov	sp,fp
 100c270:	df000017 	ldw	fp,0(sp)
 100c274:	dec00104 	addi	sp,sp,4
 100c278:	f800283a 	ret

0100c27c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100c27c:	defffc04 	addi	sp,sp,-16
 100c280:	dfc00315 	stw	ra,12(sp)
 100c284:	df000215 	stw	fp,8(sp)
 100c288:	df000204 	addi	fp,sp,8
 100c28c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100c290:	e13fff17 	ldw	r4,-4(fp)
 100c294:	01404074 	movhi	r5,257
 100c298:	29418304 	addi	r5,r5,1548
 100c29c:	100d7d80 	call	100d7d8 <alt_find_dev>
 100c2a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100c2a4:	e0bffe17 	ldw	r2,-8(fp)
}
 100c2a8:	e037883a 	mov	sp,fp
 100c2ac:	dfc00117 	ldw	ra,4(sp)
 100c2b0:	df000017 	ldw	fp,0(sp)
 100c2b4:	dec00204 	addi	sp,sp,8
 100c2b8:	f800283a 	ret

0100c2bc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100c2bc:	defffb04 	addi	sp,sp,-20
 100c2c0:	df000415 	stw	fp,16(sp)
 100c2c4:	df000404 	addi	fp,sp,16
 100c2c8:	e13ffd15 	stw	r4,-12(fp)
 100c2cc:	e17ffe15 	stw	r5,-8(fp)
 100c2d0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100c2d4:	e03ffc15 	stw	zero,-16(fp)
 100c2d8:	00000f06 	br	100c318 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100c2dc:	e0bffd17 	ldw	r2,-12(fp)
 100c2e0:	10800a17 	ldw	r2,40(r2)
 100c2e4:	11000044 	addi	r4,r2,1
 100c2e8:	e0fffc17 	ldw	r3,-16(fp)
 100c2ec:	e0bffe17 	ldw	r2,-8(fp)
 100c2f0:	1885883a 	add	r2,r3,r2
 100c2f4:	10800003 	ldbu	r2,0(r2)
 100c2f8:	10c03fcc 	andi	r3,r2,255
 100c2fc:	18c0201c 	xori	r3,r3,128
 100c300:	18ffe004 	addi	r3,r3,-128
 100c304:	2005883a 	mov	r2,r4
 100c308:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100c30c:	e0bffc17 	ldw	r2,-16(fp)
 100c310:	10800044 	addi	r2,r2,1
 100c314:	e0bffc15 	stw	r2,-16(fp)
 100c318:	e0fffc17 	ldw	r3,-16(fp)
 100c31c:	e0bfff17 	ldw	r2,-4(fp)
 100c320:	18bfee36 	bltu	r3,r2,100c2dc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100c324:	e037883a 	mov	sp,fp
 100c328:	df000017 	ldw	fp,0(sp)
 100c32c:	dec00104 	addi	sp,sp,4
 100c330:	f800283a 	ret

0100c334 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100c334:	defffd04 	addi	sp,sp,-12
 100c338:	df000215 	stw	fp,8(sp)
 100c33c:	df000204 	addi	fp,sp,8
 100c340:	e13ffe15 	stw	r4,-8(fp)
 100c344:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100c348:	00000d06 	br	100c380 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100c34c:	e0bffe17 	ldw	r2,-8(fp)
 100c350:	10800a17 	ldw	r2,40(r2)
 100c354:	11000044 	addi	r4,r2,1
 100c358:	e0bfff17 	ldw	r2,-4(fp)
 100c35c:	10800003 	ldbu	r2,0(r2)
 100c360:	10c03fcc 	andi	r3,r2,255
 100c364:	18c0201c 	xori	r3,r3,128
 100c368:	18ffe004 	addi	r3,r3,-128
 100c36c:	2005883a 	mov	r2,r4
 100c370:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100c374:	e0bfff17 	ldw	r2,-4(fp)
 100c378:	10800044 	addi	r2,r2,1
 100c37c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100c380:	e0bfff17 	ldw	r2,-4(fp)
 100c384:	10800003 	ldbu	r2,0(r2)
 100c388:	10803fcc 	andi	r2,r2,255
 100c38c:	1080201c 	xori	r2,r2,128
 100c390:	10bfe004 	addi	r2,r2,-128
 100c394:	1004c03a 	cmpne	r2,r2,zero
 100c398:	103fec1e 	bne	r2,zero,100c34c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100c39c:	e037883a 	mov	sp,fp
 100c3a0:	df000017 	ldw	fp,0(sp)
 100c3a4:	dec00104 	addi	sp,sp,4
 100c3a8:	f800283a 	ret

0100c3ac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100c3ac:	defffb04 	addi	sp,sp,-20
 100c3b0:	dfc00415 	stw	ra,16(sp)
 100c3b4:	df000315 	stw	fp,12(sp)
 100c3b8:	df000304 	addi	fp,sp,12
 100c3bc:	e13ffd15 	stw	r4,-12(fp)
 100c3c0:	e17ffe15 	stw	r5,-8(fp)
 100c3c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100c3c8:	e0bffd17 	ldw	r2,-12(fp)
 100c3cc:	10800017 	ldw	r2,0(r2)
 100c3d0:	1009883a 	mov	r4,r2
 100c3d4:	e1bfff17 	ldw	r6,-4(fp)
 100c3d8:	e17ffe17 	ldw	r5,-8(fp)
 100c3dc:	100c2bc0 	call	100c2bc <alt_up_character_lcd_write>
	return 0;
 100c3e0:	0005883a 	mov	r2,zero
}
 100c3e4:	e037883a 	mov	sp,fp
 100c3e8:	dfc00117 	ldw	ra,4(sp)
 100c3ec:	df000017 	ldw	fp,0(sp)
 100c3f0:	dec00204 	addi	sp,sp,8
 100c3f4:	f800283a 	ret

0100c3f8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100c3f8:	defff904 	addi	sp,sp,-28
 100c3fc:	dfc00615 	stw	ra,24(sp)
 100c400:	df000515 	stw	fp,20(sp)
 100c404:	df000504 	addi	fp,sp,20
 100c408:	e13ffc15 	stw	r4,-16(fp)
 100c40c:	e17ffd15 	stw	r5,-12(fp)
 100c410:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100c414:	e0bffd17 	ldw	r2,-12(fp)
 100c418:	10800a28 	cmpgeui	r2,r2,40
 100c41c:	1000031e 	bne	r2,zero,100c42c <alt_up_character_lcd_set_cursor_pos+0x34>
 100c420:	e0bffe17 	ldw	r2,-8(fp)
 100c424:	108000b0 	cmpltui	r2,r2,2
 100c428:	1000031e 	bne	r2,zero,100c438 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100c42c:	00bfffc4 	movi	r2,-1
 100c430:	e0bfff15 	stw	r2,-4(fp)
 100c434:	00000806 	br	100c458 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100c438:	e13ffd17 	ldw	r4,-12(fp)
 100c43c:	e17ffe17 	ldw	r5,-8(fp)
 100c440:	100c1980 	call	100c198 <get_DDRAM_addr>
 100c444:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100c448:	e17ffb03 	ldbu	r5,-20(fp)
 100c44c:	e13ffc17 	ldw	r4,-16(fp)
 100c450:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
	return 0;
 100c454:	e03fff15 	stw	zero,-4(fp)
 100c458:	e0bfff17 	ldw	r2,-4(fp)
}
 100c45c:	e037883a 	mov	sp,fp
 100c460:	dfc00117 	ldw	ra,4(sp)
 100c464:	df000017 	ldw	fp,0(sp)
 100c468:	dec00204 	addi	sp,sp,8
 100c46c:	f800283a 	ret

0100c470 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100c470:	defff904 	addi	sp,sp,-28
 100c474:	dfc00615 	stw	ra,24(sp)
 100c478:	df000515 	stw	fp,20(sp)
 100c47c:	df000504 	addi	fp,sp,20
 100c480:	e13ffc15 	stw	r4,-16(fp)
 100c484:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100c488:	e0bffd17 	ldw	r2,-12(fp)
 100c48c:	1005003a 	cmpeq	r2,r2,zero
 100c490:	10001e1e 	bne	r2,zero,100c50c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100c494:	e0bffd17 	ldw	r2,-12(fp)
 100c498:	10800050 	cmplti	r2,r2,1
 100c49c:	1000031e 	bne	r2,zero,100c4ac <alt_up_character_lcd_shift_cursor+0x3c>
 100c4a0:	00800504 	movi	r2,20
 100c4a4:	e0bfff05 	stb	r2,-4(fp)
 100c4a8:	00000206 	br	100c4b4 <alt_up_character_lcd_shift_cursor+0x44>
 100c4ac:	00c00404 	movi	r3,16
 100c4b0:	e0ffff05 	stb	r3,-4(fp)
 100c4b4:	e0bfff03 	ldbu	r2,-4(fp)
 100c4b8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100c4bc:	e0fffd17 	ldw	r3,-12(fp)
 100c4c0:	e0fffe15 	stw	r3,-8(fp)
 100c4c4:	e0fffe17 	ldw	r3,-8(fp)
 100c4c8:	1804403a 	cmpge	r2,r3,zero
 100c4cc:	1000031e 	bne	r2,zero,100c4dc <alt_up_character_lcd_shift_cursor+0x6c>
 100c4d0:	e0bffe17 	ldw	r2,-8(fp)
 100c4d4:	0085c83a 	sub	r2,zero,r2
 100c4d8:	e0bffe15 	stw	r2,-8(fp)
 100c4dc:	e0fffe17 	ldw	r3,-8(fp)
 100c4e0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100c4e4:	00000306 	br	100c4f4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100c4e8:	e17ffb43 	ldbu	r5,-19(fp)
 100c4ec:	e13ffc17 	ldw	r4,-16(fp)
 100c4f0:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100c4f4:	e0bffb03 	ldbu	r2,-20(fp)
 100c4f8:	10bfffc4 	addi	r2,r2,-1
 100c4fc:	e0bffb05 	stb	r2,-20(fp)
 100c500:	e0bffb03 	ldbu	r2,-20(fp)
 100c504:	10803fd8 	cmpnei	r2,r2,255
 100c508:	103ff71e 	bne	r2,zero,100c4e8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100c50c:	e037883a 	mov	sp,fp
 100c510:	dfc00117 	ldw	ra,4(sp)
 100c514:	df000017 	ldw	fp,0(sp)
 100c518:	dec00204 	addi	sp,sp,8
 100c51c:	f800283a 	ret

0100c520 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100c520:	defff904 	addi	sp,sp,-28
 100c524:	dfc00615 	stw	ra,24(sp)
 100c528:	df000515 	stw	fp,20(sp)
 100c52c:	df000504 	addi	fp,sp,20
 100c530:	e13ffc15 	stw	r4,-16(fp)
 100c534:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100c538:	e0bffd17 	ldw	r2,-12(fp)
 100c53c:	1005003a 	cmpeq	r2,r2,zero
 100c540:	10001e1e 	bne	r2,zero,100c5bc <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100c544:	e0bffd17 	ldw	r2,-12(fp)
 100c548:	10800050 	cmplti	r2,r2,1
 100c54c:	1000031e 	bne	r2,zero,100c55c <alt_up_character_lcd_shift_display+0x3c>
 100c550:	00800704 	movi	r2,28
 100c554:	e0bfff05 	stb	r2,-4(fp)
 100c558:	00000206 	br	100c564 <alt_up_character_lcd_shift_display+0x44>
 100c55c:	00c00604 	movi	r3,24
 100c560:	e0ffff05 	stb	r3,-4(fp)
 100c564:	e0bfff03 	ldbu	r2,-4(fp)
 100c568:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100c56c:	e0fffd17 	ldw	r3,-12(fp)
 100c570:	e0fffe15 	stw	r3,-8(fp)
 100c574:	e0fffe17 	ldw	r3,-8(fp)
 100c578:	1804403a 	cmpge	r2,r3,zero
 100c57c:	1000031e 	bne	r2,zero,100c58c <alt_up_character_lcd_shift_display+0x6c>
 100c580:	e0bffe17 	ldw	r2,-8(fp)
 100c584:	0085c83a 	sub	r2,zero,r2
 100c588:	e0bffe15 	stw	r2,-8(fp)
 100c58c:	e0fffe17 	ldw	r3,-8(fp)
 100c590:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100c594:	00000306 	br	100c5a4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100c598:	e17ffb43 	ldbu	r5,-19(fp)
 100c59c:	e13ffc17 	ldw	r4,-16(fp)
 100c5a0:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100c5a4:	e0bffb03 	ldbu	r2,-20(fp)
 100c5a8:	10bfffc4 	addi	r2,r2,-1
 100c5ac:	e0bffb05 	stb	r2,-20(fp)
 100c5b0:	e0bffb03 	ldbu	r2,-20(fp)
 100c5b4:	10803fd8 	cmpnei	r2,r2,255
 100c5b8:	103ff71e 	bne	r2,zero,100c598 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100c5bc:	e037883a 	mov	sp,fp
 100c5c0:	dfc00117 	ldw	ra,4(sp)
 100c5c4:	df000017 	ldw	fp,0(sp)
 100c5c8:	dec00204 	addi	sp,sp,8
 100c5cc:	f800283a 	ret

0100c5d0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100c5d0:	defff904 	addi	sp,sp,-28
 100c5d4:	dfc00615 	stw	ra,24(sp)
 100c5d8:	df000515 	stw	fp,20(sp)
 100c5dc:	df000504 	addi	fp,sp,20
 100c5e0:	e13ffc15 	stw	r4,-16(fp)
 100c5e4:	e17ffd15 	stw	r5,-12(fp)
 100c5e8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100c5ec:	e0bffd17 	ldw	r2,-12(fp)
 100c5f0:	10800a28 	cmpgeui	r2,r2,40
 100c5f4:	1000031e 	bne	r2,zero,100c604 <alt_up_character_lcd_erase_pos+0x34>
 100c5f8:	e0bffe17 	ldw	r2,-8(fp)
 100c5fc:	108000b0 	cmpltui	r2,r2,2
 100c600:	1000031e 	bne	r2,zero,100c610 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100c604:	00bfffc4 	movi	r2,-1
 100c608:	e0bfff15 	stw	r2,-4(fp)
 100c60c:	00000e06 	br	100c648 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100c610:	e13ffd17 	ldw	r4,-12(fp)
 100c614:	e17ffe17 	ldw	r5,-8(fp)
 100c618:	100c1980 	call	100c198 <get_DDRAM_addr>
 100c61c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100c620:	e17ffb03 	ldbu	r5,-20(fp)
 100c624:	e13ffc17 	ldw	r4,-16(fp)
 100c628:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100c62c:	e0bffc17 	ldw	r2,-16(fp)
 100c630:	10800a17 	ldw	r2,40(r2)
 100c634:	10800044 	addi	r2,r2,1
 100c638:	1007883a 	mov	r3,r2
 100c63c:	00800084 	movi	r2,2
 100c640:	18800025 	stbio	r2,0(r3)
	return 0;
 100c644:	e03fff15 	stw	zero,-4(fp)
 100c648:	e0bfff17 	ldw	r2,-4(fp)
}
 100c64c:	e037883a 	mov	sp,fp
 100c650:	dfc00117 	ldw	ra,4(sp)
 100c654:	df000017 	ldw	fp,0(sp)
 100c658:	dec00204 	addi	sp,sp,8
 100c65c:	f800283a 	ret

0100c660 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100c660:	defffd04 	addi	sp,sp,-12
 100c664:	dfc00215 	stw	ra,8(sp)
 100c668:	df000115 	stw	fp,4(sp)
 100c66c:	df000104 	addi	fp,sp,4
 100c670:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100c674:	e13fff17 	ldw	r4,-4(fp)
 100c678:	01400304 	movi	r5,12
 100c67c:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
}
 100c680:	e037883a 	mov	sp,fp
 100c684:	dfc00117 	ldw	ra,4(sp)
 100c688:	df000017 	ldw	fp,0(sp)
 100c68c:	dec00204 	addi	sp,sp,8
 100c690:	f800283a 	ret

0100c694 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100c694:	defffd04 	addi	sp,sp,-12
 100c698:	dfc00215 	stw	ra,8(sp)
 100c69c:	df000115 	stw	fp,4(sp)
 100c6a0:	df000104 	addi	fp,sp,4
 100c6a4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100c6a8:	e13fff17 	ldw	r4,-4(fp)
 100c6ac:	014003c4 	movi	r5,15
 100c6b0:	100c2140 	call	100c214 <alt_up_character_lcd_send_cmd>
}
 100c6b4:	e037883a 	mov	sp,fp
 100c6b8:	dfc00117 	ldw	ra,4(sp)
 100c6bc:	df000017 	ldw	fp,0(sp)
 100c6c0:	dec00204 	addi	sp,sp,8
 100c6c4:	f800283a 	ret

0100c6c8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 100c6c8:	defffd04 	addi	sp,sp,-12
 100c6cc:	df000215 	stw	fp,8(sp)
 100c6d0:	df000204 	addi	fp,sp,8
 100c6d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 100c6d8:	e0bfff17 	ldw	r2,-4(fp)
 100c6dc:	1080400c 	andi	r2,r2,256
 100c6e0:	1004d23a 	srli	r2,r2,8
 100c6e4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 100c6e8:	e0bffe03 	ldbu	r2,-8(fp)
}
 100c6ec:	e037883a 	mov	sp,fp
 100c6f0:	df000017 	ldw	fp,0(sp)
 100c6f4:	dec00104 	addi	sp,sp,4
 100c6f8:	f800283a 	ret

0100c6fc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 100c6fc:	defffd04 	addi	sp,sp,-12
 100c700:	df000215 	stw	fp,8(sp)
 100c704:	df000204 	addi	fp,sp,8
 100c708:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 100c70c:	e0bfff17 	ldw	r2,-4(fp)
 100c710:	1080004c 	andi	r2,r2,1
 100c714:	e0bffe05 	stb	r2,-8(fp)
	return re;
 100c718:	e0bffe03 	ldbu	r2,-8(fp)
}
 100c71c:	e037883a 	mov	sp,fp
 100c720:	df000017 	ldw	fp,0(sp)
 100c724:	dec00104 	addi	sp,sp,4
 100c728:	f800283a 	ret

0100c72c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 100c72c:	defffd04 	addi	sp,sp,-12
 100c730:	df000215 	stw	fp,8(sp)
 100c734:	df000204 	addi	fp,sp,8
 100c738:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 100c73c:	e0bfff17 	ldw	r2,-4(fp)
 100c740:	1081000c 	andi	r2,r2,1024
 100c744:	1004d2ba 	srli	r2,r2,10
 100c748:	e0bffe05 	stb	r2,-8(fp)
	return re;
 100c74c:	e0bffe03 	ldbu	r2,-8(fp)
}
 100c750:	e037883a 	mov	sp,fp
 100c754:	df000017 	ldw	fp,0(sp)
 100c758:	dec00104 	addi	sp,sp,4
 100c75c:	f800283a 	ret

0100c760 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 100c760:	defffd04 	addi	sp,sp,-12
 100c764:	df000215 	stw	fp,8(sp)
 100c768:	df000204 	addi	fp,sp,8
 100c76c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 100c770:	e0bfff17 	ldw	r2,-4(fp)
 100c774:	10bfffec 	andhi	r2,r2,65535
 100c778:	1004d43a 	srli	r2,r2,16
 100c77c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 100c780:	e0bffe0b 	ldhu	r2,-8(fp)
}
 100c784:	e037883a 	mov	sp,fp
 100c788:	df000017 	ldw	fp,0(sp)
 100c78c:	dec00104 	addi	sp,sp,4
 100c790:	f800283a 	ret

0100c794 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 100c794:	defffd04 	addi	sp,sp,-12
 100c798:	df000215 	stw	fp,8(sp)
 100c79c:	df000204 	addi	fp,sp,8
 100c7a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 100c7a4:	e0bfff17 	ldw	r2,-4(fp)
 100c7a8:	10a0000c 	andi	r2,r2,32768
 100c7ac:	1004d3fa 	srli	r2,r2,15
 100c7b0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 100c7b4:	e0bffe03 	ldbu	r2,-8(fp)
}
 100c7b8:	e037883a 	mov	sp,fp
 100c7bc:	df000017 	ldw	fp,0(sp)
 100c7c0:	dec00104 	addi	sp,sp,4
 100c7c4:	f800283a 	ret

0100c7c8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 100c7c8:	defffd04 	addi	sp,sp,-12
 100c7cc:	df000215 	stw	fp,8(sp)
 100c7d0:	df000204 	addi	fp,sp,8
 100c7d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 100c7d8:	e0bfff17 	ldw	r2,-4(fp)
 100c7dc:	e0bffe05 	stb	r2,-8(fp)
	return data;
 100c7e0:	e0bffe03 	ldbu	r2,-8(fp)
}
 100c7e4:	e037883a 	mov	sp,fp
 100c7e8:	df000017 	ldw	fp,0(sp)
 100c7ec:	dec00104 	addi	sp,sp,4
 100c7f0:	f800283a 	ret

0100c7f4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 100c7f4:	defffb04 	addi	sp,sp,-20
 100c7f8:	dfc00415 	stw	ra,16(sp)
 100c7fc:	df000315 	stw	fp,12(sp)
 100c800:	df000304 	addi	fp,sp,12
 100c804:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 100c808:	e13fff17 	ldw	r4,-4(fp)
 100c80c:	01403fc4 	movi	r5,255
 100c810:	100ca540 	call	100ca54 <alt_up_ps2_write_data_byte_with_ack>
 100c814:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 100c818:	e0bffd17 	ldw	r2,-12(fp)
 100c81c:	1004c03a 	cmpne	r2,r2,zero
 100c820:	1000221e 	bne	r2,zero,100c8ac <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 100c824:	e17ffe04 	addi	r5,fp,-8
 100c828:	e13fff17 	ldw	r4,-4(fp)
 100c82c:	100cac00 	call	100cac0 <alt_up_ps2_read_data_byte_timeout>
 100c830:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 100c834:	e0bffd17 	ldw	r2,-12(fp)
 100c838:	1004c03a 	cmpne	r2,r2,zero
 100c83c:	10001b1e 	bne	r2,zero,100c8ac <alt_up_ps2_init+0xb8>
 100c840:	e0bffe03 	ldbu	r2,-8(fp)
 100c844:	10803fcc 	andi	r2,r2,255
 100c848:	10802a98 	cmpnei	r2,r2,170
 100c84c:	1000171e 	bne	r2,zero,100c8ac <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 100c850:	e17ffe04 	addi	r5,fp,-8
 100c854:	e13fff17 	ldw	r4,-4(fp)
 100c858:	100cac00 	call	100cac0 <alt_up_ps2_read_data_byte_timeout>
 100c85c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 100c860:	e0bffd17 	ldw	r2,-12(fp)
 100c864:	10bfe318 	cmpnei	r2,r2,-116
 100c868:	1000041e 	bne	r2,zero,100c87c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 100c86c:	e0ffff17 	ldw	r3,-4(fp)
 100c870:	00800044 	movi	r2,1
 100c874:	18800d15 	stw	r2,52(r3)
 100c878:	00000c06 	br	100c8ac <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 100c87c:	e0bffd17 	ldw	r2,-12(fp)
 100c880:	1004c03a 	cmpne	r2,r2,zero
 100c884:	1000091e 	bne	r2,zero,100c8ac <alt_up_ps2_init+0xb8>
 100c888:	e0bffe03 	ldbu	r2,-8(fp)
 100c88c:	10803fcc 	andi	r2,r2,255
 100c890:	1004c03a 	cmpne	r2,r2,zero
 100c894:	1000051e 	bne	r2,zero,100c8ac <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 100c898:	e0bfff17 	ldw	r2,-4(fp)
 100c89c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 100c8a0:	e13fff17 	ldw	r4,-4(fp)
 100c8a4:	01403d04 	movi	r5,244
 100c8a8:	100c96c0 	call	100c96c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 100c8ac:	e037883a 	mov	sp,fp
 100c8b0:	dfc00117 	ldw	ra,4(sp)
 100c8b4:	df000017 	ldw	fp,0(sp)
 100c8b8:	dec00204 	addi	sp,sp,8
 100c8bc:	f800283a 	ret

0100c8c0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 100c8c0:	defffd04 	addi	sp,sp,-12
 100c8c4:	df000215 	stw	fp,8(sp)
 100c8c8:	df000204 	addi	fp,sp,8
 100c8cc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 100c8d0:	e0bfff17 	ldw	r2,-4(fp)
 100c8d4:	10800a17 	ldw	r2,40(r2)
 100c8d8:	10800104 	addi	r2,r2,4
 100c8dc:	10800037 	ldwio	r2,0(r2)
 100c8e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 100c8e4:	e0bffe17 	ldw	r2,-8(fp)
 100c8e8:	10800054 	ori	r2,r2,1
 100c8ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 100c8f0:	e0bfff17 	ldw	r2,-4(fp)
 100c8f4:	10800a17 	ldw	r2,40(r2)
 100c8f8:	10800104 	addi	r2,r2,4
 100c8fc:	e0fffe17 	ldw	r3,-8(fp)
 100c900:	10c00035 	stwio	r3,0(r2)
}
 100c904:	e037883a 	mov	sp,fp
 100c908:	df000017 	ldw	fp,0(sp)
 100c90c:	dec00104 	addi	sp,sp,4
 100c910:	f800283a 	ret

0100c914 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 100c914:	defffd04 	addi	sp,sp,-12
 100c918:	df000215 	stw	fp,8(sp)
 100c91c:	df000204 	addi	fp,sp,8
 100c920:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 100c924:	e0bfff17 	ldw	r2,-4(fp)
 100c928:	10800a17 	ldw	r2,40(r2)
 100c92c:	10800104 	addi	r2,r2,4
 100c930:	10800037 	ldwio	r2,0(r2)
 100c934:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 100c938:	e0fffe17 	ldw	r3,-8(fp)
 100c93c:	00bfff84 	movi	r2,-2
 100c940:	1884703a 	and	r2,r3,r2
 100c944:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 100c948:	e0bfff17 	ldw	r2,-4(fp)
 100c94c:	10800a17 	ldw	r2,40(r2)
 100c950:	10800104 	addi	r2,r2,4
 100c954:	e0fffe17 	ldw	r3,-8(fp)
 100c958:	10c00035 	stwio	r3,0(r2)
}
 100c95c:	e037883a 	mov	sp,fp
 100c960:	df000017 	ldw	fp,0(sp)
 100c964:	dec00104 	addi	sp,sp,4
 100c968:	f800283a 	ret

0100c96c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 100c96c:	defffa04 	addi	sp,sp,-24
 100c970:	dfc00515 	stw	ra,20(sp)
 100c974:	df000415 	stw	fp,16(sp)
 100c978:	df000404 	addi	fp,sp,16
 100c97c:	e13ffd15 	stw	r4,-12(fp)
 100c980:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 100c984:	e0bffd17 	ldw	r2,-12(fp)
 100c988:	10800a17 	ldw	r2,40(r2)
 100c98c:	e0fffe03 	ldbu	r3,-8(fp)
 100c990:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 100c994:	e0bffd17 	ldw	r2,-12(fp)
 100c998:	10800a17 	ldw	r2,40(r2)
 100c99c:	10800104 	addi	r2,r2,4
 100c9a0:	10800037 	ldwio	r2,0(r2)
 100c9a4:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 100c9a8:	e13ffc17 	ldw	r4,-16(fp)
 100c9ac:	100c72c0 	call	100c72c <read_CE_bit>
 100c9b0:	10803fcc 	andi	r2,r2,255
 100c9b4:	1005003a 	cmpeq	r2,r2,zero
 100c9b8:	1000031e 	bne	r2,zero,100c9c8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 100c9bc:	00bffec4 	movi	r2,-5
 100c9c0:	e0bfff15 	stw	r2,-4(fp)
 100c9c4:	00000106 	br	100c9cc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 100c9c8:	e03fff15 	stw	zero,-4(fp)
 100c9cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100c9d0:	e037883a 	mov	sp,fp
 100c9d4:	dfc00117 	ldw	ra,4(sp)
 100c9d8:	df000017 	ldw	fp,0(sp)
 100c9dc:	dec00204 	addi	sp,sp,8
 100c9e0:	f800283a 	ret

0100c9e4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 100c9e4:	defffb04 	addi	sp,sp,-20
 100c9e8:	dfc00415 	stw	ra,16(sp)
 100c9ec:	df000315 	stw	fp,12(sp)
 100c9f0:	df000304 	addi	fp,sp,12
 100c9f4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 100c9f8:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 100c9fc:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 100ca00:	e17ffd44 	addi	r5,fp,-11
 100ca04:	e13ffe17 	ldw	r4,-8(fp)
 100ca08:	100cac00 	call	100cac0 <alt_up_ps2_read_data_byte_timeout>
 100ca0c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 100ca10:	e0bffd03 	ldbu	r2,-12(fp)
 100ca14:	1004c03a 	cmpne	r2,r2,zero
 100ca18:	1000061e 	bne	r2,zero,100ca34 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 100ca1c:	e0bffd43 	ldbu	r2,-11(fp)
 100ca20:	10803fcc 	andi	r2,r2,255
 100ca24:	10803e98 	cmpnei	r2,r2,250
 100ca28:	103ff51e 	bne	r2,zero,100ca00 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 100ca2c:	e03fff15 	stw	zero,-4(fp)
 100ca30:	00000206 	br	100ca3c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 100ca34:	e0bffd03 	ldbu	r2,-12(fp)
 100ca38:	e0bfff15 	stw	r2,-4(fp)
 100ca3c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 100ca40:	e037883a 	mov	sp,fp
 100ca44:	dfc00117 	ldw	ra,4(sp)
 100ca48:	df000017 	ldw	fp,0(sp)
 100ca4c:	dec00204 	addi	sp,sp,8
 100ca50:	f800283a 	ret

0100ca54 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 100ca54:	defff904 	addi	sp,sp,-28
 100ca58:	dfc00615 	stw	ra,24(sp)
 100ca5c:	df000515 	stw	fp,20(sp)
 100ca60:	df000504 	addi	fp,sp,20
 100ca64:	e13ffd15 	stw	r4,-12(fp)
 100ca68:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 100ca6c:	e17ffe03 	ldbu	r5,-8(fp)
 100ca70:	e13ffd17 	ldw	r4,-12(fp)
 100ca74:	100c96c0 	call	100c96c <alt_up_ps2_write_data_byte>
 100ca78:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 100ca7c:	e0bffc17 	ldw	r2,-16(fp)
 100ca80:	1005003a 	cmpeq	r2,r2,zero
 100ca84:	1000031e 	bne	r2,zero,100ca94 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 100ca88:	e0bffc17 	ldw	r2,-16(fp)
 100ca8c:	e0bfff15 	stw	r2,-4(fp)
 100ca90:	00000506 	br	100caa8 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 100ca94:	e13ffd17 	ldw	r4,-12(fp)
 100ca98:	100c9e40 	call	100c9e4 <alt_up_ps2_wait_for_ack>
 100ca9c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 100caa0:	e0bffb17 	ldw	r2,-20(fp)
 100caa4:	e0bfff15 	stw	r2,-4(fp)
 100caa8:	e0bfff17 	ldw	r2,-4(fp)
}
 100caac:	e037883a 	mov	sp,fp
 100cab0:	dfc00117 	ldw	ra,4(sp)
 100cab4:	df000017 	ldw	fp,0(sp)
 100cab8:	dec00204 	addi	sp,sp,8
 100cabc:	f800283a 	ret

0100cac0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 100cac0:	defff904 	addi	sp,sp,-28
 100cac4:	dfc00615 	stw	ra,24(sp)
 100cac8:	df000515 	stw	fp,20(sp)
 100cacc:	df000504 	addi	fp,sp,20
 100cad0:	e13ffd15 	stw	r4,-12(fp)
 100cad4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 100cad8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 100cadc:	e03ffb15 	stw	zero,-20(fp)
 100cae0:	00000006 	br	100cae4 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 100cae4:	e0bffb17 	ldw	r2,-20(fp)
 100cae8:	10800044 	addi	r2,r2,1
 100caec:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 100caf0:	e0bffd17 	ldw	r2,-12(fp)
 100caf4:	10800a17 	ldw	r2,40(r2)
 100caf8:	10800037 	ldwio	r2,0(r2)
 100cafc:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 100cb00:	e13ffc17 	ldw	r4,-16(fp)
 100cb04:	100c7940 	call	100c794 <read_data_valid>
 100cb08:	10803fcc 	andi	r2,r2,255
 100cb0c:	1005003a 	cmpeq	r2,r2,zero
 100cb10:	1000071e 	bne	r2,zero,100cb30 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 100cb14:	e13ffc17 	ldw	r4,-16(fp)
 100cb18:	100c7c80 	call	100c7c8 <read_data_byte>
 100cb1c:	1007883a 	mov	r3,r2
 100cb20:	e0bffe17 	ldw	r2,-8(fp)
 100cb24:	10c00005 	stb	r3,0(r2)
			return 0;
 100cb28:	e03fff15 	stw	zero,-4(fp)
 100cb2c:	00000a06 	br	100cb58 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 100cb30:	e0bffd17 	ldw	r2,-12(fp)
 100cb34:	10800c17 	ldw	r2,48(r2)
 100cb38:	1005003a 	cmpeq	r2,r2,zero
 100cb3c:	103fe91e 	bne	r2,zero,100cae4 <alt_up_ps2_read_data_byte_timeout+0x24>
 100cb40:	e0bffd17 	ldw	r2,-12(fp)
 100cb44:	10c00c17 	ldw	r3,48(r2)
 100cb48:	e0bffb17 	ldw	r2,-20(fp)
 100cb4c:	18bfe52e 	bgeu	r3,r2,100cae4 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 100cb50:	00bfe304 	movi	r2,-116
 100cb54:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 100cb58:	e0bfff17 	ldw	r2,-4(fp)
}
 100cb5c:	e037883a 	mov	sp,fp
 100cb60:	dfc00117 	ldw	ra,4(sp)
 100cb64:	df000017 	ldw	fp,0(sp)
 100cb68:	dec00204 	addi	sp,sp,8
 100cb6c:	f800283a 	ret

0100cb70 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 100cb70:	defffa04 	addi	sp,sp,-24
 100cb74:	dfc00515 	stw	ra,20(sp)
 100cb78:	df000415 	stw	fp,16(sp)
 100cb7c:	df000404 	addi	fp,sp,16
 100cb80:	e13ffd15 	stw	r4,-12(fp)
 100cb84:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 100cb88:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 100cb8c:	e0bffd17 	ldw	r2,-12(fp)
 100cb90:	10800a17 	ldw	r2,40(r2)
 100cb94:	10800037 	ldwio	r2,0(r2)
 100cb98:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 100cb9c:	e13ffc17 	ldw	r4,-16(fp)
 100cba0:	100c7940 	call	100c794 <read_data_valid>
 100cba4:	10803fcc 	andi	r2,r2,255
 100cba8:	1005003a 	cmpeq	r2,r2,zero
 100cbac:	1000071e 	bne	r2,zero,100cbcc <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 100cbb0:	e13ffc17 	ldw	r4,-16(fp)
 100cbb4:	100c7c80 	call	100c7c8 <read_data_byte>
 100cbb8:	1007883a 	mov	r3,r2
 100cbbc:	e0bffe17 	ldw	r2,-8(fp)
 100cbc0:	10c00005 	stb	r3,0(r2)
		return 0;
 100cbc4:	e03fff15 	stw	zero,-4(fp)
 100cbc8:	00000206 	br	100cbd4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 100cbcc:	00bfffc4 	movi	r2,-1
 100cbd0:	e0bfff15 	stw	r2,-4(fp)
 100cbd4:	e0bfff17 	ldw	r2,-4(fp)
}
 100cbd8:	e037883a 	mov	sp,fp
 100cbdc:	dfc00117 	ldw	ra,4(sp)
 100cbe0:	df000017 	ldw	fp,0(sp)
 100cbe4:	dec00204 	addi	sp,sp,8
 100cbe8:	f800283a 	ret

0100cbec <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 100cbec:	defffb04 	addi	sp,sp,-20
 100cbf0:	dfc00415 	stw	ra,16(sp)
 100cbf4:	df000315 	stw	fp,12(sp)
 100cbf8:	df000304 	addi	fp,sp,12
 100cbfc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 100cc00:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 100cc04:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 100cc08:	e0bfff17 	ldw	r2,-4(fp)
 100cc0c:	10800a17 	ldw	r2,40(r2)
 100cc10:	10800037 	ldwio	r2,0(r2)
 100cc14:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 100cc18:	e13ffd17 	ldw	r4,-12(fp)
 100cc1c:	100c7600 	call	100c760 <read_num_bytes_available>
 100cc20:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 100cc24:	e0bffe0b 	ldhu	r2,-8(fp)
 100cc28:	1004c03a 	cmpne	r2,r2,zero
 100cc2c:	103ff61e 	bne	r2,zero,100cc08 <alt_up_ps2_clear_fifo+0x1c>
}
 100cc30:	e037883a 	mov	sp,fp
 100cc34:	dfc00117 	ldw	ra,4(sp)
 100cc38:	df000017 	ldw	fp,0(sp)
 100cc3c:	dec00204 	addi	sp,sp,8
 100cc40:	f800283a 	ret

0100cc44 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 100cc44:	defff704 	addi	sp,sp,-36
 100cc48:	dfc00815 	stw	ra,32(sp)
 100cc4c:	df000715 	stw	fp,28(sp)
 100cc50:	df000704 	addi	fp,sp,28
 100cc54:	e13ffc15 	stw	r4,-16(fp)
 100cc58:	e17ffd15 	stw	r5,-12(fp)
 100cc5c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 100cc60:	e0bffc17 	ldw	r2,-16(fp)
 100cc64:	10800017 	ldw	r2,0(r2)
 100cc68:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 100cc6c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 100cc70:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 100cc74:	e0fff917 	ldw	r3,-28(fp)
 100cc78:	e0bffe17 	ldw	r2,-8(fp)
 100cc7c:	18bffd16 	blt	r3,r2,100cc74 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 100cc80:	e17ffd17 	ldw	r5,-12(fp)
 100cc84:	e0bffd17 	ldw	r2,-12(fp)
 100cc88:	10800044 	addi	r2,r2,1
 100cc8c:	e0bffd15 	stw	r2,-12(fp)
 100cc90:	e13ffb17 	ldw	r4,-20(fp)
 100cc94:	100cac00 	call	100cac0 <alt_up_ps2_read_data_byte_timeout>
 100cc98:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 100cc9c:	e0bffa17 	ldw	r2,-24(fp)
 100cca0:	1005003a 	cmpeq	r2,r2,zero
 100cca4:	1000031e 	bne	r2,zero,100ccb4 <alt_up_ps2_read_fd+0x70>
			return count;
 100cca8:	e0bff917 	ldw	r2,-28(fp)
 100ccac:	e0bfff15 	stw	r2,-4(fp)
 100ccb0:	00000506 	br	100ccc8 <alt_up_ps2_read_fd+0x84>
		count++;
 100ccb4:	e0bff917 	ldw	r2,-28(fp)
 100ccb8:	10800044 	addi	r2,r2,1
 100ccbc:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 100ccc0:	e0bff917 	ldw	r2,-28(fp)
 100ccc4:	e0bfff15 	stw	r2,-4(fp)
 100ccc8:	e0bfff17 	ldw	r2,-4(fp)
}
 100cccc:	e037883a 	mov	sp,fp
 100ccd0:	dfc00117 	ldw	ra,4(sp)
 100ccd4:	df000017 	ldw	fp,0(sp)
 100ccd8:	dec00204 	addi	sp,sp,8
 100ccdc:	f800283a 	ret

0100cce0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 100cce0:	defff704 	addi	sp,sp,-36
 100cce4:	dfc00815 	stw	ra,32(sp)
 100cce8:	df000715 	stw	fp,28(sp)
 100ccec:	df000704 	addi	fp,sp,28
 100ccf0:	e13ffc15 	stw	r4,-16(fp)
 100ccf4:	e17ffd15 	stw	r5,-12(fp)
 100ccf8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 100ccfc:	e0bffc17 	ldw	r2,-16(fp)
 100cd00:	10800017 	ldw	r2,0(r2)
 100cd04:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 100cd08:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 100cd0c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 100cd10:	00001206 	br	100cd5c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 100cd14:	e0bffd17 	ldw	r2,-12(fp)
 100cd18:	10800003 	ldbu	r2,0(r2)
 100cd1c:	11403fcc 	andi	r5,r2,255
 100cd20:	e0bffd17 	ldw	r2,-12(fp)
 100cd24:	10800044 	addi	r2,r2,1
 100cd28:	e0bffd15 	stw	r2,-12(fp)
 100cd2c:	e13ffb17 	ldw	r4,-20(fp)
 100cd30:	100c96c0 	call	100c96c <alt_up_ps2_write_data_byte>
 100cd34:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 100cd38:	e0bffa17 	ldw	r2,-24(fp)
 100cd3c:	1005003a 	cmpeq	r2,r2,zero
 100cd40:	1000031e 	bne	r2,zero,100cd50 <alt_up_ps2_write_fd+0x70>
			return count;
 100cd44:	e0bff917 	ldw	r2,-28(fp)
 100cd48:	e0bfff15 	stw	r2,-4(fp)
 100cd4c:	00000806 	br	100cd70 <alt_up_ps2_write_fd+0x90>
		count++;
 100cd50:	e0bff917 	ldw	r2,-28(fp)
 100cd54:	10800044 	addi	r2,r2,1
 100cd58:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 100cd5c:	e0fff917 	ldw	r3,-28(fp)
 100cd60:	e0bffe17 	ldw	r2,-8(fp)
 100cd64:	18bfeb16 	blt	r3,r2,100cd14 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 100cd68:	e0bff917 	ldw	r2,-28(fp)
 100cd6c:	e0bfff15 	stw	r2,-4(fp)
 100cd70:	e0bfff17 	ldw	r2,-4(fp)
}
 100cd74:	e037883a 	mov	sp,fp
 100cd78:	dfc00117 	ldw	ra,4(sp)
 100cd7c:	df000017 	ldw	fp,0(sp)
 100cd80:	dec00204 	addi	sp,sp,8
 100cd84:	f800283a 	ret

0100cd88 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 100cd88:	defffc04 	addi	sp,sp,-16
 100cd8c:	dfc00315 	stw	ra,12(sp)
 100cd90:	df000215 	stw	fp,8(sp)
 100cd94:	df000204 	addi	fp,sp,8
 100cd98:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 100cd9c:	e13fff17 	ldw	r4,-4(fp)
 100cda0:	01404074 	movhi	r5,257
 100cda4:	29418304 	addi	r5,r5,1548
 100cda8:	100d7d80 	call	100d7d8 <alt_find_dev>
 100cdac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100cdb0:	e0bffe17 	ldw	r2,-8(fp)
}
 100cdb4:	e037883a 	mov	sp,fp
 100cdb8:	dfc00117 	ldw	ra,4(sp)
 100cdbc:	df000017 	ldw	fp,0(sp)
 100cdc0:	dec00204 	addi	sp,sp,8
 100cdc4:	f800283a 	ret

0100cdc8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 100cdc8:	defffd04 	addi	sp,sp,-12
 100cdcc:	df000215 	stw	fp,8(sp)
 100cdd0:	df000204 	addi	fp,sp,8
 100cdd4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100cdd8:	e0bfff17 	ldw	r2,-4(fp)
 100cddc:	10800a17 	ldw	r2,40(r2)
 100cde0:	10800104 	addi	r2,r2,4
 100cde4:	10800037 	ldwio	r2,0(r2)
 100cde8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 100cdec:	e0bffe17 	ldw	r2,-8(fp)
 100cdf0:	10800054 	ori	r2,r2,1
 100cdf4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 100cdf8:	e0bfff17 	ldw	r2,-4(fp)
 100cdfc:	10800a17 	ldw	r2,40(r2)
 100ce00:	10800104 	addi	r2,r2,4
 100ce04:	e0fffe17 	ldw	r3,-8(fp)
 100ce08:	10c00035 	stwio	r3,0(r2)
}
 100ce0c:	e037883a 	mov	sp,fp
 100ce10:	df000017 	ldw	fp,0(sp)
 100ce14:	dec00104 	addi	sp,sp,4
 100ce18:	f800283a 	ret

0100ce1c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 100ce1c:	defffd04 	addi	sp,sp,-12
 100ce20:	df000215 	stw	fp,8(sp)
 100ce24:	df000204 	addi	fp,sp,8
 100ce28:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100ce2c:	e0bfff17 	ldw	r2,-4(fp)
 100ce30:	10800a17 	ldw	r2,40(r2)
 100ce34:	10800104 	addi	r2,r2,4
 100ce38:	10800037 	ldwio	r2,0(r2)
 100ce3c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 100ce40:	e0fffe17 	ldw	r3,-8(fp)
 100ce44:	00bfff84 	movi	r2,-2
 100ce48:	1884703a 	and	r2,r3,r2
 100ce4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 100ce50:	e0bfff17 	ldw	r2,-4(fp)
 100ce54:	10800a17 	ldw	r2,40(r2)
 100ce58:	10800104 	addi	r2,r2,4
 100ce5c:	e0fffe17 	ldw	r3,-8(fp)
 100ce60:	10c00035 	stwio	r3,0(r2)
}
 100ce64:	e037883a 	mov	sp,fp
 100ce68:	df000017 	ldw	fp,0(sp)
 100ce6c:	dec00104 	addi	sp,sp,4
 100ce70:	f800283a 	ret

0100ce74 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 100ce74:	defffd04 	addi	sp,sp,-12
 100ce78:	df000215 	stw	fp,8(sp)
 100ce7c:	df000204 	addi	fp,sp,8
 100ce80:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 100ce84:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 100ce88:	e0bfff17 	ldw	r2,-4(fp)
 100ce8c:	10800a17 	ldw	r2,40(r2)
 100ce90:	10800084 	addi	r2,r2,2
 100ce94:	1080002b 	ldhuio	r2,0(r2)
 100ce98:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 100ce9c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 100cea0:	e037883a 	mov	sp,fp
 100cea4:	df000017 	ldw	fp,0(sp)
 100cea8:	dec00104 	addi	sp,sp,4
 100ceac:	f800283a 	ret

0100ceb0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 100ceb0:	defffd04 	addi	sp,sp,-12
 100ceb4:	df000215 	stw	fp,8(sp)
 100ceb8:	df000204 	addi	fp,sp,8
 100cebc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100cec0:	e0bfff17 	ldw	r2,-4(fp)
 100cec4:	10800a17 	ldw	r2,40(r2)
 100cec8:	10800104 	addi	r2,r2,4
 100cecc:	10800037 	ldwio	r2,0(r2)
 100ced0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 100ced4:	e0bffe17 	ldw	r2,-8(fp)
 100ced8:	10bfffec 	andhi	r2,r2,65535
 100cedc:	1004d43a 	srli	r2,r2,16
}
 100cee0:	e037883a 	mov	sp,fp
 100cee4:	df000017 	ldw	fp,0(sp)
 100cee8:	dec00104 	addi	sp,sp,4
 100ceec:	f800283a 	ret

0100cef0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 100cef0:	defffc04 	addi	sp,sp,-16
 100cef4:	df000315 	stw	fp,12(sp)
 100cef8:	df000304 	addi	fp,sp,12
 100cefc:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 100cf00:	e0bffe17 	ldw	r2,-8(fp)
 100cf04:	1080800c 	andi	r2,r2,512
 100cf08:	1004d27a 	srli	r2,r2,9
 100cf0c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 100cf10:	e0bffd17 	ldw	r2,-12(fp)
 100cf14:	1005003a 	cmpeq	r2,r2,zero
 100cf18:	1000031e 	bne	r2,zero,100cf28 <alt_up_rs232_check_parity+0x38>
 100cf1c:	00bfffc4 	movi	r2,-1
 100cf20:	e0bfff15 	stw	r2,-4(fp)
 100cf24:	00000106 	br	100cf2c <alt_up_rs232_check_parity+0x3c>
 100cf28:	e03fff15 	stw	zero,-4(fp)
 100cf2c:	e0bfff17 	ldw	r2,-4(fp)
}
 100cf30:	e037883a 	mov	sp,fp
 100cf34:	df000017 	ldw	fp,0(sp)
 100cf38:	dec00104 	addi	sp,sp,4
 100cf3c:	f800283a 	ret

0100cf40 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 100cf40:	defffc04 	addi	sp,sp,-16
 100cf44:	df000315 	stw	fp,12(sp)
 100cf48:	df000304 	addi	fp,sp,12
 100cf4c:	e13ffe15 	stw	r4,-8(fp)
 100cf50:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 100cf54:	e0bffe17 	ldw	r2,-8(fp)
 100cf58:	10800a17 	ldw	r2,40(r2)
 100cf5c:	10800037 	ldwio	r2,0(r2)
 100cf60:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 100cf64:	e0bffe17 	ldw	r2,-8(fp)
 100cf68:	10800a17 	ldw	r2,40(r2)
 100cf6c:	e0ffff03 	ldbu	r3,-4(fp)
 100cf70:	10c00035 	stwio	r3,0(r2)
	return 0;
 100cf74:	0005883a 	mov	r2,zero
}
 100cf78:	e037883a 	mov	sp,fp
 100cf7c:	df000017 	ldw	fp,0(sp)
 100cf80:	dec00104 	addi	sp,sp,4
 100cf84:	f800283a 	ret

0100cf88 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 100cf88:	defffa04 	addi	sp,sp,-24
 100cf8c:	dfc00515 	stw	ra,20(sp)
 100cf90:	df000415 	stw	fp,16(sp)
 100cf94:	df000404 	addi	fp,sp,16
 100cf98:	e13ffd15 	stw	r4,-12(fp)
 100cf9c:	e17ffe15 	stw	r5,-8(fp)
 100cfa0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 100cfa4:	e0bffd17 	ldw	r2,-12(fp)
 100cfa8:	10800a17 	ldw	r2,40(r2)
 100cfac:	10800037 	ldwio	r2,0(r2)
 100cfb0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 100cfb4:	e0bffc17 	ldw	r2,-16(fp)
 100cfb8:	1007883a 	mov	r3,r2
 100cfbc:	e0bffe17 	ldw	r2,-8(fp)
 100cfc0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 100cfc4:	e13ffc17 	ldw	r4,-16(fp)
 100cfc8:	100cef00 	call	100cef0 <alt_up_rs232_check_parity>
 100cfcc:	1007883a 	mov	r3,r2
 100cfd0:	e0bfff17 	ldw	r2,-4(fp)
 100cfd4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 100cfd8:	e0bffc17 	ldw	r2,-16(fp)
 100cfdc:	10a0000c 	andi	r2,r2,32768
 100cfe0:	1004d3fa 	srli	r2,r2,15
 100cfe4:	10bfffc4 	addi	r2,r2,-1
}
 100cfe8:	e037883a 	mov	sp,fp
 100cfec:	dfc00117 	ldw	ra,4(sp)
 100cff0:	df000017 	ldw	fp,0(sp)
 100cff4:	dec00204 	addi	sp,sp,8
 100cff8:	f800283a 	ret

0100cffc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 100cffc:	defff804 	addi	sp,sp,-32
 100d000:	dfc00715 	stw	ra,28(sp)
 100d004:	df000615 	stw	fp,24(sp)
 100d008:	df000604 	addi	fp,sp,24
 100d00c:	e13ffd15 	stw	r4,-12(fp)
 100d010:	e17ffe15 	stw	r5,-8(fp)
 100d014:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 100d018:	e0bffd17 	ldw	r2,-12(fp)
 100d01c:	10800017 	ldw	r2,0(r2)
 100d020:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 100d024:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 100d028:	00000c06 	br	100d05c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 100d02c:	e17ffe17 	ldw	r5,-8(fp)
 100d030:	e0bffe17 	ldw	r2,-8(fp)
 100d034:	10800044 	addi	r2,r2,1
 100d038:	e0bffe15 	stw	r2,-8(fp)
 100d03c:	e1bffc04 	addi	r6,fp,-16
 100d040:	e13ffb17 	ldw	r4,-20(fp)
 100d044:	100cf880 	call	100cf88 <alt_up_rs232_read_data>
 100d048:	1004c03a 	cmpne	r2,r2,zero
 100d04c:	1000091e 	bne	r2,zero,100d074 <alt_up_rs232_read_fd+0x78>
			count++;
 100d050:	e0bffa17 	ldw	r2,-24(fp)
 100d054:	10800044 	addi	r2,r2,1
 100d058:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 100d05c:	e0bfff17 	ldw	r2,-4(fp)
 100d060:	10bfffc4 	addi	r2,r2,-1
 100d064:	e0bfff15 	stw	r2,-4(fp)
 100d068:	e0bfff17 	ldw	r2,-4(fp)
 100d06c:	10bfffd8 	cmpnei	r2,r2,-1
 100d070:	103fee1e 	bne	r2,zero,100d02c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 100d074:	e0bffa17 	ldw	r2,-24(fp)
}
 100d078:	e037883a 	mov	sp,fp
 100d07c:	dfc00117 	ldw	ra,4(sp)
 100d080:	df000017 	ldw	fp,0(sp)
 100d084:	dec00204 	addi	sp,sp,8
 100d088:	f800283a 	ret

0100d08c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 100d08c:	defff904 	addi	sp,sp,-28
 100d090:	dfc00615 	stw	ra,24(sp)
 100d094:	df000515 	stw	fp,20(sp)
 100d098:	df000504 	addi	fp,sp,20
 100d09c:	e13ffd15 	stw	r4,-12(fp)
 100d0a0:	e17ffe15 	stw	r5,-8(fp)
 100d0a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 100d0a8:	e0bffd17 	ldw	r2,-12(fp)
 100d0ac:	10800017 	ldw	r2,0(r2)
 100d0b0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 100d0b4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 100d0b8:	00000d06 	br	100d0f0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 100d0bc:	e0bffe17 	ldw	r2,-8(fp)
 100d0c0:	10800003 	ldbu	r2,0(r2)
 100d0c4:	11403fcc 	andi	r5,r2,255
 100d0c8:	e13ffc17 	ldw	r4,-16(fp)
 100d0cc:	100cf400 	call	100cf40 <alt_up_rs232_write_data>
 100d0d0:	1004c03a 	cmpne	r2,r2,zero
 100d0d4:	10000c1e 	bne	r2,zero,100d108 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 100d0d8:	e0bffb17 	ldw	r2,-20(fp)
 100d0dc:	10800044 	addi	r2,r2,1
 100d0e0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 100d0e4:	e0bffe17 	ldw	r2,-8(fp)
 100d0e8:	10800044 	addi	r2,r2,1
 100d0ec:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 100d0f0:	e0bfff17 	ldw	r2,-4(fp)
 100d0f4:	10bfffc4 	addi	r2,r2,-1
 100d0f8:	e0bfff15 	stw	r2,-4(fp)
 100d0fc:	e0bfff17 	ldw	r2,-4(fp)
 100d100:	10bfffd8 	cmpnei	r2,r2,-1
 100d104:	103fed1e 	bne	r2,zero,100d0bc <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 100d108:	e0bffb17 	ldw	r2,-20(fp)
}
 100d10c:	e037883a 	mov	sp,fp
 100d110:	dfc00117 	ldw	ra,4(sp)
 100d114:	df000017 	ldw	fp,0(sp)
 100d118:	dec00204 	addi	sp,sp,8
 100d11c:	f800283a 	ret

0100d120 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 100d120:	defffc04 	addi	sp,sp,-16
 100d124:	dfc00315 	stw	ra,12(sp)
 100d128:	df000215 	stw	fp,8(sp)
 100d12c:	df000204 	addi	fp,sp,8
 100d130:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 100d134:	e13fff17 	ldw	r4,-4(fp)
 100d138:	01404074 	movhi	r5,257
 100d13c:	29418304 	addi	r5,r5,1548
 100d140:	100d7d80 	call	100d7d8 <alt_find_dev>
 100d144:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100d148:	e0bffe17 	ldw	r2,-8(fp)
}
 100d14c:	e037883a 	mov	sp,fp
 100d150:	dfc00117 	ldw	ra,4(sp)
 100d154:	df000017 	ldw	fp,0(sp)
 100d158:	dec00204 	addi	sp,sp,8
 100d15c:	f800283a 	ret

0100d160 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 100d160:	defffc04 	addi	sp,sp,-16
 100d164:	dfc00315 	stw	ra,12(sp)
 100d168:	df000215 	stw	fp,8(sp)
 100d16c:	df000204 	addi	fp,sp,8
 100d170:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 100d174:	e0bfff17 	ldw	r2,-4(fp)
 100d178:	10800217 	ldw	r2,8(r2)
 100d17c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 100d180:	00000c06 	br	100d1b4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 100d184:	e13ffe17 	ldw	r4,-8(fp)
 100d188:	01404074 	movhi	r5,257
 100d18c:	297a7404 	addi	r5,r5,-5680
 100d190:	1007aa40 	call	1007aa4 <strcmp>
 100d194:	1004c03a 	cmpne	r2,r2,zero
 100d198:	1000031e 	bne	r2,zero,100d1a8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 100d19c:	e0bffe17 	ldw	r2,-8(fp)
 100d1a0:	10000005 	stb	zero,0(r2)
			break;
 100d1a4:	00000a06 	br	100d1d0 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 100d1a8:	e0bffe17 	ldw	r2,-8(fp)
 100d1ac:	10800044 	addi	r2,r2,1
 100d1b0:	e0bffe15 	stw	r2,-8(fp)
 100d1b4:	e0bffe17 	ldw	r2,-8(fp)
 100d1b8:	10800003 	ldbu	r2,0(r2)
 100d1bc:	10803fcc 	andi	r2,r2,255
 100d1c0:	1080201c 	xori	r2,r2,128
 100d1c4:	10bfe004 	addi	r2,r2,-128
 100d1c8:	1004c03a 	cmpne	r2,r2,zero
 100d1cc:	103fed1e 	bne	r2,zero,100d184 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 100d1d0:	e037883a 	mov	sp,fp
 100d1d4:	dfc00117 	ldw	ra,4(sp)
 100d1d8:	df000017 	ldw	fp,0(sp)
 100d1dc:	dec00204 	addi	sp,sp,8
 100d1e0:	f800283a 	ret

0100d1e4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 100d1e4:	defffc04 	addi	sp,sp,-16
 100d1e8:	dfc00315 	stw	ra,12(sp)
 100d1ec:	df000215 	stw	fp,8(sp)
 100d1f0:	df000204 	addi	fp,sp,8
 100d1f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100d1f8:	e13fff17 	ldw	r4,-4(fp)
 100d1fc:	01404074 	movhi	r5,257
 100d200:	29418304 	addi	r5,r5,1548
 100d204:	100d7d80 	call	100d7d8 <alt_find_dev>
 100d208:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100d20c:	e0bffe17 	ldw	r2,-8(fp)
}
 100d210:	e037883a 	mov	sp,fp
 100d214:	dfc00117 	ldw	ra,4(sp)
 100d218:	df000017 	ldw	fp,0(sp)
 100d21c:	dec00204 	addi	sp,sp,8
 100d220:	f800283a 	ret

0100d224 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 100d224:	defff904 	addi	sp,sp,-28
 100d228:	df000615 	stw	fp,24(sp)
 100d22c:	df000604 	addi	fp,sp,24
 100d230:	e13ffb15 	stw	r4,-20(fp)
 100d234:	e1bffd15 	stw	r6,-12(fp)
 100d238:	e1fffe15 	stw	r7,-8(fp)
 100d23c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100d240:	e0bffb17 	ldw	r2,-20(fp)
 100d244:	10c00c17 	ldw	r3,48(r2)
 100d248:	e0bffd17 	ldw	r2,-12(fp)
 100d24c:	10c0042e 	bgeu	r2,r3,100d260 <alt_up_char_buffer_draw+0x3c>
 100d250:	e0bffb17 	ldw	r2,-20(fp)
 100d254:	10c00d17 	ldw	r3,52(r2)
 100d258:	e0bffe17 	ldw	r2,-8(fp)
 100d25c:	10c00336 	bltu	r2,r3,100d26c <alt_up_char_buffer_draw+0x48>
		return -1;
 100d260:	00bfffc4 	movi	r2,-1
 100d264:	e0bfff15 	stw	r2,-4(fp)
 100d268:	00001d06 	br	100d2e0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 100d26c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 100d270:	e0bffb17 	ldw	r2,-20(fp)
 100d274:	10c00f17 	ldw	r3,60(r2)
 100d278:	e0bffd17 	ldw	r2,-12(fp)
 100d27c:	1886703a 	and	r3,r3,r2
 100d280:	e0bffb17 	ldw	r2,-20(fp)
 100d284:	10800e17 	ldw	r2,56(r2)
 100d288:	1886983a 	sll	r3,r3,r2
 100d28c:	e0bffa17 	ldw	r2,-24(fp)
 100d290:	10c4b03a 	or	r2,r2,r3
 100d294:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 100d298:	e0bffb17 	ldw	r2,-20(fp)
 100d29c:	10c01117 	ldw	r3,68(r2)
 100d2a0:	e0bffe17 	ldw	r2,-8(fp)
 100d2a4:	1886703a 	and	r3,r3,r2
 100d2a8:	e0bffb17 	ldw	r2,-20(fp)
 100d2ac:	10801017 	ldw	r2,64(r2)
 100d2b0:	1886983a 	sll	r3,r3,r2
 100d2b4:	e0bffa17 	ldw	r2,-24(fp)
 100d2b8:	10c4b03a 	or	r2,r2,r3
 100d2bc:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 100d2c0:	e0bffb17 	ldw	r2,-20(fp)
 100d2c4:	10800b17 	ldw	r2,44(r2)
 100d2c8:	1007883a 	mov	r3,r2
 100d2cc:	e0bffa17 	ldw	r2,-24(fp)
 100d2d0:	1885883a 	add	r2,r3,r2
 100d2d4:	e0fffc03 	ldbu	r3,-16(fp)
 100d2d8:	10c00025 	stbio	r3,0(r2)

	return 0;
 100d2dc:	e03fff15 	stw	zero,-4(fp)
 100d2e0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d2e4:	e037883a 	mov	sp,fp
 100d2e8:	df000017 	ldw	fp,0(sp)
 100d2ec:	dec00104 	addi	sp,sp,4
 100d2f0:	f800283a 	ret

0100d2f4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 100d2f4:	defff904 	addi	sp,sp,-28
 100d2f8:	df000615 	stw	fp,24(sp)
 100d2fc:	df000604 	addi	fp,sp,24
 100d300:	e13ffb15 	stw	r4,-20(fp)
 100d304:	e17ffc15 	stw	r5,-16(fp)
 100d308:	e1bffd15 	stw	r6,-12(fp)
 100d30c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100d310:	e0bffb17 	ldw	r2,-20(fp)
 100d314:	10c00c17 	ldw	r3,48(r2)
 100d318:	e0bffd17 	ldw	r2,-12(fp)
 100d31c:	10c0042e 	bgeu	r2,r3,100d330 <alt_up_char_buffer_string+0x3c>
 100d320:	e0bffb17 	ldw	r2,-20(fp)
 100d324:	10c00d17 	ldw	r3,52(r2)
 100d328:	e0bffe17 	ldw	r2,-8(fp)
 100d32c:	10c00336 	bltu	r2,r3,100d33c <alt_up_char_buffer_string+0x48>
		return -1;
 100d330:	00bfffc4 	movi	r2,-1
 100d334:	e0bfff15 	stw	r2,-4(fp)
 100d338:	00002e06 	br	100d3f4 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 100d33c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 100d340:	e0bffb17 	ldw	r2,-20(fp)
 100d344:	10801017 	ldw	r2,64(r2)
 100d348:	1007883a 	mov	r3,r2
 100d34c:	e0bffe17 	ldw	r2,-8(fp)
 100d350:	10c6983a 	sll	r3,r2,r3
 100d354:	e0bffd17 	ldw	r2,-12(fp)
 100d358:	1885883a 	add	r2,r3,r2
 100d35c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 100d360:	00001c06 	br	100d3d4 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 100d364:	e0bffb17 	ldw	r2,-20(fp)
 100d368:	10800b17 	ldw	r2,44(r2)
 100d36c:	1007883a 	mov	r3,r2
 100d370:	e0bffa17 	ldw	r2,-24(fp)
 100d374:	1889883a 	add	r4,r3,r2
 100d378:	e0bffc17 	ldw	r2,-16(fp)
 100d37c:	10800003 	ldbu	r2,0(r2)
 100d380:	10c03fcc 	andi	r3,r2,255
 100d384:	18c0201c 	xori	r3,r3,128
 100d388:	18ffe004 	addi	r3,r3,-128
 100d38c:	2005883a 	mov	r2,r4
 100d390:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100d394:	e0bffc17 	ldw	r2,-16(fp)
 100d398:	10800044 	addi	r2,r2,1
 100d39c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 100d3a0:	e0bffd17 	ldw	r2,-12(fp)
 100d3a4:	10800044 	addi	r2,r2,1
 100d3a8:	e0bffd15 	stw	r2,-12(fp)
 100d3ac:	e0bffb17 	ldw	r2,-20(fp)
 100d3b0:	10c00c17 	ldw	r3,48(r2)
 100d3b4:	e0bffd17 	ldw	r2,-12(fp)
 100d3b8:	10c00336 	bltu	r2,r3,100d3c8 <alt_up_char_buffer_string+0xd4>
			return -1;
 100d3bc:	00bfffc4 	movi	r2,-1
 100d3c0:	e0bfff15 	stw	r2,-4(fp)
 100d3c4:	00000b06 	br	100d3f4 <alt_up_char_buffer_string+0x100>
		++offset;
 100d3c8:	e0bffa17 	ldw	r2,-24(fp)
 100d3cc:	10800044 	addi	r2,r2,1
 100d3d0:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 100d3d4:	e0bffc17 	ldw	r2,-16(fp)
 100d3d8:	10800003 	ldbu	r2,0(r2)
 100d3dc:	10803fcc 	andi	r2,r2,255
 100d3e0:	1080201c 	xori	r2,r2,128
 100d3e4:	10bfe004 	addi	r2,r2,-128
 100d3e8:	1004c03a 	cmpne	r2,r2,zero
 100d3ec:	103fdd1e 	bne	r2,zero,100d364 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 100d3f0:	e03fff15 	stw	zero,-4(fp)
 100d3f4:	e0bfff17 	ldw	r2,-4(fp)
}
 100d3f8:	e037883a 	mov	sp,fp
 100d3fc:	df000017 	ldw	fp,0(sp)
 100d400:	dec00104 	addi	sp,sp,4
 100d404:	f800283a 	ret

0100d408 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100d408:	defffe04 	addi	sp,sp,-8
 100d40c:	df000115 	stw	fp,4(sp)
 100d410:	df000104 	addi	fp,sp,4
 100d414:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100d418:	e0bfff17 	ldw	r2,-4(fp)
 100d41c:	10800a17 	ldw	r2,40(r2)
 100d420:	10800084 	addi	r2,r2,2
 100d424:	1007883a 	mov	r3,r2
 100d428:	00800044 	movi	r2,1
 100d42c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 100d430:	e0bfff17 	ldw	r2,-4(fp)
 100d434:	10800a17 	ldw	r2,40(r2)
 100d438:	10800084 	addi	r2,r2,2
 100d43c:	10800023 	ldbuio	r2,0(r2)
 100d440:	1080004c 	andi	r2,r2,1
 100d444:	10803fcc 	andi	r2,r2,255
 100d448:	1004c03a 	cmpne	r2,r2,zero
 100d44c:	103ff81e 	bne	r2,zero,100d430 <alt_up_char_buffer_clear+0x28>
	return 0;
 100d450:	0005883a 	mov	r2,zero
}
 100d454:	e037883a 	mov	sp,fp
 100d458:	df000017 	ldw	fp,0(sp)
 100d45c:	dec00104 	addi	sp,sp,4
 100d460:	f800283a 	ret

0100d464 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100d464:	defff404 	addi	sp,sp,-48
 100d468:	df000b15 	stw	fp,44(sp)
 100d46c:	df000b04 	addi	fp,sp,44
 100d470:	e13ffb15 	stw	r4,-20(fp)
 100d474:	e17ffc15 	stw	r5,-16(fp)
 100d478:	e1bffd15 	stw	r6,-12(fp)
 100d47c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100d480:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100d484:	00804074 	movhi	r2,257
 100d488:	1088ad04 	addi	r2,r2,8884
 100d48c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100d490:	1005003a 	cmpeq	r2,r2,zero
 100d494:	1000411e 	bne	r2,zero,100d59c <alt_alarm_start+0x138>
  {
    if (alarm)
 100d498:	e0bffb17 	ldw	r2,-20(fp)
 100d49c:	1005003a 	cmpeq	r2,r2,zero
 100d4a0:	10003b1e 	bne	r2,zero,100d590 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100d4a4:	e0fffb17 	ldw	r3,-20(fp)
 100d4a8:	e0bffd17 	ldw	r2,-12(fp)
 100d4ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100d4b0:	e0fffb17 	ldw	r3,-20(fp)
 100d4b4:	e0bffe17 	ldw	r2,-8(fp)
 100d4b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d4bc:	0005303a 	rdctl	r2,status
 100d4c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d4c4:	e0fff817 	ldw	r3,-32(fp)
 100d4c8:	00bfff84 	movi	r2,-2
 100d4cc:	1884703a 	and	r2,r3,r2
 100d4d0:	1001703a 	wrctl	status,r2
  
  return context;
 100d4d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100d4d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100d4dc:	00804074 	movhi	r2,257
 100d4e0:	1088ae04 	addi	r2,r2,8888
 100d4e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100d4e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100d4ec:	e0fffc17 	ldw	r3,-16(fp)
 100d4f0:	e0bff917 	ldw	r2,-28(fp)
 100d4f4:	1885883a 	add	r2,r3,r2
 100d4f8:	10c00044 	addi	r3,r2,1
 100d4fc:	e0bffb17 	ldw	r2,-20(fp)
 100d500:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100d504:	e0bffb17 	ldw	r2,-20(fp)
 100d508:	10c00217 	ldw	r3,8(r2)
 100d50c:	e0bff917 	ldw	r2,-28(fp)
 100d510:	1880042e 	bgeu	r3,r2,100d524 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100d514:	e0fffb17 	ldw	r3,-20(fp)
 100d518:	00800044 	movi	r2,1
 100d51c:	18800405 	stb	r2,16(r3)
 100d520:	00000206 	br	100d52c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100d524:	e0bffb17 	ldw	r2,-20(fp)
 100d528:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100d52c:	e0fffb17 	ldw	r3,-20(fp)
 100d530:	00804074 	movhi	r2,257
 100d534:	10818904 	addi	r2,r2,1572
 100d538:	e0bff615 	stw	r2,-40(fp)
 100d53c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d540:	e0fff717 	ldw	r3,-36(fp)
 100d544:	e0bff617 	ldw	r2,-40(fp)
 100d548:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d54c:	e0bff617 	ldw	r2,-40(fp)
 100d550:	10c00017 	ldw	r3,0(r2)
 100d554:	e0bff717 	ldw	r2,-36(fp)
 100d558:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d55c:	e0bff617 	ldw	r2,-40(fp)
 100d560:	10c00017 	ldw	r3,0(r2)
 100d564:	e0bff717 	ldw	r2,-36(fp)
 100d568:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d56c:	e0fff617 	ldw	r3,-40(fp)
 100d570:	e0bff717 	ldw	r2,-36(fp)
 100d574:	18800015 	stw	r2,0(r3)
 100d578:	e0bffa17 	ldw	r2,-24(fp)
 100d57c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d580:	e0bff517 	ldw	r2,-44(fp)
 100d584:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100d588:	e03fff15 	stw	zero,-4(fp)
 100d58c:	00000506 	br	100d5a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100d590:	00bffa84 	movi	r2,-22
 100d594:	e0bfff15 	stw	r2,-4(fp)
 100d598:	00000206 	br	100d5a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100d59c:	00bfde84 	movi	r2,-134
 100d5a0:	e0bfff15 	stw	r2,-4(fp)
 100d5a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100d5a8:	e037883a 	mov	sp,fp
 100d5ac:	df000017 	ldw	fp,0(sp)
 100d5b0:	dec00104 	addi	sp,sp,4
 100d5b4:	f800283a 	ret

0100d5b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100d5b8:	defffe04 	addi	sp,sp,-8
 100d5bc:	df000115 	stw	fp,4(sp)
 100d5c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100d5c4:	e03fff15 	stw	zero,-4(fp)
 100d5c8:	00000506 	br	100d5e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100d5cc:	e0bfff17 	ldw	r2,-4(fp)
 100d5d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100d5d4:	e0bfff17 	ldw	r2,-4(fp)
 100d5d8:	10800804 	addi	r2,r2,32
 100d5dc:	e0bfff15 	stw	r2,-4(fp)
 100d5e0:	e0bfff17 	ldw	r2,-4(fp)
 100d5e4:	10820030 	cmpltui	r2,r2,2048
 100d5e8:	103ff81e 	bne	r2,zero,100d5cc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100d5ec:	e037883a 	mov	sp,fp
 100d5f0:	df000017 	ldw	fp,0(sp)
 100d5f4:	dec00104 	addi	sp,sp,4
 100d5f8:	f800283a 	ret

0100d5fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100d5fc:	defff904 	addi	sp,sp,-28
 100d600:	dfc00615 	stw	ra,24(sp)
 100d604:	df000515 	stw	fp,20(sp)
 100d608:	df000504 	addi	fp,sp,20
 100d60c:	e13ffd15 	stw	r4,-12(fp)
 100d610:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100d614:	e0bffd17 	ldw	r2,-12(fp)
 100d618:	1005003a 	cmpeq	r2,r2,zero
 100d61c:	1000041e 	bne	r2,zero,100d630 <alt_dev_llist_insert+0x34>
 100d620:	e0bffd17 	ldw	r2,-12(fp)
 100d624:	10800217 	ldw	r2,8(r2)
 100d628:	1004c03a 	cmpne	r2,r2,zero
 100d62c:	1000071e 	bne	r2,zero,100d64c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100d630:	100d6b00 	call	100d6b0 <alt_get_errno>
 100d634:	1007883a 	mov	r3,r2
 100d638:	00800584 	movi	r2,22
 100d63c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100d640:	00bffa84 	movi	r2,-22
 100d644:	e0bfff15 	stw	r2,-4(fp)
 100d648:	00001306 	br	100d698 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100d64c:	e0fffd17 	ldw	r3,-12(fp)
 100d650:	e0bffe17 	ldw	r2,-8(fp)
 100d654:	e0bffb15 	stw	r2,-20(fp)
 100d658:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d65c:	e0fffc17 	ldw	r3,-16(fp)
 100d660:	e0bffb17 	ldw	r2,-20(fp)
 100d664:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d668:	e0bffb17 	ldw	r2,-20(fp)
 100d66c:	10c00017 	ldw	r3,0(r2)
 100d670:	e0bffc17 	ldw	r2,-16(fp)
 100d674:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d678:	e0bffb17 	ldw	r2,-20(fp)
 100d67c:	10c00017 	ldw	r3,0(r2)
 100d680:	e0bffc17 	ldw	r2,-16(fp)
 100d684:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d688:	e0fffb17 	ldw	r3,-20(fp)
 100d68c:	e0bffc17 	ldw	r2,-16(fp)
 100d690:	18800015 	stw	r2,0(r3)

  return 0;  
 100d694:	e03fff15 	stw	zero,-4(fp)
 100d698:	e0bfff17 	ldw	r2,-4(fp)
}
 100d69c:	e037883a 	mov	sp,fp
 100d6a0:	dfc00117 	ldw	ra,4(sp)
 100d6a4:	df000017 	ldw	fp,0(sp)
 100d6a8:	dec00204 	addi	sp,sp,8
 100d6ac:	f800283a 	ret

0100d6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d6b0:	defffd04 	addi	sp,sp,-12
 100d6b4:	dfc00215 	stw	ra,8(sp)
 100d6b8:	df000115 	stw	fp,4(sp)
 100d6bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d6c0:	00804074 	movhi	r2,257
 100d6c4:	10818604 	addi	r2,r2,1560
 100d6c8:	10800017 	ldw	r2,0(r2)
 100d6cc:	1005003a 	cmpeq	r2,r2,zero
 100d6d0:	1000061e 	bne	r2,zero,100d6ec <alt_get_errno+0x3c>
 100d6d4:	00804074 	movhi	r2,257
 100d6d8:	10818604 	addi	r2,r2,1560
 100d6dc:	10800017 	ldw	r2,0(r2)
 100d6e0:	103ee83a 	callr	r2
 100d6e4:	e0bfff15 	stw	r2,-4(fp)
 100d6e8:	00000306 	br	100d6f8 <alt_get_errno+0x48>
 100d6ec:	00804074 	movhi	r2,257
 100d6f0:	1088a804 	addi	r2,r2,8864
 100d6f4:	e0bfff15 	stw	r2,-4(fp)
 100d6f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100d6fc:	e037883a 	mov	sp,fp
 100d700:	dfc00117 	ldw	ra,4(sp)
 100d704:	df000017 	ldw	fp,0(sp)
 100d708:	dec00204 	addi	sp,sp,8
 100d70c:	f800283a 	ret

0100d710 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100d710:	defffd04 	addi	sp,sp,-12
 100d714:	dfc00215 	stw	ra,8(sp)
 100d718:	df000115 	stw	fp,4(sp)
 100d71c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d720:	00bfff04 	movi	r2,-4
 100d724:	00c04074 	movhi	r3,257
 100d728:	18f95004 	addi	r3,r3,-6848
 100d72c:	1885883a 	add	r2,r3,r2
 100d730:	e0bfff15 	stw	r2,-4(fp)
 100d734:	00000606 	br	100d750 <_do_ctors+0x40>
        (*ctor) (); 
 100d738:	e0bfff17 	ldw	r2,-4(fp)
 100d73c:	10800017 	ldw	r2,0(r2)
 100d740:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d744:	e0bfff17 	ldw	r2,-4(fp)
 100d748:	10bfff04 	addi	r2,r2,-4
 100d74c:	e0bfff15 	stw	r2,-4(fp)
 100d750:	e0ffff17 	ldw	r3,-4(fp)
 100d754:	00804074 	movhi	r2,257
 100d758:	10b94f04 	addi	r2,r2,-6852
 100d75c:	18bff62e 	bgeu	r3,r2,100d738 <_do_ctors+0x28>
        (*ctor) (); 
}
 100d760:	e037883a 	mov	sp,fp
 100d764:	dfc00117 	ldw	ra,4(sp)
 100d768:	df000017 	ldw	fp,0(sp)
 100d76c:	dec00204 	addi	sp,sp,8
 100d770:	f800283a 	ret

0100d774 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100d774:	defffd04 	addi	sp,sp,-12
 100d778:	dfc00215 	stw	ra,8(sp)
 100d77c:	df000115 	stw	fp,4(sp)
 100d780:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d784:	00bfff04 	movi	r2,-4
 100d788:	00c04074 	movhi	r3,257
 100d78c:	18f95004 	addi	r3,r3,-6848
 100d790:	1885883a 	add	r2,r3,r2
 100d794:	e0bfff15 	stw	r2,-4(fp)
 100d798:	00000606 	br	100d7b4 <_do_dtors+0x40>
        (*dtor) (); 
 100d79c:	e0bfff17 	ldw	r2,-4(fp)
 100d7a0:	10800017 	ldw	r2,0(r2)
 100d7a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d7a8:	e0bfff17 	ldw	r2,-4(fp)
 100d7ac:	10bfff04 	addi	r2,r2,-4
 100d7b0:	e0bfff15 	stw	r2,-4(fp)
 100d7b4:	e0ffff17 	ldw	r3,-4(fp)
 100d7b8:	00804074 	movhi	r2,257
 100d7bc:	10b95004 	addi	r2,r2,-6848
 100d7c0:	18bff62e 	bgeu	r3,r2,100d79c <_do_dtors+0x28>
        (*dtor) (); 
}
 100d7c4:	e037883a 	mov	sp,fp
 100d7c8:	dfc00117 	ldw	ra,4(sp)
 100d7cc:	df000017 	ldw	fp,0(sp)
 100d7d0:	dec00204 	addi	sp,sp,8
 100d7d4:	f800283a 	ret

0100d7d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100d7d8:	defff904 	addi	sp,sp,-28
 100d7dc:	dfc00615 	stw	ra,24(sp)
 100d7e0:	df000515 	stw	fp,20(sp)
 100d7e4:	df000504 	addi	fp,sp,20
 100d7e8:	e13ffd15 	stw	r4,-12(fp)
 100d7ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100d7f0:	e0bffe17 	ldw	r2,-8(fp)
 100d7f4:	10800017 	ldw	r2,0(r2)
 100d7f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100d7fc:	e13ffd17 	ldw	r4,-12(fp)
 100d800:	1000c200 	call	1000c20 <strlen>
 100d804:	10800044 	addi	r2,r2,1
 100d808:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d80c:	00000d06 	br	100d844 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100d810:	e0bffc17 	ldw	r2,-16(fp)
 100d814:	11000217 	ldw	r4,8(r2)
 100d818:	e1bffb17 	ldw	r6,-20(fp)
 100d81c:	e17ffd17 	ldw	r5,-12(fp)
 100d820:	100e1140 	call	100e114 <memcmp>
 100d824:	1004c03a 	cmpne	r2,r2,zero
 100d828:	1000031e 	bne	r2,zero,100d838 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100d82c:	e0bffc17 	ldw	r2,-16(fp)
 100d830:	e0bfff15 	stw	r2,-4(fp)
 100d834:	00000706 	br	100d854 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100d838:	e0bffc17 	ldw	r2,-16(fp)
 100d83c:	10800017 	ldw	r2,0(r2)
 100d840:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d844:	e0fffe17 	ldw	r3,-8(fp)
 100d848:	e0bffc17 	ldw	r2,-16(fp)
 100d84c:	10fff01e 	bne	r2,r3,100d810 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100d850:	e03fff15 	stw	zero,-4(fp)
 100d854:	e0bfff17 	ldw	r2,-4(fp)
}
 100d858:	e037883a 	mov	sp,fp
 100d85c:	dfc00117 	ldw	ra,4(sp)
 100d860:	df000017 	ldw	fp,0(sp)
 100d864:	dec00204 	addi	sp,sp,8
 100d868:	f800283a 	ret

0100d86c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100d86c:	defffe04 	addi	sp,sp,-8
 100d870:	dfc00115 	stw	ra,4(sp)
 100d874:	df000015 	stw	fp,0(sp)
 100d878:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100d87c:	0009883a 	mov	r4,zero
 100d880:	01440004 	movi	r5,4096
 100d884:	100e0380 	call	100e038 <alt_icache_flush>
#endif
}
 100d888:	e037883a 	mov	sp,fp
 100d88c:	dfc00117 	ldw	ra,4(sp)
 100d890:	df000017 	ldw	fp,0(sp)
 100d894:	dec00204 	addi	sp,sp,8
 100d898:	f800283a 	ret

0100d89c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100d89c:	defff904 	addi	sp,sp,-28
 100d8a0:	dfc00615 	stw	ra,24(sp)
 100d8a4:	df000515 	stw	fp,20(sp)
 100d8a8:	df000504 	addi	fp,sp,20
 100d8ac:	e13ffc15 	stw	r4,-16(fp)
 100d8b0:	e17ffd15 	stw	r5,-12(fp)
 100d8b4:	e1bffe15 	stw	r6,-8(fp)
 100d8b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100d8bc:	e13ffd17 	ldw	r4,-12(fp)
 100d8c0:	e17ffe17 	ldw	r5,-8(fp)
 100d8c4:	e1bfff17 	ldw	r6,-4(fp)
 100d8c8:	100dab40 	call	100dab4 <open>
 100d8cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100d8d0:	e0bffb17 	ldw	r2,-20(fp)
 100d8d4:	1004803a 	cmplt	r2,r2,zero
 100d8d8:	10001c1e 	bne	r2,zero,100d94c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100d8dc:	e0bffb17 	ldw	r2,-20(fp)
 100d8e0:	00c04074 	movhi	r3,257
 100d8e4:	18fc8a04 	addi	r3,r3,-3544
 100d8e8:	10800324 	muli	r2,r2,12
 100d8ec:	10c5883a 	add	r2,r2,r3
 100d8f0:	10c00017 	ldw	r3,0(r2)
 100d8f4:	e0bffc17 	ldw	r2,-16(fp)
 100d8f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100d8fc:	e0bffb17 	ldw	r2,-20(fp)
 100d900:	00c04074 	movhi	r3,257
 100d904:	18fc8a04 	addi	r3,r3,-3544
 100d908:	10800324 	muli	r2,r2,12
 100d90c:	10c5883a 	add	r2,r2,r3
 100d910:	10800104 	addi	r2,r2,4
 100d914:	10c00017 	ldw	r3,0(r2)
 100d918:	e0bffc17 	ldw	r2,-16(fp)
 100d91c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100d920:	e0bffb17 	ldw	r2,-20(fp)
 100d924:	00c04074 	movhi	r3,257
 100d928:	18fc8a04 	addi	r3,r3,-3544
 100d92c:	10800324 	muli	r2,r2,12
 100d930:	10c5883a 	add	r2,r2,r3
 100d934:	10800204 	addi	r2,r2,8
 100d938:	10c00017 	ldw	r3,0(r2)
 100d93c:	e0bffc17 	ldw	r2,-16(fp)
 100d940:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100d944:	e13ffb17 	ldw	r4,-20(fp)
 100d948:	100af740 	call	100af74 <alt_release_fd>
  }
} 
 100d94c:	e037883a 	mov	sp,fp
 100d950:	dfc00117 	ldw	ra,4(sp)
 100d954:	df000017 	ldw	fp,0(sp)
 100d958:	dec00204 	addi	sp,sp,8
 100d95c:	f800283a 	ret

0100d960 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100d960:	defffb04 	addi	sp,sp,-20
 100d964:	dfc00415 	stw	ra,16(sp)
 100d968:	df000315 	stw	fp,12(sp)
 100d96c:	df000304 	addi	fp,sp,12
 100d970:	e13ffd15 	stw	r4,-12(fp)
 100d974:	e17ffe15 	stw	r5,-8(fp)
 100d978:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100d97c:	01004074 	movhi	r4,257
 100d980:	213c8d04 	addi	r4,r4,-3532
 100d984:	e17ffd17 	ldw	r5,-12(fp)
 100d988:	01800044 	movi	r6,1
 100d98c:	01c07fc4 	movi	r7,511
 100d990:	100d89c0 	call	100d89c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100d994:	01004074 	movhi	r4,257
 100d998:	213c8a04 	addi	r4,r4,-3544
 100d99c:	e17ffe17 	ldw	r5,-8(fp)
 100d9a0:	000d883a 	mov	r6,zero
 100d9a4:	01c07fc4 	movi	r7,511
 100d9a8:	100d89c0 	call	100d89c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100d9ac:	01004074 	movhi	r4,257
 100d9b0:	213c9004 	addi	r4,r4,-3520
 100d9b4:	e17fff17 	ldw	r5,-4(fp)
 100d9b8:	01800044 	movi	r6,1
 100d9bc:	01c07fc4 	movi	r7,511
 100d9c0:	100d89c0 	call	100d89c <alt_open_fd>
}  
 100d9c4:	e037883a 	mov	sp,fp
 100d9c8:	dfc00117 	ldw	ra,4(sp)
 100d9cc:	df000017 	ldw	fp,0(sp)
 100d9d0:	dec00204 	addi	sp,sp,8
 100d9d4:	f800283a 	ret

0100d9d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100d9d8:	defffc04 	addi	sp,sp,-16
 100d9dc:	df000315 	stw	fp,12(sp)
 100d9e0:	df000304 	addi	fp,sp,12
 100d9e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100d9e8:	e0bffe17 	ldw	r2,-8(fp)
 100d9ec:	10800217 	ldw	r2,8(r2)
 100d9f0:	10d00034 	orhi	r3,r2,16384
 100d9f4:	e0bffe17 	ldw	r2,-8(fp)
 100d9f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100d9fc:	e03ffd15 	stw	zero,-12(fp)
 100da00:	00002006 	br	100da84 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100da04:	e0bffd17 	ldw	r2,-12(fp)
 100da08:	00c04074 	movhi	r3,257
 100da0c:	18fc8a04 	addi	r3,r3,-3544
 100da10:	10800324 	muli	r2,r2,12
 100da14:	10c5883a 	add	r2,r2,r3
 100da18:	10c00017 	ldw	r3,0(r2)
 100da1c:	e0bffe17 	ldw	r2,-8(fp)
 100da20:	10800017 	ldw	r2,0(r2)
 100da24:	1880141e 	bne	r3,r2,100da78 <alt_file_locked+0xa0>
 100da28:	e0bffd17 	ldw	r2,-12(fp)
 100da2c:	00c04074 	movhi	r3,257
 100da30:	18fc8a04 	addi	r3,r3,-3544
 100da34:	10800324 	muli	r2,r2,12
 100da38:	10c5883a 	add	r2,r2,r3
 100da3c:	10800204 	addi	r2,r2,8
 100da40:	10800017 	ldw	r2,0(r2)
 100da44:	1004403a 	cmpge	r2,r2,zero
 100da48:	10000b1e 	bne	r2,zero,100da78 <alt_file_locked+0xa0>
 100da4c:	e0bffd17 	ldw	r2,-12(fp)
 100da50:	10800324 	muli	r2,r2,12
 100da54:	1007883a 	mov	r3,r2
 100da58:	00804074 	movhi	r2,257
 100da5c:	10bc8a04 	addi	r2,r2,-3544
 100da60:	1887883a 	add	r3,r3,r2
 100da64:	e0bffe17 	ldw	r2,-8(fp)
 100da68:	18800326 	beq	r3,r2,100da78 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100da6c:	00bffcc4 	movi	r2,-13
 100da70:	e0bfff15 	stw	r2,-4(fp)
 100da74:	00000a06 	br	100daa0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100da78:	e0bffd17 	ldw	r2,-12(fp)
 100da7c:	10800044 	addi	r2,r2,1
 100da80:	e0bffd15 	stw	r2,-12(fp)
 100da84:	00804074 	movhi	r2,257
 100da88:	10818504 	addi	r2,r2,1556
 100da8c:	10800017 	ldw	r2,0(r2)
 100da90:	1007883a 	mov	r3,r2
 100da94:	e0bffd17 	ldw	r2,-12(fp)
 100da98:	18bfda2e 	bgeu	r3,r2,100da04 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100da9c:	e03fff15 	stw	zero,-4(fp)
 100daa0:	e0bfff17 	ldw	r2,-4(fp)
}
 100daa4:	e037883a 	mov	sp,fp
 100daa8:	df000017 	ldw	fp,0(sp)
 100daac:	dec00104 	addi	sp,sp,4
 100dab0:	f800283a 	ret

0100dab4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100dab4:	defff404 	addi	sp,sp,-48
 100dab8:	dfc00b15 	stw	ra,44(sp)
 100dabc:	df000a15 	stw	fp,40(sp)
 100dac0:	df000a04 	addi	fp,sp,40
 100dac4:	e13ffb15 	stw	r4,-20(fp)
 100dac8:	e17ffc15 	stw	r5,-16(fp)
 100dacc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100dad0:	00bfffc4 	movi	r2,-1
 100dad4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100dad8:	00bffb44 	movi	r2,-19
 100dadc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100dae0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100dae4:	e13ffb17 	ldw	r4,-20(fp)
 100dae8:	01404074 	movhi	r5,257
 100daec:	29418304 	addi	r5,r5,1548
 100daf0:	100d7d80 	call	100d7d8 <alt_find_dev>
 100daf4:	e0bffa15 	stw	r2,-24(fp)
 100daf8:	e0bffa17 	ldw	r2,-24(fp)
 100dafc:	1004c03a 	cmpne	r2,r2,zero
 100db00:	1000051e 	bne	r2,zero,100db18 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100db04:	e13ffb17 	ldw	r4,-20(fp)
 100db08:	100de600 	call	100de60 <alt_find_file>
 100db0c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100db10:	00800044 	movi	r2,1
 100db14:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100db18:	e0bffa17 	ldw	r2,-24(fp)
 100db1c:	1005003a 	cmpeq	r2,r2,zero
 100db20:	1000301e 	bne	r2,zero,100dbe4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100db24:	e13ffa17 	ldw	r4,-24(fp)
 100db28:	100df800 	call	100df80 <alt_get_fd>
 100db2c:	e0bff815 	stw	r2,-32(fp)
 100db30:	e0bff817 	ldw	r2,-32(fp)
 100db34:	1004403a 	cmpge	r2,r2,zero
 100db38:	1000031e 	bne	r2,zero,100db48 <open+0x94>
    {
      status = index;
 100db3c:	e0bff817 	ldw	r2,-32(fp)
 100db40:	e0bff715 	stw	r2,-36(fp)
 100db44:	00002906 	br	100dbec <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 100db48:	e0bff817 	ldw	r2,-32(fp)
 100db4c:	10800324 	muli	r2,r2,12
 100db50:	1007883a 	mov	r3,r2
 100db54:	00804074 	movhi	r2,257
 100db58:	10bc8a04 	addi	r2,r2,-3544
 100db5c:	1885883a 	add	r2,r3,r2
 100db60:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100db64:	e0fffc17 	ldw	r3,-16(fp)
 100db68:	00900034 	movhi	r2,16384
 100db6c:	10bfffc4 	addi	r2,r2,-1
 100db70:	1886703a 	and	r3,r3,r2
 100db74:	e0bff917 	ldw	r2,-28(fp)
 100db78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100db7c:	e0bff617 	ldw	r2,-40(fp)
 100db80:	1004c03a 	cmpne	r2,r2,zero
 100db84:	1000061e 	bne	r2,zero,100dba0 <open+0xec>
 100db88:	e13ff917 	ldw	r4,-28(fp)
 100db8c:	100d9d80 	call	100d9d8 <alt_file_locked>
 100db90:	e0bff715 	stw	r2,-36(fp)
 100db94:	e0bff717 	ldw	r2,-36(fp)
 100db98:	1004803a 	cmplt	r2,r2,zero
 100db9c:	1000131e 	bne	r2,zero,100dbec <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100dba0:	e0bffa17 	ldw	r2,-24(fp)
 100dba4:	10800317 	ldw	r2,12(r2)
 100dba8:	1005003a 	cmpeq	r2,r2,zero
 100dbac:	1000091e 	bne	r2,zero,100dbd4 <open+0x120>
 100dbb0:	e0bffa17 	ldw	r2,-24(fp)
 100dbb4:	10800317 	ldw	r2,12(r2)
 100dbb8:	e13ff917 	ldw	r4,-28(fp)
 100dbbc:	e17ffb17 	ldw	r5,-20(fp)
 100dbc0:	e1bffc17 	ldw	r6,-16(fp)
 100dbc4:	e1fffd17 	ldw	r7,-12(fp)
 100dbc8:	103ee83a 	callr	r2
 100dbcc:	e0bfff15 	stw	r2,-4(fp)
 100dbd0:	00000106 	br	100dbd8 <open+0x124>
 100dbd4:	e03fff15 	stw	zero,-4(fp)
 100dbd8:	e0bfff17 	ldw	r2,-4(fp)
 100dbdc:	e0bff715 	stw	r2,-36(fp)
 100dbe0:	00000206 	br	100dbec <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100dbe4:	00bffb44 	movi	r2,-19
 100dbe8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100dbec:	e0bff717 	ldw	r2,-36(fp)
 100dbf0:	1004403a 	cmpge	r2,r2,zero
 100dbf4:	1000091e 	bne	r2,zero,100dc1c <open+0x168>
  {
    alt_release_fd (index);  
 100dbf8:	e13ff817 	ldw	r4,-32(fp)
 100dbfc:	100af740 	call	100af74 <alt_release_fd>
    ALT_ERRNO = -status;
 100dc00:	100dc3c0 	call	100dc3c <alt_get_errno>
 100dc04:	e0fff717 	ldw	r3,-36(fp)
 100dc08:	00c7c83a 	sub	r3,zero,r3
 100dc0c:	10c00015 	stw	r3,0(r2)
    return -1;
 100dc10:	00bfffc4 	movi	r2,-1
 100dc14:	e0bffe15 	stw	r2,-8(fp)
 100dc18:	00000206 	br	100dc24 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 100dc1c:	e0bff817 	ldw	r2,-32(fp)
 100dc20:	e0bffe15 	stw	r2,-8(fp)
 100dc24:	e0bffe17 	ldw	r2,-8(fp)
}
 100dc28:	e037883a 	mov	sp,fp
 100dc2c:	dfc00117 	ldw	ra,4(sp)
 100dc30:	df000017 	ldw	fp,0(sp)
 100dc34:	dec00204 	addi	sp,sp,8
 100dc38:	f800283a 	ret

0100dc3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dc3c:	defffd04 	addi	sp,sp,-12
 100dc40:	dfc00215 	stw	ra,8(sp)
 100dc44:	df000115 	stw	fp,4(sp)
 100dc48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100dc4c:	00804074 	movhi	r2,257
 100dc50:	10818604 	addi	r2,r2,1560
 100dc54:	10800017 	ldw	r2,0(r2)
 100dc58:	1005003a 	cmpeq	r2,r2,zero
 100dc5c:	1000061e 	bne	r2,zero,100dc78 <alt_get_errno+0x3c>
 100dc60:	00804074 	movhi	r2,257
 100dc64:	10818604 	addi	r2,r2,1560
 100dc68:	10800017 	ldw	r2,0(r2)
 100dc6c:	103ee83a 	callr	r2
 100dc70:	e0bfff15 	stw	r2,-4(fp)
 100dc74:	00000306 	br	100dc84 <alt_get_errno+0x48>
 100dc78:	00804074 	movhi	r2,257
 100dc7c:	1088a804 	addi	r2,r2,8864
 100dc80:	e0bfff15 	stw	r2,-4(fp)
 100dc84:	e0bfff17 	ldw	r2,-4(fp)
}
 100dc88:	e037883a 	mov	sp,fp
 100dc8c:	dfc00117 	ldw	ra,4(sp)
 100dc90:	df000017 	ldw	fp,0(sp)
 100dc94:	dec00204 	addi	sp,sp,8
 100dc98:	f800283a 	ret

0100dc9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100dc9c:	defffa04 	addi	sp,sp,-24
 100dca0:	df000515 	stw	fp,20(sp)
 100dca4:	df000504 	addi	fp,sp,20
 100dca8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dcac:	0005303a 	rdctl	r2,status
 100dcb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dcb4:	e0fffd17 	ldw	r3,-12(fp)
 100dcb8:	00bfff84 	movi	r2,-2
 100dcbc:	1884703a 	and	r2,r3,r2
 100dcc0:	1001703a 	wrctl	status,r2
  
  return context;
 100dcc4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100dcc8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100dccc:	e0bfff17 	ldw	r2,-4(fp)
 100dcd0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100dcd4:	e0bffc17 	ldw	r2,-16(fp)
 100dcd8:	10c00017 	ldw	r3,0(r2)
 100dcdc:	e0bffc17 	ldw	r2,-16(fp)
 100dce0:	10800117 	ldw	r2,4(r2)
 100dce4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100dce8:	e0bffc17 	ldw	r2,-16(fp)
 100dcec:	10c00117 	ldw	r3,4(r2)
 100dcf0:	e0bffc17 	ldw	r2,-16(fp)
 100dcf4:	10800017 	ldw	r2,0(r2)
 100dcf8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100dcfc:	e0fffc17 	ldw	r3,-16(fp)
 100dd00:	e0bffc17 	ldw	r2,-16(fp)
 100dd04:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100dd08:	e0fffc17 	ldw	r3,-16(fp)
 100dd0c:	e0bffc17 	ldw	r2,-16(fp)
 100dd10:	18800015 	stw	r2,0(r3)
 100dd14:	e0bffe17 	ldw	r2,-8(fp)
 100dd18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dd1c:	e0bffb17 	ldw	r2,-20(fp)
 100dd20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100dd24:	e037883a 	mov	sp,fp
 100dd28:	df000017 	ldw	fp,0(sp)
 100dd2c:	dec00104 	addi	sp,sp,4
 100dd30:	f800283a 	ret

0100dd34 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100dd34:	defffb04 	addi	sp,sp,-20
 100dd38:	dfc00415 	stw	ra,16(sp)
 100dd3c:	df000315 	stw	fp,12(sp)
 100dd40:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100dd44:	d0a00e17 	ldw	r2,-32712(gp)
 100dd48:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100dd4c:	d0a73317 	ldw	r2,-25396(gp)
 100dd50:	10800044 	addi	r2,r2,1
 100dd54:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100dd58:	00003106 	br	100de20 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100dd5c:	e0bffe17 	ldw	r2,-8(fp)
 100dd60:	10800017 	ldw	r2,0(r2)
 100dd64:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100dd68:	e0bffe17 	ldw	r2,-8(fp)
 100dd6c:	10800403 	ldbu	r2,16(r2)
 100dd70:	10803fcc 	andi	r2,r2,255
 100dd74:	1005003a 	cmpeq	r2,r2,zero
 100dd78:	1000051e 	bne	r2,zero,100dd90 <alt_tick+0x5c>
 100dd7c:	d0a73317 	ldw	r2,-25396(gp)
 100dd80:	1004c03a 	cmpne	r2,r2,zero
 100dd84:	1000021e 	bne	r2,zero,100dd90 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100dd88:	e0bffe17 	ldw	r2,-8(fp)
 100dd8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100dd90:	e0bffe17 	ldw	r2,-8(fp)
 100dd94:	10c00217 	ldw	r3,8(r2)
 100dd98:	d0a73317 	ldw	r2,-25396(gp)
 100dd9c:	10c01e36 	bltu	r2,r3,100de18 <alt_tick+0xe4>
 100dda0:	e0bffe17 	ldw	r2,-8(fp)
 100dda4:	10800403 	ldbu	r2,16(r2)
 100dda8:	10803fcc 	andi	r2,r2,255
 100ddac:	1004c03a 	cmpne	r2,r2,zero
 100ddb0:	1000191e 	bne	r2,zero,100de18 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100ddb4:	e0bffe17 	ldw	r2,-8(fp)
 100ddb8:	10c00317 	ldw	r3,12(r2)
 100ddbc:	e0bffe17 	ldw	r2,-8(fp)
 100ddc0:	11000517 	ldw	r4,20(r2)
 100ddc4:	183ee83a 	callr	r3
 100ddc8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100ddcc:	e0bffd17 	ldw	r2,-12(fp)
 100ddd0:	1004c03a 	cmpne	r2,r2,zero
 100ddd4:	1000031e 	bne	r2,zero,100dde4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100ddd8:	e13ffe17 	ldw	r4,-8(fp)
 100dddc:	100dc9c0 	call	100dc9c <alt_alarm_stop>
 100dde0:	00000d06 	br	100de18 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100dde4:	e0bffe17 	ldw	r2,-8(fp)
 100dde8:	10c00217 	ldw	r3,8(r2)
 100ddec:	e0bffd17 	ldw	r2,-12(fp)
 100ddf0:	1887883a 	add	r3,r3,r2
 100ddf4:	e0bffe17 	ldw	r2,-8(fp)
 100ddf8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100ddfc:	e0bffe17 	ldw	r2,-8(fp)
 100de00:	10c00217 	ldw	r3,8(r2)
 100de04:	d0a73317 	ldw	r2,-25396(gp)
 100de08:	1880032e 	bgeu	r3,r2,100de18 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100de0c:	e0fffe17 	ldw	r3,-8(fp)
 100de10:	00800044 	movi	r2,1
 100de14:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100de18:	e0bfff17 	ldw	r2,-4(fp)
 100de1c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100de20:	d0e00e04 	addi	r3,gp,-32712
 100de24:	e0bffe17 	ldw	r2,-8(fp)
 100de28:	10ffcc1e 	bne	r2,r3,100dd5c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100de2c:	e037883a 	mov	sp,fp
 100de30:	dfc00117 	ldw	ra,4(sp)
 100de34:	df000017 	ldw	fp,0(sp)
 100de38:	dec00204 	addi	sp,sp,8
 100de3c:	f800283a 	ret

0100de40 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100de40:	deffff04 	addi	sp,sp,-4
 100de44:	df000015 	stw	fp,0(sp)
 100de48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100de4c:	000170fa 	wrctl	ienable,zero
}
 100de50:	e037883a 	mov	sp,fp
 100de54:	df000017 	ldw	fp,0(sp)
 100de58:	dec00104 	addi	sp,sp,4
 100de5c:	f800283a 	ret

0100de60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100de60:	defffa04 	addi	sp,sp,-24
 100de64:	dfc00515 	stw	ra,20(sp)
 100de68:	df000415 	stw	fp,16(sp)
 100de6c:	df000404 	addi	fp,sp,16
 100de70:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100de74:	00804074 	movhi	r2,257
 100de78:	10818104 	addi	r2,r2,1540
 100de7c:	10800017 	ldw	r2,0(r2)
 100de80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100de84:	00003306 	br	100df54 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100de88:	e0bffd17 	ldw	r2,-12(fp)
 100de8c:	11000217 	ldw	r4,8(r2)
 100de90:	1000c200 	call	1000c20 <strlen>
 100de94:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100de98:	e0bffd17 	ldw	r2,-12(fp)
 100de9c:	10c00217 	ldw	r3,8(r2)
 100dea0:	e0bffc17 	ldw	r2,-16(fp)
 100dea4:	1885883a 	add	r2,r3,r2
 100dea8:	10bfffc4 	addi	r2,r2,-1
 100deac:	10800003 	ldbu	r2,0(r2)
 100deb0:	10803fcc 	andi	r2,r2,255
 100deb4:	1080201c 	xori	r2,r2,128
 100deb8:	10bfe004 	addi	r2,r2,-128
 100debc:	10800bd8 	cmpnei	r2,r2,47
 100dec0:	1000031e 	bne	r2,zero,100ded0 <alt_find_file+0x70>
    {
      len -= 1;
 100dec4:	e0bffc17 	ldw	r2,-16(fp)
 100dec8:	10bfffc4 	addi	r2,r2,-1
 100decc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100ded0:	e0bffc17 	ldw	r2,-16(fp)
 100ded4:	1007883a 	mov	r3,r2
 100ded8:	e0bffe17 	ldw	r2,-8(fp)
 100dedc:	1885883a 	add	r2,r3,r2
 100dee0:	10800003 	ldbu	r2,0(r2)
 100dee4:	10803fcc 	andi	r2,r2,255
 100dee8:	1080201c 	xori	r2,r2,128
 100deec:	10bfe004 	addi	r2,r2,-128
 100def0:	10800be0 	cmpeqi	r2,r2,47
 100def4:	10000a1e 	bne	r2,zero,100df20 <alt_find_file+0xc0>
 100def8:	e0bffc17 	ldw	r2,-16(fp)
 100defc:	1007883a 	mov	r3,r2
 100df00:	e0bffe17 	ldw	r2,-8(fp)
 100df04:	1885883a 	add	r2,r3,r2
 100df08:	10800003 	ldbu	r2,0(r2)
 100df0c:	10803fcc 	andi	r2,r2,255
 100df10:	1080201c 	xori	r2,r2,128
 100df14:	10bfe004 	addi	r2,r2,-128
 100df18:	1004c03a 	cmpne	r2,r2,zero
 100df1c:	10000a1e 	bne	r2,zero,100df48 <alt_find_file+0xe8>
 100df20:	e0bffd17 	ldw	r2,-12(fp)
 100df24:	11000217 	ldw	r4,8(r2)
 100df28:	e1bffc17 	ldw	r6,-16(fp)
 100df2c:	e17ffe17 	ldw	r5,-8(fp)
 100df30:	100e1140 	call	100e114 <memcmp>
 100df34:	1004c03a 	cmpne	r2,r2,zero
 100df38:	1000031e 	bne	r2,zero,100df48 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100df3c:	e0bffd17 	ldw	r2,-12(fp)
 100df40:	e0bfff15 	stw	r2,-4(fp)
 100df44:	00000806 	br	100df68 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100df48:	e0bffd17 	ldw	r2,-12(fp)
 100df4c:	10800017 	ldw	r2,0(r2)
 100df50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100df54:	00c04074 	movhi	r3,257
 100df58:	18c18104 	addi	r3,r3,1540
 100df5c:	e0bffd17 	ldw	r2,-12(fp)
 100df60:	10ffc91e 	bne	r2,r3,100de88 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100df64:	e03fff15 	stw	zero,-4(fp)
 100df68:	e0bfff17 	ldw	r2,-4(fp)
}
 100df6c:	e037883a 	mov	sp,fp
 100df70:	dfc00117 	ldw	ra,4(sp)
 100df74:	df000017 	ldw	fp,0(sp)
 100df78:	dec00204 	addi	sp,sp,8
 100df7c:	f800283a 	ret

0100df80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100df80:	defffc04 	addi	sp,sp,-16
 100df84:	df000315 	stw	fp,12(sp)
 100df88:	df000304 	addi	fp,sp,12
 100df8c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100df90:	00bffa04 	movi	r2,-24
 100df94:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100df98:	e03ffe15 	stw	zero,-8(fp)
 100df9c:	00001e06 	br	100e018 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 100dfa0:	e0bffe17 	ldw	r2,-8(fp)
 100dfa4:	00c04074 	movhi	r3,257
 100dfa8:	18fc8a04 	addi	r3,r3,-3544
 100dfac:	10800324 	muli	r2,r2,12
 100dfb0:	10c5883a 	add	r2,r2,r3
 100dfb4:	10800017 	ldw	r2,0(r2)
 100dfb8:	1004c03a 	cmpne	r2,r2,zero
 100dfbc:	1000131e 	bne	r2,zero,100e00c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 100dfc0:	e0bffe17 	ldw	r2,-8(fp)
 100dfc4:	00c04074 	movhi	r3,257
 100dfc8:	18fc8a04 	addi	r3,r3,-3544
 100dfcc:	10800324 	muli	r2,r2,12
 100dfd0:	10c7883a 	add	r3,r2,r3
 100dfd4:	e0bfff17 	ldw	r2,-4(fp)
 100dfd8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100dfdc:	00804074 	movhi	r2,257
 100dfe0:	10818504 	addi	r2,r2,1556
 100dfe4:	10c00017 	ldw	r3,0(r2)
 100dfe8:	e0bffe17 	ldw	r2,-8(fp)
 100dfec:	1880040e 	bge	r3,r2,100e000 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 100dff0:	00c04074 	movhi	r3,257
 100dff4:	18c18504 	addi	r3,r3,1556
 100dff8:	e0bffe17 	ldw	r2,-8(fp)
 100dffc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100e000:	e0bffe17 	ldw	r2,-8(fp)
 100e004:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100e008:	00000606 	br	100e024 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100e00c:	e0bffe17 	ldw	r2,-8(fp)
 100e010:	10800044 	addi	r2,r2,1
 100e014:	e0bffe15 	stw	r2,-8(fp)
 100e018:	e0bffe17 	ldw	r2,-8(fp)
 100e01c:	10800810 	cmplti	r2,r2,32
 100e020:	103fdf1e 	bne	r2,zero,100dfa0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100e024:	e0bffd17 	ldw	r2,-12(fp)
}
 100e028:	e037883a 	mov	sp,fp
 100e02c:	df000017 	ldw	fp,0(sp)
 100e030:	dec00104 	addi	sp,sp,4
 100e034:	f800283a 	ret

0100e038 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100e038:	defffb04 	addi	sp,sp,-20
 100e03c:	df000415 	stw	fp,16(sp)
 100e040:	df000404 	addi	fp,sp,16
 100e044:	e13ffe15 	stw	r4,-8(fp)
 100e048:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100e04c:	e0bfff17 	ldw	r2,-4(fp)
 100e050:	10840070 	cmpltui	r2,r2,4097
 100e054:	1000021e 	bne	r2,zero,100e060 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100e058:	00840004 	movi	r2,4096
 100e05c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100e060:	e0fffe17 	ldw	r3,-8(fp)
 100e064:	e0bfff17 	ldw	r2,-4(fp)
 100e068:	1885883a 	add	r2,r3,r2
 100e06c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100e070:	e0bffe17 	ldw	r2,-8(fp)
 100e074:	e0bffd15 	stw	r2,-12(fp)
 100e078:	00000506 	br	100e090 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100e07c:	e0bffd17 	ldw	r2,-12(fp)
 100e080:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100e084:	e0bffd17 	ldw	r2,-12(fp)
 100e088:	10800804 	addi	r2,r2,32
 100e08c:	e0bffd15 	stw	r2,-12(fp)
 100e090:	e0fffd17 	ldw	r3,-12(fp)
 100e094:	e0bffc17 	ldw	r2,-16(fp)
 100e098:	18bff836 	bltu	r3,r2,100e07c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100e09c:	e0bffe17 	ldw	r2,-8(fp)
 100e0a0:	108007cc 	andi	r2,r2,31
 100e0a4:	1005003a 	cmpeq	r2,r2,zero
 100e0a8:	1000021e 	bne	r2,zero,100e0b4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100e0ac:	e0bffd17 	ldw	r2,-12(fp)
 100e0b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100e0b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100e0b8:	e037883a 	mov	sp,fp
 100e0bc:	df000017 	ldw	fp,0(sp)
 100e0c0:	dec00104 	addi	sp,sp,4
 100e0c4:	f800283a 	ret

0100e0c8 <atexit>:
 100e0c8:	200b883a 	mov	r5,r4
 100e0cc:	000d883a 	mov	r6,zero
 100e0d0:	0009883a 	mov	r4,zero
 100e0d4:	000f883a 	mov	r7,zero
 100e0d8:	100e1881 	jmpi	100e188 <__register_exitproc>

0100e0dc <exit>:
 100e0dc:	defffe04 	addi	sp,sp,-8
 100e0e0:	000b883a 	mov	r5,zero
 100e0e4:	dc000015 	stw	r16,0(sp)
 100e0e8:	dfc00115 	stw	ra,4(sp)
 100e0ec:	2021883a 	mov	r16,r4
 100e0f0:	100e2c00 	call	100e2c0 <__call_exitprocs>
 100e0f4:	00804074 	movhi	r2,257
 100e0f8:	10817c04 	addi	r2,r2,1520
 100e0fc:	11000017 	ldw	r4,0(r2)
 100e100:	20800f17 	ldw	r2,60(r4)
 100e104:	10000126 	beq	r2,zero,100e10c <exit+0x30>
 100e108:	103ee83a 	callr	r2
 100e10c:	8009883a 	mov	r4,r16
 100e110:	100e4b00 	call	100e4b0 <_exit>

0100e114 <memcmp>:
 100e114:	00c000c4 	movi	r3,3
 100e118:	1980032e 	bgeu	r3,r6,100e128 <memcmp+0x14>
 100e11c:	2144b03a 	or	r2,r4,r5
 100e120:	10c4703a 	and	r2,r2,r3
 100e124:	10000f26 	beq	r2,zero,100e164 <memcmp+0x50>
 100e128:	31ffffc4 	addi	r7,r6,-1
 100e12c:	3000061e 	bne	r6,zero,100e148 <memcmp+0x34>
 100e130:	00000a06 	br	100e15c <memcmp+0x48>
 100e134:	39ffffc4 	addi	r7,r7,-1
 100e138:	00bfffc4 	movi	r2,-1
 100e13c:	21000044 	addi	r4,r4,1
 100e140:	29400044 	addi	r5,r5,1
 100e144:	38800526 	beq	r7,r2,100e15c <memcmp+0x48>
 100e148:	20c00003 	ldbu	r3,0(r4)
 100e14c:	28800003 	ldbu	r2,0(r5)
 100e150:	18bff826 	beq	r3,r2,100e134 <memcmp+0x20>
 100e154:	1885c83a 	sub	r2,r3,r2
 100e158:	f800283a 	ret
 100e15c:	0005883a 	mov	r2,zero
 100e160:	f800283a 	ret
 100e164:	180f883a 	mov	r7,r3
 100e168:	20c00017 	ldw	r3,0(r4)
 100e16c:	28800017 	ldw	r2,0(r5)
 100e170:	18bfed1e 	bne	r3,r2,100e128 <memcmp+0x14>
 100e174:	31bfff04 	addi	r6,r6,-4
 100e178:	21000104 	addi	r4,r4,4
 100e17c:	29400104 	addi	r5,r5,4
 100e180:	39bff936 	bltu	r7,r6,100e168 <memcmp+0x54>
 100e184:	003fe806 	br	100e128 <memcmp+0x14>

0100e188 <__register_exitproc>:
 100e188:	defffa04 	addi	sp,sp,-24
 100e18c:	00804074 	movhi	r2,257
 100e190:	10817c04 	addi	r2,r2,1520
 100e194:	dc000015 	stw	r16,0(sp)
 100e198:	14000017 	ldw	r16,0(r2)
 100e19c:	dd000415 	stw	r20,16(sp)
 100e1a0:	2829883a 	mov	r20,r5
 100e1a4:	81405217 	ldw	r5,328(r16)
 100e1a8:	dcc00315 	stw	r19,12(sp)
 100e1ac:	dc800215 	stw	r18,8(sp)
 100e1b0:	dc400115 	stw	r17,4(sp)
 100e1b4:	dfc00515 	stw	ra,20(sp)
 100e1b8:	2023883a 	mov	r17,r4
 100e1bc:	3027883a 	mov	r19,r6
 100e1c0:	3825883a 	mov	r18,r7
 100e1c4:	28002526 	beq	r5,zero,100e25c <__register_exitproc+0xd4>
 100e1c8:	29000117 	ldw	r4,4(r5)
 100e1cc:	008007c4 	movi	r2,31
 100e1d0:	11002716 	blt	r2,r4,100e270 <__register_exitproc+0xe8>
 100e1d4:	8800101e 	bne	r17,zero,100e218 <__register_exitproc+0x90>
 100e1d8:	2105883a 	add	r2,r4,r4
 100e1dc:	1085883a 	add	r2,r2,r2
 100e1e0:	20c00044 	addi	r3,r4,1
 100e1e4:	1145883a 	add	r2,r2,r5
 100e1e8:	0009883a 	mov	r4,zero
 100e1ec:	15000215 	stw	r20,8(r2)
 100e1f0:	28c00115 	stw	r3,4(r5)
 100e1f4:	2005883a 	mov	r2,r4
 100e1f8:	dfc00517 	ldw	ra,20(sp)
 100e1fc:	dd000417 	ldw	r20,16(sp)
 100e200:	dcc00317 	ldw	r19,12(sp)
 100e204:	dc800217 	ldw	r18,8(sp)
 100e208:	dc400117 	ldw	r17,4(sp)
 100e20c:	dc000017 	ldw	r16,0(sp)
 100e210:	dec00604 	addi	sp,sp,24
 100e214:	f800283a 	ret
 100e218:	29802204 	addi	r6,r5,136
 100e21c:	00800044 	movi	r2,1
 100e220:	110e983a 	sll	r7,r2,r4
 100e224:	30c04017 	ldw	r3,256(r6)
 100e228:	2105883a 	add	r2,r4,r4
 100e22c:	1085883a 	add	r2,r2,r2
 100e230:	1185883a 	add	r2,r2,r6
 100e234:	19c6b03a 	or	r3,r3,r7
 100e238:	14802015 	stw	r18,128(r2)
 100e23c:	14c00015 	stw	r19,0(r2)
 100e240:	00800084 	movi	r2,2
 100e244:	30c04015 	stw	r3,256(r6)
 100e248:	88bfe31e 	bne	r17,r2,100e1d8 <__register_exitproc+0x50>
 100e24c:	30804117 	ldw	r2,260(r6)
 100e250:	11c4b03a 	or	r2,r2,r7
 100e254:	30804115 	stw	r2,260(r6)
 100e258:	003fdf06 	br	100e1d8 <__register_exitproc+0x50>
 100e25c:	00804074 	movhi	r2,257
 100e260:	108a3b04 	addi	r2,r2,10476
 100e264:	100b883a 	mov	r5,r2
 100e268:	80805215 	stw	r2,328(r16)
 100e26c:	003fd606 	br	100e1c8 <__register_exitproc+0x40>
 100e270:	00800034 	movhi	r2,0
 100e274:	10800004 	addi	r2,r2,0
 100e278:	1000021e 	bne	r2,zero,100e284 <__register_exitproc+0xfc>
 100e27c:	013fffc4 	movi	r4,-1
 100e280:	003fdc06 	br	100e1f4 <__register_exitproc+0x6c>
 100e284:	01006404 	movi	r4,400
 100e288:	103ee83a 	callr	r2
 100e28c:	1007883a 	mov	r3,r2
 100e290:	103ffa26 	beq	r2,zero,100e27c <__register_exitproc+0xf4>
 100e294:	80805217 	ldw	r2,328(r16)
 100e298:	180b883a 	mov	r5,r3
 100e29c:	18000115 	stw	zero,4(r3)
 100e2a0:	18800015 	stw	r2,0(r3)
 100e2a4:	80c05215 	stw	r3,328(r16)
 100e2a8:	18006215 	stw	zero,392(r3)
 100e2ac:	18006315 	stw	zero,396(r3)
 100e2b0:	0009883a 	mov	r4,zero
 100e2b4:	883fc826 	beq	r17,zero,100e1d8 <__register_exitproc+0x50>
 100e2b8:	003fd706 	br	100e218 <__register_exitproc+0x90>

0100e2bc <register_fini>:
 100e2bc:	f800283a 	ret

0100e2c0 <__call_exitprocs>:
 100e2c0:	00804074 	movhi	r2,257
 100e2c4:	10817c04 	addi	r2,r2,1520
 100e2c8:	10800017 	ldw	r2,0(r2)
 100e2cc:	defff304 	addi	sp,sp,-52
 100e2d0:	df000b15 	stw	fp,44(sp)
 100e2d4:	d8800115 	stw	r2,4(sp)
 100e2d8:	00800034 	movhi	r2,0
 100e2dc:	10800004 	addi	r2,r2,0
 100e2e0:	1005003a 	cmpeq	r2,r2,zero
 100e2e4:	d8800215 	stw	r2,8(sp)
 100e2e8:	d8800117 	ldw	r2,4(sp)
 100e2ec:	dd400815 	stw	r21,32(sp)
 100e2f0:	dd000715 	stw	r20,28(sp)
 100e2f4:	10805204 	addi	r2,r2,328
 100e2f8:	dfc00c15 	stw	ra,48(sp)
 100e2fc:	ddc00a15 	stw	r23,40(sp)
 100e300:	dd800915 	stw	r22,36(sp)
 100e304:	dcc00615 	stw	r19,24(sp)
 100e308:	dc800515 	stw	r18,20(sp)
 100e30c:	dc400415 	stw	r17,16(sp)
 100e310:	dc000315 	stw	r16,12(sp)
 100e314:	282b883a 	mov	r21,r5
 100e318:	2039883a 	mov	fp,r4
 100e31c:	d8800015 	stw	r2,0(sp)
 100e320:	2829003a 	cmpeq	r20,r5,zero
 100e324:	d8800117 	ldw	r2,4(sp)
 100e328:	14405217 	ldw	r17,328(r2)
 100e32c:	88001026 	beq	r17,zero,100e370 <__call_exitprocs+0xb0>
 100e330:	ddc00017 	ldw	r23,0(sp)
 100e334:	88800117 	ldw	r2,4(r17)
 100e338:	8c802204 	addi	r18,r17,136
 100e33c:	143fffc4 	addi	r16,r2,-1
 100e340:	80000916 	blt	r16,zero,100e368 <__call_exitprocs+0xa8>
 100e344:	05bfffc4 	movi	r22,-1
 100e348:	a000151e 	bne	r20,zero,100e3a0 <__call_exitprocs+0xe0>
 100e34c:	8409883a 	add	r4,r16,r16
 100e350:	2105883a 	add	r2,r4,r4
 100e354:	1485883a 	add	r2,r2,r18
 100e358:	10c02017 	ldw	r3,128(r2)
 100e35c:	a8c01126 	beq	r21,r3,100e3a4 <__call_exitprocs+0xe4>
 100e360:	843fffc4 	addi	r16,r16,-1
 100e364:	85bff81e 	bne	r16,r22,100e348 <__call_exitprocs+0x88>
 100e368:	d8800217 	ldw	r2,8(sp)
 100e36c:	10003126 	beq	r2,zero,100e434 <__call_exitprocs+0x174>
 100e370:	dfc00c17 	ldw	ra,48(sp)
 100e374:	df000b17 	ldw	fp,44(sp)
 100e378:	ddc00a17 	ldw	r23,40(sp)
 100e37c:	dd800917 	ldw	r22,36(sp)
 100e380:	dd400817 	ldw	r21,32(sp)
 100e384:	dd000717 	ldw	r20,28(sp)
 100e388:	dcc00617 	ldw	r19,24(sp)
 100e38c:	dc800517 	ldw	r18,20(sp)
 100e390:	dc400417 	ldw	r17,16(sp)
 100e394:	dc000317 	ldw	r16,12(sp)
 100e398:	dec00d04 	addi	sp,sp,52
 100e39c:	f800283a 	ret
 100e3a0:	8409883a 	add	r4,r16,r16
 100e3a4:	88c00117 	ldw	r3,4(r17)
 100e3a8:	2105883a 	add	r2,r4,r4
 100e3ac:	1445883a 	add	r2,r2,r17
 100e3b0:	18ffffc4 	addi	r3,r3,-1
 100e3b4:	11800217 	ldw	r6,8(r2)
 100e3b8:	1c001526 	beq	r3,r16,100e410 <__call_exitprocs+0x150>
 100e3bc:	10000215 	stw	zero,8(r2)
 100e3c0:	303fe726 	beq	r6,zero,100e360 <__call_exitprocs+0xa0>
 100e3c4:	00c00044 	movi	r3,1
 100e3c8:	1c06983a 	sll	r3,r3,r16
 100e3cc:	90804017 	ldw	r2,256(r18)
 100e3d0:	8cc00117 	ldw	r19,4(r17)
 100e3d4:	1884703a 	and	r2,r3,r2
 100e3d8:	10001426 	beq	r2,zero,100e42c <__call_exitprocs+0x16c>
 100e3dc:	90804117 	ldw	r2,260(r18)
 100e3e0:	1884703a 	and	r2,r3,r2
 100e3e4:	10000c1e 	bne	r2,zero,100e418 <__call_exitprocs+0x158>
 100e3e8:	2105883a 	add	r2,r4,r4
 100e3ec:	1485883a 	add	r2,r2,r18
 100e3f0:	11400017 	ldw	r5,0(r2)
 100e3f4:	e009883a 	mov	r4,fp
 100e3f8:	303ee83a 	callr	r6
 100e3fc:	88800117 	ldw	r2,4(r17)
 100e400:	98bfc81e 	bne	r19,r2,100e324 <__call_exitprocs+0x64>
 100e404:	b8800017 	ldw	r2,0(r23)
 100e408:	147fd526 	beq	r2,r17,100e360 <__call_exitprocs+0xa0>
 100e40c:	003fc506 	br	100e324 <__call_exitprocs+0x64>
 100e410:	8c000115 	stw	r16,4(r17)
 100e414:	003fea06 	br	100e3c0 <__call_exitprocs+0x100>
 100e418:	2105883a 	add	r2,r4,r4
 100e41c:	1485883a 	add	r2,r2,r18
 100e420:	11000017 	ldw	r4,0(r2)
 100e424:	303ee83a 	callr	r6
 100e428:	003ff406 	br	100e3fc <__call_exitprocs+0x13c>
 100e42c:	303ee83a 	callr	r6
 100e430:	003ff206 	br	100e3fc <__call_exitprocs+0x13c>
 100e434:	88800117 	ldw	r2,4(r17)
 100e438:	1000081e 	bne	r2,zero,100e45c <__call_exitprocs+0x19c>
 100e43c:	89000017 	ldw	r4,0(r17)
 100e440:	20000726 	beq	r4,zero,100e460 <__call_exitprocs+0x1a0>
 100e444:	b9000015 	stw	r4,0(r23)
 100e448:	8809883a 	mov	r4,r17
 100e44c:	00000000 	call	0 <__alt_mem_onchip_memory>
 100e450:	bc400017 	ldw	r17,0(r23)
 100e454:	883fb71e 	bne	r17,zero,100e334 <__call_exitprocs+0x74>
 100e458:	003fc506 	br	100e370 <__call_exitprocs+0xb0>
 100e45c:	89000017 	ldw	r4,0(r17)
 100e460:	882f883a 	mov	r23,r17
 100e464:	2023883a 	mov	r17,r4
 100e468:	883fb21e 	bne	r17,zero,100e334 <__call_exitprocs+0x74>
 100e46c:	003fc006 	br	100e370 <__call_exitprocs+0xb0>

0100e470 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100e470:	defffd04 	addi	sp,sp,-12
 100e474:	df000215 	stw	fp,8(sp)
 100e478:	df000204 	addi	fp,sp,8
 100e47c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100e480:	e0bfff17 	ldw	r2,-4(fp)
 100e484:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100e488:	e0bffe17 	ldw	r2,-8(fp)
 100e48c:	1005003a 	cmpeq	r2,r2,zero
 100e490:	1000021e 	bne	r2,zero,100e49c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100e494:	002af070 	cmpltui	zero,zero,43969
 100e498:	00000106 	br	100e4a0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100e49c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100e4a0:	e037883a 	mov	sp,fp
 100e4a4:	df000017 	ldw	fp,0(sp)
 100e4a8:	dec00104 	addi	sp,sp,4
 100e4ac:	f800283a 	ret

0100e4b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100e4b0:	defffd04 	addi	sp,sp,-12
 100e4b4:	dfc00215 	stw	ra,8(sp)
 100e4b8:	df000115 	stw	fp,4(sp)
 100e4bc:	df000104 	addi	fp,sp,4
 100e4c0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100e4c4:	e13fff17 	ldw	r4,-4(fp)
 100e4c8:	100e4700 	call	100e470 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100e4cc:	003fff06 	br	100e4cc <_exit+0x1c>
 100e4d0:	00000010 	cmplti	zero,zero,0
 100e4d4:	00000000 	call	0 <__alt_mem_onchip_memory>
 100e4d8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory+0x527a0>
 100e4dc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory+0x11f7c0>
 100e4e0:	001b0c0b 	ldhu	zero,27696(zero)
 100e4e4:	00000028 	cmpgeui	zero,zero,0
 100e4e8:	00000018 	cmpnei	zero,zero,0
 100e4ec:	01008140 	call	100814 <__alt_mem_onchip_memory+0x100814>
 100e4f0:	000005dc 	xori	zero,zero,23
 100e4f4:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 100e4f8:	92099170 	cmpltui	r8,r18,9797
 100e4fc:	95079308 	cmpgei	r20,r18,7756
 100e500:	97049605 	stb	fp,4696(r18)
 100e504:	90019f03 	ldbu	zero,1660(r18)
 100e508:	9c06940a 	0x9c06940a
 100e50c:	00000002 	0x2
 100e510:	00000028 	cmpgeui	zero,zero,0
 100e514:	00000044 	movi	zero,1
 100e518:	0100871c 	xori	r4,zero,540
 100e51c:	000005b0 	cmpltui	zero,zero,22
 100e520:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 100e524:	92099168 	cmpgeui	r8,r18,9797
 100e528:	95079308 	cmpgei	r20,r18,7756
 100e52c:	9c039705 	stb	r16,3676(r19)
 100e530:	90019f02 	0x90019f02
 100e534:	9606940a 	0x9606940a
 100e538:	00000004 	movi	zero,0
 100e53c:	0100e2bc 	xorhi	r4,zero,906
