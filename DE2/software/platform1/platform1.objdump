
platform1.elf:     file format elf32-littlenios2
platform1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00006d94 memsz 0x00006d94 flags r-x
    LOAD off    0x00007db4 vaddr 0x01006db4 paddr 0x010089e0 align 2**12
         filesz 0x00001c2c memsz 0x00001c2c flags rw-
    LOAD off    0x0000a60c vaddr 0x0100a60c paddr 0x0100a60c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ab0  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000014c  01006c68  01006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c2c  01006db4  010089e0  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0100a60c  0100a60c  0000a60c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000099e0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000978  00000000  00000000  00009a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000012be  00000000  00000000  0000a380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c11b  00000000  00000000  0000b63e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054da  00000000  00000000  00027759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000deae  00000000  00000000  0002cc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014fc  00000000  00000000  0003aae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000184f  00000000  00000000  0003bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000457d  00000000  00000000  0003d82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00041dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00044de0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00044de3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00044df2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00044df3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00044df4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00044dfd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00044e06  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00044e0f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  00044e1a  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a68  00000000  00000000  00044e41  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a385c  00000000  00000000  0004a8a9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01006c68 l    d  .rodata	00000000 .rodata
01006db4 l    d  .rwdata	00000000 .rwdata
0100a60c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
01006db4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001c70 l     F .text	00000058 std
01001d7c l     F .text	00000008 __fp_lock
01001d84 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002da4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002ea4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002fc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010030a4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01003200 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100342c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010089d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010036c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01007764 l     O .rwdata	00001060 jtag_uart
010087c4 l     O .rwdata	00000030 av_config
010087f4 l     O .rwdata	00000030 audio
01008824 l     O .rwdata	0000002c character_lcd_0
01008850 l     O .rwdata	0000002c push_button
0100887c l     O .rwdata	00000038 ps2_0
010088b4 l     O .rwdata	0000002c rs232_0
010088e0 l     O .rwdata	00000048 char_drawer
01008928 l     O .rwdata	00000054 pixel_buffer_dma
0100897c l     O .rwdata	0000002c sd_card
01003ad4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01003d0c l     F .text	0000022c altera_avalon_jtag_uart_irq
01003f38 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010045b4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01005bc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01005db4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010060b0 l     F .text	000000dc alt_file_locked
01006314 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01006a50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01006c04 l     F .text	00000040 alt_sim_halt
01002ae8 g     F .text	00000070 _isatty_r
01003260 g     F .text	0000006c alt_main
01000338 g     F .text	000000a0 _puts_r
0100a65c g     O .bss	00000100 alt_irq
01004e2c g     F .text	00000058 alt_up_ps2_disable_read_interrupt
01002b58 g     F .text	00000078 _lseek_r
010089e0 g       *ABS*	00000000 __flash_rwdata_start
0100472c g     F .text	00000034 alt_up_character_lcd_send_cmd
0100a8ec g       *ABS*	00000000 __alt_heap_start
01002724 g     F .text	00000068 __sseek
01001cd8 g     F .text	000000a4 __sinit
0100580c g     F .text	00000114 alt_up_char_buffer_string
01004c44 g     F .text	00000034 read_CE_bit
01001dd8 g     F .text	00000068 __sfmoreglue
010032ec g     F .text	00000020 __malloc_unlock
01004fd8 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
01005514 g     F .text	00000090 alt_up_rs232_read_fd
0100573c g     F .text	000000d0 alt_up_char_buffer_draw
010011c0 g     F .text	000000e0 memmove
01001dc8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
010046b0 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002a74 g     F .text	00000074 _fstat_r
0100a618 g     O .bss	00000004 errno
0100a620 g     O .bss	00000004 alt_argv
010109a8 g       *ABS*	00000000 _gp
010075e4 g     O .rwdata	00000180 alt_fd_list
01005cf0 g     F .text	00000094 alt_find_dev
01001120 g     F .text	000000a0 memcpy
010048c4 g     F .text	0000004c alt_up_character_lcd_write_fd
01005920 g     F .text	0000005c alt_up_char_buffer_clear
01001dbc g     F .text	0000000c _cleanup_r
01005e78 g     F .text	00000078 alt_io_redirect
01006c68 g       *ABS*	00000000 __DTOR_END__
010054a0 g     F .text	00000074 alt_up_rs232_read_data
010003d8 g     F .text	00000014 puts
01004150 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002f04 g     F .text	000000c0 isatty
01006710 g     F .text	00000090 alt_icache_flush
0100a60c g     O .bss	00000004 __malloc_top_pad
01000460 g     F .text	0000049c __sfvwrite_r
01001894 g     F .text	00000070 _sbrk_r
01002bd0 g     F .text	00000078 _read_r
010089c8 g     O .rwdata	00000004 alt_max_fd
01005408 g     F .text	00000050 alt_up_rs232_check_parity
01002950 g     F .text	00000110 _fclose_r
01004c78 g     F .text	00000034 read_num_bytes_available
01001c3c g     F .text	00000034 fflush
0100a610 g     O .bss	00000004 __malloc_max_sbrked_mem
01005ef0 g     F .text	000001c0 alt_irq_register
01004be0 g     F .text	00000034 read_RI_bit
01003110 g     F .text	000000f0 lseek
010089ac g     O .rwdata	00000004 _global_impure_ptr
010012a0 g     F .text	000005f4 _realloc_r
0100a8ec g       *ABS*	00000000 __bss_end
0100640c g     F .text	0000010c alt_tick
01004ce0 g     F .text	0000002c read_data_byte
01001da4 g     F .text	00000018 __fp_lock_all
01006374 g     F .text	00000098 alt_alarm_stop
01004c14 g     F .text	00000030 read_RE_bit
0100a628 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
010075bc g     O .rwdata	00000028 alt_dev_null
01004bac g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01004e84 g     F .text	00000078 alt_up_ps2_write_data_byte
01005ad0 g     F .text	00000044 alt_dcache_flush_all
010089e0 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
010089c0 g     O .rwdata	00000008 alt_dev_list
010035a8 g     F .text	00000120 write
01006db4 g       *ABS*	00000000 __ram_rodata_end
01002dd0 g     F .text	000000d4 fstat
010055a4 g     F .text	00000094 alt_up_rs232_write_fd
0100a8ec g       *ABS*	00000000 end
010051f8 g     F .text	000000a8 alt_up_ps2_write_fd
01005678 g     F .text	00000084 alt_up_char_buffer_init
01003c54 g     F .text	000000b8 altera_avalon_jtag_uart_init
01006c64 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01004628 g     F .text	00000088 alt_avalon_timer_sc_init
01004374 g     F .text	00000240 altera_avalon_jtag_uart_write
01001cc8 g     F .text	00000004 __sfp_lock_acquire
0100103c g     F .text	000000e4 memchr
010047d4 g     F .text	00000078 alt_up_character_lcd_write
0100205c g     F .text	00000314 _free_r
01006a54 g     F .text	000001b0 __call_exitprocs
010089b4 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0100a62c g     O .bss	00000004 _alt_tick_rate
0100a630 g     O .bss	00000004 _alt_nticks
0100330c g     F .text	00000120 read
0100375c g     F .text	00000378 alt_sys_init
01004a38 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100691c g     F .text	00000134 __register_exitproc
01005104 g     F .text	00000058 alt_up_ps2_clear_fifo
010053c8 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
01004ae8 g     F .text	00000090 alt_up_character_lcd_erase_pos
01003fe8 g     F .text	00000074 altera_avalon_jtag_uart_close
01006db4 g       *ABS*	00000000 __ram_rwdata_start
01006c68 g       *ABS*	00000000 __ram_rodata_start
0100a634 g     O .bss	00000028 __malloc_current_mallinfo
01003b0c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01006658 g     F .text	000000b8 alt_get_fd
010028e0 g     F .text	00000070 _close_r
010067ec g     F .text	00000074 memcmp
01003bbc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100a8ec g       *ABS*	00000000 __alt_stack_base
01003c04 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01001904 g     F .text	0000013c __swsetup_r
01001e40 g     F .text	000000f0 __sfp
010071b4 g     O .rwdata	00000408 __malloc_av_
01001cd4 g     F .text	00000004 __sinit_lock_release
01002808 g     F .text	00000060 __sread
01005334 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01006538 g     F .text	00000120 alt_find_file
01005b14 g     F .text	000000b4 alt_dev_llist_insert
010032cc g     F .text	00000020 __malloc_lock
010034ec g     F .text	000000bc sbrk
01001a40 g     F .text	000001fc _fflush_r
0100a60c g       *ABS*	00000000 __bss_start
01002684 g     F .text	00000098 memset
01000204 g     F .text	00000134 main
0100a624 g     O .bss	00000004 alt_envp
0100a614 g     O .bss	00000004 __malloc_max_total_mem
010056fc g     F .text	00000040 alt_up_char_buffer_open_dev
01003b64 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01004988 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100271c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002a60 g     F .text	00000014 fclose
01005088 g     F .text	0000007c alt_up_ps2_read_data_byte
0100a75c g     O .bss	00000190 _atexit0
010008fc g     F .text	00000740 _malloc_r
010089cc g     O .rwdata	00000004 alt_errno
01002438 g     F .text	000000b8 _fwalk
010052a0 g     F .text	00000040 alt_up_ps2_open_dev
01004794 g     F .text	00000040 alt_up_character_lcd_open_dev
01001f30 g     F .text	0000012c _malloc_trim_r
01004dd8 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
01006c68 g       *ABS*	00000000 __CTOR_END__
01004760 g     F .text	00000034 alt_up_character_lcd_init
01006860 g     F .text	000000bc strcmp
01006c68 g       *ABS*	00000000 __flash_rodata_start
01006c68 g       *ABS*	00000000 __DTOR_LIST__
01005638 g     F .text	00000040 alt_up_rs232_open_dev
01003728 g     F .text	00000034 alt_irq_init
0100348c g     F .text	00000060 alt_release_fd
01004cac g     F .text	00000034 read_data_valid
01004b78 g     F .text	00000034 alt_up_character_lcd_cursor_off
01004f6c g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
010067a0 g     F .text	00000014 atexit
01002868 g     F .text	00000078 _write_r
010089a8 g     O .rwdata	00000004 _impure_ptr
0100a61c g     O .bss	00000004 alt_argc
01005c8c g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001d8c g     F .text	00000018 __fp_unlock_all
010089b8 g     O .rwdata	00000008 alt_fs_list
010052e0 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01005458 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
010089e0 g       *ABS*	00000000 _edata
0100a8ec g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100405c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100278c g     F .text	0000007c __swrite
010089b0 g     O .rwdata	00000004 __malloc_trim_threshold
01006518 g     F .text	00000020 altera_nios2_qsys_irq_init
010067b4 g     F .text	00000038 exit
01002370 g     F .text	000000c8 _fwalk_reent
01004d0c g     F .text	000000cc alt_up_ps2_init
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001ccc g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100484c g     F .text	00000078 alt_up_character_lcd_string
01006c44 g     F .text	00000020 _exit
0100597c g     F .text	00000154 alt_alarm_start
010024f0 g     F .text	00000194 __smakebuf_r
01004efc g     F .text	00000070 alt_up_ps2_wait_for_ack
010003ec g     F .text	00000074 strlen
0100618c g     F .text	00000188 open
01005d84 g     F .text	00000030 alt_icache_flush_all
01004910 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
010089d4 g     O .rwdata	00000004 alt_priority_mask
0100515c g     F .text	0000009c alt_up_ps2_read_fd
010089d8 g     O .rwdata	00000008 alt_alarm_list
01005c28 g     F .text	00000064 _do_ctors
0100538c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01002c48 g     F .text	000000fc close
01003024 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001cd0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18e99704 	addi	r3,r3,-22948
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18e99704 	addi	r3,r3,-22948
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6826a14 	ori	gp,gp,2472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001dc:	10a98314 	ori	r2,r2,42508

    movhi r3, %hi(__bss_end)
 10001e0:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e4:	18ea3b14 	ori	r3,r3,43244

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10030240 	call	1003024 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10032600 	call	1003260 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <main>:
#include <stdio.h>
#include "altera_up_avalon_rs232.h"
#include <string.h>

int main()
{
 1000204:	deffd904 	addi	sp,sp,-156
 1000208:	dfc02615 	stw	ra,152(sp)
 100020c:	df002515 	stw	fp,148(sp)
 1000210:	df002504 	addi	fp,sp,148
		int i;
		unsigned char data;
		unsigned char parity;

        printf("UART Initialization\n");
 1000214:	01004034 	movhi	r4,256
 1000218:	211b1a04 	addi	r4,r4,27752
 100021c:	10003d80 	call	10003d8 <puts>
        alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);
 1000220:	01004034 	movhi	r4,256
 1000224:	211b1f04 	addi	r4,r4,27772
 1000228:	10056380 	call	1005638 <alt_up_rs232_open_dev>
 100022c:	e0bfdd15 	stw	r2,-140(fp)

        printf("Clearing read buffer to start\n");
 1000230:	01004034 	movhi	r4,256
 1000234:	211b2304 	addi	r4,r4,27788
 1000238:	10003d80 	call	10003d8 <puts>
		while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 100023c:	00000406 	br	1000250 <main+0x4c>
			alt_up_rs232_read_data(uart, &data, &parity);
 1000240:	e17fdf04 	addi	r5,fp,-132
 1000244:	e1bfdf44 	addi	r6,fp,-131
 1000248:	e13fdd17 	ldw	r4,-140(fp)
 100024c:	10054a00 	call	10054a0 <alt_up_rs232_read_data>

        printf("UART Initialization\n");
        alt_up_rs232_dev* uart = alt_up_rs232_open_dev(RS232_0_NAME);

        printf("Clearing read buffer to start\n");
		while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 1000250:	e13fdd17 	ldw	r4,-140(fp)
 1000254:	100538c0 	call	100538c <alt_up_rs232_get_used_space_in_read_FIFO>
 1000258:	1004c03a 	cmpne	r2,r2,zero
 100025c:	103ff81e 	bne	r2,zero,1000240 <main+0x3c>
 1000260:	00000006 	br	1000264 <main+0x60>

		while(1){
			//printf("waiting for message from android device\n");
			//need to wait for at least 2 bytes
			//first is the ID, second is the amount of bytes
			while (alt_up_rs232_get_used_space_in_read_FIFO(uart) < 2);
 1000264:	e13fdd17 	ldw	r4,-140(fp)
 1000268:	100538c0 	call	100538c <alt_up_rs232_get_used_space_in_read_FIFO>
 100026c:	108000b0 	cmpltui	r2,r2,2
 1000270:	103ffc1e 	bne	r2,zero,1000264 <main+0x60>

			// First byte is the number of characters in our message
			alt_up_rs232_read_data(uart, &data, &parity);
 1000274:	e17fdf04 	addi	r5,fp,-132
 1000278:	e1bfdf44 	addi	r6,fp,-131
 100027c:	e13fdd17 	ldw	r4,-140(fp)
 1000280:	10054a00 	call	10054a0 <alt_up_rs232_read_data>
			//printf("receive from id: %i\n", (unsigned int)data);

			unsigned char id = data;
 1000284:	e0bfdf03 	ldbu	r2,-132(fp)
 1000288:	e0bfdc05 	stb	r2,-144(fp)

			alt_up_rs232_read_data(uart, &data, &parity);
 100028c:	e17fdf04 	addi	r5,fp,-132
 1000290:	e1bfdf44 	addi	r6,fp,-131
 1000294:	e13fdd17 	ldw	r4,-140(fp)
 1000298:	10054a00 	call	10054a0 <alt_up_rs232_read_data>
			int num_to_receive = (int)data;
 100029c:	e0bfdf03 	ldbu	r2,-132(fp)
 10002a0:	10803fcc 	andi	r2,r2,255
 10002a4:	e0bfdb15 	stw	r2,-148(fp)

			//wait for all the data to arrive
			while (alt_up_rs232_get_used_space_in_read_FIFO(uart) < num_to_receive);
 10002a8:	e13fdd17 	ldw	r4,-140(fp)
 10002ac:	100538c0 	call	100538c <alt_up_rs232_get_used_space_in_read_FIFO>
 10002b0:	1007883a 	mov	r3,r2
 10002b4:	e0bfdb17 	ldw	r2,-148(fp)
 10002b8:	18bffb36 	bltu	r3,r2,10002a8 <main+0xa4>

			//receiveing data
			unsigned char buffer[128];
			//printf("About to receive %d characters:\n", num_to_receive);

			for (i = 0; i < num_to_receive; i++) {
 10002bc:	e03fde15 	stw	zero,-136(fp)
 10002c0:	00001006 	br	1000304 <main+0x100>
				while (alt_up_rs232_get_used_space_in_read_FIFO(uart) == 0)
 10002c4:	e13fdd17 	ldw	r4,-140(fp)
 10002c8:	100538c0 	call	100538c <alt_up_rs232_get_used_space_in_read_FIFO>
 10002cc:	1005003a 	cmpeq	r2,r2,zero
 10002d0:	103ffc1e 	bne	r2,zero,10002c4 <main+0xc0>
					;
				alt_up_rs232_read_data(uart, &data, &parity);
 10002d4:	e17fdf04 	addi	r5,fp,-132
 10002d8:	e1bfdf44 	addi	r6,fp,-131
 10002dc:	e13fdd17 	ldw	r4,-140(fp)
 10002e0:	10054a00 	call	10054a0 <alt_up_rs232_read_data>

				buffer[i] = data;
 10002e4:	e0ffde17 	ldw	r3,-136(fp)
 10002e8:	e13fdf03 	ldbu	r4,-132(fp)
 10002ec:	e0bfdf84 	addi	r2,fp,-130
 10002f0:	10c5883a 	add	r2,r2,r3
 10002f4:	11000005 	stb	r4,0(r2)

			//receiveing data
			unsigned char buffer[128];
			//printf("About to receive %d characters:\n", num_to_receive);

			for (i = 0; i < num_to_receive; i++) {
 10002f8:	e0bfde17 	ldw	r2,-136(fp)
 10002fc:	10800044 	addi	r2,r2,1
 1000300:	e0bfde15 	stw	r2,-136(fp)
 1000304:	e0ffde17 	ldw	r3,-136(fp)
 1000308:	e0bfdb17 	ldw	r2,-148(fp)
 100030c:	18bfed16 	blt	r3,r2,10002c4 <main+0xc0>
				//printf("%c",buffer[i]);
			}
			//printf("\n");

			//sends an ack
			alt_up_rs232_write_data(uart, id); //echo to all
 1000310:	e17fdc03 	ldbu	r5,-144(fp)
 1000314:	e13fdd17 	ldw	r4,-140(fp)
 1000318:	10054580 	call	1005458 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(uart, 1);//middleman discards this
 100031c:	e13fdd17 	ldw	r4,-140(fp)
 1000320:	01400044 	movi	r5,1
 1000324:	10054580 	call	1005458 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(uart, 0);
 1000328:	e13fdd17 	ldw	r4,-140(fp)
 100032c:	000b883a 	mov	r5,zero
 1000330:	10054580 	call	1005458 <alt_up_rs232_write_data>
			}


			printf("\n");
			printf("Message Echo Complete\n");*/
		}
 1000334:	003fcb06 	br	1000264 <main+0x60>

01000338 <_puts_r>:
 1000338:	defff604 	addi	sp,sp,-40
 100033c:	dc400715 	stw	r17,28(sp)
 1000340:	2023883a 	mov	r17,r4
 1000344:	2809883a 	mov	r4,r5
 1000348:	dfc00915 	stw	ra,36(sp)
 100034c:	dcc00815 	stw	r19,32(sp)
 1000350:	2827883a 	mov	r19,r5
 1000354:	10003ec0 	call	10003ec <strlen>
 1000358:	89400217 	ldw	r5,8(r17)
 100035c:	00c04034 	movhi	r3,256
 1000360:	18db2b04 	addi	r3,r3,27820
 1000364:	01c00044 	movi	r7,1
 1000368:	12000044 	addi	r8,r2,1
 100036c:	d8c00515 	stw	r3,20(sp)
 1000370:	d9c00615 	stw	r7,24(sp)
 1000374:	d8c00304 	addi	r3,sp,12
 1000378:	01c00084 	movi	r7,2
 100037c:	8809883a 	mov	r4,r17
 1000380:	d80d883a 	mov	r6,sp
 1000384:	d8c00015 	stw	r3,0(sp)
 1000388:	dcc00315 	stw	r19,12(sp)
 100038c:	da000215 	stw	r8,8(sp)
 1000390:	d9c00115 	stw	r7,4(sp)
 1000394:	d8800415 	stw	r2,16(sp)
 1000398:	10004600 	call	1000460 <__sfvwrite_r>
 100039c:	00ffffc4 	movi	r3,-1
 10003a0:	10000626 	beq	r2,zero,10003bc <_puts_r+0x84>
 10003a4:	1805883a 	mov	r2,r3
 10003a8:	dfc00917 	ldw	ra,36(sp)
 10003ac:	dcc00817 	ldw	r19,32(sp)
 10003b0:	dc400717 	ldw	r17,28(sp)
 10003b4:	dec00a04 	addi	sp,sp,40
 10003b8:	f800283a 	ret
 10003bc:	00c00284 	movi	r3,10
 10003c0:	1805883a 	mov	r2,r3
 10003c4:	dfc00917 	ldw	ra,36(sp)
 10003c8:	dcc00817 	ldw	r19,32(sp)
 10003cc:	dc400717 	ldw	r17,28(sp)
 10003d0:	dec00a04 	addi	sp,sp,40
 10003d4:	f800283a 	ret

010003d8 <puts>:
 10003d8:	00804074 	movhi	r2,257
 10003dc:	10a26a04 	addi	r2,r2,-30296
 10003e0:	200b883a 	mov	r5,r4
 10003e4:	11000017 	ldw	r4,0(r2)
 10003e8:	10003381 	jmpi	1000338 <_puts_r>

010003ec <strlen>:
 10003ec:	208000cc 	andi	r2,r4,3
 10003f0:	2011883a 	mov	r8,r4
 10003f4:	1000161e 	bne	r2,zero,1000450 <strlen+0x64>
 10003f8:	20c00017 	ldw	r3,0(r4)
 10003fc:	017fbff4 	movhi	r5,65279
 1000400:	297fbfc4 	addi	r5,r5,-257
 1000404:	01e02074 	movhi	r7,32897
 1000408:	39e02004 	addi	r7,r7,-32640
 100040c:	1945883a 	add	r2,r3,r5
 1000410:	11c4703a 	and	r2,r2,r7
 1000414:	00c6303a 	nor	r3,zero,r3
 1000418:	1886703a 	and	r3,r3,r2
 100041c:	18000c1e 	bne	r3,zero,1000450 <strlen+0x64>
 1000420:	280d883a 	mov	r6,r5
 1000424:	380b883a 	mov	r5,r7
 1000428:	21000104 	addi	r4,r4,4
 100042c:	20800017 	ldw	r2,0(r4)
 1000430:	1187883a 	add	r3,r2,r6
 1000434:	1946703a 	and	r3,r3,r5
 1000438:	0084303a 	nor	r2,zero,r2
 100043c:	10c4703a 	and	r2,r2,r3
 1000440:	103ff926 	beq	r2,zero,1000428 <strlen+0x3c>
 1000444:	20800007 	ldb	r2,0(r4)
 1000448:	10000326 	beq	r2,zero,1000458 <strlen+0x6c>
 100044c:	21000044 	addi	r4,r4,1
 1000450:	20800007 	ldb	r2,0(r4)
 1000454:	103ffd1e 	bne	r2,zero,100044c <strlen+0x60>
 1000458:	2205c83a 	sub	r2,r4,r8
 100045c:	f800283a 	ret

01000460 <__sfvwrite_r>:
 1000460:	30800217 	ldw	r2,8(r6)
 1000464:	defff504 	addi	sp,sp,-44
 1000468:	df000915 	stw	fp,36(sp)
 100046c:	dd800715 	stw	r22,28(sp)
 1000470:	dc800315 	stw	r18,12(sp)
 1000474:	dfc00a15 	stw	ra,40(sp)
 1000478:	ddc00815 	stw	r23,32(sp)
 100047c:	dd400615 	stw	r21,24(sp)
 1000480:	dd000515 	stw	r20,20(sp)
 1000484:	dcc00415 	stw	r19,16(sp)
 1000488:	dc400215 	stw	r17,8(sp)
 100048c:	dc000115 	stw	r16,4(sp)
 1000490:	302d883a 	mov	r22,r6
 1000494:	2039883a 	mov	fp,r4
 1000498:	2825883a 	mov	r18,r5
 100049c:	10001c26 	beq	r2,zero,1000510 <__sfvwrite_r+0xb0>
 10004a0:	29c0030b 	ldhu	r7,12(r5)
 10004a4:	3880020c 	andi	r2,r7,8
 10004a8:	10002726 	beq	r2,zero,1000548 <__sfvwrite_r+0xe8>
 10004ac:	28800417 	ldw	r2,16(r5)
 10004b0:	10002526 	beq	r2,zero,1000548 <__sfvwrite_r+0xe8>
 10004b4:	3880008c 	andi	r2,r7,2
 10004b8:	b5400017 	ldw	r21,0(r22)
 10004bc:	10002826 	beq	r2,zero,1000560 <__sfvwrite_r+0x100>
 10004c0:	0021883a 	mov	r16,zero
 10004c4:	0023883a 	mov	r17,zero
 10004c8:	880d883a 	mov	r6,r17
 10004cc:	e009883a 	mov	r4,fp
 10004d0:	00810004 	movi	r2,1024
 10004d4:	80006e26 	beq	r16,zero,1000690 <__sfvwrite_r+0x230>
 10004d8:	800f883a 	mov	r7,r16
 10004dc:	91400717 	ldw	r5,28(r18)
 10004e0:	1400012e 	bgeu	r2,r16,10004e8 <__sfvwrite_r+0x88>
 10004e4:	100f883a 	mov	r7,r2
 10004e8:	90c00917 	ldw	r3,36(r18)
 10004ec:	183ee83a 	callr	r3
 10004f0:	1007883a 	mov	r3,r2
 10004f4:	80a1c83a 	sub	r16,r16,r2
 10004f8:	88a3883a 	add	r17,r17,r2
 10004fc:	00806d0e 	bge	zero,r2,10006b4 <__sfvwrite_r+0x254>
 1000500:	b0800217 	ldw	r2,8(r22)
 1000504:	10c5c83a 	sub	r2,r2,r3
 1000508:	b0800215 	stw	r2,8(r22)
 100050c:	103fee1e 	bne	r2,zero,10004c8 <__sfvwrite_r+0x68>
 1000510:	0009883a 	mov	r4,zero
 1000514:	2005883a 	mov	r2,r4
 1000518:	dfc00a17 	ldw	ra,40(sp)
 100051c:	df000917 	ldw	fp,36(sp)
 1000520:	ddc00817 	ldw	r23,32(sp)
 1000524:	dd800717 	ldw	r22,28(sp)
 1000528:	dd400617 	ldw	r21,24(sp)
 100052c:	dd000517 	ldw	r20,20(sp)
 1000530:	dcc00417 	ldw	r19,16(sp)
 1000534:	dc800317 	ldw	r18,12(sp)
 1000538:	dc400217 	ldw	r17,8(sp)
 100053c:	dc000117 	ldw	r16,4(sp)
 1000540:	dec00b04 	addi	sp,sp,44
 1000544:	f800283a 	ret
 1000548:	10019040 	call	1001904 <__swsetup_r>
 100054c:	1000e41e 	bne	r2,zero,10008e0 <__sfvwrite_r+0x480>
 1000550:	91c0030b 	ldhu	r7,12(r18)
 1000554:	b5400017 	ldw	r21,0(r22)
 1000558:	3880008c 	andi	r2,r7,2
 100055c:	103fd81e 	bne	r2,zero,10004c0 <__sfvwrite_r+0x60>
 1000560:	3880004c 	andi	r2,r7,1
 1000564:	1005003a 	cmpeq	r2,r2,zero
 1000568:	10005726 	beq	r2,zero,10006c8 <__sfvwrite_r+0x268>
 100056c:	0029883a 	mov	r20,zero
 1000570:	002f883a 	mov	r23,zero
 1000574:	a0004226 	beq	r20,zero,1000680 <__sfvwrite_r+0x220>
 1000578:	3880800c 	andi	r2,r7,512
 100057c:	94000217 	ldw	r16,8(r18)
 1000580:	10008b26 	beq	r2,zero,10007b0 <__sfvwrite_r+0x350>
 1000584:	800d883a 	mov	r6,r16
 1000588:	a400a536 	bltu	r20,r16,1000820 <__sfvwrite_r+0x3c0>
 100058c:	3881200c 	andi	r2,r7,1152
 1000590:	10002726 	beq	r2,zero,1000630 <__sfvwrite_r+0x1d0>
 1000594:	90800517 	ldw	r2,20(r18)
 1000598:	92000417 	ldw	r8,16(r18)
 100059c:	91400017 	ldw	r5,0(r18)
 10005a0:	1087883a 	add	r3,r2,r2
 10005a4:	1887883a 	add	r3,r3,r2
 10005a8:	1808d7fa 	srli	r4,r3,31
 10005ac:	2a21c83a 	sub	r16,r5,r8
 10005b0:	80800044 	addi	r2,r16,1
 10005b4:	20c9883a 	add	r4,r4,r3
 10005b8:	2027d07a 	srai	r19,r4,1
 10005bc:	a085883a 	add	r2,r20,r2
 10005c0:	980d883a 	mov	r6,r19
 10005c4:	9880022e 	bgeu	r19,r2,10005d0 <__sfvwrite_r+0x170>
 10005c8:	1027883a 	mov	r19,r2
 10005cc:	100d883a 	mov	r6,r2
 10005d0:	3881000c 	andi	r2,r7,1024
 10005d4:	1000b826 	beq	r2,zero,10008b8 <__sfvwrite_r+0x458>
 10005d8:	300b883a 	mov	r5,r6
 10005dc:	e009883a 	mov	r4,fp
 10005e0:	10008fc0 	call	10008fc <_malloc_r>
 10005e4:	10003126 	beq	r2,zero,10006ac <__sfvwrite_r+0x24c>
 10005e8:	91400417 	ldw	r5,16(r18)
 10005ec:	1009883a 	mov	r4,r2
 10005f0:	800d883a 	mov	r6,r16
 10005f4:	1023883a 	mov	r17,r2
 10005f8:	10011200 	call	1001120 <memcpy>
 10005fc:	90c0030b 	ldhu	r3,12(r18)
 1000600:	00beffc4 	movi	r2,-1025
 1000604:	1886703a 	and	r3,r3,r2
 1000608:	18c02014 	ori	r3,r3,128
 100060c:	90c0030d 	sth	r3,12(r18)
 1000610:	9c07c83a 	sub	r3,r19,r16
 1000614:	8c05883a 	add	r2,r17,r16
 1000618:	a00d883a 	mov	r6,r20
 100061c:	a021883a 	mov	r16,r20
 1000620:	90800015 	stw	r2,0(r18)
 1000624:	90c00215 	stw	r3,8(r18)
 1000628:	94400415 	stw	r17,16(r18)
 100062c:	94c00515 	stw	r19,20(r18)
 1000630:	91000017 	ldw	r4,0(r18)
 1000634:	b80b883a 	mov	r5,r23
 1000638:	a023883a 	mov	r17,r20
 100063c:	10011c00 	call	10011c0 <memmove>
 1000640:	90c00217 	ldw	r3,8(r18)
 1000644:	90800017 	ldw	r2,0(r18)
 1000648:	a027883a 	mov	r19,r20
 100064c:	1c07c83a 	sub	r3,r3,r16
 1000650:	1405883a 	add	r2,r2,r16
 1000654:	90c00215 	stw	r3,8(r18)
 1000658:	a021883a 	mov	r16,r20
 100065c:	90800015 	stw	r2,0(r18)
 1000660:	b0800217 	ldw	r2,8(r22)
 1000664:	1405c83a 	sub	r2,r2,r16
 1000668:	b0800215 	stw	r2,8(r22)
 100066c:	103fa826 	beq	r2,zero,1000510 <__sfvwrite_r+0xb0>
 1000670:	a469c83a 	sub	r20,r20,r17
 1000674:	91c0030b 	ldhu	r7,12(r18)
 1000678:	bcef883a 	add	r23,r23,r19
 100067c:	a03fbe1e 	bne	r20,zero,1000578 <__sfvwrite_r+0x118>
 1000680:	adc00017 	ldw	r23,0(r21)
 1000684:	ad000117 	ldw	r20,4(r21)
 1000688:	ad400204 	addi	r21,r21,8
 100068c:	003fb906 	br	1000574 <__sfvwrite_r+0x114>
 1000690:	ac400017 	ldw	r17,0(r21)
 1000694:	ac000117 	ldw	r16,4(r21)
 1000698:	ad400204 	addi	r21,r21,8
 100069c:	003f8a06 	br	10004c8 <__sfvwrite_r+0x68>
 10006a0:	91400417 	ldw	r5,16(r18)
 10006a4:	e009883a 	mov	r4,fp
 10006a8:	100205c0 	call	100205c <_free_r>
 10006ac:	00800304 	movi	r2,12
 10006b0:	e0800015 	stw	r2,0(fp)
 10006b4:	9080030b 	ldhu	r2,12(r18)
 10006b8:	013fffc4 	movi	r4,-1
 10006bc:	10801014 	ori	r2,r2,64
 10006c0:	9080030d 	sth	r2,12(r18)
 10006c4:	003f9306 	br	1000514 <__sfvwrite_r+0xb4>
 10006c8:	0027883a 	mov	r19,zero
 10006cc:	002f883a 	mov	r23,zero
 10006d0:	d8000015 	stw	zero,0(sp)
 10006d4:	0029883a 	mov	r20,zero
 10006d8:	98001e26 	beq	r19,zero,1000754 <__sfvwrite_r+0x2f4>
 10006dc:	d8c00017 	ldw	r3,0(sp)
 10006e0:	1804c03a 	cmpne	r2,r3,zero
 10006e4:	10005e26 	beq	r2,zero,1000860 <__sfvwrite_r+0x400>
 10006e8:	9821883a 	mov	r16,r19
 10006ec:	a4c0012e 	bgeu	r20,r19,10006f4 <__sfvwrite_r+0x294>
 10006f0:	a021883a 	mov	r16,r20
 10006f4:	91000017 	ldw	r4,0(r18)
 10006f8:	90800417 	ldw	r2,16(r18)
 10006fc:	91800217 	ldw	r6,8(r18)
 1000700:	91c00517 	ldw	r7,20(r18)
 1000704:	1100022e 	bgeu	r2,r4,1000710 <__sfvwrite_r+0x2b0>
 1000708:	31e3883a 	add	r17,r6,r7
 100070c:	8c001616 	blt	r17,r16,1000768 <__sfvwrite_r+0x308>
 1000710:	81c03816 	blt	r16,r7,10007f4 <__sfvwrite_r+0x394>
 1000714:	90c00917 	ldw	r3,36(r18)
 1000718:	91400717 	ldw	r5,28(r18)
 100071c:	e009883a 	mov	r4,fp
 1000720:	b80d883a 	mov	r6,r23
 1000724:	183ee83a 	callr	r3
 1000728:	1023883a 	mov	r17,r2
 100072c:	00bfe10e 	bge	zero,r2,10006b4 <__sfvwrite_r+0x254>
 1000730:	a469c83a 	sub	r20,r20,r17
 1000734:	a0001826 	beq	r20,zero,1000798 <__sfvwrite_r+0x338>
 1000738:	b0800217 	ldw	r2,8(r22)
 100073c:	1445c83a 	sub	r2,r2,r17
 1000740:	b0800215 	stw	r2,8(r22)
 1000744:	103f7226 	beq	r2,zero,1000510 <__sfvwrite_r+0xb0>
 1000748:	9c67c83a 	sub	r19,r19,r17
 100074c:	bc6f883a 	add	r23,r23,r17
 1000750:	983fe21e 	bne	r19,zero,10006dc <__sfvwrite_r+0x27c>
 1000754:	adc00017 	ldw	r23,0(r21)
 1000758:	acc00117 	ldw	r19,4(r21)
 100075c:	ad400204 	addi	r21,r21,8
 1000760:	d8000015 	stw	zero,0(sp)
 1000764:	003fdc06 	br	10006d8 <__sfvwrite_r+0x278>
 1000768:	b80b883a 	mov	r5,r23
 100076c:	880d883a 	mov	r6,r17
 1000770:	10011c00 	call	10011c0 <memmove>
 1000774:	90c00017 	ldw	r3,0(r18)
 1000778:	e009883a 	mov	r4,fp
 100077c:	900b883a 	mov	r5,r18
 1000780:	1c47883a 	add	r3,r3,r17
 1000784:	90c00015 	stw	r3,0(r18)
 1000788:	1001a400 	call	1001a40 <_fflush_r>
 100078c:	103fc91e 	bne	r2,zero,10006b4 <__sfvwrite_r+0x254>
 1000790:	a469c83a 	sub	r20,r20,r17
 1000794:	a03fe81e 	bne	r20,zero,1000738 <__sfvwrite_r+0x2d8>
 1000798:	e009883a 	mov	r4,fp
 100079c:	900b883a 	mov	r5,r18
 10007a0:	1001a400 	call	1001a40 <_fflush_r>
 10007a4:	103fc31e 	bne	r2,zero,10006b4 <__sfvwrite_r+0x254>
 10007a8:	d8000015 	stw	zero,0(sp)
 10007ac:	003fe206 	br	1000738 <__sfvwrite_r+0x2d8>
 10007b0:	91000017 	ldw	r4,0(r18)
 10007b4:	90800417 	ldw	r2,16(r18)
 10007b8:	1100022e 	bgeu	r2,r4,10007c4 <__sfvwrite_r+0x364>
 10007bc:	8023883a 	mov	r17,r16
 10007c0:	85003136 	bltu	r16,r20,1000888 <__sfvwrite_r+0x428>
 10007c4:	91c00517 	ldw	r7,20(r18)
 10007c8:	a1c01836 	bltu	r20,r7,100082c <__sfvwrite_r+0x3cc>
 10007cc:	90c00917 	ldw	r3,36(r18)
 10007d0:	91400717 	ldw	r5,28(r18)
 10007d4:	e009883a 	mov	r4,fp
 10007d8:	b80d883a 	mov	r6,r23
 10007dc:	183ee83a 	callr	r3
 10007e0:	1021883a 	mov	r16,r2
 10007e4:	00bfb30e 	bge	zero,r2,10006b4 <__sfvwrite_r+0x254>
 10007e8:	1023883a 	mov	r17,r2
 10007ec:	1027883a 	mov	r19,r2
 10007f0:	003f9b06 	br	1000660 <__sfvwrite_r+0x200>
 10007f4:	b80b883a 	mov	r5,r23
 10007f8:	800d883a 	mov	r6,r16
 10007fc:	10011c00 	call	10011c0 <memmove>
 1000800:	90c00217 	ldw	r3,8(r18)
 1000804:	90800017 	ldw	r2,0(r18)
 1000808:	8023883a 	mov	r17,r16
 100080c:	1c07c83a 	sub	r3,r3,r16
 1000810:	1405883a 	add	r2,r2,r16
 1000814:	90c00215 	stw	r3,8(r18)
 1000818:	90800015 	stw	r2,0(r18)
 100081c:	003fc406 	br	1000730 <__sfvwrite_r+0x2d0>
 1000820:	a00d883a 	mov	r6,r20
 1000824:	a021883a 	mov	r16,r20
 1000828:	003f8106 	br	1000630 <__sfvwrite_r+0x1d0>
 100082c:	b80b883a 	mov	r5,r23
 1000830:	a00d883a 	mov	r6,r20
 1000834:	10011c00 	call	10011c0 <memmove>
 1000838:	90c00217 	ldw	r3,8(r18)
 100083c:	90800017 	ldw	r2,0(r18)
 1000840:	a021883a 	mov	r16,r20
 1000844:	1d07c83a 	sub	r3,r3,r20
 1000848:	1505883a 	add	r2,r2,r20
 100084c:	a023883a 	mov	r17,r20
 1000850:	a027883a 	mov	r19,r20
 1000854:	90c00215 	stw	r3,8(r18)
 1000858:	90800015 	stw	r2,0(r18)
 100085c:	003f8006 	br	1000660 <__sfvwrite_r+0x200>
 1000860:	b809883a 	mov	r4,r23
 1000864:	01400284 	movi	r5,10
 1000868:	980d883a 	mov	r6,r19
 100086c:	100103c0 	call	100103c <memchr>
 1000870:	10001726 	beq	r2,zero,10008d0 <__sfvwrite_r+0x470>
 1000874:	15c5c83a 	sub	r2,r2,r23
 1000878:	15000044 	addi	r20,r2,1
 100087c:	00800044 	movi	r2,1
 1000880:	d8800015 	stw	r2,0(sp)
 1000884:	003f9806 	br	10006e8 <__sfvwrite_r+0x288>
 1000888:	b80b883a 	mov	r5,r23
 100088c:	800d883a 	mov	r6,r16
 1000890:	10011c00 	call	10011c0 <memmove>
 1000894:	90c00017 	ldw	r3,0(r18)
 1000898:	e009883a 	mov	r4,fp
 100089c:	900b883a 	mov	r5,r18
 10008a0:	1c07883a 	add	r3,r3,r16
 10008a4:	90c00015 	stw	r3,0(r18)
 10008a8:	8027883a 	mov	r19,r16
 10008ac:	1001a400 	call	1001a40 <_fflush_r>
 10008b0:	103f6b26 	beq	r2,zero,1000660 <__sfvwrite_r+0x200>
 10008b4:	003f7f06 	br	10006b4 <__sfvwrite_r+0x254>
 10008b8:	400b883a 	mov	r5,r8
 10008bc:	e009883a 	mov	r4,fp
 10008c0:	10012a00 	call	10012a0 <_realloc_r>
 10008c4:	103f7626 	beq	r2,zero,10006a0 <__sfvwrite_r+0x240>
 10008c8:	1023883a 	mov	r17,r2
 10008cc:	003f5006 	br	1000610 <__sfvwrite_r+0x1b0>
 10008d0:	00c00044 	movi	r3,1
 10008d4:	9d000044 	addi	r20,r19,1
 10008d8:	d8c00015 	stw	r3,0(sp)
 10008dc:	003f8206 	br	10006e8 <__sfvwrite_r+0x288>
 10008e0:	9080030b 	ldhu	r2,12(r18)
 10008e4:	00c00244 	movi	r3,9
 10008e8:	013fffc4 	movi	r4,-1
 10008ec:	10801014 	ori	r2,r2,64
 10008f0:	9080030d 	sth	r2,12(r18)
 10008f4:	e0c00015 	stw	r3,0(fp)
 10008f8:	003f0606 	br	1000514 <__sfvwrite_r+0xb4>

010008fc <_malloc_r>:
 10008fc:	defff604 	addi	sp,sp,-40
 1000900:	28c002c4 	addi	r3,r5,11
 1000904:	00800584 	movi	r2,22
 1000908:	dc800215 	stw	r18,8(sp)
 100090c:	dfc00915 	stw	ra,36(sp)
 1000910:	df000815 	stw	fp,32(sp)
 1000914:	ddc00715 	stw	r23,28(sp)
 1000918:	dd800615 	stw	r22,24(sp)
 100091c:	dd400515 	stw	r21,20(sp)
 1000920:	dd000415 	stw	r20,16(sp)
 1000924:	dcc00315 	stw	r19,12(sp)
 1000928:	dc400115 	stw	r17,4(sp)
 100092c:	dc000015 	stw	r16,0(sp)
 1000930:	2025883a 	mov	r18,r4
 1000934:	10c01236 	bltu	r2,r3,1000980 <_malloc_r+0x84>
 1000938:	04400404 	movi	r17,16
 100093c:	8940142e 	bgeu	r17,r5,1000990 <_malloc_r+0x94>
 1000940:	00800304 	movi	r2,12
 1000944:	0007883a 	mov	r3,zero
 1000948:	90800015 	stw	r2,0(r18)
 100094c:	1805883a 	mov	r2,r3
 1000950:	dfc00917 	ldw	ra,36(sp)
 1000954:	df000817 	ldw	fp,32(sp)
 1000958:	ddc00717 	ldw	r23,28(sp)
 100095c:	dd800617 	ldw	r22,24(sp)
 1000960:	dd400517 	ldw	r21,20(sp)
 1000964:	dd000417 	ldw	r20,16(sp)
 1000968:	dcc00317 	ldw	r19,12(sp)
 100096c:	dc800217 	ldw	r18,8(sp)
 1000970:	dc400117 	ldw	r17,4(sp)
 1000974:	dc000017 	ldw	r16,0(sp)
 1000978:	dec00a04 	addi	sp,sp,40
 100097c:	f800283a 	ret
 1000980:	00bffe04 	movi	r2,-8
 1000984:	18a2703a 	and	r17,r3,r2
 1000988:	883fed16 	blt	r17,zero,1000940 <_malloc_r+0x44>
 100098c:	897fec36 	bltu	r17,r5,1000940 <_malloc_r+0x44>
 1000990:	9009883a 	mov	r4,r18
 1000994:	10032cc0 	call	10032cc <__malloc_lock>
 1000998:	00807dc4 	movi	r2,503
 100099c:	14402b2e 	bgeu	r2,r17,1000a4c <_malloc_r+0x150>
 10009a0:	8806d27a 	srli	r3,r17,9
 10009a4:	18003f1e 	bne	r3,zero,1000aa4 <_malloc_r+0x1a8>
 10009a8:	880cd0fa 	srli	r6,r17,3
 10009ac:	300490fa 	slli	r2,r6,3
 10009b0:	02c04034 	movhi	r11,256
 10009b4:	5adc6d04 	addi	r11,r11,29108
 10009b8:	12cb883a 	add	r5,r2,r11
 10009bc:	2c000317 	ldw	r16,12(r5)
 10009c0:	580f883a 	mov	r7,r11
 10009c4:	2c00041e 	bne	r5,r16,10009d8 <_malloc_r+0xdc>
 10009c8:	00000a06 	br	10009f4 <_malloc_r+0xf8>
 10009cc:	1800860e 	bge	r3,zero,1000be8 <_malloc_r+0x2ec>
 10009d0:	84000317 	ldw	r16,12(r16)
 10009d4:	2c000726 	beq	r5,r16,10009f4 <_malloc_r+0xf8>
 10009d8:	80800117 	ldw	r2,4(r16)
 10009dc:	00ffff04 	movi	r3,-4
 10009e0:	10c8703a 	and	r4,r2,r3
 10009e4:	2447c83a 	sub	r3,r4,r17
 10009e8:	008003c4 	movi	r2,15
 10009ec:	10fff70e 	bge	r2,r3,10009cc <_malloc_r+0xd0>
 10009f0:	31bfffc4 	addi	r6,r6,-1
 10009f4:	32400044 	addi	r9,r6,1
 10009f8:	02804034 	movhi	r10,256
 10009fc:	529c6f04 	addi	r10,r10,29116
 1000a00:	54000217 	ldw	r16,8(r10)
 1000a04:	8280a026 	beq	r16,r10,1000c88 <_malloc_r+0x38c>
 1000a08:	80800117 	ldw	r2,4(r16)
 1000a0c:	00ffff04 	movi	r3,-4
 1000a10:	10ca703a 	and	r5,r2,r3
 1000a14:	2c4dc83a 	sub	r6,r5,r17
 1000a18:	008003c4 	movi	r2,15
 1000a1c:	11808316 	blt	r2,r6,1000c2c <_malloc_r+0x330>
 1000a20:	52800315 	stw	r10,12(r10)
 1000a24:	52800215 	stw	r10,8(r10)
 1000a28:	30002916 	blt	r6,zero,1000ad0 <_malloc_r+0x1d4>
 1000a2c:	8147883a 	add	r3,r16,r5
 1000a30:	18800117 	ldw	r2,4(r3)
 1000a34:	9009883a 	mov	r4,r18
 1000a38:	10800054 	ori	r2,r2,1
 1000a3c:	18800115 	stw	r2,4(r3)
 1000a40:	10032ec0 	call	10032ec <__malloc_unlock>
 1000a44:	80c00204 	addi	r3,r16,8
 1000a48:	003fc006 	br	100094c <_malloc_r+0x50>
 1000a4c:	02c04034 	movhi	r11,256
 1000a50:	5adc6d04 	addi	r11,r11,29108
 1000a54:	8ac5883a 	add	r2,r17,r11
 1000a58:	14000317 	ldw	r16,12(r2)
 1000a5c:	580f883a 	mov	r7,r11
 1000a60:	8806d0fa 	srli	r3,r17,3
 1000a64:	14006c26 	beq	r2,r16,1000c18 <_malloc_r+0x31c>
 1000a68:	80c00117 	ldw	r3,4(r16)
 1000a6c:	00bfff04 	movi	r2,-4
 1000a70:	81800317 	ldw	r6,12(r16)
 1000a74:	1886703a 	and	r3,r3,r2
 1000a78:	80c7883a 	add	r3,r16,r3
 1000a7c:	18800117 	ldw	r2,4(r3)
 1000a80:	81400217 	ldw	r5,8(r16)
 1000a84:	9009883a 	mov	r4,r18
 1000a88:	10800054 	ori	r2,r2,1
 1000a8c:	18800115 	stw	r2,4(r3)
 1000a90:	31400215 	stw	r5,8(r6)
 1000a94:	29800315 	stw	r6,12(r5)
 1000a98:	10032ec0 	call	10032ec <__malloc_unlock>
 1000a9c:	80c00204 	addi	r3,r16,8
 1000aa0:	003faa06 	br	100094c <_malloc_r+0x50>
 1000aa4:	00800104 	movi	r2,4
 1000aa8:	10c0052e 	bgeu	r2,r3,1000ac0 <_malloc_r+0x1c4>
 1000aac:	00800504 	movi	r2,20
 1000ab0:	10c07836 	bltu	r2,r3,1000c94 <_malloc_r+0x398>
 1000ab4:	198016c4 	addi	r6,r3,91
 1000ab8:	300490fa 	slli	r2,r6,3
 1000abc:	003fbc06 	br	10009b0 <_malloc_r+0xb4>
 1000ac0:	8804d1ba 	srli	r2,r17,6
 1000ac4:	11800e04 	addi	r6,r2,56
 1000ac8:	300490fa 	slli	r2,r6,3
 1000acc:	003fb806 	br	10009b0 <_malloc_r+0xb4>
 1000ad0:	00807fc4 	movi	r2,511
 1000ad4:	1140bb36 	bltu	r2,r5,1000dc4 <_malloc_r+0x4c8>
 1000ad8:	2806d0fa 	srli	r3,r5,3
 1000adc:	573ffe04 	addi	fp,r10,-8
 1000ae0:	00800044 	movi	r2,1
 1000ae4:	180890fa 	slli	r4,r3,3
 1000ae8:	1807d0ba 	srai	r3,r3,2
 1000aec:	e1c00117 	ldw	r7,4(fp)
 1000af0:	5909883a 	add	r4,r11,r4
 1000af4:	21400217 	ldw	r5,8(r4)
 1000af8:	10c4983a 	sll	r2,r2,r3
 1000afc:	81000315 	stw	r4,12(r16)
 1000b00:	81400215 	stw	r5,8(r16)
 1000b04:	388eb03a 	or	r7,r7,r2
 1000b08:	2c000315 	stw	r16,12(r5)
 1000b0c:	24000215 	stw	r16,8(r4)
 1000b10:	e1c00115 	stw	r7,4(fp)
 1000b14:	4807883a 	mov	r3,r9
 1000b18:	4800cd16 	blt	r9,zero,1000e50 <_malloc_r+0x554>
 1000b1c:	1807d0ba 	srai	r3,r3,2
 1000b20:	00800044 	movi	r2,1
 1000b24:	10c8983a 	sll	r4,r2,r3
 1000b28:	39004436 	bltu	r7,r4,1000c3c <_malloc_r+0x340>
 1000b2c:	21c4703a 	and	r2,r4,r7
 1000b30:	10000a1e 	bne	r2,zero,1000b5c <_malloc_r+0x260>
 1000b34:	2109883a 	add	r4,r4,r4
 1000b38:	00bfff04 	movi	r2,-4
 1000b3c:	4884703a 	and	r2,r9,r2
 1000b40:	3906703a 	and	r3,r7,r4
 1000b44:	12400104 	addi	r9,r2,4
 1000b48:	1800041e 	bne	r3,zero,1000b5c <_malloc_r+0x260>
 1000b4c:	2109883a 	add	r4,r4,r4
 1000b50:	3904703a 	and	r2,r7,r4
 1000b54:	4a400104 	addi	r9,r9,4
 1000b58:	103ffc26 	beq	r2,zero,1000b4c <_malloc_r+0x250>
 1000b5c:	480490fa 	slli	r2,r9,3
 1000b60:	4819883a 	mov	r12,r9
 1000b64:	023fff04 	movi	r8,-4
 1000b68:	589b883a 	add	r13,r11,r2
 1000b6c:	6807883a 	mov	r3,r13
 1000b70:	014003c4 	movi	r5,15
 1000b74:	1c000317 	ldw	r16,12(r3)
 1000b78:	1c00041e 	bne	r3,r16,1000b8c <_malloc_r+0x290>
 1000b7c:	0000a706 	br	1000e1c <_malloc_r+0x520>
 1000b80:	3000ab0e 	bge	r6,zero,1000e30 <_malloc_r+0x534>
 1000b84:	84000317 	ldw	r16,12(r16)
 1000b88:	1c00a426 	beq	r3,r16,1000e1c <_malloc_r+0x520>
 1000b8c:	80800117 	ldw	r2,4(r16)
 1000b90:	1204703a 	and	r2,r2,r8
 1000b94:	144dc83a 	sub	r6,r2,r17
 1000b98:	29bff90e 	bge	r5,r6,1000b80 <_malloc_r+0x284>
 1000b9c:	81000317 	ldw	r4,12(r16)
 1000ba0:	80c00217 	ldw	r3,8(r16)
 1000ba4:	89400054 	ori	r5,r17,1
 1000ba8:	8445883a 	add	r2,r16,r17
 1000bac:	20c00215 	stw	r3,8(r4)
 1000bb0:	19000315 	stw	r4,12(r3)
 1000bb4:	81400115 	stw	r5,4(r16)
 1000bb8:	1187883a 	add	r3,r2,r6
 1000bbc:	31000054 	ori	r4,r6,1
 1000bc0:	50800315 	stw	r2,12(r10)
 1000bc4:	50800215 	stw	r2,8(r10)
 1000bc8:	19800015 	stw	r6,0(r3)
 1000bcc:	11000115 	stw	r4,4(r2)
 1000bd0:	12800215 	stw	r10,8(r2)
 1000bd4:	12800315 	stw	r10,12(r2)
 1000bd8:	9009883a 	mov	r4,r18
 1000bdc:	10032ec0 	call	10032ec <__malloc_unlock>
 1000be0:	80c00204 	addi	r3,r16,8
 1000be4:	003f5906 	br	100094c <_malloc_r+0x50>
 1000be8:	8109883a 	add	r4,r16,r4
 1000bec:	20800117 	ldw	r2,4(r4)
 1000bf0:	80c00217 	ldw	r3,8(r16)
 1000bf4:	81400317 	ldw	r5,12(r16)
 1000bf8:	10800054 	ori	r2,r2,1
 1000bfc:	20800115 	stw	r2,4(r4)
 1000c00:	28c00215 	stw	r3,8(r5)
 1000c04:	19400315 	stw	r5,12(r3)
 1000c08:	9009883a 	mov	r4,r18
 1000c0c:	10032ec0 	call	10032ec <__malloc_unlock>
 1000c10:	80c00204 	addi	r3,r16,8
 1000c14:	003f4d06 	br	100094c <_malloc_r+0x50>
 1000c18:	80800204 	addi	r2,r16,8
 1000c1c:	14000317 	ldw	r16,12(r2)
 1000c20:	143f911e 	bne	r2,r16,1000a68 <_malloc_r+0x16c>
 1000c24:	1a400084 	addi	r9,r3,2
 1000c28:	003f7306 	br	10009f8 <_malloc_r+0xfc>
 1000c2c:	88c00054 	ori	r3,r17,1
 1000c30:	8445883a 	add	r2,r16,r17
 1000c34:	80c00115 	stw	r3,4(r16)
 1000c38:	003fdf06 	br	1000bb8 <_malloc_r+0x2bc>
 1000c3c:	e4000217 	ldw	r16,8(fp)
 1000c40:	00bfff04 	movi	r2,-4
 1000c44:	80c00117 	ldw	r3,4(r16)
 1000c48:	802d883a 	mov	r22,r16
 1000c4c:	18aa703a 	and	r21,r3,r2
 1000c50:	ac401636 	bltu	r21,r17,1000cac <_malloc_r+0x3b0>
 1000c54:	ac49c83a 	sub	r4,r21,r17
 1000c58:	008003c4 	movi	r2,15
 1000c5c:	1100130e 	bge	r2,r4,1000cac <_malloc_r+0x3b0>
 1000c60:	88800054 	ori	r2,r17,1
 1000c64:	8447883a 	add	r3,r16,r17
 1000c68:	80800115 	stw	r2,4(r16)
 1000c6c:	20800054 	ori	r2,r4,1
 1000c70:	18800115 	stw	r2,4(r3)
 1000c74:	e0c00215 	stw	r3,8(fp)
 1000c78:	9009883a 	mov	r4,r18
 1000c7c:	10032ec0 	call	10032ec <__malloc_unlock>
 1000c80:	80c00204 	addi	r3,r16,8
 1000c84:	003f3106 	br	100094c <_malloc_r+0x50>
 1000c88:	39c00117 	ldw	r7,4(r7)
 1000c8c:	573ffe04 	addi	fp,r10,-8
 1000c90:	003fa006 	br	1000b14 <_malloc_r+0x218>
 1000c94:	00801504 	movi	r2,84
 1000c98:	10c06736 	bltu	r2,r3,1000e38 <_malloc_r+0x53c>
 1000c9c:	8804d33a 	srli	r2,r17,12
 1000ca0:	11801b84 	addi	r6,r2,110
 1000ca4:	300490fa 	slli	r2,r6,3
 1000ca8:	003f4106 	br	10009b0 <_malloc_r+0xb4>
 1000cac:	d0a71917 	ldw	r2,-25500(gp)
 1000cb0:	d0e00317 	ldw	r3,-32756(gp)
 1000cb4:	053fffc4 	movi	r20,-1
 1000cb8:	10800404 	addi	r2,r2,16
 1000cbc:	88a7883a 	add	r19,r17,r2
 1000cc0:	1d000326 	beq	r3,r20,1000cd0 <_malloc_r+0x3d4>
 1000cc4:	98c3ffc4 	addi	r3,r19,4095
 1000cc8:	00bc0004 	movi	r2,-4096
 1000ccc:	18a6703a 	and	r19,r3,r2
 1000cd0:	9009883a 	mov	r4,r18
 1000cd4:	980b883a 	mov	r5,r19
 1000cd8:	10018940 	call	1001894 <_sbrk_r>
 1000cdc:	1009883a 	mov	r4,r2
 1000ce0:	15000426 	beq	r2,r20,1000cf4 <_malloc_r+0x3f8>
 1000ce4:	854b883a 	add	r5,r16,r21
 1000ce8:	1029883a 	mov	r20,r2
 1000cec:	11405a2e 	bgeu	r2,r5,1000e58 <_malloc_r+0x55c>
 1000cf0:	87000c26 	beq	r16,fp,1000d24 <_malloc_r+0x428>
 1000cf4:	e4000217 	ldw	r16,8(fp)
 1000cf8:	80c00117 	ldw	r3,4(r16)
 1000cfc:	00bfff04 	movi	r2,-4
 1000d00:	1884703a 	and	r2,r3,r2
 1000d04:	14400336 	bltu	r2,r17,1000d14 <_malloc_r+0x418>
 1000d08:	1449c83a 	sub	r4,r2,r17
 1000d0c:	008003c4 	movi	r2,15
 1000d10:	113fd316 	blt	r2,r4,1000c60 <_malloc_r+0x364>
 1000d14:	9009883a 	mov	r4,r18
 1000d18:	10032ec0 	call	10032ec <__malloc_unlock>
 1000d1c:	0007883a 	mov	r3,zero
 1000d20:	003f0a06 	br	100094c <_malloc_r+0x50>
 1000d24:	05c04074 	movhi	r23,257
 1000d28:	bde98d04 	addi	r23,r23,-22988
 1000d2c:	b8800017 	ldw	r2,0(r23)
 1000d30:	988d883a 	add	r6,r19,r2
 1000d34:	b9800015 	stw	r6,0(r23)
 1000d38:	d0e00317 	ldw	r3,-32756(gp)
 1000d3c:	00bfffc4 	movi	r2,-1
 1000d40:	18808e26 	beq	r3,r2,1000f7c <_malloc_r+0x680>
 1000d44:	2145c83a 	sub	r2,r4,r5
 1000d48:	3085883a 	add	r2,r6,r2
 1000d4c:	b8800015 	stw	r2,0(r23)
 1000d50:	20c001cc 	andi	r3,r4,7
 1000d54:	18005f1e 	bne	r3,zero,1000ed4 <_malloc_r+0x5d8>
 1000d58:	000b883a 	mov	r5,zero
 1000d5c:	a4c5883a 	add	r2,r20,r19
 1000d60:	1083ffcc 	andi	r2,r2,4095
 1000d64:	00c40004 	movi	r3,4096
 1000d68:	1887c83a 	sub	r3,r3,r2
 1000d6c:	28e7883a 	add	r19,r5,r3
 1000d70:	9009883a 	mov	r4,r18
 1000d74:	980b883a 	mov	r5,r19
 1000d78:	10018940 	call	1001894 <_sbrk_r>
 1000d7c:	1007883a 	mov	r3,r2
 1000d80:	00bfffc4 	movi	r2,-1
 1000d84:	18807a26 	beq	r3,r2,1000f70 <_malloc_r+0x674>
 1000d88:	1d05c83a 	sub	r2,r3,r20
 1000d8c:	9885883a 	add	r2,r19,r2
 1000d90:	10c00054 	ori	r3,r2,1
 1000d94:	b8800017 	ldw	r2,0(r23)
 1000d98:	a021883a 	mov	r16,r20
 1000d9c:	a0c00115 	stw	r3,4(r20)
 1000da0:	9885883a 	add	r2,r19,r2
 1000da4:	b8800015 	stw	r2,0(r23)
 1000da8:	e5000215 	stw	r20,8(fp)
 1000dac:	b7003626 	beq	r22,fp,1000e88 <_malloc_r+0x58c>
 1000db0:	018003c4 	movi	r6,15
 1000db4:	35404b36 	bltu	r6,r21,1000ee4 <_malloc_r+0x5e8>
 1000db8:	00800044 	movi	r2,1
 1000dbc:	a0800115 	stw	r2,4(r20)
 1000dc0:	003fcd06 	br	1000cf8 <_malloc_r+0x3fc>
 1000dc4:	2808d27a 	srli	r4,r5,9
 1000dc8:	2000371e 	bne	r4,zero,1000ea8 <_malloc_r+0x5ac>
 1000dcc:	2808d0fa 	srli	r4,r5,3
 1000dd0:	200690fa 	slli	r3,r4,3
 1000dd4:	1ad1883a 	add	r8,r3,r11
 1000dd8:	41800217 	ldw	r6,8(r8)
 1000ddc:	41805b26 	beq	r8,r6,1000f4c <_malloc_r+0x650>
 1000de0:	30800117 	ldw	r2,4(r6)
 1000de4:	00ffff04 	movi	r3,-4
 1000de8:	10c4703a 	and	r2,r2,r3
 1000dec:	2880022e 	bgeu	r5,r2,1000df8 <_malloc_r+0x4fc>
 1000df0:	31800217 	ldw	r6,8(r6)
 1000df4:	41bffa1e 	bne	r8,r6,1000de0 <_malloc_r+0x4e4>
 1000df8:	32000317 	ldw	r8,12(r6)
 1000dfc:	39c00117 	ldw	r7,4(r7)
 1000e00:	82000315 	stw	r8,12(r16)
 1000e04:	81800215 	stw	r6,8(r16)
 1000e08:	07004034 	movhi	fp,256
 1000e0c:	e71c6d04 	addi	fp,fp,29108
 1000e10:	34000315 	stw	r16,12(r6)
 1000e14:	44000215 	stw	r16,8(r8)
 1000e18:	003f3e06 	br	1000b14 <_malloc_r+0x218>
 1000e1c:	63000044 	addi	r12,r12,1
 1000e20:	608000cc 	andi	r2,r12,3
 1000e24:	10005d26 	beq	r2,zero,1000f9c <_malloc_r+0x6a0>
 1000e28:	18c00204 	addi	r3,r3,8
 1000e2c:	003f5106 	br	1000b74 <_malloc_r+0x278>
 1000e30:	8089883a 	add	r4,r16,r2
 1000e34:	003f6d06 	br	1000bec <_malloc_r+0x2f0>
 1000e38:	00805504 	movi	r2,340
 1000e3c:	10c02036 	bltu	r2,r3,1000ec0 <_malloc_r+0x5c4>
 1000e40:	8804d3fa 	srli	r2,r17,15
 1000e44:	11801dc4 	addi	r6,r2,119
 1000e48:	300490fa 	slli	r2,r6,3
 1000e4c:	003ed806 	br	10009b0 <_malloc_r+0xb4>
 1000e50:	48c000c4 	addi	r3,r9,3
 1000e54:	003f3106 	br	1000b1c <_malloc_r+0x220>
 1000e58:	05c04074 	movhi	r23,257
 1000e5c:	bde98d04 	addi	r23,r23,-22988
 1000e60:	b8800017 	ldw	r2,0(r23)
 1000e64:	988d883a 	add	r6,r19,r2
 1000e68:	b9800015 	stw	r6,0(r23)
 1000e6c:	293fb21e 	bne	r5,r4,1000d38 <_malloc_r+0x43c>
 1000e70:	2083ffcc 	andi	r2,r4,4095
 1000e74:	103fb01e 	bne	r2,zero,1000d38 <_malloc_r+0x43c>
 1000e78:	e4000217 	ldw	r16,8(fp)
 1000e7c:	9d45883a 	add	r2,r19,r21
 1000e80:	10800054 	ori	r2,r2,1
 1000e84:	80800115 	stw	r2,4(r16)
 1000e88:	b8c00017 	ldw	r3,0(r23)
 1000e8c:	d0a71a17 	ldw	r2,-25496(gp)
 1000e90:	10c0012e 	bgeu	r2,r3,1000e98 <_malloc_r+0x59c>
 1000e94:	d0e71a15 	stw	r3,-25496(gp)
 1000e98:	d0a71b17 	ldw	r2,-25492(gp)
 1000e9c:	10ff962e 	bgeu	r2,r3,1000cf8 <_malloc_r+0x3fc>
 1000ea0:	d0e71b15 	stw	r3,-25492(gp)
 1000ea4:	003f9406 	br	1000cf8 <_malloc_r+0x3fc>
 1000ea8:	00800104 	movi	r2,4
 1000eac:	11001e36 	bltu	r2,r4,1000f28 <_malloc_r+0x62c>
 1000eb0:	2804d1ba 	srli	r2,r5,6
 1000eb4:	11000e04 	addi	r4,r2,56
 1000eb8:	200690fa 	slli	r3,r4,3
 1000ebc:	003fc506 	br	1000dd4 <_malloc_r+0x4d8>
 1000ec0:	00815504 	movi	r2,1364
 1000ec4:	10c01d2e 	bgeu	r2,r3,1000f3c <_malloc_r+0x640>
 1000ec8:	01801f84 	movi	r6,126
 1000ecc:	0080fc04 	movi	r2,1008
 1000ed0:	003eb706 	br	10009b0 <_malloc_r+0xb4>
 1000ed4:	00800204 	movi	r2,8
 1000ed8:	10cbc83a 	sub	r5,r2,r3
 1000edc:	2169883a 	add	r20,r4,r5
 1000ee0:	003f9e06 	br	1000d5c <_malloc_r+0x460>
 1000ee4:	00bffe04 	movi	r2,-8
 1000ee8:	a93ffd04 	addi	r4,r21,-12
 1000eec:	2088703a 	and	r4,r4,r2
 1000ef0:	b10b883a 	add	r5,r22,r4
 1000ef4:	00c00144 	movi	r3,5
 1000ef8:	28c00215 	stw	r3,8(r5)
 1000efc:	28c00115 	stw	r3,4(r5)
 1000f00:	b0800117 	ldw	r2,4(r22)
 1000f04:	1080004c 	andi	r2,r2,1
 1000f08:	2084b03a 	or	r2,r4,r2
 1000f0c:	b0800115 	stw	r2,4(r22)
 1000f10:	313fdd2e 	bgeu	r6,r4,1000e88 <_malloc_r+0x58c>
 1000f14:	b1400204 	addi	r5,r22,8
 1000f18:	9009883a 	mov	r4,r18
 1000f1c:	100205c0 	call	100205c <_free_r>
 1000f20:	e4000217 	ldw	r16,8(fp)
 1000f24:	003fd806 	br	1000e88 <_malloc_r+0x58c>
 1000f28:	00800504 	movi	r2,20
 1000f2c:	11001536 	bltu	r2,r4,1000f84 <_malloc_r+0x688>
 1000f30:	210016c4 	addi	r4,r4,91
 1000f34:	200690fa 	slli	r3,r4,3
 1000f38:	003fa606 	br	1000dd4 <_malloc_r+0x4d8>
 1000f3c:	8804d4ba 	srli	r2,r17,18
 1000f40:	11801f04 	addi	r6,r2,124
 1000f44:	300490fa 	slli	r2,r6,3
 1000f48:	003e9906 	br	10009b0 <_malloc_r+0xb4>
 1000f4c:	2009d0ba 	srai	r4,r4,2
 1000f50:	01404034 	movhi	r5,256
 1000f54:	295c6d04 	addi	r5,r5,29108
 1000f58:	00c00044 	movi	r3,1
 1000f5c:	28800117 	ldw	r2,4(r5)
 1000f60:	1906983a 	sll	r3,r3,r4
 1000f64:	10c4b03a 	or	r2,r2,r3
 1000f68:	28800115 	stw	r2,4(r5)
 1000f6c:	003fa306 	br	1000dfc <_malloc_r+0x500>
 1000f70:	0027883a 	mov	r19,zero
 1000f74:	00c00044 	movi	r3,1
 1000f78:	003f8606 	br	1000d94 <_malloc_r+0x498>
 1000f7c:	d1200315 	stw	r4,-32756(gp)
 1000f80:	003f7306 	br	1000d50 <_malloc_r+0x454>
 1000f84:	00801504 	movi	r2,84
 1000f88:	11001936 	bltu	r2,r4,1000ff0 <_malloc_r+0x6f4>
 1000f8c:	2804d33a 	srli	r2,r5,12
 1000f90:	11001b84 	addi	r4,r2,110
 1000f94:	200690fa 	slli	r3,r4,3
 1000f98:	003f8e06 	br	1000dd4 <_malloc_r+0x4d8>
 1000f9c:	480b883a 	mov	r5,r9
 1000fa0:	6807883a 	mov	r3,r13
 1000fa4:	288000cc 	andi	r2,r5,3
 1000fa8:	18fffe04 	addi	r3,r3,-8
 1000fac:	297fffc4 	addi	r5,r5,-1
 1000fb0:	10001526 	beq	r2,zero,1001008 <_malloc_r+0x70c>
 1000fb4:	18800217 	ldw	r2,8(r3)
 1000fb8:	10fffa26 	beq	r2,r3,1000fa4 <_malloc_r+0x6a8>
 1000fbc:	2109883a 	add	r4,r4,r4
 1000fc0:	393f1e36 	bltu	r7,r4,1000c3c <_malloc_r+0x340>
 1000fc4:	203f1d26 	beq	r4,zero,1000c3c <_malloc_r+0x340>
 1000fc8:	21c4703a 	and	r2,r4,r7
 1000fcc:	10000226 	beq	r2,zero,1000fd8 <_malloc_r+0x6dc>
 1000fd0:	6013883a 	mov	r9,r12
 1000fd4:	003ee106 	br	1000b5c <_malloc_r+0x260>
 1000fd8:	2109883a 	add	r4,r4,r4
 1000fdc:	3904703a 	and	r2,r7,r4
 1000fe0:	63000104 	addi	r12,r12,4
 1000fe4:	103ffc26 	beq	r2,zero,1000fd8 <_malloc_r+0x6dc>
 1000fe8:	6013883a 	mov	r9,r12
 1000fec:	003edb06 	br	1000b5c <_malloc_r+0x260>
 1000ff0:	00805504 	movi	r2,340
 1000ff4:	11000836 	bltu	r2,r4,1001018 <_malloc_r+0x71c>
 1000ff8:	2804d3fa 	srli	r2,r5,15
 1000ffc:	11001dc4 	addi	r4,r2,119
 1001000:	200690fa 	slli	r3,r4,3
 1001004:	003f7306 	br	1000dd4 <_malloc_r+0x4d8>
 1001008:	0104303a 	nor	r2,zero,r4
 100100c:	388e703a 	and	r7,r7,r2
 1001010:	e1c00115 	stw	r7,4(fp)
 1001014:	003fe906 	br	1000fbc <_malloc_r+0x6c0>
 1001018:	00815504 	movi	r2,1364
 100101c:	1100032e 	bgeu	r2,r4,100102c <_malloc_r+0x730>
 1001020:	01001f84 	movi	r4,126
 1001024:	00c0fc04 	movi	r3,1008
 1001028:	003f6a06 	br	1000dd4 <_malloc_r+0x4d8>
 100102c:	2804d4ba 	srli	r2,r5,18
 1001030:	11001f04 	addi	r4,r2,124
 1001034:	200690fa 	slli	r3,r4,3
 1001038:	003f6606 	br	1000dd4 <_malloc_r+0x4d8>

0100103c <memchr>:
 100103c:	008000c4 	movi	r2,3
 1001040:	29403fcc 	andi	r5,r5,255
 1001044:	2007883a 	mov	r3,r4
 1001048:	1180022e 	bgeu	r2,r6,1001054 <memchr+0x18>
 100104c:	2084703a 	and	r2,r4,r2
 1001050:	10000b26 	beq	r2,zero,1001080 <memchr+0x44>
 1001054:	313fffc4 	addi	r4,r6,-1
 1001058:	3000051e 	bne	r6,zero,1001070 <memchr+0x34>
 100105c:	00002c06 	br	1001110 <memchr+0xd4>
 1001060:	213fffc4 	addi	r4,r4,-1
 1001064:	00bfffc4 	movi	r2,-1
 1001068:	18c00044 	addi	r3,r3,1
 100106c:	20802826 	beq	r4,r2,1001110 <memchr+0xd4>
 1001070:	18800003 	ldbu	r2,0(r3)
 1001074:	28bffa1e 	bne	r5,r2,1001060 <memchr+0x24>
 1001078:	1805883a 	mov	r2,r3
 100107c:	f800283a 	ret
 1001080:	0011883a 	mov	r8,zero
 1001084:	0007883a 	mov	r3,zero
 1001088:	01c00104 	movi	r7,4
 100108c:	4004923a 	slli	r2,r8,8
 1001090:	18c00044 	addi	r3,r3,1
 1001094:	1151883a 	add	r8,r2,r5
 1001098:	19fffc1e 	bne	r3,r7,100108c <memchr+0x50>
 100109c:	02bfbff4 	movhi	r10,65279
 10010a0:	52bfbfc4 	addi	r10,r10,-257
 10010a4:	02602074 	movhi	r9,32897
 10010a8:	4a602004 	addi	r9,r9,-32640
 10010ac:	02c000c4 	movi	r11,3
 10010b0:	20800017 	ldw	r2,0(r4)
 10010b4:	31bfff04 	addi	r6,r6,-4
 10010b8:	200f883a 	mov	r7,r4
 10010bc:	1204f03a 	xor	r2,r2,r8
 10010c0:	1287883a 	add	r3,r2,r10
 10010c4:	1a46703a 	and	r3,r3,r9
 10010c8:	0084303a 	nor	r2,zero,r2
 10010cc:	10c4703a 	and	r2,r2,r3
 10010d0:	10000b26 	beq	r2,zero,1001100 <memchr+0xc4>
 10010d4:	20800003 	ldbu	r2,0(r4)
 10010d8:	28800f26 	beq	r5,r2,1001118 <memchr+0xdc>
 10010dc:	20800043 	ldbu	r2,1(r4)
 10010e0:	21c00044 	addi	r7,r4,1
 10010e4:	28800c26 	beq	r5,r2,1001118 <memchr+0xdc>
 10010e8:	20800083 	ldbu	r2,2(r4)
 10010ec:	21c00084 	addi	r7,r4,2
 10010f0:	28800926 	beq	r5,r2,1001118 <memchr+0xdc>
 10010f4:	208000c3 	ldbu	r2,3(r4)
 10010f8:	21c000c4 	addi	r7,r4,3
 10010fc:	28800626 	beq	r5,r2,1001118 <memchr+0xdc>
 1001100:	21000104 	addi	r4,r4,4
 1001104:	59bfea36 	bltu	r11,r6,10010b0 <memchr+0x74>
 1001108:	2007883a 	mov	r3,r4
 100110c:	003fd106 	br	1001054 <memchr+0x18>
 1001110:	0005883a 	mov	r2,zero
 1001114:	f800283a 	ret
 1001118:	3805883a 	mov	r2,r7
 100111c:	f800283a 	ret

01001120 <memcpy>:
 1001120:	01c003c4 	movi	r7,15
 1001124:	2007883a 	mov	r3,r4
 1001128:	3980032e 	bgeu	r7,r6,1001138 <memcpy+0x18>
 100112c:	2904b03a 	or	r2,r5,r4
 1001130:	108000cc 	andi	r2,r2,3
 1001134:	10000926 	beq	r2,zero,100115c <memcpy+0x3c>
 1001138:	30000626 	beq	r6,zero,1001154 <memcpy+0x34>
 100113c:	30cd883a 	add	r6,r6,r3
 1001140:	28800003 	ldbu	r2,0(r5)
 1001144:	29400044 	addi	r5,r5,1
 1001148:	18800005 	stb	r2,0(r3)
 100114c:	18c00044 	addi	r3,r3,1
 1001150:	30fffb1e 	bne	r6,r3,1001140 <memcpy+0x20>
 1001154:	2005883a 	mov	r2,r4
 1001158:	f800283a 	ret
 100115c:	3811883a 	mov	r8,r7
 1001160:	200f883a 	mov	r7,r4
 1001164:	28c00017 	ldw	r3,0(r5)
 1001168:	31bffc04 	addi	r6,r6,-16
 100116c:	38c00015 	stw	r3,0(r7)
 1001170:	28800117 	ldw	r2,4(r5)
 1001174:	38800115 	stw	r2,4(r7)
 1001178:	28c00217 	ldw	r3,8(r5)
 100117c:	38c00215 	stw	r3,8(r7)
 1001180:	28800317 	ldw	r2,12(r5)
 1001184:	29400404 	addi	r5,r5,16
 1001188:	38800315 	stw	r2,12(r7)
 100118c:	39c00404 	addi	r7,r7,16
 1001190:	41bff436 	bltu	r8,r6,1001164 <memcpy+0x44>
 1001194:	008000c4 	movi	r2,3
 1001198:	1180072e 	bgeu	r2,r6,10011b8 <memcpy+0x98>
 100119c:	1007883a 	mov	r3,r2
 10011a0:	28800017 	ldw	r2,0(r5)
 10011a4:	31bfff04 	addi	r6,r6,-4
 10011a8:	29400104 	addi	r5,r5,4
 10011ac:	38800015 	stw	r2,0(r7)
 10011b0:	39c00104 	addi	r7,r7,4
 10011b4:	19bffa36 	bltu	r3,r6,10011a0 <memcpy+0x80>
 10011b8:	3807883a 	mov	r3,r7
 10011bc:	003fde06 	br	1001138 <memcpy+0x18>

010011c0 <memmove>:
 10011c0:	2807883a 	mov	r3,r5
 10011c4:	2011883a 	mov	r8,r4
 10011c8:	29000c2e 	bgeu	r5,r4,10011fc <memmove+0x3c>
 10011cc:	298f883a 	add	r7,r5,r6
 10011d0:	21c00a2e 	bgeu	r4,r7,10011fc <memmove+0x3c>
 10011d4:	30000726 	beq	r6,zero,10011f4 <memmove+0x34>
 10011d8:	2187883a 	add	r3,r4,r6
 10011dc:	198dc83a 	sub	r6,r3,r6
 10011e0:	39ffffc4 	addi	r7,r7,-1
 10011e4:	38800003 	ldbu	r2,0(r7)
 10011e8:	18ffffc4 	addi	r3,r3,-1
 10011ec:	18800005 	stb	r2,0(r3)
 10011f0:	19bffb1e 	bne	r3,r6,10011e0 <memmove+0x20>
 10011f4:	2005883a 	mov	r2,r4
 10011f8:	f800283a 	ret
 10011fc:	01c003c4 	movi	r7,15
 1001200:	39800a36 	bltu	r7,r6,100122c <memmove+0x6c>
 1001204:	303ffb26 	beq	r6,zero,10011f4 <memmove+0x34>
 1001208:	400f883a 	mov	r7,r8
 100120c:	320d883a 	add	r6,r6,r8
 1001210:	28800003 	ldbu	r2,0(r5)
 1001214:	29400044 	addi	r5,r5,1
 1001218:	38800005 	stb	r2,0(r7)
 100121c:	39c00044 	addi	r7,r7,1
 1001220:	39bffb1e 	bne	r7,r6,1001210 <memmove+0x50>
 1001224:	2005883a 	mov	r2,r4
 1001228:	f800283a 	ret
 100122c:	1904b03a 	or	r2,r3,r4
 1001230:	108000cc 	andi	r2,r2,3
 1001234:	103ff31e 	bne	r2,zero,1001204 <memmove+0x44>
 1001238:	3811883a 	mov	r8,r7
 100123c:	180b883a 	mov	r5,r3
 1001240:	200f883a 	mov	r7,r4
 1001244:	28c00017 	ldw	r3,0(r5)
 1001248:	31bffc04 	addi	r6,r6,-16
 100124c:	38c00015 	stw	r3,0(r7)
 1001250:	28800117 	ldw	r2,4(r5)
 1001254:	38800115 	stw	r2,4(r7)
 1001258:	28c00217 	ldw	r3,8(r5)
 100125c:	38c00215 	stw	r3,8(r7)
 1001260:	28800317 	ldw	r2,12(r5)
 1001264:	29400404 	addi	r5,r5,16
 1001268:	38800315 	stw	r2,12(r7)
 100126c:	39c00404 	addi	r7,r7,16
 1001270:	41bff436 	bltu	r8,r6,1001244 <memmove+0x84>
 1001274:	008000c4 	movi	r2,3
 1001278:	1180072e 	bgeu	r2,r6,1001298 <memmove+0xd8>
 100127c:	1007883a 	mov	r3,r2
 1001280:	28800017 	ldw	r2,0(r5)
 1001284:	31bfff04 	addi	r6,r6,-4
 1001288:	29400104 	addi	r5,r5,4
 100128c:	38800015 	stw	r2,0(r7)
 1001290:	39c00104 	addi	r7,r7,4
 1001294:	19bffa36 	bltu	r3,r6,1001280 <memmove+0xc0>
 1001298:	3811883a 	mov	r8,r7
 100129c:	003fd906 	br	1001204 <memmove+0x44>

010012a0 <_realloc_r>:
 10012a0:	defff404 	addi	sp,sp,-48
 10012a4:	dd800815 	stw	r22,32(sp)
 10012a8:	dc800415 	stw	r18,16(sp)
 10012ac:	dc400315 	stw	r17,12(sp)
 10012b0:	dfc00b15 	stw	ra,44(sp)
 10012b4:	df000a15 	stw	fp,40(sp)
 10012b8:	ddc00915 	stw	r23,36(sp)
 10012bc:	dd400715 	stw	r21,28(sp)
 10012c0:	dd000615 	stw	r20,24(sp)
 10012c4:	dcc00515 	stw	r19,20(sp)
 10012c8:	dc000215 	stw	r16,8(sp)
 10012cc:	2825883a 	mov	r18,r5
 10012d0:	3023883a 	mov	r17,r6
 10012d4:	202d883a 	mov	r22,r4
 10012d8:	2800c926 	beq	r5,zero,1001600 <_realloc_r+0x360>
 10012dc:	10032cc0 	call	10032cc <__malloc_lock>
 10012e0:	943ffe04 	addi	r16,r18,-8
 10012e4:	88c002c4 	addi	r3,r17,11
 10012e8:	00800584 	movi	r2,22
 10012ec:	82000117 	ldw	r8,4(r16)
 10012f0:	10c01b2e 	bgeu	r2,r3,1001360 <_realloc_r+0xc0>
 10012f4:	00bffe04 	movi	r2,-8
 10012f8:	188e703a 	and	r7,r3,r2
 10012fc:	3839883a 	mov	fp,r7
 1001300:	38001a16 	blt	r7,zero,100136c <_realloc_r+0xcc>
 1001304:	e4401936 	bltu	fp,r17,100136c <_realloc_r+0xcc>
 1001308:	013fff04 	movi	r4,-4
 100130c:	4126703a 	and	r19,r8,r4
 1001310:	99c02616 	blt	r19,r7,10013ac <_realloc_r+0x10c>
 1001314:	802b883a 	mov	r21,r16
 1001318:	9829883a 	mov	r20,r19
 100131c:	84000204 	addi	r16,r16,8
 1001320:	a80f883a 	mov	r7,r21
 1001324:	a70dc83a 	sub	r6,r20,fp
 1001328:	008003c4 	movi	r2,15
 100132c:	1180c136 	bltu	r2,r6,1001634 <_realloc_r+0x394>
 1001330:	38800117 	ldw	r2,4(r7)
 1001334:	a549883a 	add	r4,r20,r21
 1001338:	1080004c 	andi	r2,r2,1
 100133c:	a084b03a 	or	r2,r20,r2
 1001340:	38800115 	stw	r2,4(r7)
 1001344:	20c00117 	ldw	r3,4(r4)
 1001348:	18c00054 	ori	r3,r3,1
 100134c:	20c00115 	stw	r3,4(r4)
 1001350:	b009883a 	mov	r4,r22
 1001354:	10032ec0 	call	10032ec <__malloc_unlock>
 1001358:	8023883a 	mov	r17,r16
 100135c:	00000606 	br	1001378 <_realloc_r+0xd8>
 1001360:	01c00404 	movi	r7,16
 1001364:	3839883a 	mov	fp,r7
 1001368:	e47fe72e 	bgeu	fp,r17,1001308 <_realloc_r+0x68>
 100136c:	00800304 	movi	r2,12
 1001370:	0023883a 	mov	r17,zero
 1001374:	b0800015 	stw	r2,0(r22)
 1001378:	8805883a 	mov	r2,r17
 100137c:	dfc00b17 	ldw	ra,44(sp)
 1001380:	df000a17 	ldw	fp,40(sp)
 1001384:	ddc00917 	ldw	r23,36(sp)
 1001388:	dd800817 	ldw	r22,32(sp)
 100138c:	dd400717 	ldw	r21,28(sp)
 1001390:	dd000617 	ldw	r20,24(sp)
 1001394:	dcc00517 	ldw	r19,20(sp)
 1001398:	dc800417 	ldw	r18,16(sp)
 100139c:	dc400317 	ldw	r17,12(sp)
 10013a0:	dc000217 	ldw	r16,8(sp)
 10013a4:	dec00c04 	addi	sp,sp,48
 10013a8:	f800283a 	ret
 10013ac:	00804034 	movhi	r2,256
 10013b0:	109c6d04 	addi	r2,r2,29108
 10013b4:	12400217 	ldw	r9,8(r2)
 10013b8:	84cd883a 	add	r6,r16,r19
 10013bc:	802b883a 	mov	r21,r16
 10013c0:	3240b926 	beq	r6,r9,10016a8 <_realloc_r+0x408>
 10013c4:	31400117 	ldw	r5,4(r6)
 10013c8:	00bfff84 	movi	r2,-2
 10013cc:	2884703a 	and	r2,r5,r2
 10013d0:	1185883a 	add	r2,r2,r6
 10013d4:	10c00117 	ldw	r3,4(r2)
 10013d8:	18c0004c 	andi	r3,r3,1
 10013dc:	1807003a 	cmpeq	r3,r3,zero
 10013e0:	1800a326 	beq	r3,zero,1001670 <_realloc_r+0x3d0>
 10013e4:	2908703a 	and	r4,r5,r4
 10013e8:	9929883a 	add	r20,r19,r4
 10013ec:	a1c0a30e 	bge	r20,r7,100167c <_realloc_r+0x3dc>
 10013f0:	4080004c 	andi	r2,r8,1
 10013f4:	1000551e 	bne	r2,zero,100154c <_realloc_r+0x2ac>
 10013f8:	80800017 	ldw	r2,0(r16)
 10013fc:	80afc83a 	sub	r23,r16,r2
 1001400:	b8c00117 	ldw	r3,4(r23)
 1001404:	00bfff04 	movi	r2,-4
 1001408:	1884703a 	and	r2,r3,r2
 100140c:	30002e26 	beq	r6,zero,10014c8 <_realloc_r+0x228>
 1001410:	3240b926 	beq	r6,r9,10016f8 <_realloc_r+0x458>
 1001414:	98a9883a 	add	r20,r19,r2
 1001418:	2509883a 	add	r4,r4,r20
 100141c:	d9000015 	stw	r4,0(sp)
 1001420:	21c02a16 	blt	r4,r7,10014cc <_realloc_r+0x22c>
 1001424:	30800317 	ldw	r2,12(r6)
 1001428:	30c00217 	ldw	r3,8(r6)
 100142c:	01400904 	movi	r5,36
 1001430:	99bfff04 	addi	r6,r19,-4
 1001434:	18800315 	stw	r2,12(r3)
 1001438:	10c00215 	stw	r3,8(r2)
 100143c:	b9000317 	ldw	r4,12(r23)
 1001440:	b8800217 	ldw	r2,8(r23)
 1001444:	b82b883a 	mov	r21,r23
 1001448:	bc000204 	addi	r16,r23,8
 100144c:	20800215 	stw	r2,8(r4)
 1001450:	11000315 	stw	r4,12(r2)
 1001454:	2980e436 	bltu	r5,r6,10017e8 <_realloc_r+0x548>
 1001458:	008004c4 	movi	r2,19
 100145c:	9009883a 	mov	r4,r18
 1001460:	8011883a 	mov	r8,r16
 1001464:	11800f2e 	bgeu	r2,r6,10014a4 <_realloc_r+0x204>
 1001468:	90800017 	ldw	r2,0(r18)
 100146c:	ba000404 	addi	r8,r23,16
 1001470:	91000204 	addi	r4,r18,8
 1001474:	b8800215 	stw	r2,8(r23)
 1001478:	90c00117 	ldw	r3,4(r18)
 100147c:	008006c4 	movi	r2,27
 1001480:	b8c00315 	stw	r3,12(r23)
 1001484:	1180072e 	bgeu	r2,r6,10014a4 <_realloc_r+0x204>
 1001488:	90c00217 	ldw	r3,8(r18)
 100148c:	ba000604 	addi	r8,r23,24
 1001490:	91000404 	addi	r4,r18,16
 1001494:	b8c00415 	stw	r3,16(r23)
 1001498:	90800317 	ldw	r2,12(r18)
 100149c:	b8800515 	stw	r2,20(r23)
 10014a0:	3140e726 	beq	r6,r5,1001840 <_realloc_r+0x5a0>
 10014a4:	20800017 	ldw	r2,0(r4)
 10014a8:	dd000017 	ldw	r20,0(sp)
 10014ac:	b80f883a 	mov	r7,r23
 10014b0:	40800015 	stw	r2,0(r8)
 10014b4:	20c00117 	ldw	r3,4(r4)
 10014b8:	40c00115 	stw	r3,4(r8)
 10014bc:	20800217 	ldw	r2,8(r4)
 10014c0:	40800215 	stw	r2,8(r8)
 10014c4:	003f9706 	br	1001324 <_realloc_r+0x84>
 10014c8:	98a9883a 	add	r20,r19,r2
 10014cc:	a1c01f16 	blt	r20,r7,100154c <_realloc_r+0x2ac>
 10014d0:	b8c00317 	ldw	r3,12(r23)
 10014d4:	b8800217 	ldw	r2,8(r23)
 10014d8:	99bfff04 	addi	r6,r19,-4
 10014dc:	01400904 	movi	r5,36
 10014e0:	b82b883a 	mov	r21,r23
 10014e4:	18800215 	stw	r2,8(r3)
 10014e8:	10c00315 	stw	r3,12(r2)
 10014ec:	bc000204 	addi	r16,r23,8
 10014f0:	2980c336 	bltu	r5,r6,1001800 <_realloc_r+0x560>
 10014f4:	008004c4 	movi	r2,19
 10014f8:	9009883a 	mov	r4,r18
 10014fc:	8011883a 	mov	r8,r16
 1001500:	11800f2e 	bgeu	r2,r6,1001540 <_realloc_r+0x2a0>
 1001504:	90800017 	ldw	r2,0(r18)
 1001508:	ba000404 	addi	r8,r23,16
 100150c:	91000204 	addi	r4,r18,8
 1001510:	b8800215 	stw	r2,8(r23)
 1001514:	90c00117 	ldw	r3,4(r18)
 1001518:	008006c4 	movi	r2,27
 100151c:	b8c00315 	stw	r3,12(r23)
 1001520:	1180072e 	bgeu	r2,r6,1001540 <_realloc_r+0x2a0>
 1001524:	90c00217 	ldw	r3,8(r18)
 1001528:	ba000604 	addi	r8,r23,24
 100152c:	91000404 	addi	r4,r18,16
 1001530:	b8c00415 	stw	r3,16(r23)
 1001534:	90800317 	ldw	r2,12(r18)
 1001538:	b8800515 	stw	r2,20(r23)
 100153c:	3140c726 	beq	r6,r5,100185c <_realloc_r+0x5bc>
 1001540:	20800017 	ldw	r2,0(r4)
 1001544:	b80f883a 	mov	r7,r23
 1001548:	003fd906 	br	10014b0 <_realloc_r+0x210>
 100154c:	880b883a 	mov	r5,r17
 1001550:	b009883a 	mov	r4,r22
 1001554:	10008fc0 	call	10008fc <_malloc_r>
 1001558:	1023883a 	mov	r17,r2
 100155c:	10002526 	beq	r2,zero,10015f4 <_realloc_r+0x354>
 1001560:	80800117 	ldw	r2,4(r16)
 1001564:	00ffff84 	movi	r3,-2
 1001568:	893ffe04 	addi	r4,r17,-8
 100156c:	10c4703a 	and	r2,r2,r3
 1001570:	8085883a 	add	r2,r16,r2
 1001574:	20809526 	beq	r4,r2,10017cc <_realloc_r+0x52c>
 1001578:	99bfff04 	addi	r6,r19,-4
 100157c:	01c00904 	movi	r7,36
 1001580:	39804536 	bltu	r7,r6,1001698 <_realloc_r+0x3f8>
 1001584:	008004c4 	movi	r2,19
 1001588:	9009883a 	mov	r4,r18
 100158c:	880b883a 	mov	r5,r17
 1001590:	11800f2e 	bgeu	r2,r6,10015d0 <_realloc_r+0x330>
 1001594:	90800017 	ldw	r2,0(r18)
 1001598:	89400204 	addi	r5,r17,8
 100159c:	91000204 	addi	r4,r18,8
 10015a0:	88800015 	stw	r2,0(r17)
 10015a4:	90c00117 	ldw	r3,4(r18)
 10015a8:	008006c4 	movi	r2,27
 10015ac:	88c00115 	stw	r3,4(r17)
 10015b0:	1180072e 	bgeu	r2,r6,10015d0 <_realloc_r+0x330>
 10015b4:	90c00217 	ldw	r3,8(r18)
 10015b8:	89400404 	addi	r5,r17,16
 10015bc:	91000404 	addi	r4,r18,16
 10015c0:	88c00215 	stw	r3,8(r17)
 10015c4:	90800317 	ldw	r2,12(r18)
 10015c8:	88800315 	stw	r2,12(r17)
 10015cc:	31c09126 	beq	r6,r7,1001814 <_realloc_r+0x574>
 10015d0:	20800017 	ldw	r2,0(r4)
 10015d4:	28800015 	stw	r2,0(r5)
 10015d8:	20c00117 	ldw	r3,4(r4)
 10015dc:	28c00115 	stw	r3,4(r5)
 10015e0:	20800217 	ldw	r2,8(r4)
 10015e4:	28800215 	stw	r2,8(r5)
 10015e8:	900b883a 	mov	r5,r18
 10015ec:	b009883a 	mov	r4,r22
 10015f0:	100205c0 	call	100205c <_free_r>
 10015f4:	b009883a 	mov	r4,r22
 10015f8:	10032ec0 	call	10032ec <__malloc_unlock>
 10015fc:	003f5e06 	br	1001378 <_realloc_r+0xd8>
 1001600:	300b883a 	mov	r5,r6
 1001604:	dfc00b17 	ldw	ra,44(sp)
 1001608:	df000a17 	ldw	fp,40(sp)
 100160c:	ddc00917 	ldw	r23,36(sp)
 1001610:	dd800817 	ldw	r22,32(sp)
 1001614:	dd400717 	ldw	r21,28(sp)
 1001618:	dd000617 	ldw	r20,24(sp)
 100161c:	dcc00517 	ldw	r19,20(sp)
 1001620:	dc800417 	ldw	r18,16(sp)
 1001624:	dc400317 	ldw	r17,12(sp)
 1001628:	dc000217 	ldw	r16,8(sp)
 100162c:	dec00c04 	addi	sp,sp,48
 1001630:	10008fc1 	jmpi	10008fc <_malloc_r>
 1001634:	38800117 	ldw	r2,4(r7)
 1001638:	e54b883a 	add	r5,fp,r21
 100163c:	31000054 	ori	r4,r6,1
 1001640:	1080004c 	andi	r2,r2,1
 1001644:	1704b03a 	or	r2,r2,fp
 1001648:	38800115 	stw	r2,4(r7)
 100164c:	29000115 	stw	r4,4(r5)
 1001650:	2987883a 	add	r3,r5,r6
 1001654:	18800117 	ldw	r2,4(r3)
 1001658:	29400204 	addi	r5,r5,8
 100165c:	b009883a 	mov	r4,r22
 1001660:	10800054 	ori	r2,r2,1
 1001664:	18800115 	stw	r2,4(r3)
 1001668:	100205c0 	call	100205c <_free_r>
 100166c:	003f3806 	br	1001350 <_realloc_r+0xb0>
 1001670:	000d883a 	mov	r6,zero
 1001674:	0009883a 	mov	r4,zero
 1001678:	003f5d06 	br	10013f0 <_realloc_r+0x150>
 100167c:	30c00217 	ldw	r3,8(r6)
 1001680:	30800317 	ldw	r2,12(r6)
 1001684:	800f883a 	mov	r7,r16
 1001688:	84000204 	addi	r16,r16,8
 100168c:	10c00215 	stw	r3,8(r2)
 1001690:	18800315 	stw	r2,12(r3)
 1001694:	003f2306 	br	1001324 <_realloc_r+0x84>
 1001698:	8809883a 	mov	r4,r17
 100169c:	900b883a 	mov	r5,r18
 10016a0:	10011c00 	call	10011c0 <memmove>
 10016a4:	003fd006 	br	10015e8 <_realloc_r+0x348>
 10016a8:	30800117 	ldw	r2,4(r6)
 10016ac:	e0c00404 	addi	r3,fp,16
 10016b0:	1108703a 	and	r4,r2,r4
 10016b4:	9905883a 	add	r2,r19,r4
 10016b8:	10ff4d16 	blt	r2,r3,10013f0 <_realloc_r+0x150>
 10016bc:	1705c83a 	sub	r2,r2,fp
 10016c0:	870b883a 	add	r5,r16,fp
 10016c4:	10800054 	ori	r2,r2,1
 10016c8:	28800115 	stw	r2,4(r5)
 10016cc:	80c00117 	ldw	r3,4(r16)
 10016d0:	00804034 	movhi	r2,256
 10016d4:	109c6d04 	addi	r2,r2,29108
 10016d8:	b009883a 	mov	r4,r22
 10016dc:	18c0004c 	andi	r3,r3,1
 10016e0:	e0c6b03a 	or	r3,fp,r3
 10016e4:	11400215 	stw	r5,8(r2)
 10016e8:	80c00115 	stw	r3,4(r16)
 10016ec:	10032ec0 	call	10032ec <__malloc_unlock>
 10016f0:	84400204 	addi	r17,r16,8
 10016f4:	003f2006 	br	1001378 <_realloc_r+0xd8>
 10016f8:	98a9883a 	add	r20,r19,r2
 10016fc:	2509883a 	add	r4,r4,r20
 1001700:	e0800404 	addi	r2,fp,16
 1001704:	d9000115 	stw	r4,4(sp)
 1001708:	20bf7016 	blt	r4,r2,10014cc <_realloc_r+0x22c>
 100170c:	b8c00317 	ldw	r3,12(r23)
 1001710:	b8800217 	ldw	r2,8(r23)
 1001714:	99bfff04 	addi	r6,r19,-4
 1001718:	01400904 	movi	r5,36
 100171c:	18800215 	stw	r2,8(r3)
 1001720:	10c00315 	stw	r3,12(r2)
 1001724:	bc400204 	addi	r17,r23,8
 1001728:	29804136 	bltu	r5,r6,1001830 <_realloc_r+0x590>
 100172c:	008004c4 	movi	r2,19
 1001730:	9009883a 	mov	r4,r18
 1001734:	880f883a 	mov	r7,r17
 1001738:	11800f2e 	bgeu	r2,r6,1001778 <_realloc_r+0x4d8>
 100173c:	90800017 	ldw	r2,0(r18)
 1001740:	b9c00404 	addi	r7,r23,16
 1001744:	91000204 	addi	r4,r18,8
 1001748:	b8800215 	stw	r2,8(r23)
 100174c:	90c00117 	ldw	r3,4(r18)
 1001750:	008006c4 	movi	r2,27
 1001754:	b8c00315 	stw	r3,12(r23)
 1001758:	1180072e 	bgeu	r2,r6,1001778 <_realloc_r+0x4d8>
 100175c:	90c00217 	ldw	r3,8(r18)
 1001760:	b9c00604 	addi	r7,r23,24
 1001764:	91000404 	addi	r4,r18,16
 1001768:	b8c00415 	stw	r3,16(r23)
 100176c:	90800317 	ldw	r2,12(r18)
 1001770:	b8800515 	stw	r2,20(r23)
 1001774:	31404026 	beq	r6,r5,1001878 <_realloc_r+0x5d8>
 1001778:	20800017 	ldw	r2,0(r4)
 100177c:	38800015 	stw	r2,0(r7)
 1001780:	20c00117 	ldw	r3,4(r4)
 1001784:	38c00115 	stw	r3,4(r7)
 1001788:	20800217 	ldw	r2,8(r4)
 100178c:	38800215 	stw	r2,8(r7)
 1001790:	d8c00117 	ldw	r3,4(sp)
 1001794:	bf0b883a 	add	r5,r23,fp
 1001798:	b009883a 	mov	r4,r22
 100179c:	1f05c83a 	sub	r2,r3,fp
 10017a0:	10800054 	ori	r2,r2,1
 10017a4:	28800115 	stw	r2,4(r5)
 10017a8:	b8c00117 	ldw	r3,4(r23)
 10017ac:	00804034 	movhi	r2,256
 10017b0:	109c6d04 	addi	r2,r2,29108
 10017b4:	11400215 	stw	r5,8(r2)
 10017b8:	18c0004c 	andi	r3,r3,1
 10017bc:	e0c6b03a 	or	r3,fp,r3
 10017c0:	b8c00115 	stw	r3,4(r23)
 10017c4:	10032ec0 	call	10032ec <__malloc_unlock>
 10017c8:	003eeb06 	br	1001378 <_realloc_r+0xd8>
 10017cc:	20800117 	ldw	r2,4(r4)
 10017d0:	00ffff04 	movi	r3,-4
 10017d4:	800f883a 	mov	r7,r16
 10017d8:	10c4703a 	and	r2,r2,r3
 10017dc:	98a9883a 	add	r20,r19,r2
 10017e0:	84000204 	addi	r16,r16,8
 10017e4:	003ecf06 	br	1001324 <_realloc_r+0x84>
 10017e8:	900b883a 	mov	r5,r18
 10017ec:	8009883a 	mov	r4,r16
 10017f0:	10011c00 	call	10011c0 <memmove>
 10017f4:	dd000017 	ldw	r20,0(sp)
 10017f8:	b80f883a 	mov	r7,r23
 10017fc:	003ec906 	br	1001324 <_realloc_r+0x84>
 1001800:	900b883a 	mov	r5,r18
 1001804:	8009883a 	mov	r4,r16
 1001808:	10011c00 	call	10011c0 <memmove>
 100180c:	b80f883a 	mov	r7,r23
 1001810:	003ec406 	br	1001324 <_realloc_r+0x84>
 1001814:	90c00417 	ldw	r3,16(r18)
 1001818:	89400604 	addi	r5,r17,24
 100181c:	91000604 	addi	r4,r18,24
 1001820:	88c00415 	stw	r3,16(r17)
 1001824:	90800517 	ldw	r2,20(r18)
 1001828:	88800515 	stw	r2,20(r17)
 100182c:	003f6806 	br	10015d0 <_realloc_r+0x330>
 1001830:	900b883a 	mov	r5,r18
 1001834:	8809883a 	mov	r4,r17
 1001838:	10011c00 	call	10011c0 <memmove>
 100183c:	003fd406 	br	1001790 <_realloc_r+0x4f0>
 1001840:	90c00417 	ldw	r3,16(r18)
 1001844:	91000604 	addi	r4,r18,24
 1001848:	ba000804 	addi	r8,r23,32
 100184c:	b8c00615 	stw	r3,24(r23)
 1001850:	90800517 	ldw	r2,20(r18)
 1001854:	b8800715 	stw	r2,28(r23)
 1001858:	003f1206 	br	10014a4 <_realloc_r+0x204>
 100185c:	90c00417 	ldw	r3,16(r18)
 1001860:	91000604 	addi	r4,r18,24
 1001864:	ba000804 	addi	r8,r23,32
 1001868:	b8c00615 	stw	r3,24(r23)
 100186c:	90800517 	ldw	r2,20(r18)
 1001870:	b8800715 	stw	r2,28(r23)
 1001874:	003f3206 	br	1001540 <_realloc_r+0x2a0>
 1001878:	90c00417 	ldw	r3,16(r18)
 100187c:	91000604 	addi	r4,r18,24
 1001880:	b9c00804 	addi	r7,r23,32
 1001884:	b8c00615 	stw	r3,24(r23)
 1001888:	90800517 	ldw	r2,20(r18)
 100188c:	b8800715 	stw	r2,28(r23)
 1001890:	003fb906 	br	1001778 <_realloc_r+0x4d8>

01001894 <_sbrk_r>:
 1001894:	defffd04 	addi	sp,sp,-12
 1001898:	dc000015 	stw	r16,0(sp)
 100189c:	04004074 	movhi	r16,257
 10018a0:	84298604 	addi	r16,r16,-23016
 10018a4:	dc400115 	stw	r17,4(sp)
 10018a8:	80000015 	stw	zero,0(r16)
 10018ac:	2023883a 	mov	r17,r4
 10018b0:	2809883a 	mov	r4,r5
 10018b4:	dfc00215 	stw	ra,8(sp)
 10018b8:	10034ec0 	call	10034ec <sbrk>
 10018bc:	1007883a 	mov	r3,r2
 10018c0:	00bfffc4 	movi	r2,-1
 10018c4:	18800626 	beq	r3,r2,10018e0 <_sbrk_r+0x4c>
 10018c8:	1805883a 	mov	r2,r3
 10018cc:	dfc00217 	ldw	ra,8(sp)
 10018d0:	dc400117 	ldw	r17,4(sp)
 10018d4:	dc000017 	ldw	r16,0(sp)
 10018d8:	dec00304 	addi	sp,sp,12
 10018dc:	f800283a 	ret
 10018e0:	80800017 	ldw	r2,0(r16)
 10018e4:	103ff826 	beq	r2,zero,10018c8 <_sbrk_r+0x34>
 10018e8:	88800015 	stw	r2,0(r17)
 10018ec:	1805883a 	mov	r2,r3
 10018f0:	dfc00217 	ldw	ra,8(sp)
 10018f4:	dc400117 	ldw	r17,4(sp)
 10018f8:	dc000017 	ldw	r16,0(sp)
 10018fc:	dec00304 	addi	sp,sp,12
 1001900:	f800283a 	ret

01001904 <__swsetup_r>:
 1001904:	00804074 	movhi	r2,257
 1001908:	10a26a04 	addi	r2,r2,-30296
 100190c:	10c00017 	ldw	r3,0(r2)
 1001910:	defffd04 	addi	sp,sp,-12
 1001914:	dc400115 	stw	r17,4(sp)
 1001918:	dc000015 	stw	r16,0(sp)
 100191c:	dfc00215 	stw	ra,8(sp)
 1001920:	2023883a 	mov	r17,r4
 1001924:	2821883a 	mov	r16,r5
 1001928:	18000226 	beq	r3,zero,1001934 <__swsetup_r+0x30>
 100192c:	18800e17 	ldw	r2,56(r3)
 1001930:	10001f26 	beq	r2,zero,10019b0 <__swsetup_r+0xac>
 1001934:	8100030b 	ldhu	r4,12(r16)
 1001938:	2080020c 	andi	r2,r4,8
 100193c:	10002826 	beq	r2,zero,10019e0 <__swsetup_r+0xdc>
 1001940:	81400417 	ldw	r5,16(r16)
 1001944:	28001d26 	beq	r5,zero,10019bc <__swsetup_r+0xb8>
 1001948:	2080004c 	andi	r2,r4,1
 100194c:	1005003a 	cmpeq	r2,r2,zero
 1001950:	10000b26 	beq	r2,zero,1001980 <__swsetup_r+0x7c>
 1001954:	2080008c 	andi	r2,r4,2
 1001958:	10001226 	beq	r2,zero,10019a4 <__swsetup_r+0xa0>
 100195c:	0005883a 	mov	r2,zero
 1001960:	80800215 	stw	r2,8(r16)
 1001964:	28000b26 	beq	r5,zero,1001994 <__swsetup_r+0x90>
 1001968:	0005883a 	mov	r2,zero
 100196c:	dfc00217 	ldw	ra,8(sp)
 1001970:	dc400117 	ldw	r17,4(sp)
 1001974:	dc000017 	ldw	r16,0(sp)
 1001978:	dec00304 	addi	sp,sp,12
 100197c:	f800283a 	ret
 1001980:	80800517 	ldw	r2,20(r16)
 1001984:	80000215 	stw	zero,8(r16)
 1001988:	0085c83a 	sub	r2,zero,r2
 100198c:	80800615 	stw	r2,24(r16)
 1001990:	283ff51e 	bne	r5,zero,1001968 <__swsetup_r+0x64>
 1001994:	2080200c 	andi	r2,r4,128
 1001998:	103ff326 	beq	r2,zero,1001968 <__swsetup_r+0x64>
 100199c:	00bfffc4 	movi	r2,-1
 10019a0:	003ff206 	br	100196c <__swsetup_r+0x68>
 10019a4:	80800517 	ldw	r2,20(r16)
 10019a8:	80800215 	stw	r2,8(r16)
 10019ac:	003fed06 	br	1001964 <__swsetup_r+0x60>
 10019b0:	1809883a 	mov	r4,r3
 10019b4:	1001cd80 	call	1001cd8 <__sinit>
 10019b8:	003fde06 	br	1001934 <__swsetup_r+0x30>
 10019bc:	20c0a00c 	andi	r3,r4,640
 10019c0:	00808004 	movi	r2,512
 10019c4:	18bfe026 	beq	r3,r2,1001948 <__swsetup_r+0x44>
 10019c8:	8809883a 	mov	r4,r17
 10019cc:	800b883a 	mov	r5,r16
 10019d0:	10024f00 	call	10024f0 <__smakebuf_r>
 10019d4:	8100030b 	ldhu	r4,12(r16)
 10019d8:	81400417 	ldw	r5,16(r16)
 10019dc:	003fda06 	br	1001948 <__swsetup_r+0x44>
 10019e0:	2080040c 	andi	r2,r4,16
 10019e4:	103fed26 	beq	r2,zero,100199c <__swsetup_r+0x98>
 10019e8:	2080010c 	andi	r2,r4,4
 10019ec:	10001226 	beq	r2,zero,1001a38 <__swsetup_r+0x134>
 10019f0:	81400c17 	ldw	r5,48(r16)
 10019f4:	28000526 	beq	r5,zero,1001a0c <__swsetup_r+0x108>
 10019f8:	80801004 	addi	r2,r16,64
 10019fc:	28800226 	beq	r5,r2,1001a08 <__swsetup_r+0x104>
 1001a00:	8809883a 	mov	r4,r17
 1001a04:	100205c0 	call	100205c <_free_r>
 1001a08:	80000c15 	stw	zero,48(r16)
 1001a0c:	8080030b 	ldhu	r2,12(r16)
 1001a10:	81400417 	ldw	r5,16(r16)
 1001a14:	80000115 	stw	zero,4(r16)
 1001a18:	10bff6cc 	andi	r2,r2,65499
 1001a1c:	8080030d 	sth	r2,12(r16)
 1001a20:	81400015 	stw	r5,0(r16)
 1001a24:	8080030b 	ldhu	r2,12(r16)
 1001a28:	10800214 	ori	r2,r2,8
 1001a2c:	113fffcc 	andi	r4,r2,65535
 1001a30:	8080030d 	sth	r2,12(r16)
 1001a34:	003fc306 	br	1001944 <__swsetup_r+0x40>
 1001a38:	81400417 	ldw	r5,16(r16)
 1001a3c:	003ff906 	br	1001a24 <__swsetup_r+0x120>

01001a40 <_fflush_r>:
 1001a40:	defffb04 	addi	sp,sp,-20
 1001a44:	dcc00315 	stw	r19,12(sp)
 1001a48:	dc800215 	stw	r18,8(sp)
 1001a4c:	dfc00415 	stw	ra,16(sp)
 1001a50:	dc400115 	stw	r17,4(sp)
 1001a54:	dc000015 	stw	r16,0(sp)
 1001a58:	2027883a 	mov	r19,r4
 1001a5c:	2825883a 	mov	r18,r5
 1001a60:	20000226 	beq	r4,zero,1001a6c <_fflush_r+0x2c>
 1001a64:	20800e17 	ldw	r2,56(r4)
 1001a68:	10005626 	beq	r2,zero,1001bc4 <_fflush_r+0x184>
 1001a6c:	9100030b 	ldhu	r4,12(r18)
 1001a70:	20ffffcc 	andi	r3,r4,65535
 1001a74:	18e0001c 	xori	r3,r3,32768
 1001a78:	18e00004 	addi	r3,r3,-32768
 1001a7c:	1880020c 	andi	r2,r3,8
 1001a80:	1000261e 	bne	r2,zero,1001b1c <_fflush_r+0xdc>
 1001a84:	90c00117 	ldw	r3,4(r18)
 1001a88:	20820014 	ori	r2,r4,2048
 1001a8c:	9080030d 	sth	r2,12(r18)
 1001a90:	1009883a 	mov	r4,r2
 1001a94:	00c0400e 	bge	zero,r3,1001b98 <_fflush_r+0x158>
 1001a98:	92000a17 	ldw	r8,40(r18)
 1001a9c:	40004026 	beq	r8,zero,1001ba0 <_fflush_r+0x160>
 1001aa0:	2084000c 	andi	r2,r4,4096
 1001aa4:	10005326 	beq	r2,zero,1001bf4 <_fflush_r+0x1b4>
 1001aa8:	94001417 	ldw	r16,80(r18)
 1001aac:	9080030b 	ldhu	r2,12(r18)
 1001ab0:	1080010c 	andi	r2,r2,4
 1001ab4:	1000481e 	bne	r2,zero,1001bd8 <_fflush_r+0x198>
 1001ab8:	91400717 	ldw	r5,28(r18)
 1001abc:	9809883a 	mov	r4,r19
 1001ac0:	800d883a 	mov	r6,r16
 1001ac4:	000f883a 	mov	r7,zero
 1001ac8:	403ee83a 	callr	r8
 1001acc:	8080261e 	bne	r16,r2,1001b68 <_fflush_r+0x128>
 1001ad0:	9080030b 	ldhu	r2,12(r18)
 1001ad4:	91000417 	ldw	r4,16(r18)
 1001ad8:	90000115 	stw	zero,4(r18)
 1001adc:	10bdffcc 	andi	r2,r2,63487
 1001ae0:	10ffffcc 	andi	r3,r2,65535
 1001ae4:	18c4000c 	andi	r3,r3,4096
 1001ae8:	9080030d 	sth	r2,12(r18)
 1001aec:	91000015 	stw	r4,0(r18)
 1001af0:	18002b26 	beq	r3,zero,1001ba0 <_fflush_r+0x160>
 1001af4:	0007883a 	mov	r3,zero
 1001af8:	1805883a 	mov	r2,r3
 1001afc:	94001415 	stw	r16,80(r18)
 1001b00:	dfc00417 	ldw	ra,16(sp)
 1001b04:	dcc00317 	ldw	r19,12(sp)
 1001b08:	dc800217 	ldw	r18,8(sp)
 1001b0c:	dc400117 	ldw	r17,4(sp)
 1001b10:	dc000017 	ldw	r16,0(sp)
 1001b14:	dec00504 	addi	sp,sp,20
 1001b18:	f800283a 	ret
 1001b1c:	94400417 	ldw	r17,16(r18)
 1001b20:	88001f26 	beq	r17,zero,1001ba0 <_fflush_r+0x160>
 1001b24:	90800017 	ldw	r2,0(r18)
 1001b28:	18c000cc 	andi	r3,r3,3
 1001b2c:	94400015 	stw	r17,0(r18)
 1001b30:	1461c83a 	sub	r16,r2,r17
 1001b34:	18002526 	beq	r3,zero,1001bcc <_fflush_r+0x18c>
 1001b38:	0005883a 	mov	r2,zero
 1001b3c:	90800215 	stw	r2,8(r18)
 1001b40:	0400170e 	bge	zero,r16,1001ba0 <_fflush_r+0x160>
 1001b44:	90c00917 	ldw	r3,36(r18)
 1001b48:	91400717 	ldw	r5,28(r18)
 1001b4c:	880d883a 	mov	r6,r17
 1001b50:	800f883a 	mov	r7,r16
 1001b54:	9809883a 	mov	r4,r19
 1001b58:	183ee83a 	callr	r3
 1001b5c:	88a3883a 	add	r17,r17,r2
 1001b60:	80a1c83a 	sub	r16,r16,r2
 1001b64:	00bff616 	blt	zero,r2,1001b40 <_fflush_r+0x100>
 1001b68:	9080030b 	ldhu	r2,12(r18)
 1001b6c:	00ffffc4 	movi	r3,-1
 1001b70:	10801014 	ori	r2,r2,64
 1001b74:	9080030d 	sth	r2,12(r18)
 1001b78:	1805883a 	mov	r2,r3
 1001b7c:	dfc00417 	ldw	ra,16(sp)
 1001b80:	dcc00317 	ldw	r19,12(sp)
 1001b84:	dc800217 	ldw	r18,8(sp)
 1001b88:	dc400117 	ldw	r17,4(sp)
 1001b8c:	dc000017 	ldw	r16,0(sp)
 1001b90:	dec00504 	addi	sp,sp,20
 1001b94:	f800283a 	ret
 1001b98:	90800f17 	ldw	r2,60(r18)
 1001b9c:	00bfbe16 	blt	zero,r2,1001a98 <_fflush_r+0x58>
 1001ba0:	0007883a 	mov	r3,zero
 1001ba4:	1805883a 	mov	r2,r3
 1001ba8:	dfc00417 	ldw	ra,16(sp)
 1001bac:	dcc00317 	ldw	r19,12(sp)
 1001bb0:	dc800217 	ldw	r18,8(sp)
 1001bb4:	dc400117 	ldw	r17,4(sp)
 1001bb8:	dc000017 	ldw	r16,0(sp)
 1001bbc:	dec00504 	addi	sp,sp,20
 1001bc0:	f800283a 	ret
 1001bc4:	1001cd80 	call	1001cd8 <__sinit>
 1001bc8:	003fa806 	br	1001a6c <_fflush_r+0x2c>
 1001bcc:	90800517 	ldw	r2,20(r18)
 1001bd0:	90800215 	stw	r2,8(r18)
 1001bd4:	003fda06 	br	1001b40 <_fflush_r+0x100>
 1001bd8:	90800117 	ldw	r2,4(r18)
 1001bdc:	90c00c17 	ldw	r3,48(r18)
 1001be0:	80a1c83a 	sub	r16,r16,r2
 1001be4:	183fb426 	beq	r3,zero,1001ab8 <_fflush_r+0x78>
 1001be8:	90800f17 	ldw	r2,60(r18)
 1001bec:	80a1c83a 	sub	r16,r16,r2
 1001bf0:	003fb106 	br	1001ab8 <_fflush_r+0x78>
 1001bf4:	91400717 	ldw	r5,28(r18)
 1001bf8:	9809883a 	mov	r4,r19
 1001bfc:	000d883a 	mov	r6,zero
 1001c00:	01c00044 	movi	r7,1
 1001c04:	403ee83a 	callr	r8
 1001c08:	1021883a 	mov	r16,r2
 1001c0c:	00bfffc4 	movi	r2,-1
 1001c10:	80800226 	beq	r16,r2,1001c1c <_fflush_r+0x1dc>
 1001c14:	92000a17 	ldw	r8,40(r18)
 1001c18:	003fa406 	br	1001aac <_fflush_r+0x6c>
 1001c1c:	98c00017 	ldw	r3,0(r19)
 1001c20:	00800744 	movi	r2,29
 1001c24:	18bfde26 	beq	r3,r2,1001ba0 <_fflush_r+0x160>
 1001c28:	9080030b 	ldhu	r2,12(r18)
 1001c2c:	8007883a 	mov	r3,r16
 1001c30:	10801014 	ori	r2,r2,64
 1001c34:	9080030d 	sth	r2,12(r18)
 1001c38:	003fcf06 	br	1001b78 <_fflush_r+0x138>

01001c3c <fflush>:
 1001c3c:	01404034 	movhi	r5,256
 1001c40:	29469004 	addi	r5,r5,6720
 1001c44:	2007883a 	mov	r3,r4
 1001c48:	20000526 	beq	r4,zero,1001c60 <fflush+0x24>
 1001c4c:	00804074 	movhi	r2,257
 1001c50:	10a26a04 	addi	r2,r2,-30296
 1001c54:	11000017 	ldw	r4,0(r2)
 1001c58:	180b883a 	mov	r5,r3
 1001c5c:	1001a401 	jmpi	1001a40 <_fflush_r>
 1001c60:	00804074 	movhi	r2,257
 1001c64:	10a26b04 	addi	r2,r2,-30292
 1001c68:	11000017 	ldw	r4,0(r2)
 1001c6c:	10023701 	jmpi	1002370 <_fwalk_reent>

01001c70 <std>:
 1001c70:	00804034 	movhi	r2,256
 1001c74:	1089c704 	addi	r2,r2,10012
 1001c78:	20800b15 	stw	r2,44(r4)
 1001c7c:	00804034 	movhi	r2,256
 1001c80:	108a0204 	addi	r2,r2,10248
 1001c84:	20800815 	stw	r2,32(r4)
 1001c88:	00c04034 	movhi	r3,256
 1001c8c:	18c9e304 	addi	r3,r3,10124
 1001c90:	00804034 	movhi	r2,256
 1001c94:	1089c904 	addi	r2,r2,10020
 1001c98:	2140030d 	sth	r5,12(r4)
 1001c9c:	2180038d 	sth	r6,14(r4)
 1001ca0:	20c00915 	stw	r3,36(r4)
 1001ca4:	20800a15 	stw	r2,40(r4)
 1001ca8:	20000015 	stw	zero,0(r4)
 1001cac:	20000115 	stw	zero,4(r4)
 1001cb0:	20000215 	stw	zero,8(r4)
 1001cb4:	20000415 	stw	zero,16(r4)
 1001cb8:	20000515 	stw	zero,20(r4)
 1001cbc:	20000615 	stw	zero,24(r4)
 1001cc0:	21000715 	stw	r4,28(r4)
 1001cc4:	f800283a 	ret

01001cc8 <__sfp_lock_acquire>:
 1001cc8:	f800283a 	ret

01001ccc <__sfp_lock_release>:
 1001ccc:	f800283a 	ret

01001cd0 <__sinit_lock_acquire>:
 1001cd0:	f800283a 	ret

01001cd4 <__sinit_lock_release>:
 1001cd4:	f800283a 	ret

01001cd8 <__sinit>:
 1001cd8:	20800e17 	ldw	r2,56(r4)
 1001cdc:	defffd04 	addi	sp,sp,-12
 1001ce0:	dc400115 	stw	r17,4(sp)
 1001ce4:	dc000015 	stw	r16,0(sp)
 1001ce8:	dfc00215 	stw	ra,8(sp)
 1001cec:	04400044 	movi	r17,1
 1001cf0:	01400104 	movi	r5,4
 1001cf4:	000d883a 	mov	r6,zero
 1001cf8:	2021883a 	mov	r16,r4
 1001cfc:	2200bb04 	addi	r8,r4,748
 1001d00:	200f883a 	mov	r7,r4
 1001d04:	10000526 	beq	r2,zero,1001d1c <__sinit+0x44>
 1001d08:	dfc00217 	ldw	ra,8(sp)
 1001d0c:	dc400117 	ldw	r17,4(sp)
 1001d10:	dc000017 	ldw	r16,0(sp)
 1001d14:	dec00304 	addi	sp,sp,12
 1001d18:	f800283a 	ret
 1001d1c:	21000117 	ldw	r4,4(r4)
 1001d20:	00804034 	movhi	r2,256
 1001d24:	10876f04 	addi	r2,r2,7612
 1001d28:	00c000c4 	movi	r3,3
 1001d2c:	80800f15 	stw	r2,60(r16)
 1001d30:	80c0b915 	stw	r3,740(r16)
 1001d34:	8200ba15 	stw	r8,744(r16)
 1001d38:	84400e15 	stw	r17,56(r16)
 1001d3c:	8000b815 	stw	zero,736(r16)
 1001d40:	1001c700 	call	1001c70 <std>
 1001d44:	81000217 	ldw	r4,8(r16)
 1001d48:	880d883a 	mov	r6,r17
 1001d4c:	800f883a 	mov	r7,r16
 1001d50:	01400284 	movi	r5,10
 1001d54:	1001c700 	call	1001c70 <std>
 1001d58:	81000317 	ldw	r4,12(r16)
 1001d5c:	800f883a 	mov	r7,r16
 1001d60:	01400484 	movi	r5,18
 1001d64:	01800084 	movi	r6,2
 1001d68:	dfc00217 	ldw	ra,8(sp)
 1001d6c:	dc400117 	ldw	r17,4(sp)
 1001d70:	dc000017 	ldw	r16,0(sp)
 1001d74:	dec00304 	addi	sp,sp,12
 1001d78:	1001c701 	jmpi	1001c70 <std>

01001d7c <__fp_lock>:
 1001d7c:	0005883a 	mov	r2,zero
 1001d80:	f800283a 	ret

01001d84 <__fp_unlock>:
 1001d84:	0005883a 	mov	r2,zero
 1001d88:	f800283a 	ret

01001d8c <__fp_unlock_all>:
 1001d8c:	00804074 	movhi	r2,257
 1001d90:	10a26a04 	addi	r2,r2,-30296
 1001d94:	11000017 	ldw	r4,0(r2)
 1001d98:	01404034 	movhi	r5,256
 1001d9c:	29476104 	addi	r5,r5,7556
 1001da0:	10024381 	jmpi	1002438 <_fwalk>

01001da4 <__fp_lock_all>:
 1001da4:	00804074 	movhi	r2,257
 1001da8:	10a26a04 	addi	r2,r2,-30296
 1001dac:	11000017 	ldw	r4,0(r2)
 1001db0:	01404034 	movhi	r5,256
 1001db4:	29475f04 	addi	r5,r5,7548
 1001db8:	10024381 	jmpi	1002438 <_fwalk>

01001dbc <_cleanup_r>:
 1001dbc:	01404034 	movhi	r5,256
 1001dc0:	294a9804 	addi	r5,r5,10848
 1001dc4:	10024381 	jmpi	1002438 <_fwalk>

01001dc8 <_cleanup>:
 1001dc8:	00804074 	movhi	r2,257
 1001dcc:	10a26b04 	addi	r2,r2,-30292
 1001dd0:	11000017 	ldw	r4,0(r2)
 1001dd4:	1001dbc1 	jmpi	1001dbc <_cleanup_r>

01001dd8 <__sfmoreglue>:
 1001dd8:	defffc04 	addi	sp,sp,-16
 1001ddc:	dc400115 	stw	r17,4(sp)
 1001de0:	2c401724 	muli	r17,r5,92
 1001de4:	dc800215 	stw	r18,8(sp)
 1001de8:	2825883a 	mov	r18,r5
 1001dec:	89400304 	addi	r5,r17,12
 1001df0:	dc000015 	stw	r16,0(sp)
 1001df4:	dfc00315 	stw	ra,12(sp)
 1001df8:	10008fc0 	call	10008fc <_malloc_r>
 1001dfc:	0021883a 	mov	r16,zero
 1001e00:	880d883a 	mov	r6,r17
 1001e04:	000b883a 	mov	r5,zero
 1001e08:	10000626 	beq	r2,zero,1001e24 <__sfmoreglue+0x4c>
 1001e0c:	11000304 	addi	r4,r2,12
 1001e10:	14800115 	stw	r18,4(r2)
 1001e14:	10000015 	stw	zero,0(r2)
 1001e18:	11000215 	stw	r4,8(r2)
 1001e1c:	1021883a 	mov	r16,r2
 1001e20:	10026840 	call	1002684 <memset>
 1001e24:	8005883a 	mov	r2,r16
 1001e28:	dfc00317 	ldw	ra,12(sp)
 1001e2c:	dc800217 	ldw	r18,8(sp)
 1001e30:	dc400117 	ldw	r17,4(sp)
 1001e34:	dc000017 	ldw	r16,0(sp)
 1001e38:	dec00404 	addi	sp,sp,16
 1001e3c:	f800283a 	ret

01001e40 <__sfp>:
 1001e40:	defffd04 	addi	sp,sp,-12
 1001e44:	00804074 	movhi	r2,257
 1001e48:	10a26b04 	addi	r2,r2,-30292
 1001e4c:	dc000015 	stw	r16,0(sp)
 1001e50:	14000017 	ldw	r16,0(r2)
 1001e54:	dc400115 	stw	r17,4(sp)
 1001e58:	dfc00215 	stw	ra,8(sp)
 1001e5c:	80800e17 	ldw	r2,56(r16)
 1001e60:	2023883a 	mov	r17,r4
 1001e64:	10002626 	beq	r2,zero,1001f00 <__sfp+0xc0>
 1001e68:	8400b804 	addi	r16,r16,736
 1001e6c:	80800117 	ldw	r2,4(r16)
 1001e70:	81000217 	ldw	r4,8(r16)
 1001e74:	10ffffc4 	addi	r3,r2,-1
 1001e78:	18000916 	blt	r3,zero,1001ea0 <__sfp+0x60>
 1001e7c:	2080030f 	ldh	r2,12(r4)
 1001e80:	10000b26 	beq	r2,zero,1001eb0 <__sfp+0x70>
 1001e84:	017fffc4 	movi	r5,-1
 1001e88:	00000206 	br	1001e94 <__sfp+0x54>
 1001e8c:	2080030f 	ldh	r2,12(r4)
 1001e90:	10000726 	beq	r2,zero,1001eb0 <__sfp+0x70>
 1001e94:	18ffffc4 	addi	r3,r3,-1
 1001e98:	21001704 	addi	r4,r4,92
 1001e9c:	197ffb1e 	bne	r3,r5,1001e8c <__sfp+0x4c>
 1001ea0:	80800017 	ldw	r2,0(r16)
 1001ea4:	10001926 	beq	r2,zero,1001f0c <__sfp+0xcc>
 1001ea8:	1021883a 	mov	r16,r2
 1001eac:	003fef06 	br	1001e6c <__sfp+0x2c>
 1001eb0:	00bfffc4 	movi	r2,-1
 1001eb4:	00c00044 	movi	r3,1
 1001eb8:	2080038d 	sth	r2,14(r4)
 1001ebc:	20c0030d 	sth	r3,12(r4)
 1001ec0:	20000015 	stw	zero,0(r4)
 1001ec4:	20000215 	stw	zero,8(r4)
 1001ec8:	20000115 	stw	zero,4(r4)
 1001ecc:	20000415 	stw	zero,16(r4)
 1001ed0:	20000515 	stw	zero,20(r4)
 1001ed4:	20000615 	stw	zero,24(r4)
 1001ed8:	20000c15 	stw	zero,48(r4)
 1001edc:	20000d15 	stw	zero,52(r4)
 1001ee0:	20001115 	stw	zero,68(r4)
 1001ee4:	20001215 	stw	zero,72(r4)
 1001ee8:	2005883a 	mov	r2,r4
 1001eec:	dfc00217 	ldw	ra,8(sp)
 1001ef0:	dc400117 	ldw	r17,4(sp)
 1001ef4:	dc000017 	ldw	r16,0(sp)
 1001ef8:	dec00304 	addi	sp,sp,12
 1001efc:	f800283a 	ret
 1001f00:	8009883a 	mov	r4,r16
 1001f04:	1001cd80 	call	1001cd8 <__sinit>
 1001f08:	003fd706 	br	1001e68 <__sfp+0x28>
 1001f0c:	8809883a 	mov	r4,r17
 1001f10:	01400104 	movi	r5,4
 1001f14:	1001dd80 	call	1001dd8 <__sfmoreglue>
 1001f18:	80800015 	stw	r2,0(r16)
 1001f1c:	103fe21e 	bne	r2,zero,1001ea8 <__sfp+0x68>
 1001f20:	00800304 	movi	r2,12
 1001f24:	0009883a 	mov	r4,zero
 1001f28:	88800015 	stw	r2,0(r17)
 1001f2c:	003fee06 	br	1001ee8 <__sfp+0xa8>

01001f30 <_malloc_trim_r>:
 1001f30:	defffb04 	addi	sp,sp,-20
 1001f34:	dcc00315 	stw	r19,12(sp)
 1001f38:	04c04034 	movhi	r19,256
 1001f3c:	9cdc6d04 	addi	r19,r19,29108
 1001f40:	dc800215 	stw	r18,8(sp)
 1001f44:	dc400115 	stw	r17,4(sp)
 1001f48:	dc000015 	stw	r16,0(sp)
 1001f4c:	2823883a 	mov	r17,r5
 1001f50:	2025883a 	mov	r18,r4
 1001f54:	dfc00415 	stw	ra,16(sp)
 1001f58:	10032cc0 	call	10032cc <__malloc_lock>
 1001f5c:	98800217 	ldw	r2,8(r19)
 1001f60:	9009883a 	mov	r4,r18
 1001f64:	000b883a 	mov	r5,zero
 1001f68:	10c00117 	ldw	r3,4(r2)
 1001f6c:	00bfff04 	movi	r2,-4
 1001f70:	18a0703a 	and	r16,r3,r2
 1001f74:	8463c83a 	sub	r17,r16,r17
 1001f78:	8c43fbc4 	addi	r17,r17,4079
 1001f7c:	8822d33a 	srli	r17,r17,12
 1001f80:	0083ffc4 	movi	r2,4095
 1001f84:	8c7fffc4 	addi	r17,r17,-1
 1001f88:	8822933a 	slli	r17,r17,12
 1001f8c:	1440060e 	bge	r2,r17,1001fa8 <_malloc_trim_r+0x78>
 1001f90:	10018940 	call	1001894 <_sbrk_r>
 1001f94:	98c00217 	ldw	r3,8(r19)
 1001f98:	9009883a 	mov	r4,r18
 1001f9c:	044bc83a 	sub	r5,zero,r17
 1001fa0:	80c7883a 	add	r3,r16,r3
 1001fa4:	10c00926 	beq	r2,r3,1001fcc <_malloc_trim_r+0x9c>
 1001fa8:	10032ec0 	call	10032ec <__malloc_unlock>
 1001fac:	0005883a 	mov	r2,zero
 1001fb0:	dfc00417 	ldw	ra,16(sp)
 1001fb4:	dcc00317 	ldw	r19,12(sp)
 1001fb8:	dc800217 	ldw	r18,8(sp)
 1001fbc:	dc400117 	ldw	r17,4(sp)
 1001fc0:	dc000017 	ldw	r16,0(sp)
 1001fc4:	dec00504 	addi	sp,sp,20
 1001fc8:	f800283a 	ret
 1001fcc:	9009883a 	mov	r4,r18
 1001fd0:	10018940 	call	1001894 <_sbrk_r>
 1001fd4:	844dc83a 	sub	r6,r16,r17
 1001fd8:	00ffffc4 	movi	r3,-1
 1001fdc:	9009883a 	mov	r4,r18
 1001fe0:	000b883a 	mov	r5,zero
 1001fe4:	01c04074 	movhi	r7,257
 1001fe8:	39e98d04 	addi	r7,r7,-22988
 1001fec:	31800054 	ori	r6,r6,1
 1001ff0:	10c00926 	beq	r2,r3,1002018 <_malloc_trim_r+0xe8>
 1001ff4:	38800017 	ldw	r2,0(r7)
 1001ff8:	98c00217 	ldw	r3,8(r19)
 1001ffc:	9009883a 	mov	r4,r18
 1002000:	1445c83a 	sub	r2,r2,r17
 1002004:	38800015 	stw	r2,0(r7)
 1002008:	19800115 	stw	r6,4(r3)
 100200c:	10032ec0 	call	10032ec <__malloc_unlock>
 1002010:	00800044 	movi	r2,1
 1002014:	003fe606 	br	1001fb0 <_malloc_trim_r+0x80>
 1002018:	10018940 	call	1001894 <_sbrk_r>
 100201c:	99800217 	ldw	r6,8(r19)
 1002020:	100f883a 	mov	r7,r2
 1002024:	9009883a 	mov	r4,r18
 1002028:	1187c83a 	sub	r3,r2,r6
 100202c:	008003c4 	movi	r2,15
 1002030:	19400054 	ori	r5,r3,1
 1002034:	10ffdc0e 	bge	r2,r3,1001fa8 <_malloc_trim_r+0x78>
 1002038:	00804074 	movhi	r2,257
 100203c:	10a26d04 	addi	r2,r2,-30284
 1002040:	10c00017 	ldw	r3,0(r2)
 1002044:	00804074 	movhi	r2,257
 1002048:	10a98d04 	addi	r2,r2,-22988
 100204c:	31400115 	stw	r5,4(r6)
 1002050:	38c7c83a 	sub	r3,r7,r3
 1002054:	10c00015 	stw	r3,0(r2)
 1002058:	003fd306 	br	1001fa8 <_malloc_trim_r+0x78>

0100205c <_free_r>:
 100205c:	defffd04 	addi	sp,sp,-12
 1002060:	dc400115 	stw	r17,4(sp)
 1002064:	dc000015 	stw	r16,0(sp)
 1002068:	dfc00215 	stw	ra,8(sp)
 100206c:	2821883a 	mov	r16,r5
 1002070:	2023883a 	mov	r17,r4
 1002074:	28005a26 	beq	r5,zero,10021e0 <_free_r+0x184>
 1002078:	10032cc0 	call	10032cc <__malloc_lock>
 100207c:	823ffe04 	addi	r8,r16,-8
 1002080:	41400117 	ldw	r5,4(r8)
 1002084:	00bfff84 	movi	r2,-2
 1002088:	02804034 	movhi	r10,256
 100208c:	529c6d04 	addi	r10,r10,29108
 1002090:	288e703a 	and	r7,r5,r2
 1002094:	41cd883a 	add	r6,r8,r7
 1002098:	30c00117 	ldw	r3,4(r6)
 100209c:	51000217 	ldw	r4,8(r10)
 10020a0:	00bfff04 	movi	r2,-4
 10020a4:	1892703a 	and	r9,r3,r2
 10020a8:	5017883a 	mov	r11,r10
 10020ac:	31006726 	beq	r6,r4,100224c <_free_r+0x1f0>
 10020b0:	2880004c 	andi	r2,r5,1
 10020b4:	1005003a 	cmpeq	r2,r2,zero
 10020b8:	32400115 	stw	r9,4(r6)
 10020bc:	10001a1e 	bne	r2,zero,1002128 <_free_r+0xcc>
 10020c0:	000b883a 	mov	r5,zero
 10020c4:	3247883a 	add	r3,r6,r9
 10020c8:	18800117 	ldw	r2,4(r3)
 10020cc:	1080004c 	andi	r2,r2,1
 10020d0:	1000231e 	bne	r2,zero,1002160 <_free_r+0x104>
 10020d4:	280ac03a 	cmpne	r5,r5,zero
 10020d8:	3a4f883a 	add	r7,r7,r9
 10020dc:	2800451e 	bne	r5,zero,10021f4 <_free_r+0x198>
 10020e0:	31000217 	ldw	r4,8(r6)
 10020e4:	00804034 	movhi	r2,256
 10020e8:	109c6f04 	addi	r2,r2,29116
 10020ec:	20807b26 	beq	r4,r2,10022dc <_free_r+0x280>
 10020f0:	30800317 	ldw	r2,12(r6)
 10020f4:	3a07883a 	add	r3,r7,r8
 10020f8:	19c00015 	stw	r7,0(r3)
 10020fc:	11000215 	stw	r4,8(r2)
 1002100:	20800315 	stw	r2,12(r4)
 1002104:	38800054 	ori	r2,r7,1
 1002108:	40800115 	stw	r2,4(r8)
 100210c:	28001a26 	beq	r5,zero,1002178 <_free_r+0x11c>
 1002110:	8809883a 	mov	r4,r17
 1002114:	dfc00217 	ldw	ra,8(sp)
 1002118:	dc400117 	ldw	r17,4(sp)
 100211c:	dc000017 	ldw	r16,0(sp)
 1002120:	dec00304 	addi	sp,sp,12
 1002124:	10032ec1 	jmpi	10032ec <__malloc_unlock>
 1002128:	80bffe17 	ldw	r2,-8(r16)
 100212c:	50c00204 	addi	r3,r10,8
 1002130:	4091c83a 	sub	r8,r8,r2
 1002134:	41000217 	ldw	r4,8(r8)
 1002138:	388f883a 	add	r7,r7,r2
 100213c:	20c06126 	beq	r4,r3,10022c4 <_free_r+0x268>
 1002140:	40800317 	ldw	r2,12(r8)
 1002144:	3247883a 	add	r3,r6,r9
 1002148:	000b883a 	mov	r5,zero
 100214c:	11000215 	stw	r4,8(r2)
 1002150:	20800315 	stw	r2,12(r4)
 1002154:	18800117 	ldw	r2,4(r3)
 1002158:	1080004c 	andi	r2,r2,1
 100215c:	103fdd26 	beq	r2,zero,10020d4 <_free_r+0x78>
 1002160:	38800054 	ori	r2,r7,1
 1002164:	3a07883a 	add	r3,r7,r8
 1002168:	280ac03a 	cmpne	r5,r5,zero
 100216c:	40800115 	stw	r2,4(r8)
 1002170:	19c00015 	stw	r7,0(r3)
 1002174:	283fe61e 	bne	r5,zero,1002110 <_free_r+0xb4>
 1002178:	00807fc4 	movi	r2,511
 100217c:	11c01f2e 	bgeu	r2,r7,10021fc <_free_r+0x1a0>
 1002180:	3806d27a 	srli	r3,r7,9
 1002184:	1800481e 	bne	r3,zero,10022a8 <_free_r+0x24c>
 1002188:	3804d0fa 	srli	r2,r7,3
 100218c:	100690fa 	slli	r3,r2,3
 1002190:	1acd883a 	add	r6,r3,r11
 1002194:	31400217 	ldw	r5,8(r6)
 1002198:	31405926 	beq	r6,r5,1002300 <_free_r+0x2a4>
 100219c:	28800117 	ldw	r2,4(r5)
 10021a0:	00ffff04 	movi	r3,-4
 10021a4:	10c4703a 	and	r2,r2,r3
 10021a8:	3880022e 	bgeu	r7,r2,10021b4 <_free_r+0x158>
 10021ac:	29400217 	ldw	r5,8(r5)
 10021b0:	317ffa1e 	bne	r6,r5,100219c <_free_r+0x140>
 10021b4:	29800317 	ldw	r6,12(r5)
 10021b8:	41800315 	stw	r6,12(r8)
 10021bc:	41400215 	stw	r5,8(r8)
 10021c0:	8809883a 	mov	r4,r17
 10021c4:	2a000315 	stw	r8,12(r5)
 10021c8:	32000215 	stw	r8,8(r6)
 10021cc:	dfc00217 	ldw	ra,8(sp)
 10021d0:	dc400117 	ldw	r17,4(sp)
 10021d4:	dc000017 	ldw	r16,0(sp)
 10021d8:	dec00304 	addi	sp,sp,12
 10021dc:	10032ec1 	jmpi	10032ec <__malloc_unlock>
 10021e0:	dfc00217 	ldw	ra,8(sp)
 10021e4:	dc400117 	ldw	r17,4(sp)
 10021e8:	dc000017 	ldw	r16,0(sp)
 10021ec:	dec00304 	addi	sp,sp,12
 10021f0:	f800283a 	ret
 10021f4:	31000217 	ldw	r4,8(r6)
 10021f8:	003fbd06 	br	10020f0 <_free_r+0x94>
 10021fc:	3806d0fa 	srli	r3,r7,3
 1002200:	00800044 	movi	r2,1
 1002204:	51400117 	ldw	r5,4(r10)
 1002208:	180890fa 	slli	r4,r3,3
 100220c:	1807d0ba 	srai	r3,r3,2
 1002210:	22c9883a 	add	r4,r4,r11
 1002214:	21800217 	ldw	r6,8(r4)
 1002218:	10c4983a 	sll	r2,r2,r3
 100221c:	41000315 	stw	r4,12(r8)
 1002220:	41800215 	stw	r6,8(r8)
 1002224:	288ab03a 	or	r5,r5,r2
 1002228:	22000215 	stw	r8,8(r4)
 100222c:	8809883a 	mov	r4,r17
 1002230:	51400115 	stw	r5,4(r10)
 1002234:	32000315 	stw	r8,12(r6)
 1002238:	dfc00217 	ldw	ra,8(sp)
 100223c:	dc400117 	ldw	r17,4(sp)
 1002240:	dc000017 	ldw	r16,0(sp)
 1002244:	dec00304 	addi	sp,sp,12
 1002248:	10032ec1 	jmpi	10032ec <__malloc_unlock>
 100224c:	2880004c 	andi	r2,r5,1
 1002250:	3a4d883a 	add	r6,r7,r9
 1002254:	1000071e 	bne	r2,zero,1002274 <_free_r+0x218>
 1002258:	80bffe17 	ldw	r2,-8(r16)
 100225c:	4091c83a 	sub	r8,r8,r2
 1002260:	41000317 	ldw	r4,12(r8)
 1002264:	40c00217 	ldw	r3,8(r8)
 1002268:	308d883a 	add	r6,r6,r2
 100226c:	20c00215 	stw	r3,8(r4)
 1002270:	19000315 	stw	r4,12(r3)
 1002274:	00804074 	movhi	r2,257
 1002278:	10a26c04 	addi	r2,r2,-30288
 100227c:	11000017 	ldw	r4,0(r2)
 1002280:	30c00054 	ori	r3,r6,1
 1002284:	52000215 	stw	r8,8(r10)
 1002288:	40c00115 	stw	r3,4(r8)
 100228c:	313fa036 	bltu	r6,r4,1002110 <_free_r+0xb4>
 1002290:	00804074 	movhi	r2,257
 1002294:	10a98304 	addi	r2,r2,-23028
 1002298:	11400017 	ldw	r5,0(r2)
 100229c:	8809883a 	mov	r4,r17
 10022a0:	1001f300 	call	1001f30 <_malloc_trim_r>
 10022a4:	003f9a06 	br	1002110 <_free_r+0xb4>
 10022a8:	00800104 	movi	r2,4
 10022ac:	10c0072e 	bgeu	r2,r3,10022cc <_free_r+0x270>
 10022b0:	00800504 	movi	r2,20
 10022b4:	10c01936 	bltu	r2,r3,100231c <_free_r+0x2c0>
 10022b8:	188016c4 	addi	r2,r3,91
 10022bc:	100690fa 	slli	r3,r2,3
 10022c0:	003fb306 	br	1002190 <_free_r+0x134>
 10022c4:	01400044 	movi	r5,1
 10022c8:	003f7e06 	br	10020c4 <_free_r+0x68>
 10022cc:	3804d1ba 	srli	r2,r7,6
 10022d0:	10800e04 	addi	r2,r2,56
 10022d4:	100690fa 	slli	r3,r2,3
 10022d8:	003fad06 	br	1002190 <_free_r+0x134>
 10022dc:	22000315 	stw	r8,12(r4)
 10022e0:	22000215 	stw	r8,8(r4)
 10022e4:	3a05883a 	add	r2,r7,r8
 10022e8:	38c00054 	ori	r3,r7,1
 10022ec:	11c00015 	stw	r7,0(r2)
 10022f0:	41000215 	stw	r4,8(r8)
 10022f4:	40c00115 	stw	r3,4(r8)
 10022f8:	41000315 	stw	r4,12(r8)
 10022fc:	003f8406 	br	1002110 <_free_r+0xb4>
 1002300:	1005d0ba 	srai	r2,r2,2
 1002304:	00c00044 	movi	r3,1
 1002308:	51000117 	ldw	r4,4(r10)
 100230c:	1886983a 	sll	r3,r3,r2
 1002310:	20c8b03a 	or	r4,r4,r3
 1002314:	51000115 	stw	r4,4(r10)
 1002318:	003fa706 	br	10021b8 <_free_r+0x15c>
 100231c:	00801504 	movi	r2,84
 1002320:	10c00436 	bltu	r2,r3,1002334 <_free_r+0x2d8>
 1002324:	3804d33a 	srli	r2,r7,12
 1002328:	10801b84 	addi	r2,r2,110
 100232c:	100690fa 	slli	r3,r2,3
 1002330:	003f9706 	br	1002190 <_free_r+0x134>
 1002334:	00805504 	movi	r2,340
 1002338:	10c00436 	bltu	r2,r3,100234c <_free_r+0x2f0>
 100233c:	3804d3fa 	srli	r2,r7,15
 1002340:	10801dc4 	addi	r2,r2,119
 1002344:	100690fa 	slli	r3,r2,3
 1002348:	003f9106 	br	1002190 <_free_r+0x134>
 100234c:	00815504 	movi	r2,1364
 1002350:	10c0032e 	bgeu	r2,r3,1002360 <_free_r+0x304>
 1002354:	00801f84 	movi	r2,126
 1002358:	00c0fc04 	movi	r3,1008
 100235c:	003f8c06 	br	1002190 <_free_r+0x134>
 1002360:	3804d4ba 	srli	r2,r7,18
 1002364:	10801f04 	addi	r2,r2,124
 1002368:	100690fa 	slli	r3,r2,3
 100236c:	003f8806 	br	1002190 <_free_r+0x134>

01002370 <_fwalk_reent>:
 1002370:	defff704 	addi	sp,sp,-36
 1002374:	dcc00315 	stw	r19,12(sp)
 1002378:	24c0b804 	addi	r19,r4,736
 100237c:	dd800615 	stw	r22,24(sp)
 1002380:	dd400515 	stw	r21,20(sp)
 1002384:	dfc00815 	stw	ra,32(sp)
 1002388:	ddc00715 	stw	r23,28(sp)
 100238c:	dd000415 	stw	r20,16(sp)
 1002390:	dc800215 	stw	r18,8(sp)
 1002394:	dc400115 	stw	r17,4(sp)
 1002398:	dc000015 	stw	r16,0(sp)
 100239c:	202b883a 	mov	r21,r4
 10023a0:	282d883a 	mov	r22,r5
 10023a4:	1001cc80 	call	1001cc8 <__sfp_lock_acquire>
 10023a8:	98002126 	beq	r19,zero,1002430 <_fwalk_reent+0xc0>
 10023ac:	002f883a 	mov	r23,zero
 10023b0:	9c800117 	ldw	r18,4(r19)
 10023b4:	9c000217 	ldw	r16,8(r19)
 10023b8:	90bfffc4 	addi	r2,r18,-1
 10023bc:	10000d16 	blt	r2,zero,10023f4 <_fwalk_reent+0x84>
 10023c0:	0023883a 	mov	r17,zero
 10023c4:	053fffc4 	movi	r20,-1
 10023c8:	8080030f 	ldh	r2,12(r16)
 10023cc:	8c400044 	addi	r17,r17,1
 10023d0:	10000626 	beq	r2,zero,10023ec <_fwalk_reent+0x7c>
 10023d4:	8080038f 	ldh	r2,14(r16)
 10023d8:	800b883a 	mov	r5,r16
 10023dc:	a809883a 	mov	r4,r21
 10023e0:	15000226 	beq	r2,r20,10023ec <_fwalk_reent+0x7c>
 10023e4:	b03ee83a 	callr	r22
 10023e8:	b8aeb03a 	or	r23,r23,r2
 10023ec:	84001704 	addi	r16,r16,92
 10023f0:	947ff51e 	bne	r18,r17,10023c8 <_fwalk_reent+0x58>
 10023f4:	9cc00017 	ldw	r19,0(r19)
 10023f8:	983fed1e 	bne	r19,zero,10023b0 <_fwalk_reent+0x40>
 10023fc:	1001ccc0 	call	1001ccc <__sfp_lock_release>
 1002400:	b805883a 	mov	r2,r23
 1002404:	dfc00817 	ldw	ra,32(sp)
 1002408:	ddc00717 	ldw	r23,28(sp)
 100240c:	dd800617 	ldw	r22,24(sp)
 1002410:	dd400517 	ldw	r21,20(sp)
 1002414:	dd000417 	ldw	r20,16(sp)
 1002418:	dcc00317 	ldw	r19,12(sp)
 100241c:	dc800217 	ldw	r18,8(sp)
 1002420:	dc400117 	ldw	r17,4(sp)
 1002424:	dc000017 	ldw	r16,0(sp)
 1002428:	dec00904 	addi	sp,sp,36
 100242c:	f800283a 	ret
 1002430:	002f883a 	mov	r23,zero
 1002434:	003ff106 	br	10023fc <_fwalk_reent+0x8c>

01002438 <_fwalk>:
 1002438:	defff804 	addi	sp,sp,-32
 100243c:	dcc00315 	stw	r19,12(sp)
 1002440:	24c0b804 	addi	r19,r4,736
 1002444:	dd400515 	stw	r21,20(sp)
 1002448:	dfc00715 	stw	ra,28(sp)
 100244c:	dd800615 	stw	r22,24(sp)
 1002450:	dd000415 	stw	r20,16(sp)
 1002454:	dc800215 	stw	r18,8(sp)
 1002458:	dc400115 	stw	r17,4(sp)
 100245c:	dc000015 	stw	r16,0(sp)
 1002460:	282b883a 	mov	r21,r5
 1002464:	1001cc80 	call	1001cc8 <__sfp_lock_acquire>
 1002468:	98001f26 	beq	r19,zero,10024e8 <_fwalk+0xb0>
 100246c:	002d883a 	mov	r22,zero
 1002470:	9c800117 	ldw	r18,4(r19)
 1002474:	9c000217 	ldw	r16,8(r19)
 1002478:	90bfffc4 	addi	r2,r18,-1
 100247c:	10000c16 	blt	r2,zero,10024b0 <_fwalk+0x78>
 1002480:	0023883a 	mov	r17,zero
 1002484:	053fffc4 	movi	r20,-1
 1002488:	8080030f 	ldh	r2,12(r16)
 100248c:	8c400044 	addi	r17,r17,1
 1002490:	10000526 	beq	r2,zero,10024a8 <_fwalk+0x70>
 1002494:	8080038f 	ldh	r2,14(r16)
 1002498:	8009883a 	mov	r4,r16
 100249c:	15000226 	beq	r2,r20,10024a8 <_fwalk+0x70>
 10024a0:	a83ee83a 	callr	r21
 10024a4:	b0acb03a 	or	r22,r22,r2
 10024a8:	84001704 	addi	r16,r16,92
 10024ac:	947ff61e 	bne	r18,r17,1002488 <_fwalk+0x50>
 10024b0:	9cc00017 	ldw	r19,0(r19)
 10024b4:	983fee1e 	bne	r19,zero,1002470 <_fwalk+0x38>
 10024b8:	1001ccc0 	call	1001ccc <__sfp_lock_release>
 10024bc:	b005883a 	mov	r2,r22
 10024c0:	dfc00717 	ldw	ra,28(sp)
 10024c4:	dd800617 	ldw	r22,24(sp)
 10024c8:	dd400517 	ldw	r21,20(sp)
 10024cc:	dd000417 	ldw	r20,16(sp)
 10024d0:	dcc00317 	ldw	r19,12(sp)
 10024d4:	dc800217 	ldw	r18,8(sp)
 10024d8:	dc400117 	ldw	r17,4(sp)
 10024dc:	dc000017 	ldw	r16,0(sp)
 10024e0:	dec00804 	addi	sp,sp,32
 10024e4:	f800283a 	ret
 10024e8:	002d883a 	mov	r22,zero
 10024ec:	003ff206 	br	10024b8 <_fwalk+0x80>

010024f0 <__smakebuf_r>:
 10024f0:	2880030b 	ldhu	r2,12(r5)
 10024f4:	deffed04 	addi	sp,sp,-76
 10024f8:	dc401015 	stw	r17,64(sp)
 10024fc:	1080008c 	andi	r2,r2,2
 1002500:	dc000f15 	stw	r16,60(sp)
 1002504:	dfc01215 	stw	ra,72(sp)
 1002508:	dc801115 	stw	r18,68(sp)
 100250c:	2821883a 	mov	r16,r5
 1002510:	2023883a 	mov	r17,r4
 1002514:	10000b26 	beq	r2,zero,1002544 <__smakebuf_r+0x54>
 1002518:	28c010c4 	addi	r3,r5,67
 100251c:	00800044 	movi	r2,1
 1002520:	28800515 	stw	r2,20(r5)
 1002524:	28c00415 	stw	r3,16(r5)
 1002528:	28c00015 	stw	r3,0(r5)
 100252c:	dfc01217 	ldw	ra,72(sp)
 1002530:	dc801117 	ldw	r18,68(sp)
 1002534:	dc401017 	ldw	r17,64(sp)
 1002538:	dc000f17 	ldw	r16,60(sp)
 100253c:	dec01304 	addi	sp,sp,76
 1002540:	f800283a 	ret
 1002544:	2940038f 	ldh	r5,14(r5)
 1002548:	28002116 	blt	r5,zero,10025d0 <__smakebuf_r+0xe0>
 100254c:	d80d883a 	mov	r6,sp
 1002550:	1002a740 	call	1002a74 <_fstat_r>
 1002554:	10001e16 	blt	r2,zero,10025d0 <__smakebuf_r+0xe0>
 1002558:	d8800117 	ldw	r2,4(sp)
 100255c:	00e00014 	movui	r3,32768
 1002560:	113c000c 	andi	r4,r2,61440
 1002564:	20c03126 	beq	r4,r3,100262c <__smakebuf_r+0x13c>
 1002568:	8080030b 	ldhu	r2,12(r16)
 100256c:	00c80004 	movi	r3,8192
 1002570:	10820014 	ori	r2,r2,2048
 1002574:	8080030d 	sth	r2,12(r16)
 1002578:	20c01e26 	beq	r4,r3,10025f4 <__smakebuf_r+0x104>
 100257c:	04810004 	movi	r18,1024
 1002580:	8809883a 	mov	r4,r17
 1002584:	900b883a 	mov	r5,r18
 1002588:	10008fc0 	call	10008fc <_malloc_r>
 100258c:	1009883a 	mov	r4,r2
 1002590:	10003126 	beq	r2,zero,1002658 <__smakebuf_r+0x168>
 1002594:	80c0030b 	ldhu	r3,12(r16)
 1002598:	00804034 	movhi	r2,256
 100259c:	10876f04 	addi	r2,r2,7612
 10025a0:	88800f15 	stw	r2,60(r17)
 10025a4:	18c02014 	ori	r3,r3,128
 10025a8:	84800515 	stw	r18,20(r16)
 10025ac:	80c0030d 	sth	r3,12(r16)
 10025b0:	81000415 	stw	r4,16(r16)
 10025b4:	81000015 	stw	r4,0(r16)
 10025b8:	dfc01217 	ldw	ra,72(sp)
 10025bc:	dc801117 	ldw	r18,68(sp)
 10025c0:	dc401017 	ldw	r17,64(sp)
 10025c4:	dc000f17 	ldw	r16,60(sp)
 10025c8:	dec01304 	addi	sp,sp,76
 10025cc:	f800283a 	ret
 10025d0:	80c0030b 	ldhu	r3,12(r16)
 10025d4:	1880200c 	andi	r2,r3,128
 10025d8:	10000426 	beq	r2,zero,10025ec <__smakebuf_r+0xfc>
 10025dc:	04801004 	movi	r18,64
 10025e0:	18820014 	ori	r2,r3,2048
 10025e4:	8080030d 	sth	r2,12(r16)
 10025e8:	003fe506 	br	1002580 <__smakebuf_r+0x90>
 10025ec:	04810004 	movi	r18,1024
 10025f0:	003ffb06 	br	10025e0 <__smakebuf_r+0xf0>
 10025f4:	8140038f 	ldh	r5,14(r16)
 10025f8:	8809883a 	mov	r4,r17
 10025fc:	1002ae80 	call	1002ae8 <_isatty_r>
 1002600:	103fde26 	beq	r2,zero,100257c <__smakebuf_r+0x8c>
 1002604:	8080030b 	ldhu	r2,12(r16)
 1002608:	80c010c4 	addi	r3,r16,67
 100260c:	04810004 	movi	r18,1024
 1002610:	10800054 	ori	r2,r2,1
 1002614:	8080030d 	sth	r2,12(r16)
 1002618:	00800044 	movi	r2,1
 100261c:	80c00415 	stw	r3,16(r16)
 1002620:	80800515 	stw	r2,20(r16)
 1002624:	80c00015 	stw	r3,0(r16)
 1002628:	003fd506 	br	1002580 <__smakebuf_r+0x90>
 100262c:	80c00a17 	ldw	r3,40(r16)
 1002630:	00804034 	movhi	r2,256
 1002634:	1089c904 	addi	r2,r2,10020
 1002638:	18bfcb1e 	bne	r3,r2,1002568 <__smakebuf_r+0x78>
 100263c:	8080030b 	ldhu	r2,12(r16)
 1002640:	00c10004 	movi	r3,1024
 1002644:	1825883a 	mov	r18,r3
 1002648:	10c4b03a 	or	r2,r2,r3
 100264c:	8080030d 	sth	r2,12(r16)
 1002650:	80c01315 	stw	r3,76(r16)
 1002654:	003fca06 	br	1002580 <__smakebuf_r+0x90>
 1002658:	8100030b 	ldhu	r4,12(r16)
 100265c:	2080800c 	andi	r2,r4,512
 1002660:	103fb21e 	bne	r2,zero,100252c <__smakebuf_r+0x3c>
 1002664:	80c010c4 	addi	r3,r16,67
 1002668:	21000094 	ori	r4,r4,2
 100266c:	00800044 	movi	r2,1
 1002670:	80800515 	stw	r2,20(r16)
 1002674:	8100030d 	sth	r4,12(r16)
 1002678:	80c00415 	stw	r3,16(r16)
 100267c:	80c00015 	stw	r3,0(r16)
 1002680:	003faa06 	br	100252c <__smakebuf_r+0x3c>

01002684 <memset>:
 1002684:	008000c4 	movi	r2,3
 1002688:	29403fcc 	andi	r5,r5,255
 100268c:	2007883a 	mov	r3,r4
 1002690:	1180022e 	bgeu	r2,r6,100269c <memset+0x18>
 1002694:	2084703a 	and	r2,r4,r2
 1002698:	10000826 	beq	r2,zero,10026bc <memset+0x38>
 100269c:	30000526 	beq	r6,zero,10026b4 <memset+0x30>
 10026a0:	2805883a 	mov	r2,r5
 10026a4:	30cd883a 	add	r6,r6,r3
 10026a8:	18800005 	stb	r2,0(r3)
 10026ac:	18c00044 	addi	r3,r3,1
 10026b0:	19bffd1e 	bne	r3,r6,10026a8 <memset+0x24>
 10026b4:	2005883a 	mov	r2,r4
 10026b8:	f800283a 	ret
 10026bc:	2804923a 	slli	r2,r5,8
 10026c0:	020003c4 	movi	r8,15
 10026c4:	200f883a 	mov	r7,r4
 10026c8:	2884b03a 	or	r2,r5,r2
 10026cc:	1006943a 	slli	r3,r2,16
 10026d0:	10c6b03a 	or	r3,r2,r3
 10026d4:	41800a2e 	bgeu	r8,r6,1002700 <memset+0x7c>
 10026d8:	4005883a 	mov	r2,r8
 10026dc:	31bffc04 	addi	r6,r6,-16
 10026e0:	38c00015 	stw	r3,0(r7)
 10026e4:	38c00115 	stw	r3,4(r7)
 10026e8:	38c00215 	stw	r3,8(r7)
 10026ec:	38c00315 	stw	r3,12(r7)
 10026f0:	39c00404 	addi	r7,r7,16
 10026f4:	11bff936 	bltu	r2,r6,10026dc <memset+0x58>
 10026f8:	008000c4 	movi	r2,3
 10026fc:	1180052e 	bgeu	r2,r6,1002714 <memset+0x90>
 1002700:	31bfff04 	addi	r6,r6,-4
 1002704:	008000c4 	movi	r2,3
 1002708:	38c00015 	stw	r3,0(r7)
 100270c:	39c00104 	addi	r7,r7,4
 1002710:	11bffb36 	bltu	r2,r6,1002700 <memset+0x7c>
 1002714:	3807883a 	mov	r3,r7
 1002718:	003fe006 	br	100269c <memset+0x18>

0100271c <__sclose>:
 100271c:	2940038f 	ldh	r5,14(r5)
 1002720:	10028e01 	jmpi	10028e0 <_close_r>

01002724 <__sseek>:
 1002724:	defffe04 	addi	sp,sp,-8
 1002728:	dc000015 	stw	r16,0(sp)
 100272c:	2821883a 	mov	r16,r5
 1002730:	2940038f 	ldh	r5,14(r5)
 1002734:	dfc00115 	stw	ra,4(sp)
 1002738:	1002b580 	call	1002b58 <_lseek_r>
 100273c:	1007883a 	mov	r3,r2
 1002740:	00bfffc4 	movi	r2,-1
 1002744:	18800926 	beq	r3,r2,100276c <__sseek+0x48>
 1002748:	8080030b 	ldhu	r2,12(r16)
 100274c:	80c01415 	stw	r3,80(r16)
 1002750:	10840014 	ori	r2,r2,4096
 1002754:	8080030d 	sth	r2,12(r16)
 1002758:	1805883a 	mov	r2,r3
 100275c:	dfc00117 	ldw	ra,4(sp)
 1002760:	dc000017 	ldw	r16,0(sp)
 1002764:	dec00204 	addi	sp,sp,8
 1002768:	f800283a 	ret
 100276c:	8080030b 	ldhu	r2,12(r16)
 1002770:	10bbffcc 	andi	r2,r2,61439
 1002774:	8080030d 	sth	r2,12(r16)
 1002778:	1805883a 	mov	r2,r3
 100277c:	dfc00117 	ldw	ra,4(sp)
 1002780:	dc000017 	ldw	r16,0(sp)
 1002784:	dec00204 	addi	sp,sp,8
 1002788:	f800283a 	ret

0100278c <__swrite>:
 100278c:	2880030b 	ldhu	r2,12(r5)
 1002790:	defffb04 	addi	sp,sp,-20
 1002794:	dcc00315 	stw	r19,12(sp)
 1002798:	1080400c 	andi	r2,r2,256
 100279c:	dc800215 	stw	r18,8(sp)
 10027a0:	dc400115 	stw	r17,4(sp)
 10027a4:	dc000015 	stw	r16,0(sp)
 10027a8:	3027883a 	mov	r19,r6
 10027ac:	3825883a 	mov	r18,r7
 10027b0:	dfc00415 	stw	ra,16(sp)
 10027b4:	2821883a 	mov	r16,r5
 10027b8:	000d883a 	mov	r6,zero
 10027bc:	01c00084 	movi	r7,2
 10027c0:	2023883a 	mov	r17,r4
 10027c4:	10000226 	beq	r2,zero,10027d0 <__swrite+0x44>
 10027c8:	2940038f 	ldh	r5,14(r5)
 10027cc:	1002b580 	call	1002b58 <_lseek_r>
 10027d0:	8080030b 	ldhu	r2,12(r16)
 10027d4:	8140038f 	ldh	r5,14(r16)
 10027d8:	8809883a 	mov	r4,r17
 10027dc:	10bbffcc 	andi	r2,r2,61439
 10027e0:	980d883a 	mov	r6,r19
 10027e4:	900f883a 	mov	r7,r18
 10027e8:	8080030d 	sth	r2,12(r16)
 10027ec:	dfc00417 	ldw	ra,16(sp)
 10027f0:	dcc00317 	ldw	r19,12(sp)
 10027f4:	dc800217 	ldw	r18,8(sp)
 10027f8:	dc400117 	ldw	r17,4(sp)
 10027fc:	dc000017 	ldw	r16,0(sp)
 1002800:	dec00504 	addi	sp,sp,20
 1002804:	10028681 	jmpi	1002868 <_write_r>

01002808 <__sread>:
 1002808:	defffe04 	addi	sp,sp,-8
 100280c:	dc000015 	stw	r16,0(sp)
 1002810:	2821883a 	mov	r16,r5
 1002814:	2940038f 	ldh	r5,14(r5)
 1002818:	dfc00115 	stw	ra,4(sp)
 100281c:	1002bd00 	call	1002bd0 <_read_r>
 1002820:	1007883a 	mov	r3,r2
 1002824:	10000816 	blt	r2,zero,1002848 <__sread+0x40>
 1002828:	80801417 	ldw	r2,80(r16)
 100282c:	10c5883a 	add	r2,r2,r3
 1002830:	80801415 	stw	r2,80(r16)
 1002834:	1805883a 	mov	r2,r3
 1002838:	dfc00117 	ldw	ra,4(sp)
 100283c:	dc000017 	ldw	r16,0(sp)
 1002840:	dec00204 	addi	sp,sp,8
 1002844:	f800283a 	ret
 1002848:	8080030b 	ldhu	r2,12(r16)
 100284c:	10bbffcc 	andi	r2,r2,61439
 1002850:	8080030d 	sth	r2,12(r16)
 1002854:	1805883a 	mov	r2,r3
 1002858:	dfc00117 	ldw	ra,4(sp)
 100285c:	dc000017 	ldw	r16,0(sp)
 1002860:	dec00204 	addi	sp,sp,8
 1002864:	f800283a 	ret

01002868 <_write_r>:
 1002868:	defffd04 	addi	sp,sp,-12
 100286c:	dc000015 	stw	r16,0(sp)
 1002870:	04004074 	movhi	r16,257
 1002874:	84298604 	addi	r16,r16,-23016
 1002878:	dc400115 	stw	r17,4(sp)
 100287c:	80000015 	stw	zero,0(r16)
 1002880:	2023883a 	mov	r17,r4
 1002884:	2809883a 	mov	r4,r5
 1002888:	300b883a 	mov	r5,r6
 100288c:	380d883a 	mov	r6,r7
 1002890:	dfc00215 	stw	ra,8(sp)
 1002894:	10035a80 	call	10035a8 <write>
 1002898:	1007883a 	mov	r3,r2
 100289c:	00bfffc4 	movi	r2,-1
 10028a0:	18800626 	beq	r3,r2,10028bc <_write_r+0x54>
 10028a4:	1805883a 	mov	r2,r3
 10028a8:	dfc00217 	ldw	ra,8(sp)
 10028ac:	dc400117 	ldw	r17,4(sp)
 10028b0:	dc000017 	ldw	r16,0(sp)
 10028b4:	dec00304 	addi	sp,sp,12
 10028b8:	f800283a 	ret
 10028bc:	80800017 	ldw	r2,0(r16)
 10028c0:	103ff826 	beq	r2,zero,10028a4 <_write_r+0x3c>
 10028c4:	88800015 	stw	r2,0(r17)
 10028c8:	1805883a 	mov	r2,r3
 10028cc:	dfc00217 	ldw	ra,8(sp)
 10028d0:	dc400117 	ldw	r17,4(sp)
 10028d4:	dc000017 	ldw	r16,0(sp)
 10028d8:	dec00304 	addi	sp,sp,12
 10028dc:	f800283a 	ret

010028e0 <_close_r>:
 10028e0:	defffd04 	addi	sp,sp,-12
 10028e4:	dc000015 	stw	r16,0(sp)
 10028e8:	04004074 	movhi	r16,257
 10028ec:	84298604 	addi	r16,r16,-23016
 10028f0:	dc400115 	stw	r17,4(sp)
 10028f4:	80000015 	stw	zero,0(r16)
 10028f8:	2023883a 	mov	r17,r4
 10028fc:	2809883a 	mov	r4,r5
 1002900:	dfc00215 	stw	ra,8(sp)
 1002904:	1002c480 	call	1002c48 <close>
 1002908:	1007883a 	mov	r3,r2
 100290c:	00bfffc4 	movi	r2,-1
 1002910:	18800626 	beq	r3,r2,100292c <_close_r+0x4c>
 1002914:	1805883a 	mov	r2,r3
 1002918:	dfc00217 	ldw	ra,8(sp)
 100291c:	dc400117 	ldw	r17,4(sp)
 1002920:	dc000017 	ldw	r16,0(sp)
 1002924:	dec00304 	addi	sp,sp,12
 1002928:	f800283a 	ret
 100292c:	80800017 	ldw	r2,0(r16)
 1002930:	103ff826 	beq	r2,zero,1002914 <_close_r+0x34>
 1002934:	88800015 	stw	r2,0(r17)
 1002938:	1805883a 	mov	r2,r3
 100293c:	dfc00217 	ldw	ra,8(sp)
 1002940:	dc400117 	ldw	r17,4(sp)
 1002944:	dc000017 	ldw	r16,0(sp)
 1002948:	dec00304 	addi	sp,sp,12
 100294c:	f800283a 	ret

01002950 <_fclose_r>:
 1002950:	defffc04 	addi	sp,sp,-16
 1002954:	dc400115 	stw	r17,4(sp)
 1002958:	dc000015 	stw	r16,0(sp)
 100295c:	dfc00315 	stw	ra,12(sp)
 1002960:	dc800215 	stw	r18,8(sp)
 1002964:	2821883a 	mov	r16,r5
 1002968:	2023883a 	mov	r17,r4
 100296c:	28002926 	beq	r5,zero,1002a14 <_fclose_r+0xc4>
 1002970:	1001cc80 	call	1001cc8 <__sfp_lock_acquire>
 1002974:	88000226 	beq	r17,zero,1002980 <_fclose_r+0x30>
 1002978:	88800e17 	ldw	r2,56(r17)
 100297c:	10002d26 	beq	r2,zero,1002a34 <_fclose_r+0xe4>
 1002980:	8080030f 	ldh	r2,12(r16)
 1002984:	10002226 	beq	r2,zero,1002a10 <_fclose_r+0xc0>
 1002988:	8809883a 	mov	r4,r17
 100298c:	800b883a 	mov	r5,r16
 1002990:	1001a400 	call	1001a40 <_fflush_r>
 1002994:	1025883a 	mov	r18,r2
 1002998:	80800b17 	ldw	r2,44(r16)
 100299c:	10000426 	beq	r2,zero,10029b0 <_fclose_r+0x60>
 10029a0:	81400717 	ldw	r5,28(r16)
 10029a4:	8809883a 	mov	r4,r17
 10029a8:	103ee83a 	callr	r2
 10029ac:	10002a16 	blt	r2,zero,1002a58 <_fclose_r+0x108>
 10029b0:	8080030b 	ldhu	r2,12(r16)
 10029b4:	1080200c 	andi	r2,r2,128
 10029b8:	1000231e 	bne	r2,zero,1002a48 <_fclose_r+0xf8>
 10029bc:	81400c17 	ldw	r5,48(r16)
 10029c0:	28000526 	beq	r5,zero,10029d8 <_fclose_r+0x88>
 10029c4:	80801004 	addi	r2,r16,64
 10029c8:	28800226 	beq	r5,r2,10029d4 <_fclose_r+0x84>
 10029cc:	8809883a 	mov	r4,r17
 10029d0:	100205c0 	call	100205c <_free_r>
 10029d4:	80000c15 	stw	zero,48(r16)
 10029d8:	81401117 	ldw	r5,68(r16)
 10029dc:	28000326 	beq	r5,zero,10029ec <_fclose_r+0x9c>
 10029e0:	8809883a 	mov	r4,r17
 10029e4:	100205c0 	call	100205c <_free_r>
 10029e8:	80001115 	stw	zero,68(r16)
 10029ec:	8000030d 	sth	zero,12(r16)
 10029f0:	1001ccc0 	call	1001ccc <__sfp_lock_release>
 10029f4:	9005883a 	mov	r2,r18
 10029f8:	dfc00317 	ldw	ra,12(sp)
 10029fc:	dc800217 	ldw	r18,8(sp)
 1002a00:	dc400117 	ldw	r17,4(sp)
 1002a04:	dc000017 	ldw	r16,0(sp)
 1002a08:	dec00404 	addi	sp,sp,16
 1002a0c:	f800283a 	ret
 1002a10:	1001ccc0 	call	1001ccc <__sfp_lock_release>
 1002a14:	0025883a 	mov	r18,zero
 1002a18:	9005883a 	mov	r2,r18
 1002a1c:	dfc00317 	ldw	ra,12(sp)
 1002a20:	dc800217 	ldw	r18,8(sp)
 1002a24:	dc400117 	ldw	r17,4(sp)
 1002a28:	dc000017 	ldw	r16,0(sp)
 1002a2c:	dec00404 	addi	sp,sp,16
 1002a30:	f800283a 	ret
 1002a34:	8809883a 	mov	r4,r17
 1002a38:	1001cd80 	call	1001cd8 <__sinit>
 1002a3c:	8080030f 	ldh	r2,12(r16)
 1002a40:	103fd11e 	bne	r2,zero,1002988 <_fclose_r+0x38>
 1002a44:	003ff206 	br	1002a10 <_fclose_r+0xc0>
 1002a48:	81400417 	ldw	r5,16(r16)
 1002a4c:	8809883a 	mov	r4,r17
 1002a50:	100205c0 	call	100205c <_free_r>
 1002a54:	003fd906 	br	10029bc <_fclose_r+0x6c>
 1002a58:	04bfffc4 	movi	r18,-1
 1002a5c:	003fd406 	br	10029b0 <_fclose_r+0x60>

01002a60 <fclose>:
 1002a60:	00804074 	movhi	r2,257
 1002a64:	10a26a04 	addi	r2,r2,-30296
 1002a68:	200b883a 	mov	r5,r4
 1002a6c:	11000017 	ldw	r4,0(r2)
 1002a70:	10029501 	jmpi	1002950 <_fclose_r>

01002a74 <_fstat_r>:
 1002a74:	defffd04 	addi	sp,sp,-12
 1002a78:	dc000015 	stw	r16,0(sp)
 1002a7c:	04004074 	movhi	r16,257
 1002a80:	84298604 	addi	r16,r16,-23016
 1002a84:	dc400115 	stw	r17,4(sp)
 1002a88:	80000015 	stw	zero,0(r16)
 1002a8c:	2023883a 	mov	r17,r4
 1002a90:	2809883a 	mov	r4,r5
 1002a94:	300b883a 	mov	r5,r6
 1002a98:	dfc00215 	stw	ra,8(sp)
 1002a9c:	1002dd00 	call	1002dd0 <fstat>
 1002aa0:	1007883a 	mov	r3,r2
 1002aa4:	00bfffc4 	movi	r2,-1
 1002aa8:	18800626 	beq	r3,r2,1002ac4 <_fstat_r+0x50>
 1002aac:	1805883a 	mov	r2,r3
 1002ab0:	dfc00217 	ldw	ra,8(sp)
 1002ab4:	dc400117 	ldw	r17,4(sp)
 1002ab8:	dc000017 	ldw	r16,0(sp)
 1002abc:	dec00304 	addi	sp,sp,12
 1002ac0:	f800283a 	ret
 1002ac4:	80800017 	ldw	r2,0(r16)
 1002ac8:	103ff826 	beq	r2,zero,1002aac <_fstat_r+0x38>
 1002acc:	88800015 	stw	r2,0(r17)
 1002ad0:	1805883a 	mov	r2,r3
 1002ad4:	dfc00217 	ldw	ra,8(sp)
 1002ad8:	dc400117 	ldw	r17,4(sp)
 1002adc:	dc000017 	ldw	r16,0(sp)
 1002ae0:	dec00304 	addi	sp,sp,12
 1002ae4:	f800283a 	ret

01002ae8 <_isatty_r>:
 1002ae8:	defffd04 	addi	sp,sp,-12
 1002aec:	dc000015 	stw	r16,0(sp)
 1002af0:	04004074 	movhi	r16,257
 1002af4:	84298604 	addi	r16,r16,-23016
 1002af8:	dc400115 	stw	r17,4(sp)
 1002afc:	80000015 	stw	zero,0(r16)
 1002b00:	2023883a 	mov	r17,r4
 1002b04:	2809883a 	mov	r4,r5
 1002b08:	dfc00215 	stw	ra,8(sp)
 1002b0c:	1002f040 	call	1002f04 <isatty>
 1002b10:	1007883a 	mov	r3,r2
 1002b14:	00bfffc4 	movi	r2,-1
 1002b18:	18800626 	beq	r3,r2,1002b34 <_isatty_r+0x4c>
 1002b1c:	1805883a 	mov	r2,r3
 1002b20:	dfc00217 	ldw	ra,8(sp)
 1002b24:	dc400117 	ldw	r17,4(sp)
 1002b28:	dc000017 	ldw	r16,0(sp)
 1002b2c:	dec00304 	addi	sp,sp,12
 1002b30:	f800283a 	ret
 1002b34:	80800017 	ldw	r2,0(r16)
 1002b38:	103ff826 	beq	r2,zero,1002b1c <_isatty_r+0x34>
 1002b3c:	88800015 	stw	r2,0(r17)
 1002b40:	1805883a 	mov	r2,r3
 1002b44:	dfc00217 	ldw	ra,8(sp)
 1002b48:	dc400117 	ldw	r17,4(sp)
 1002b4c:	dc000017 	ldw	r16,0(sp)
 1002b50:	dec00304 	addi	sp,sp,12
 1002b54:	f800283a 	ret

01002b58 <_lseek_r>:
 1002b58:	defffd04 	addi	sp,sp,-12
 1002b5c:	dc000015 	stw	r16,0(sp)
 1002b60:	04004074 	movhi	r16,257
 1002b64:	84298604 	addi	r16,r16,-23016
 1002b68:	dc400115 	stw	r17,4(sp)
 1002b6c:	80000015 	stw	zero,0(r16)
 1002b70:	2023883a 	mov	r17,r4
 1002b74:	2809883a 	mov	r4,r5
 1002b78:	300b883a 	mov	r5,r6
 1002b7c:	380d883a 	mov	r6,r7
 1002b80:	dfc00215 	stw	ra,8(sp)
 1002b84:	10031100 	call	1003110 <lseek>
 1002b88:	1007883a 	mov	r3,r2
 1002b8c:	00bfffc4 	movi	r2,-1
 1002b90:	18800626 	beq	r3,r2,1002bac <_lseek_r+0x54>
 1002b94:	1805883a 	mov	r2,r3
 1002b98:	dfc00217 	ldw	ra,8(sp)
 1002b9c:	dc400117 	ldw	r17,4(sp)
 1002ba0:	dc000017 	ldw	r16,0(sp)
 1002ba4:	dec00304 	addi	sp,sp,12
 1002ba8:	f800283a 	ret
 1002bac:	80800017 	ldw	r2,0(r16)
 1002bb0:	103ff826 	beq	r2,zero,1002b94 <_lseek_r+0x3c>
 1002bb4:	88800015 	stw	r2,0(r17)
 1002bb8:	1805883a 	mov	r2,r3
 1002bbc:	dfc00217 	ldw	ra,8(sp)
 1002bc0:	dc400117 	ldw	r17,4(sp)
 1002bc4:	dc000017 	ldw	r16,0(sp)
 1002bc8:	dec00304 	addi	sp,sp,12
 1002bcc:	f800283a 	ret

01002bd0 <_read_r>:
 1002bd0:	defffd04 	addi	sp,sp,-12
 1002bd4:	dc000015 	stw	r16,0(sp)
 1002bd8:	04004074 	movhi	r16,257
 1002bdc:	84298604 	addi	r16,r16,-23016
 1002be0:	dc400115 	stw	r17,4(sp)
 1002be4:	80000015 	stw	zero,0(r16)
 1002be8:	2023883a 	mov	r17,r4
 1002bec:	2809883a 	mov	r4,r5
 1002bf0:	300b883a 	mov	r5,r6
 1002bf4:	380d883a 	mov	r6,r7
 1002bf8:	dfc00215 	stw	ra,8(sp)
 1002bfc:	100330c0 	call	100330c <read>
 1002c00:	1007883a 	mov	r3,r2
 1002c04:	00bfffc4 	movi	r2,-1
 1002c08:	18800626 	beq	r3,r2,1002c24 <_read_r+0x54>
 1002c0c:	1805883a 	mov	r2,r3
 1002c10:	dfc00217 	ldw	ra,8(sp)
 1002c14:	dc400117 	ldw	r17,4(sp)
 1002c18:	dc000017 	ldw	r16,0(sp)
 1002c1c:	dec00304 	addi	sp,sp,12
 1002c20:	f800283a 	ret
 1002c24:	80800017 	ldw	r2,0(r16)
 1002c28:	103ff826 	beq	r2,zero,1002c0c <_read_r+0x3c>
 1002c2c:	88800015 	stw	r2,0(r17)
 1002c30:	1805883a 	mov	r2,r3
 1002c34:	dfc00217 	ldw	ra,8(sp)
 1002c38:	dc400117 	ldw	r17,4(sp)
 1002c3c:	dc000017 	ldw	r16,0(sp)
 1002c40:	dec00304 	addi	sp,sp,12
 1002c44:	f800283a 	ret

01002c48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002c48:	defff804 	addi	sp,sp,-32
 1002c4c:	dfc00715 	stw	ra,28(sp)
 1002c50:	df000615 	stw	fp,24(sp)
 1002c54:	df000604 	addi	fp,sp,24
 1002c58:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002c5c:	e0bffc17 	ldw	r2,-16(fp)
 1002c60:	1004803a 	cmplt	r2,r2,zero
 1002c64:	1000081e 	bne	r2,zero,1002c88 <close+0x40>
 1002c68:	e0bffc17 	ldw	r2,-16(fp)
 1002c6c:	10800324 	muli	r2,r2,12
 1002c70:	1007883a 	mov	r3,r2
 1002c74:	00804034 	movhi	r2,256
 1002c78:	109d7904 	addi	r2,r2,30180
 1002c7c:	1887883a 	add	r3,r3,r2
 1002c80:	e0ffff15 	stw	r3,-4(fp)
 1002c84:	00000106 	br	1002c8c <close+0x44>
 1002c88:	e03fff15 	stw	zero,-4(fp)
 1002c8c:	e0bfff17 	ldw	r2,-4(fp)
 1002c90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002c94:	e0bffb17 	ldw	r2,-20(fp)
 1002c98:	1005003a 	cmpeq	r2,r2,zero
 1002c9c:	10001d1e 	bne	r2,zero,1002d14 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002ca0:	e0bffb17 	ldw	r2,-20(fp)
 1002ca4:	10800017 	ldw	r2,0(r2)
 1002ca8:	10800417 	ldw	r2,16(r2)
 1002cac:	1005003a 	cmpeq	r2,r2,zero
 1002cb0:	1000071e 	bne	r2,zero,1002cd0 <close+0x88>
 1002cb4:	e0bffb17 	ldw	r2,-20(fp)
 1002cb8:	10800017 	ldw	r2,0(r2)
 1002cbc:	10800417 	ldw	r2,16(r2)
 1002cc0:	e13ffb17 	ldw	r4,-20(fp)
 1002cc4:	103ee83a 	callr	r2
 1002cc8:	e0bffe15 	stw	r2,-8(fp)
 1002ccc:	00000106 	br	1002cd4 <close+0x8c>
 1002cd0:	e03ffe15 	stw	zero,-8(fp)
 1002cd4:	e0bffe17 	ldw	r2,-8(fp)
 1002cd8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002cdc:	e13ffc17 	ldw	r4,-16(fp)
 1002ce0:	100348c0 	call	100348c <alt_release_fd>
    if (rval < 0)
 1002ce4:	e0bffa17 	ldw	r2,-24(fp)
 1002ce8:	1004403a 	cmpge	r2,r2,zero
 1002cec:	1000071e 	bne	r2,zero,1002d0c <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1002cf0:	1002d440 	call	1002d44 <alt_get_errno>
 1002cf4:	e0fffa17 	ldw	r3,-24(fp)
 1002cf8:	00c7c83a 	sub	r3,zero,r3
 1002cfc:	10c00015 	stw	r3,0(r2)
      return -1;
 1002d00:	00bfffc4 	movi	r2,-1
 1002d04:	e0bffd15 	stw	r2,-12(fp)
 1002d08:	00000806 	br	1002d2c <close+0xe4>
    }
    return 0;
 1002d0c:	e03ffd15 	stw	zero,-12(fp)
 1002d10:	00000606 	br	1002d2c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002d14:	1002d440 	call	1002d44 <alt_get_errno>
 1002d18:	1007883a 	mov	r3,r2
 1002d1c:	00801444 	movi	r2,81
 1002d20:	18800015 	stw	r2,0(r3)
    return -1;
 1002d24:	00bfffc4 	movi	r2,-1
 1002d28:	e0bffd15 	stw	r2,-12(fp)
 1002d2c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002d30:	e037883a 	mov	sp,fp
 1002d34:	dfc00117 	ldw	ra,4(sp)
 1002d38:	df000017 	ldw	fp,0(sp)
 1002d3c:	dec00204 	addi	sp,sp,8
 1002d40:	f800283a 	ret

01002d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d44:	defffd04 	addi	sp,sp,-12
 1002d48:	dfc00215 	stw	ra,8(sp)
 1002d4c:	df000115 	stw	fp,4(sp)
 1002d50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002d54:	00804074 	movhi	r2,257
 1002d58:	10a27304 	addi	r2,r2,-30260
 1002d5c:	10800017 	ldw	r2,0(r2)
 1002d60:	1005003a 	cmpeq	r2,r2,zero
 1002d64:	1000061e 	bne	r2,zero,1002d80 <alt_get_errno+0x3c>
 1002d68:	00804074 	movhi	r2,257
 1002d6c:	10a27304 	addi	r2,r2,-30260
 1002d70:	10800017 	ldw	r2,0(r2)
 1002d74:	103ee83a 	callr	r2
 1002d78:	e0bfff15 	stw	r2,-4(fp)
 1002d7c:	00000306 	br	1002d8c <alt_get_errno+0x48>
 1002d80:	00804074 	movhi	r2,257
 1002d84:	10a98604 	addi	r2,r2,-23016
 1002d88:	e0bfff15 	stw	r2,-4(fp)
 1002d8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	dfc00117 	ldw	ra,4(sp)
 1002d98:	df000017 	ldw	fp,0(sp)
 1002d9c:	dec00204 	addi	sp,sp,8
 1002da0:	f800283a 	ret

01002da4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002da4:	defffc04 	addi	sp,sp,-16
 1002da8:	df000315 	stw	fp,12(sp)
 1002dac:	df000304 	addi	fp,sp,12
 1002db0:	e13ffd15 	stw	r4,-12(fp)
 1002db4:	e17ffe15 	stw	r5,-8(fp)
 1002db8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002dbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1002dc0:	e037883a 	mov	sp,fp
 1002dc4:	df000017 	ldw	fp,0(sp)
 1002dc8:	dec00104 	addi	sp,sp,4
 1002dcc:	f800283a 	ret

01002dd0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002dd0:	defff904 	addi	sp,sp,-28
 1002dd4:	dfc00615 	stw	ra,24(sp)
 1002dd8:	df000515 	stw	fp,20(sp)
 1002ddc:	df000504 	addi	fp,sp,20
 1002de0:	e13ffc15 	stw	r4,-16(fp)
 1002de4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002de8:	e0bffc17 	ldw	r2,-16(fp)
 1002dec:	1004803a 	cmplt	r2,r2,zero
 1002df0:	1000081e 	bne	r2,zero,1002e14 <fstat+0x44>
 1002df4:	e0bffc17 	ldw	r2,-16(fp)
 1002df8:	10800324 	muli	r2,r2,12
 1002dfc:	1007883a 	mov	r3,r2
 1002e00:	00804034 	movhi	r2,256
 1002e04:	109d7904 	addi	r2,r2,30180
 1002e08:	1887883a 	add	r3,r3,r2
 1002e0c:	e0ffff15 	stw	r3,-4(fp)
 1002e10:	00000106 	br	1002e18 <fstat+0x48>
 1002e14:	e03fff15 	stw	zero,-4(fp)
 1002e18:	e0bfff17 	ldw	r2,-4(fp)
 1002e1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002e20:	e0bffb17 	ldw	r2,-20(fp)
 1002e24:	1005003a 	cmpeq	r2,r2,zero
 1002e28:	1000121e 	bne	r2,zero,1002e74 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002e2c:	e0bffb17 	ldw	r2,-20(fp)
 1002e30:	10800017 	ldw	r2,0(r2)
 1002e34:	10800817 	ldw	r2,32(r2)
 1002e38:	1005003a 	cmpeq	r2,r2,zero
 1002e3c:	1000081e 	bne	r2,zero,1002e60 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1002e40:	e0bffb17 	ldw	r2,-20(fp)
 1002e44:	10800017 	ldw	r2,0(r2)
 1002e48:	10800817 	ldw	r2,32(r2)
 1002e4c:	e13ffb17 	ldw	r4,-20(fp)
 1002e50:	e17ffd17 	ldw	r5,-12(fp)
 1002e54:	103ee83a 	callr	r2
 1002e58:	e0bffe15 	stw	r2,-8(fp)
 1002e5c:	00000b06 	br	1002e8c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002e60:	e0fffd17 	ldw	r3,-12(fp)
 1002e64:	00880004 	movi	r2,8192
 1002e68:	18800115 	stw	r2,4(r3)
      return 0;
 1002e6c:	e03ffe15 	stw	zero,-8(fp)
 1002e70:	00000606 	br	1002e8c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002e74:	1002ea40 	call	1002ea4 <alt_get_errno>
 1002e78:	1007883a 	mov	r3,r2
 1002e7c:	00801444 	movi	r2,81
 1002e80:	18800015 	stw	r2,0(r3)
    return -1;
 1002e84:	00bfffc4 	movi	r2,-1
 1002e88:	e0bffe15 	stw	r2,-8(fp)
 1002e8c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002e90:	e037883a 	mov	sp,fp
 1002e94:	dfc00117 	ldw	ra,4(sp)
 1002e98:	df000017 	ldw	fp,0(sp)
 1002e9c:	dec00204 	addi	sp,sp,8
 1002ea0:	f800283a 	ret

01002ea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ea4:	defffd04 	addi	sp,sp,-12
 1002ea8:	dfc00215 	stw	ra,8(sp)
 1002eac:	df000115 	stw	fp,4(sp)
 1002eb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002eb4:	00804074 	movhi	r2,257
 1002eb8:	10a27304 	addi	r2,r2,-30260
 1002ebc:	10800017 	ldw	r2,0(r2)
 1002ec0:	1005003a 	cmpeq	r2,r2,zero
 1002ec4:	1000061e 	bne	r2,zero,1002ee0 <alt_get_errno+0x3c>
 1002ec8:	00804074 	movhi	r2,257
 1002ecc:	10a27304 	addi	r2,r2,-30260
 1002ed0:	10800017 	ldw	r2,0(r2)
 1002ed4:	103ee83a 	callr	r2
 1002ed8:	e0bfff15 	stw	r2,-4(fp)
 1002edc:	00000306 	br	1002eec <alt_get_errno+0x48>
 1002ee0:	00804074 	movhi	r2,257
 1002ee4:	10a98604 	addi	r2,r2,-23016
 1002ee8:	e0bfff15 	stw	r2,-4(fp)
 1002eec:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ef0:	e037883a 	mov	sp,fp
 1002ef4:	dfc00117 	ldw	ra,4(sp)
 1002ef8:	df000017 	ldw	fp,0(sp)
 1002efc:	dec00204 	addi	sp,sp,8
 1002f00:	f800283a 	ret

01002f04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002f04:	deffeb04 	addi	sp,sp,-84
 1002f08:	dfc01415 	stw	ra,80(sp)
 1002f0c:	df001315 	stw	fp,76(sp)
 1002f10:	df001304 	addi	fp,sp,76
 1002f14:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002f18:	e0bffd17 	ldw	r2,-12(fp)
 1002f1c:	1004803a 	cmplt	r2,r2,zero
 1002f20:	1000081e 	bne	r2,zero,1002f44 <isatty+0x40>
 1002f24:	e0bffd17 	ldw	r2,-12(fp)
 1002f28:	10800324 	muli	r2,r2,12
 1002f2c:	1007883a 	mov	r3,r2
 1002f30:	00804034 	movhi	r2,256
 1002f34:	109d7904 	addi	r2,r2,30180
 1002f38:	1887883a 	add	r3,r3,r2
 1002f3c:	e0ffff15 	stw	r3,-4(fp)
 1002f40:	00000106 	br	1002f48 <isatty+0x44>
 1002f44:	e03fff15 	stw	zero,-4(fp)
 1002f48:	e0bfff17 	ldw	r2,-4(fp)
 1002f4c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002f50:	e0bfed17 	ldw	r2,-76(fp)
 1002f54:	1005003a 	cmpeq	r2,r2,zero
 1002f58:	10000f1e 	bne	r2,zero,1002f98 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002f5c:	e0bfed17 	ldw	r2,-76(fp)
 1002f60:	10800017 	ldw	r2,0(r2)
 1002f64:	10800817 	ldw	r2,32(r2)
 1002f68:	1004c03a 	cmpne	r2,r2,zero
 1002f6c:	1000031e 	bne	r2,zero,1002f7c <isatty+0x78>
    {
      return 1;
 1002f70:	00800044 	movi	r2,1
 1002f74:	e0bffe15 	stw	r2,-8(fp)
 1002f78:	00000c06 	br	1002fac <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002f7c:	e17fee04 	addi	r5,fp,-72
 1002f80:	e13ffd17 	ldw	r4,-12(fp)
 1002f84:	1002dd00 	call	1002dd0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002f88:	e0bfef17 	ldw	r2,-68(fp)
 1002f8c:	10880020 	cmpeqi	r2,r2,8192
 1002f90:	e0bffe15 	stw	r2,-8(fp)
 1002f94:	00000506 	br	1002fac <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002f98:	1002fc40 	call	1002fc4 <alt_get_errno>
 1002f9c:	1007883a 	mov	r3,r2
 1002fa0:	00801444 	movi	r2,81
 1002fa4:	18800015 	stw	r2,0(r3)
    return 0;
 1002fa8:	e03ffe15 	stw	zero,-8(fp)
 1002fac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002fb0:	e037883a 	mov	sp,fp
 1002fb4:	dfc00117 	ldw	ra,4(sp)
 1002fb8:	df000017 	ldw	fp,0(sp)
 1002fbc:	dec00204 	addi	sp,sp,8
 1002fc0:	f800283a 	ret

01002fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002fc4:	defffd04 	addi	sp,sp,-12
 1002fc8:	dfc00215 	stw	ra,8(sp)
 1002fcc:	df000115 	stw	fp,4(sp)
 1002fd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002fd4:	00804074 	movhi	r2,257
 1002fd8:	10a27304 	addi	r2,r2,-30260
 1002fdc:	10800017 	ldw	r2,0(r2)
 1002fe0:	1005003a 	cmpeq	r2,r2,zero
 1002fe4:	1000061e 	bne	r2,zero,1003000 <alt_get_errno+0x3c>
 1002fe8:	00804074 	movhi	r2,257
 1002fec:	10a27304 	addi	r2,r2,-30260
 1002ff0:	10800017 	ldw	r2,0(r2)
 1002ff4:	103ee83a 	callr	r2
 1002ff8:	e0bfff15 	stw	r2,-4(fp)
 1002ffc:	00000306 	br	100300c <alt_get_errno+0x48>
 1003000:	00804074 	movhi	r2,257
 1003004:	10a98604 	addi	r2,r2,-23016
 1003008:	e0bfff15 	stw	r2,-4(fp)
 100300c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003010:	e037883a 	mov	sp,fp
 1003014:	dfc00117 	ldw	ra,4(sp)
 1003018:	df000017 	ldw	fp,0(sp)
 100301c:	dec00204 	addi	sp,sp,8
 1003020:	f800283a 	ret

01003024 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003024:	defffe04 	addi	sp,sp,-8
 1003028:	dfc00115 	stw	ra,4(sp)
 100302c:	df000015 	stw	fp,0(sp)
 1003030:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1003034:	01004074 	movhi	r4,257
 1003038:	21227804 	addi	r4,r4,-30240
 100303c:	01404034 	movhi	r5,256
 1003040:	295b6d04 	addi	r5,r5,28084
 1003044:	01804074 	movhi	r6,257
 1003048:	31a27804 	addi	r6,r6,-30240
 100304c:	10030a40 	call	10030a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003050:	01004034 	movhi	r4,256
 1003054:	21000804 	addi	r4,r4,32
 1003058:	01404034 	movhi	r5,256
 100305c:	29400804 	addi	r5,r5,32
 1003060:	01804034 	movhi	r6,256
 1003064:	31806e04 	addi	r6,r6,440
 1003068:	10030a40 	call	10030a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100306c:	01004034 	movhi	r4,256
 1003070:	211b1a04 	addi	r4,r4,27752
 1003074:	01404034 	movhi	r5,256
 1003078:	295b1a04 	addi	r5,r5,27752
 100307c:	01804034 	movhi	r6,256
 1003080:	319b6d04 	addi	r6,r6,28084
 1003084:	10030a40 	call	10030a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003088:	1005ad00 	call	1005ad0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100308c:	1005d840 	call	1005d84 <alt_icache_flush_all>
}
 1003090:	e037883a 	mov	sp,fp
 1003094:	dfc00117 	ldw	ra,4(sp)
 1003098:	df000017 	ldw	fp,0(sp)
 100309c:	dec00204 	addi	sp,sp,8
 10030a0:	f800283a 	ret

010030a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10030a4:	defffc04 	addi	sp,sp,-16
 10030a8:	df000315 	stw	fp,12(sp)
 10030ac:	df000304 	addi	fp,sp,12
 10030b0:	e13ffd15 	stw	r4,-12(fp)
 10030b4:	e17ffe15 	stw	r5,-8(fp)
 10030b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10030bc:	e0fffe17 	ldw	r3,-8(fp)
 10030c0:	e0bffd17 	ldw	r2,-12(fp)
 10030c4:	18800e26 	beq	r3,r2,1003100 <alt_load_section+0x5c>
  {
    while( to != end )
 10030c8:	00000a06 	br	10030f4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 10030cc:	e0bffd17 	ldw	r2,-12(fp)
 10030d0:	10c00017 	ldw	r3,0(r2)
 10030d4:	e0bffe17 	ldw	r2,-8(fp)
 10030d8:	10c00015 	stw	r3,0(r2)
 10030dc:	e0bffe17 	ldw	r2,-8(fp)
 10030e0:	10800104 	addi	r2,r2,4
 10030e4:	e0bffe15 	stw	r2,-8(fp)
 10030e8:	e0bffd17 	ldw	r2,-12(fp)
 10030ec:	10800104 	addi	r2,r2,4
 10030f0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10030f4:	e0fffe17 	ldw	r3,-8(fp)
 10030f8:	e0bfff17 	ldw	r2,-4(fp)
 10030fc:	18bff31e 	bne	r3,r2,10030cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1003100:	e037883a 	mov	sp,fp
 1003104:	df000017 	ldw	fp,0(sp)
 1003108:	dec00104 	addi	sp,sp,4
 100310c:	f800283a 	ret

01003110 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003110:	defff804 	addi	sp,sp,-32
 1003114:	dfc00715 	stw	ra,28(sp)
 1003118:	df000615 	stw	fp,24(sp)
 100311c:	df000604 	addi	fp,sp,24
 1003120:	e13ffc15 	stw	r4,-16(fp)
 1003124:	e17ffd15 	stw	r5,-12(fp)
 1003128:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100312c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003130:	e0bffc17 	ldw	r2,-16(fp)
 1003134:	1004803a 	cmplt	r2,r2,zero
 1003138:	1000081e 	bne	r2,zero,100315c <lseek+0x4c>
 100313c:	e0bffc17 	ldw	r2,-16(fp)
 1003140:	10800324 	muli	r2,r2,12
 1003144:	1007883a 	mov	r3,r2
 1003148:	00804034 	movhi	r2,256
 100314c:	109d7904 	addi	r2,r2,30180
 1003150:	1887883a 	add	r3,r3,r2
 1003154:	e0ffff15 	stw	r3,-4(fp)
 1003158:	00000106 	br	1003160 <lseek+0x50>
 100315c:	e03fff15 	stw	zero,-4(fp)
 1003160:	e0bfff17 	ldw	r2,-4(fp)
 1003164:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003168:	e0bffb17 	ldw	r2,-20(fp)
 100316c:	1005003a 	cmpeq	r2,r2,zero
 1003170:	1000111e 	bne	r2,zero,10031b8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003174:	e0bffb17 	ldw	r2,-20(fp)
 1003178:	10800017 	ldw	r2,0(r2)
 100317c:	10800717 	ldw	r2,28(r2)
 1003180:	1005003a 	cmpeq	r2,r2,zero
 1003184:	1000091e 	bne	r2,zero,10031ac <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003188:	e0bffb17 	ldw	r2,-20(fp)
 100318c:	10800017 	ldw	r2,0(r2)
 1003190:	10800717 	ldw	r2,28(r2)
 1003194:	e13ffb17 	ldw	r4,-20(fp)
 1003198:	e17ffd17 	ldw	r5,-12(fp)
 100319c:	e1bffe17 	ldw	r6,-8(fp)
 10031a0:	103ee83a 	callr	r2
 10031a4:	e0bffa15 	stw	r2,-24(fp)
 10031a8:	00000506 	br	10031c0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10031ac:	00bfde84 	movi	r2,-134
 10031b0:	e0bffa15 	stw	r2,-24(fp)
 10031b4:	00000206 	br	10031c0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 10031b8:	00bfebc4 	movi	r2,-81
 10031bc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10031c0:	e0bffa17 	ldw	r2,-24(fp)
 10031c4:	1004403a 	cmpge	r2,r2,zero
 10031c8:	1000071e 	bne	r2,zero,10031e8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 10031cc:	10032000 	call	1003200 <alt_get_errno>
 10031d0:	1007883a 	mov	r3,r2
 10031d4:	e0bffa17 	ldw	r2,-24(fp)
 10031d8:	0085c83a 	sub	r2,zero,r2
 10031dc:	18800015 	stw	r2,0(r3)
    rc = -1;
 10031e0:	00bfffc4 	movi	r2,-1
 10031e4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 10031e8:	e0bffa17 	ldw	r2,-24(fp)
}
 10031ec:	e037883a 	mov	sp,fp
 10031f0:	dfc00117 	ldw	ra,4(sp)
 10031f4:	df000017 	ldw	fp,0(sp)
 10031f8:	dec00204 	addi	sp,sp,8
 10031fc:	f800283a 	ret

01003200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003200:	defffd04 	addi	sp,sp,-12
 1003204:	dfc00215 	stw	ra,8(sp)
 1003208:	df000115 	stw	fp,4(sp)
 100320c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003210:	00804074 	movhi	r2,257
 1003214:	10a27304 	addi	r2,r2,-30260
 1003218:	10800017 	ldw	r2,0(r2)
 100321c:	1005003a 	cmpeq	r2,r2,zero
 1003220:	1000061e 	bne	r2,zero,100323c <alt_get_errno+0x3c>
 1003224:	00804074 	movhi	r2,257
 1003228:	10a27304 	addi	r2,r2,-30260
 100322c:	10800017 	ldw	r2,0(r2)
 1003230:	103ee83a 	callr	r2
 1003234:	e0bfff15 	stw	r2,-4(fp)
 1003238:	00000306 	br	1003248 <alt_get_errno+0x48>
 100323c:	00804074 	movhi	r2,257
 1003240:	10a98604 	addi	r2,r2,-23016
 1003244:	e0bfff15 	stw	r2,-4(fp)
 1003248:	e0bfff17 	ldw	r2,-4(fp)
}
 100324c:	e037883a 	mov	sp,fp
 1003250:	dfc00117 	ldw	ra,4(sp)
 1003254:	df000017 	ldw	fp,0(sp)
 1003258:	dec00204 	addi	sp,sp,8
 100325c:	f800283a 	ret

01003260 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1003260:	defffd04 	addi	sp,sp,-12
 1003264:	dfc00215 	stw	ra,8(sp)
 1003268:	df000115 	stw	fp,4(sp)
 100326c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003270:	0009883a 	mov	r4,zero
 1003274:	10037280 	call	1003728 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003278:	100375c0 	call	100375c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100327c:	01004034 	movhi	r4,256
 1003280:	211b3004 	addi	r4,r4,27840
 1003284:	01404034 	movhi	r5,256
 1003288:	295b3004 	addi	r5,r5,27840
 100328c:	01804034 	movhi	r6,256
 1003290:	319b3004 	addi	r6,r6,27840
 1003294:	1005e780 	call	1005e78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003298:	1005c280 	call	1005c28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100329c:	01004034 	movhi	r4,256
 10032a0:	21172304 	addi	r4,r4,23692
 10032a4:	10067a00 	call	10067a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10032a8:	d1271d17 	ldw	r4,-25484(gp)
 10032ac:	d1671e17 	ldw	r5,-25480(gp)
 10032b0:	d1a71f17 	ldw	r6,-25476(gp)
 10032b4:	10002040 	call	1000204 <main>
 10032b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10032bc:	01000044 	movi	r4,1
 10032c0:	1002c480 	call	1002c48 <close>
  exit (result);
 10032c4:	e13fff17 	ldw	r4,-4(fp)
 10032c8:	10067b40 	call	10067b4 <exit>

010032cc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10032cc:	defffe04 	addi	sp,sp,-8
 10032d0:	df000115 	stw	fp,4(sp)
 10032d4:	df000104 	addi	fp,sp,4
 10032d8:	e13fff15 	stw	r4,-4(fp)
}
 10032dc:	e037883a 	mov	sp,fp
 10032e0:	df000017 	ldw	fp,0(sp)
 10032e4:	dec00104 	addi	sp,sp,4
 10032e8:	f800283a 	ret

010032ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10032ec:	defffe04 	addi	sp,sp,-8
 10032f0:	df000115 	stw	fp,4(sp)
 10032f4:	df000104 	addi	fp,sp,4
 10032f8:	e13fff15 	stw	r4,-4(fp)
}
 10032fc:	e037883a 	mov	sp,fp
 1003300:	df000017 	ldw	fp,0(sp)
 1003304:	dec00104 	addi	sp,sp,4
 1003308:	f800283a 	ret

0100330c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100330c:	defff704 	addi	sp,sp,-36
 1003310:	dfc00815 	stw	ra,32(sp)
 1003314:	df000715 	stw	fp,28(sp)
 1003318:	df000704 	addi	fp,sp,28
 100331c:	e13ffb15 	stw	r4,-20(fp)
 1003320:	e17ffc15 	stw	r5,-16(fp)
 1003324:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003328:	e0bffb17 	ldw	r2,-20(fp)
 100332c:	1004803a 	cmplt	r2,r2,zero
 1003330:	1000081e 	bne	r2,zero,1003354 <read+0x48>
 1003334:	e0bffb17 	ldw	r2,-20(fp)
 1003338:	10800324 	muli	r2,r2,12
 100333c:	1007883a 	mov	r3,r2
 1003340:	00804034 	movhi	r2,256
 1003344:	109d7904 	addi	r2,r2,30180
 1003348:	1887883a 	add	r3,r3,r2
 100334c:	e0ffff15 	stw	r3,-4(fp)
 1003350:	00000106 	br	1003358 <read+0x4c>
 1003354:	e03fff15 	stw	zero,-4(fp)
 1003358:	e0bfff17 	ldw	r2,-4(fp)
 100335c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003360:	e0bffa17 	ldw	r2,-24(fp)
 1003364:	1005003a 	cmpeq	r2,r2,zero
 1003368:	1000241e 	bne	r2,zero,10033fc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100336c:	e0bffa17 	ldw	r2,-24(fp)
 1003370:	10800217 	ldw	r2,8(r2)
 1003374:	108000cc 	andi	r2,r2,3
 1003378:	10800060 	cmpeqi	r2,r2,1
 100337c:	10001a1e 	bne	r2,zero,10033e8 <read+0xdc>
 1003380:	e0bffa17 	ldw	r2,-24(fp)
 1003384:	10800017 	ldw	r2,0(r2)
 1003388:	10800517 	ldw	r2,20(r2)
 100338c:	1005003a 	cmpeq	r2,r2,zero
 1003390:	1000151e 	bne	r2,zero,10033e8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003394:	e0bffa17 	ldw	r2,-24(fp)
 1003398:	10800017 	ldw	r2,0(r2)
 100339c:	10800517 	ldw	r2,20(r2)
 10033a0:	e17ffc17 	ldw	r5,-16(fp)
 10033a4:	e1bffd17 	ldw	r6,-12(fp)
 10033a8:	e13ffa17 	ldw	r4,-24(fp)
 10033ac:	103ee83a 	callr	r2
 10033b0:	e0bff915 	stw	r2,-28(fp)
 10033b4:	e0bff917 	ldw	r2,-28(fp)
 10033b8:	1004403a 	cmpge	r2,r2,zero
 10033bc:	1000071e 	bne	r2,zero,10033dc <read+0xd0>
        {
          ALT_ERRNO = -rval;
 10033c0:	100342c0 	call	100342c <alt_get_errno>
 10033c4:	e0fff917 	ldw	r3,-28(fp)
 10033c8:	00c7c83a 	sub	r3,zero,r3
 10033cc:	10c00015 	stw	r3,0(r2)
          return -1;
 10033d0:	00bfffc4 	movi	r2,-1
 10033d4:	e0bffe15 	stw	r2,-8(fp)
 10033d8:	00000e06 	br	1003414 <read+0x108>
        }
        return rval;
 10033dc:	e0bff917 	ldw	r2,-28(fp)
 10033e0:	e0bffe15 	stw	r2,-8(fp)
 10033e4:	00000b06 	br	1003414 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10033e8:	100342c0 	call	100342c <alt_get_errno>
 10033ec:	1007883a 	mov	r3,r2
 10033f0:	00800344 	movi	r2,13
 10033f4:	18800015 	stw	r2,0(r3)
 10033f8:	00000406 	br	100340c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10033fc:	100342c0 	call	100342c <alt_get_errno>
 1003400:	1007883a 	mov	r3,r2
 1003404:	00801444 	movi	r2,81
 1003408:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100340c:	00bfffc4 	movi	r2,-1
 1003410:	e0bffe15 	stw	r2,-8(fp)
 1003414:	e0bffe17 	ldw	r2,-8(fp)
}
 1003418:	e037883a 	mov	sp,fp
 100341c:	dfc00117 	ldw	ra,4(sp)
 1003420:	df000017 	ldw	fp,0(sp)
 1003424:	dec00204 	addi	sp,sp,8
 1003428:	f800283a 	ret

0100342c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100342c:	defffd04 	addi	sp,sp,-12
 1003430:	dfc00215 	stw	ra,8(sp)
 1003434:	df000115 	stw	fp,4(sp)
 1003438:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100343c:	00804074 	movhi	r2,257
 1003440:	10a27304 	addi	r2,r2,-30260
 1003444:	10800017 	ldw	r2,0(r2)
 1003448:	1005003a 	cmpeq	r2,r2,zero
 100344c:	1000061e 	bne	r2,zero,1003468 <alt_get_errno+0x3c>
 1003450:	00804074 	movhi	r2,257
 1003454:	10a27304 	addi	r2,r2,-30260
 1003458:	10800017 	ldw	r2,0(r2)
 100345c:	103ee83a 	callr	r2
 1003460:	e0bfff15 	stw	r2,-4(fp)
 1003464:	00000306 	br	1003474 <alt_get_errno+0x48>
 1003468:	00804074 	movhi	r2,257
 100346c:	10a98604 	addi	r2,r2,-23016
 1003470:	e0bfff15 	stw	r2,-4(fp)
 1003474:	e0bfff17 	ldw	r2,-4(fp)
}
 1003478:	e037883a 	mov	sp,fp
 100347c:	dfc00117 	ldw	ra,4(sp)
 1003480:	df000017 	ldw	fp,0(sp)
 1003484:	dec00204 	addi	sp,sp,8
 1003488:	f800283a 	ret

0100348c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100348c:	defffe04 	addi	sp,sp,-8
 1003490:	df000115 	stw	fp,4(sp)
 1003494:	df000104 	addi	fp,sp,4
 1003498:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100349c:	e0bfff17 	ldw	r2,-4(fp)
 10034a0:	108000d0 	cmplti	r2,r2,3
 10034a4:	10000d1e 	bne	r2,zero,10034dc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10034a8:	e0bfff17 	ldw	r2,-4(fp)
 10034ac:	00c04034 	movhi	r3,256
 10034b0:	18dd7904 	addi	r3,r3,30180
 10034b4:	10800324 	muli	r2,r2,12
 10034b8:	10c5883a 	add	r2,r2,r3
 10034bc:	10800204 	addi	r2,r2,8
 10034c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10034c4:	e0bfff17 	ldw	r2,-4(fp)
 10034c8:	00c04034 	movhi	r3,256
 10034cc:	18dd7904 	addi	r3,r3,30180
 10034d0:	10800324 	muli	r2,r2,12
 10034d4:	10c5883a 	add	r2,r2,r3
 10034d8:	10000015 	stw	zero,0(r2)
  }
}
 10034dc:	e037883a 	mov	sp,fp
 10034e0:	df000017 	ldw	fp,0(sp)
 10034e4:	dec00104 	addi	sp,sp,4
 10034e8:	f800283a 	ret

010034ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10034ec:	defff804 	addi	sp,sp,-32
 10034f0:	df000715 	stw	fp,28(sp)
 10034f4:	df000704 	addi	fp,sp,28
 10034f8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10034fc:	0005303a 	rdctl	r2,status
 1003500:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003504:	e0fffb17 	ldw	r3,-20(fp)
 1003508:	00bfff84 	movi	r2,-2
 100350c:	1884703a 	and	r2,r3,r2
 1003510:	1001703a 	wrctl	status,r2
  
  return context;
 1003514:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003518:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100351c:	d0a00a17 	ldw	r2,-32728(gp)
 1003520:	10c000c4 	addi	r3,r2,3
 1003524:	00bfff04 	movi	r2,-4
 1003528:	1884703a 	and	r2,r3,r2
 100352c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003530:	d0e00a17 	ldw	r3,-32728(gp)
 1003534:	e0bffe17 	ldw	r2,-8(fp)
 1003538:	1887883a 	add	r3,r3,r2
 100353c:	00806034 	movhi	r2,384
 1003540:	10800004 	addi	r2,r2,0
 1003544:	10c0072e 	bgeu	r2,r3,1003564 <sbrk+0x78>
 1003548:	e0bffd17 	ldw	r2,-12(fp)
 100354c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003550:	e0bffa17 	ldw	r2,-24(fp)
 1003554:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003558:	00bfffc4 	movi	r2,-1
 100355c:	e0bfff15 	stw	r2,-4(fp)
 1003560:	00000c06 	br	1003594 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1003564:	d0a00a17 	ldw	r2,-32728(gp)
 1003568:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100356c:	d0e00a17 	ldw	r3,-32728(gp)
 1003570:	e0bffe17 	ldw	r2,-8(fp)
 1003574:	1885883a 	add	r2,r3,r2
 1003578:	d0a00a15 	stw	r2,-32728(gp)
 100357c:	e0bffd17 	ldw	r2,-12(fp)
 1003580:	e0bff915 	stw	r2,-28(fp)
 1003584:	e0bff917 	ldw	r2,-28(fp)
 1003588:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100358c:	e0bffc17 	ldw	r2,-16(fp)
 1003590:	e0bfff15 	stw	r2,-4(fp)
 1003594:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003598:	e037883a 	mov	sp,fp
 100359c:	df000017 	ldw	fp,0(sp)
 10035a0:	dec00104 	addi	sp,sp,4
 10035a4:	f800283a 	ret

010035a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10035a8:	defff704 	addi	sp,sp,-36
 10035ac:	dfc00815 	stw	ra,32(sp)
 10035b0:	df000715 	stw	fp,28(sp)
 10035b4:	df000704 	addi	fp,sp,28
 10035b8:	e13ffb15 	stw	r4,-20(fp)
 10035bc:	e17ffc15 	stw	r5,-16(fp)
 10035c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10035c4:	e0bffb17 	ldw	r2,-20(fp)
 10035c8:	1004803a 	cmplt	r2,r2,zero
 10035cc:	1000081e 	bne	r2,zero,10035f0 <write+0x48>
 10035d0:	e0bffb17 	ldw	r2,-20(fp)
 10035d4:	10800324 	muli	r2,r2,12
 10035d8:	1007883a 	mov	r3,r2
 10035dc:	00804034 	movhi	r2,256
 10035e0:	109d7904 	addi	r2,r2,30180
 10035e4:	1887883a 	add	r3,r3,r2
 10035e8:	e0ffff15 	stw	r3,-4(fp)
 10035ec:	00000106 	br	10035f4 <write+0x4c>
 10035f0:	e03fff15 	stw	zero,-4(fp)
 10035f4:	e0bfff17 	ldw	r2,-4(fp)
 10035f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10035fc:	e0bffa17 	ldw	r2,-24(fp)
 1003600:	1005003a 	cmpeq	r2,r2,zero
 1003604:	1000241e 	bne	r2,zero,1003698 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003608:	e0bffa17 	ldw	r2,-24(fp)
 100360c:	10800217 	ldw	r2,8(r2)
 1003610:	108000cc 	andi	r2,r2,3
 1003614:	1005003a 	cmpeq	r2,r2,zero
 1003618:	10001a1e 	bne	r2,zero,1003684 <write+0xdc>
 100361c:	e0bffa17 	ldw	r2,-24(fp)
 1003620:	10800017 	ldw	r2,0(r2)
 1003624:	10800617 	ldw	r2,24(r2)
 1003628:	1005003a 	cmpeq	r2,r2,zero
 100362c:	1000151e 	bne	r2,zero,1003684 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003630:	e0bffa17 	ldw	r2,-24(fp)
 1003634:	10800017 	ldw	r2,0(r2)
 1003638:	10800617 	ldw	r2,24(r2)
 100363c:	e17ffc17 	ldw	r5,-16(fp)
 1003640:	e1bffd17 	ldw	r6,-12(fp)
 1003644:	e13ffa17 	ldw	r4,-24(fp)
 1003648:	103ee83a 	callr	r2
 100364c:	e0bff915 	stw	r2,-28(fp)
 1003650:	e0bff917 	ldw	r2,-28(fp)
 1003654:	1004403a 	cmpge	r2,r2,zero
 1003658:	1000071e 	bne	r2,zero,1003678 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100365c:	10036c80 	call	10036c8 <alt_get_errno>
 1003660:	e0fff917 	ldw	r3,-28(fp)
 1003664:	00c7c83a 	sub	r3,zero,r3
 1003668:	10c00015 	stw	r3,0(r2)
        return -1;
 100366c:	00bfffc4 	movi	r2,-1
 1003670:	e0bffe15 	stw	r2,-8(fp)
 1003674:	00000e06 	br	10036b0 <write+0x108>
      }
      return rval;
 1003678:	e0bff917 	ldw	r2,-28(fp)
 100367c:	e0bffe15 	stw	r2,-8(fp)
 1003680:	00000b06 	br	10036b0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003684:	10036c80 	call	10036c8 <alt_get_errno>
 1003688:	1007883a 	mov	r3,r2
 100368c:	00800344 	movi	r2,13
 1003690:	18800015 	stw	r2,0(r3)
 1003694:	00000406 	br	10036a8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003698:	10036c80 	call	10036c8 <alt_get_errno>
 100369c:	1007883a 	mov	r3,r2
 10036a0:	00801444 	movi	r2,81
 10036a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10036a8:	00bfffc4 	movi	r2,-1
 10036ac:	e0bffe15 	stw	r2,-8(fp)
 10036b0:	e0bffe17 	ldw	r2,-8(fp)
}
 10036b4:	e037883a 	mov	sp,fp
 10036b8:	dfc00117 	ldw	ra,4(sp)
 10036bc:	df000017 	ldw	fp,0(sp)
 10036c0:	dec00204 	addi	sp,sp,8
 10036c4:	f800283a 	ret

010036c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10036c8:	defffd04 	addi	sp,sp,-12
 10036cc:	dfc00215 	stw	ra,8(sp)
 10036d0:	df000115 	stw	fp,4(sp)
 10036d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10036d8:	00804074 	movhi	r2,257
 10036dc:	10a27304 	addi	r2,r2,-30260
 10036e0:	10800017 	ldw	r2,0(r2)
 10036e4:	1005003a 	cmpeq	r2,r2,zero
 10036e8:	1000061e 	bne	r2,zero,1003704 <alt_get_errno+0x3c>
 10036ec:	00804074 	movhi	r2,257
 10036f0:	10a27304 	addi	r2,r2,-30260
 10036f4:	10800017 	ldw	r2,0(r2)
 10036f8:	103ee83a 	callr	r2
 10036fc:	e0bfff15 	stw	r2,-4(fp)
 1003700:	00000306 	br	1003710 <alt_get_errno+0x48>
 1003704:	00804074 	movhi	r2,257
 1003708:	10a98604 	addi	r2,r2,-23016
 100370c:	e0bfff15 	stw	r2,-4(fp)
 1003710:	e0bfff17 	ldw	r2,-4(fp)
}
 1003714:	e037883a 	mov	sp,fp
 1003718:	dfc00117 	ldw	ra,4(sp)
 100371c:	df000017 	ldw	fp,0(sp)
 1003720:	dec00204 	addi	sp,sp,8
 1003724:	f800283a 	ret

01003728 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003728:	defffd04 	addi	sp,sp,-12
 100372c:	dfc00215 	stw	ra,8(sp)
 1003730:	df000115 	stw	fp,4(sp)
 1003734:	df000104 	addi	fp,sp,4
 1003738:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100373c:	10065180 	call	1006518 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003740:	00800044 	movi	r2,1
 1003744:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003748:	e037883a 	mov	sp,fp
 100374c:	dfc00117 	ldw	ra,4(sp)
 1003750:	df000017 	ldw	fp,0(sp)
 1003754:	dec00204 	addi	sp,sp,8
 1003758:	f800283a 	ret

0100375c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100375c:	defffd04 	addi	sp,sp,-12
 1003760:	dfc00215 	stw	ra,8(sp)
 1003764:	df000115 	stw	fp,4(sp)
 1003768:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100376c:	01110804 	movi	r4,17440
 1003770:	000b883a 	mov	r5,zero
 1003774:	01800084 	movi	r6,2
 1003778:	01c0fa04 	movi	r7,1000
 100377c:	10046280 	call	1004628 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_TIMER_INIT ( TIMER_3, timer_3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1003780:	01004034 	movhi	r4,256
 1003784:	211de304 	addi	r4,r4,30604
 1003788:	000b883a 	mov	r5,zero
 100378c:	000d883a 	mov	r6,zero
 1003790:	1003c540 	call	1003c54 <altera_avalon_jtag_uart_init>
 1003794:	01004034 	movhi	r4,256
 1003798:	211dd904 	addi	r4,r4,30564
 100379c:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, av_config);
 10037a0:	01004074 	movhi	r4,257
 10037a4:	2121f104 	addi	r4,r4,-30780
 10037a8:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
 10037ac:	01004074 	movhi	r4,257
 10037b0:	2121fd04 	addi	r4,r4,-30732
 10037b4:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 10037b8:	01004074 	movhi	r4,257
 10037bc:	21220904 	addi	r4,r4,-30684
 10037c0:	10047600 	call	1004760 <alt_up_character_lcd_init>
 10037c4:	01004074 	movhi	r4,257
 10037c8:	21220904 	addi	r4,r4,-30684
 10037cc:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSH_BUTTON, push_button);
 10037d0:	01004074 	movhi	r4,257
 10037d4:	21221404 	addi	r4,r4,-30640
 10037d8:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 10037dc:	01004074 	movhi	r4,257
 10037e0:	21221f04 	addi	r4,r4,-30596
 10037e4:	1004d0c0 	call	1004d0c <alt_up_ps2_init>
 10037e8:	01004074 	movhi	r4,257
 10037ec:	21221f04 	addi	r4,r4,-30596
 10037f0:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 10037f4:	01004074 	movhi	r4,257
 10037f8:	21222d04 	addi	r4,r4,-30540
 10037fc:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 1003800:	00804074 	movhi	r2,257
 1003804:	10a23804 	addi	r2,r2,-30496
 1003808:	10800a17 	ldw	r2,40(r2)
 100380c:	10800104 	addi	r2,r2,4
 1003810:	10800017 	ldw	r2,0(r2)
 1003814:	10ffffcc 	andi	r3,r2,65535
 1003818:	00804074 	movhi	r2,257
 100381c:	10a23804 	addi	r2,r2,-30496
 1003820:	10c00c15 	stw	r3,48(r2)
 1003824:	00804074 	movhi	r2,257
 1003828:	10a23804 	addi	r2,r2,-30496
 100382c:	10800a17 	ldw	r2,40(r2)
 1003830:	10800104 	addi	r2,r2,4
 1003834:	10800017 	ldw	r2,0(r2)
 1003838:	1005d43a 	srai	r2,r2,16
 100383c:	10ffffcc 	andi	r3,r2,65535
 1003840:	00804074 	movhi	r2,257
 1003844:	10a23804 	addi	r2,r2,-30496
 1003848:	10c00d15 	stw	r3,52(r2)
 100384c:	00804074 	movhi	r2,257
 1003850:	10a23804 	addi	r2,r2,-30496
 1003854:	10800c17 	ldw	r2,48(r2)
 1003858:	10801068 	cmpgeui	r2,r2,65
 100385c:	1000081e 	bne	r2,zero,1003880 <alt_sys_init+0x124>
 1003860:	00c04074 	movhi	r3,257
 1003864:	18e23804 	addi	r3,r3,-30496
 1003868:	00800fc4 	movi	r2,63
 100386c:	18800f15 	stw	r2,60(r3)
 1003870:	00c04074 	movhi	r3,257
 1003874:	18e23804 	addi	r3,r3,-30496
 1003878:	00800184 	movi	r2,6
 100387c:	18801015 	stw	r2,64(r3)
 1003880:	00804074 	movhi	r2,257
 1003884:	10a23804 	addi	r2,r2,-30496
 1003888:	10800d17 	ldw	r2,52(r2)
 100388c:	10800868 	cmpgeui	r2,r2,33
 1003890:	1000041e 	bne	r2,zero,10038a4 <alt_sys_init+0x148>
 1003894:	00c04074 	movhi	r3,257
 1003898:	18e23804 	addi	r3,r3,-30496
 100389c:	008007c4 	movi	r2,31
 10038a0:	18801115 	stw	r2,68(r3)
 10038a4:	01004074 	movhi	r4,257
 10038a8:	21223804 	addi	r4,r4,-30496
 10038ac:	10056780 	call	1005678 <alt_up_char_buffer_init>
 10038b0:	01004074 	movhi	r4,257
 10038b4:	21223804 	addi	r4,r4,-30496
 10038b8:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 10038bc:	00804074 	movhi	r2,257
 10038c0:	10a24a04 	addi	r2,r2,-30424
 10038c4:	10800a17 	ldw	r2,40(r2)
 10038c8:	10800017 	ldw	r2,0(r2)
 10038cc:	1007883a 	mov	r3,r2
 10038d0:	00804074 	movhi	r2,257
 10038d4:	10a24a04 	addi	r2,r2,-30424
 10038d8:	10c00b15 	stw	r3,44(r2)
 10038dc:	00804074 	movhi	r2,257
 10038e0:	10a24a04 	addi	r2,r2,-30424
 10038e4:	10800a17 	ldw	r2,40(r2)
 10038e8:	10800104 	addi	r2,r2,4
 10038ec:	10800017 	ldw	r2,0(r2)
 10038f0:	1007883a 	mov	r3,r2
 10038f4:	00804074 	movhi	r2,257
 10038f8:	10a24a04 	addi	r2,r2,-30424
 10038fc:	10c00c15 	stw	r3,48(r2)
 1003900:	00804074 	movhi	r2,257
 1003904:	10a24a04 	addi	r2,r2,-30424
 1003908:	10800a17 	ldw	r2,40(r2)
 100390c:	10800204 	addi	r2,r2,8
 1003910:	10800017 	ldw	r2,0(r2)
 1003914:	10ffffcc 	andi	r3,r2,65535
 1003918:	00804074 	movhi	r2,257
 100391c:	10a24a04 	addi	r2,r2,-30424
 1003920:	10c00f15 	stw	r3,60(r2)
 1003924:	00804074 	movhi	r2,257
 1003928:	10a24a04 	addi	r2,r2,-30424
 100392c:	10800a17 	ldw	r2,40(r2)
 1003930:	10800204 	addi	r2,r2,8
 1003934:	10800017 	ldw	r2,0(r2)
 1003938:	1005d43a 	srai	r2,r2,16
 100393c:	10ffffcc 	andi	r3,r2,65535
 1003940:	00804074 	movhi	r2,257
 1003944:	10a24a04 	addi	r2,r2,-30424
 1003948:	10c01015 	stw	r3,64(r2)
 100394c:	00804074 	movhi	r2,257
 1003950:	10a24a04 	addi	r2,r2,-30424
 1003954:	10800a17 	ldw	r2,40(r2)
 1003958:	10800304 	addi	r2,r2,12
 100395c:	10800017 	ldw	r2,0(r2)
 1003960:	1005d07a 	srai	r2,r2,1
 1003964:	10c0004c 	andi	r3,r2,1
 1003968:	00804074 	movhi	r2,257
 100396c:	10a24a04 	addi	r2,r2,-30424
 1003970:	10c00d15 	stw	r3,52(r2)
 1003974:	00804074 	movhi	r2,257
 1003978:	10a24a04 	addi	r2,r2,-30424
 100397c:	10800a17 	ldw	r2,40(r2)
 1003980:	10800304 	addi	r2,r2,12
 1003984:	10800017 	ldw	r2,0(r2)
 1003988:	1005d13a 	srai	r2,r2,4
 100398c:	10c003cc 	andi	r3,r2,15
 1003990:	00804074 	movhi	r2,257
 1003994:	10a24a04 	addi	r2,r2,-30424
 1003998:	10c00e15 	stw	r3,56(r2)
 100399c:	00804074 	movhi	r2,257
 10039a0:	10a24a04 	addi	r2,r2,-30424
 10039a4:	10800a17 	ldw	r2,40(r2)
 10039a8:	10800304 	addi	r2,r2,12
 10039ac:	10800017 	ldw	r2,0(r2)
 10039b0:	1005d43a 	srai	r2,r2,16
 10039b4:	1007883a 	mov	r3,r2
 10039b8:	00bfffc4 	movi	r2,-1
 10039bc:	1884703a 	and	r2,r3,r2
 10039c0:	e0bfff45 	stb	r2,-3(fp)
 10039c4:	00804074 	movhi	r2,257
 10039c8:	10a24a04 	addi	r2,r2,-30424
 10039cc:	10800a17 	ldw	r2,40(r2)
 10039d0:	10800304 	addi	r2,r2,12
 10039d4:	10800017 	ldw	r2,0(r2)
 10039d8:	1005d63a 	srai	r2,r2,24
 10039dc:	1007883a 	mov	r3,r2
 10039e0:	00bfffc4 	movi	r2,-1
 10039e4:	1884703a 	and	r2,r3,r2
 10039e8:	e0bfff05 	stb	r2,-4(fp)
 10039ec:	00804074 	movhi	r2,257
 10039f0:	10a24a04 	addi	r2,r2,-30424
 10039f4:	10800e17 	ldw	r2,56(r2)
 10039f8:	10800058 	cmpnei	r2,r2,1
 10039fc:	1000041e 	bne	r2,zero,1003a10 <alt_sys_init+0x2b4>
 1003a00:	00804074 	movhi	r2,257
 1003a04:	10a24a04 	addi	r2,r2,-30424
 1003a08:	10001115 	stw	zero,68(r2)
 1003a0c:	00000e06 	br	1003a48 <alt_sys_init+0x2ec>
 1003a10:	00804074 	movhi	r2,257
 1003a14:	10a24a04 	addi	r2,r2,-30424
 1003a18:	10800e17 	ldw	r2,56(r2)
 1003a1c:	10800098 	cmpnei	r2,r2,2
 1003a20:	1000051e 	bne	r2,zero,1003a38 <alt_sys_init+0x2dc>
 1003a24:	00c04074 	movhi	r3,257
 1003a28:	18e24a04 	addi	r3,r3,-30424
 1003a2c:	00800044 	movi	r2,1
 1003a30:	18801115 	stw	r2,68(r3)
 1003a34:	00000406 	br	1003a48 <alt_sys_init+0x2ec>
 1003a38:	00c04074 	movhi	r3,257
 1003a3c:	18e24a04 	addi	r3,r3,-30424
 1003a40:	00800084 	movi	r2,2
 1003a44:	18801115 	stw	r2,68(r3)
 1003a48:	e0ffff43 	ldbu	r3,-3(fp)
 1003a4c:	00800804 	movi	r2,32
 1003a50:	10c7c83a 	sub	r3,r2,r3
 1003a54:	00bfffc4 	movi	r2,-1
 1003a58:	10c6d83a 	srl	r3,r2,r3
 1003a5c:	00804074 	movhi	r2,257
 1003a60:	10a24a04 	addi	r2,r2,-30424
 1003a64:	10c01215 	stw	r3,72(r2)
 1003a68:	e0ffff43 	ldbu	r3,-3(fp)
 1003a6c:	00804074 	movhi	r2,257
 1003a70:	10a24a04 	addi	r2,r2,-30424
 1003a74:	10801117 	ldw	r2,68(r2)
 1003a78:	1887883a 	add	r3,r3,r2
 1003a7c:	00804074 	movhi	r2,257
 1003a80:	10a24a04 	addi	r2,r2,-30424
 1003a84:	10c01315 	stw	r3,76(r2)
 1003a88:	e0ffff03 	ldbu	r3,-4(fp)
 1003a8c:	00800804 	movi	r2,32
 1003a90:	10c7c83a 	sub	r3,r2,r3
 1003a94:	00bfffc4 	movi	r2,-1
 1003a98:	10c6d83a 	srl	r3,r2,r3
 1003a9c:	00804074 	movhi	r2,257
 1003aa0:	10a24a04 	addi	r2,r2,-30424
 1003aa4:	10c01415 	stw	r3,80(r2)
 1003aa8:	01004074 	movhi	r4,257
 1003aac:	21224a04 	addi	r4,r4,-30424
 1003ab0:	1003ad40 	call	1003ad4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, sd_card);
 1003ab4:	01004074 	movhi	r4,257
 1003ab8:	21225f04 	addi	r4,r4,-30340
 1003abc:	1003ad40 	call	1003ad4 <alt_dev_reg>
}
 1003ac0:	e037883a 	mov	sp,fp
 1003ac4:	dfc00117 	ldw	ra,4(sp)
 1003ac8:	df000017 	ldw	fp,0(sp)
 1003acc:	dec00204 	addi	sp,sp,8
 1003ad0:	f800283a 	ret

01003ad4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003ad4:	defffd04 	addi	sp,sp,-12
 1003ad8:	dfc00215 	stw	ra,8(sp)
 1003adc:	df000115 	stw	fp,4(sp)
 1003ae0:	df000104 	addi	fp,sp,4
 1003ae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003ae8:	e13fff17 	ldw	r4,-4(fp)
 1003aec:	01404074 	movhi	r5,257
 1003af0:	29627004 	addi	r5,r5,-30272
 1003af4:	1005b140 	call	1005b14 <alt_dev_llist_insert>
}
 1003af8:	e037883a 	mov	sp,fp
 1003afc:	dfc00117 	ldw	ra,4(sp)
 1003b00:	df000017 	ldw	fp,0(sp)
 1003b04:	dec00204 	addi	sp,sp,8
 1003b08:	f800283a 	ret

01003b0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003b0c:	defffa04 	addi	sp,sp,-24
 1003b10:	dfc00515 	stw	ra,20(sp)
 1003b14:	df000415 	stw	fp,16(sp)
 1003b18:	df000404 	addi	fp,sp,16
 1003b1c:	e13ffd15 	stw	r4,-12(fp)
 1003b20:	e17ffe15 	stw	r5,-8(fp)
 1003b24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003b28:	e0bffd17 	ldw	r2,-12(fp)
 1003b2c:	10800017 	ldw	r2,0(r2)
 1003b30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003b34:	e0bffc17 	ldw	r2,-16(fp)
 1003b38:	11000a04 	addi	r4,r2,40
 1003b3c:	e0bffd17 	ldw	r2,-12(fp)
 1003b40:	11c00217 	ldw	r7,8(r2)
 1003b44:	e17ffe17 	ldw	r5,-8(fp)
 1003b48:	e1bfff17 	ldw	r6,-4(fp)
 1003b4c:	10041500 	call	1004150 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003b50:	e037883a 	mov	sp,fp
 1003b54:	dfc00117 	ldw	ra,4(sp)
 1003b58:	df000017 	ldw	fp,0(sp)
 1003b5c:	dec00204 	addi	sp,sp,8
 1003b60:	f800283a 	ret

01003b64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003b64:	defffa04 	addi	sp,sp,-24
 1003b68:	dfc00515 	stw	ra,20(sp)
 1003b6c:	df000415 	stw	fp,16(sp)
 1003b70:	df000404 	addi	fp,sp,16
 1003b74:	e13ffd15 	stw	r4,-12(fp)
 1003b78:	e17ffe15 	stw	r5,-8(fp)
 1003b7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003b80:	e0bffd17 	ldw	r2,-12(fp)
 1003b84:	10800017 	ldw	r2,0(r2)
 1003b88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003b8c:	e0bffc17 	ldw	r2,-16(fp)
 1003b90:	11000a04 	addi	r4,r2,40
 1003b94:	e0bffd17 	ldw	r2,-12(fp)
 1003b98:	11c00217 	ldw	r7,8(r2)
 1003b9c:	e17ffe17 	ldw	r5,-8(fp)
 1003ba0:	e1bfff17 	ldw	r6,-4(fp)
 1003ba4:	10043740 	call	1004374 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	dfc00117 	ldw	ra,4(sp)
 1003bb0:	df000017 	ldw	fp,0(sp)
 1003bb4:	dec00204 	addi	sp,sp,8
 1003bb8:	f800283a 	ret

01003bbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003bbc:	defffc04 	addi	sp,sp,-16
 1003bc0:	dfc00315 	stw	ra,12(sp)
 1003bc4:	df000215 	stw	fp,8(sp)
 1003bc8:	df000204 	addi	fp,sp,8
 1003bcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003bd0:	e0bfff17 	ldw	r2,-4(fp)
 1003bd4:	10800017 	ldw	r2,0(r2)
 1003bd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003bdc:	e0bffe17 	ldw	r2,-8(fp)
 1003be0:	11000a04 	addi	r4,r2,40
 1003be4:	e0bfff17 	ldw	r2,-4(fp)
 1003be8:	11400217 	ldw	r5,8(r2)
 1003bec:	1003fe80 	call	1003fe8 <altera_avalon_jtag_uart_close>
}
 1003bf0:	e037883a 	mov	sp,fp
 1003bf4:	dfc00117 	ldw	ra,4(sp)
 1003bf8:	df000017 	ldw	fp,0(sp)
 1003bfc:	dec00204 	addi	sp,sp,8
 1003c00:	f800283a 	ret

01003c04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003c04:	defffa04 	addi	sp,sp,-24
 1003c08:	dfc00515 	stw	ra,20(sp)
 1003c0c:	df000415 	stw	fp,16(sp)
 1003c10:	df000404 	addi	fp,sp,16
 1003c14:	e13ffd15 	stw	r4,-12(fp)
 1003c18:	e17ffe15 	stw	r5,-8(fp)
 1003c1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1003c20:	e0bffd17 	ldw	r2,-12(fp)
 1003c24:	10800017 	ldw	r2,0(r2)
 1003c28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1003c2c:	e0bffc17 	ldw	r2,-16(fp)
 1003c30:	11000a04 	addi	r4,r2,40
 1003c34:	e17ffe17 	ldw	r5,-8(fp)
 1003c38:	e1bfff17 	ldw	r6,-4(fp)
 1003c3c:	100405c0 	call	100405c <altera_avalon_jtag_uart_ioctl>
}
 1003c40:	e037883a 	mov	sp,fp
 1003c44:	dfc00117 	ldw	ra,4(sp)
 1003c48:	df000017 	ldw	fp,0(sp)
 1003c4c:	dec00204 	addi	sp,sp,8
 1003c50:	f800283a 	ret

01003c54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1003c54:	defffb04 	addi	sp,sp,-20
 1003c58:	dfc00415 	stw	ra,16(sp)
 1003c5c:	df000315 	stw	fp,12(sp)
 1003c60:	df000304 	addi	fp,sp,12
 1003c64:	e13ffd15 	stw	r4,-12(fp)
 1003c68:	e17ffe15 	stw	r5,-8(fp)
 1003c6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003c70:	e0fffd17 	ldw	r3,-12(fp)
 1003c74:	00800044 	movi	r2,1
 1003c78:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1003c7c:	e0bffd17 	ldw	r2,-12(fp)
 1003c80:	10800017 	ldw	r2,0(r2)
 1003c84:	11000104 	addi	r4,r2,4
 1003c88:	e0bffd17 	ldw	r2,-12(fp)
 1003c8c:	10800817 	ldw	r2,32(r2)
 1003c90:	1007883a 	mov	r3,r2
 1003c94:	2005883a 	mov	r2,r4
 1003c98:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1003c9c:	e13fff17 	ldw	r4,-4(fp)
 1003ca0:	e17ffd17 	ldw	r5,-12(fp)
 1003ca4:	01804034 	movhi	r6,256
 1003ca8:	318f4304 	addi	r6,r6,15628
 1003cac:	1005ef00 	call	1005ef0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003cb0:	e0bffd17 	ldw	r2,-12(fp)
 1003cb4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003cb8:	e0bffd17 	ldw	r2,-12(fp)
 1003cbc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003cc0:	00804074 	movhi	r2,257
 1003cc4:	10a98b04 	addi	r2,r2,-22996
 1003cc8:	10800017 	ldw	r2,0(r2)
 1003ccc:	100b883a 	mov	r5,r2
 1003cd0:	01804034 	movhi	r6,256
 1003cd4:	318fce04 	addi	r6,r6,16184
 1003cd8:	e1fffd17 	ldw	r7,-12(fp)
 1003cdc:	100597c0 	call	100597c <alt_alarm_start>
 1003ce0:	1004403a 	cmpge	r2,r2,zero
 1003ce4:	1000041e 	bne	r2,zero,1003cf8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1003ce8:	e0fffd17 	ldw	r3,-12(fp)
 1003cec:	00a00034 	movhi	r2,32768
 1003cf0:	10bfffc4 	addi	r2,r2,-1
 1003cf4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1003cf8:	e037883a 	mov	sp,fp
 1003cfc:	dfc00117 	ldw	ra,4(sp)
 1003d00:	df000017 	ldw	fp,0(sp)
 1003d04:	dec00204 	addi	sp,sp,8
 1003d08:	f800283a 	ret

01003d0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1003d0c:	defff704 	addi	sp,sp,-36
 1003d10:	df000815 	stw	fp,32(sp)
 1003d14:	df000804 	addi	fp,sp,32
 1003d18:	e13ffe15 	stw	r4,-8(fp)
 1003d1c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1003d20:	e0bffe17 	ldw	r2,-8(fp)
 1003d24:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1003d28:	e0bffd17 	ldw	r2,-12(fp)
 1003d2c:	10800017 	ldw	r2,0(r2)
 1003d30:	e0bffc15 	stw	r2,-16(fp)
 1003d34:	00000006 	br	1003d38 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003d38:	e0bffc17 	ldw	r2,-16(fp)
 1003d3c:	10800104 	addi	r2,r2,4
 1003d40:	10800037 	ldwio	r2,0(r2)
 1003d44:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1003d48:	e0bffb17 	ldw	r2,-20(fp)
 1003d4c:	1080c00c 	andi	r2,r2,768
 1003d50:	1005003a 	cmpeq	r2,r2,zero
 1003d54:	1000741e 	bne	r2,zero,1003f28 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1003d58:	e0bffb17 	ldw	r2,-20(fp)
 1003d5c:	1080400c 	andi	r2,r2,256
 1003d60:	1005003a 	cmpeq	r2,r2,zero
 1003d64:	1000351e 	bne	r2,zero,1003e3c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1003d68:	00800074 	movhi	r2,1
 1003d6c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003d70:	e0bffd17 	ldw	r2,-12(fp)
 1003d74:	10800a17 	ldw	r2,40(r2)
 1003d78:	10800044 	addi	r2,r2,1
 1003d7c:	1081ffcc 	andi	r2,r2,2047
 1003d80:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1003d84:	e0bffd17 	ldw	r2,-12(fp)
 1003d88:	10c00b17 	ldw	r3,44(r2)
 1003d8c:	e0bff917 	ldw	r2,-28(fp)
 1003d90:	18801626 	beq	r3,r2,1003dec <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1003d94:	e0bffc17 	ldw	r2,-16(fp)
 1003d98:	10800037 	ldwio	r2,0(r2)
 1003d9c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1003da0:	e0bffa17 	ldw	r2,-24(fp)
 1003da4:	10a0000c 	andi	r2,r2,32768
 1003da8:	1005003a 	cmpeq	r2,r2,zero
 1003dac:	10000f1e 	bne	r2,zero,1003dec <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1003db0:	e0bffd17 	ldw	r2,-12(fp)
 1003db4:	10c00a17 	ldw	r3,40(r2)
 1003db8:	e0bffa17 	ldw	r2,-24(fp)
 1003dbc:	1009883a 	mov	r4,r2
 1003dc0:	e0bffd17 	ldw	r2,-12(fp)
 1003dc4:	1885883a 	add	r2,r3,r2
 1003dc8:	10800e04 	addi	r2,r2,56
 1003dcc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003dd0:	e0bffd17 	ldw	r2,-12(fp)
 1003dd4:	10800a17 	ldw	r2,40(r2)
 1003dd8:	10800044 	addi	r2,r2,1
 1003ddc:	10c1ffcc 	andi	r3,r2,2047
 1003de0:	e0bffd17 	ldw	r2,-12(fp)
 1003de4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1003de8:	003fe106 	br	1003d70 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1003dec:	e0bffa17 	ldw	r2,-24(fp)
 1003df0:	10bfffec 	andhi	r2,r2,65535
 1003df4:	1005003a 	cmpeq	r2,r2,zero
 1003df8:	1000101e 	bne	r2,zero,1003e3c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003dfc:	e0bffd17 	ldw	r2,-12(fp)
 1003e00:	10c00817 	ldw	r3,32(r2)
 1003e04:	00bfff84 	movi	r2,-2
 1003e08:	1886703a 	and	r3,r3,r2
 1003e0c:	e0bffd17 	ldw	r2,-12(fp)
 1003e10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1003e14:	e0bffc17 	ldw	r2,-16(fp)
 1003e18:	11000104 	addi	r4,r2,4
 1003e1c:	e0bffd17 	ldw	r2,-12(fp)
 1003e20:	10800817 	ldw	r2,32(r2)
 1003e24:	1007883a 	mov	r3,r2
 1003e28:	2005883a 	mov	r2,r4
 1003e2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003e30:	e0bffc17 	ldw	r2,-16(fp)
 1003e34:	10800104 	addi	r2,r2,4
 1003e38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1003e3c:	e0bffb17 	ldw	r2,-20(fp)
 1003e40:	1080800c 	andi	r2,r2,512
 1003e44:	1005003a 	cmpeq	r2,r2,zero
 1003e48:	103fbb1e 	bne	r2,zero,1003d38 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1003e4c:	e0bffb17 	ldw	r2,-20(fp)
 1003e50:	10bfffec 	andhi	r2,r2,65535
 1003e54:	1004d43a 	srli	r2,r2,16
 1003e58:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003e5c:	00001506 	br	1003eb4 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1003e60:	e13ffc17 	ldw	r4,-16(fp)
 1003e64:	e0bffd17 	ldw	r2,-12(fp)
 1003e68:	10c00d17 	ldw	r3,52(r2)
 1003e6c:	e0bffd17 	ldw	r2,-12(fp)
 1003e70:	1885883a 	add	r2,r3,r2
 1003e74:	10820e04 	addi	r2,r2,2104
 1003e78:	10800003 	ldbu	r2,0(r2)
 1003e7c:	10c03fcc 	andi	r3,r2,255
 1003e80:	18c0201c 	xori	r3,r3,128
 1003e84:	18ffe004 	addi	r3,r3,-128
 1003e88:	2005883a 	mov	r2,r4
 1003e8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003e90:	e0bffd17 	ldw	r2,-12(fp)
 1003e94:	10800d17 	ldw	r2,52(r2)
 1003e98:	10800044 	addi	r2,r2,1
 1003e9c:	10c1ffcc 	andi	r3,r2,2047
 1003ea0:	e0bffd17 	ldw	r2,-12(fp)
 1003ea4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1003ea8:	e0bff817 	ldw	r2,-32(fp)
 1003eac:	10bfffc4 	addi	r2,r2,-1
 1003eb0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003eb4:	e0bff817 	ldw	r2,-32(fp)
 1003eb8:	1005003a 	cmpeq	r2,r2,zero
 1003ebc:	1000051e 	bne	r2,zero,1003ed4 <altera_avalon_jtag_uart_irq+0x1c8>
 1003ec0:	e0bffd17 	ldw	r2,-12(fp)
 1003ec4:	10c00d17 	ldw	r3,52(r2)
 1003ec8:	e0bffd17 	ldw	r2,-12(fp)
 1003ecc:	10800c17 	ldw	r2,48(r2)
 1003ed0:	18bfe31e 	bne	r3,r2,1003e60 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1003ed4:	e0bff817 	ldw	r2,-32(fp)
 1003ed8:	1005003a 	cmpeq	r2,r2,zero
 1003edc:	103f961e 	bne	r2,zero,1003d38 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1003ee0:	e0bffd17 	ldw	r2,-12(fp)
 1003ee4:	10c00817 	ldw	r3,32(r2)
 1003ee8:	00bfff44 	movi	r2,-3
 1003eec:	1886703a 	and	r3,r3,r2
 1003ef0:	e0bffd17 	ldw	r2,-12(fp)
 1003ef4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003ef8:	e0bffd17 	ldw	r2,-12(fp)
 1003efc:	10800017 	ldw	r2,0(r2)
 1003f00:	11000104 	addi	r4,r2,4
 1003f04:	e0bffd17 	ldw	r2,-12(fp)
 1003f08:	10800817 	ldw	r2,32(r2)
 1003f0c:	1007883a 	mov	r3,r2
 1003f10:	2005883a 	mov	r2,r4
 1003f14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003f18:	e0bffc17 	ldw	r2,-16(fp)
 1003f1c:	10800104 	addi	r2,r2,4
 1003f20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1003f24:	003f8406 	br	1003d38 <altera_avalon_jtag_uart_irq+0x2c>
}
 1003f28:	e037883a 	mov	sp,fp
 1003f2c:	df000017 	ldw	fp,0(sp)
 1003f30:	dec00104 	addi	sp,sp,4
 1003f34:	f800283a 	ret

01003f38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1003f38:	defffc04 	addi	sp,sp,-16
 1003f3c:	df000315 	stw	fp,12(sp)
 1003f40:	df000304 	addi	fp,sp,12
 1003f44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1003f48:	e0bfff17 	ldw	r2,-4(fp)
 1003f4c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1003f50:	e0bffe17 	ldw	r2,-8(fp)
 1003f54:	10800017 	ldw	r2,0(r2)
 1003f58:	10800104 	addi	r2,r2,4
 1003f5c:	10800037 	ldwio	r2,0(r2)
 1003f60:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1003f64:	e0bffd17 	ldw	r2,-12(fp)
 1003f68:	1081000c 	andi	r2,r2,1024
 1003f6c:	1005003a 	cmpeq	r2,r2,zero
 1003f70:	10000c1e 	bne	r2,zero,1003fa4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1003f74:	e0bffe17 	ldw	r2,-8(fp)
 1003f78:	10800017 	ldw	r2,0(r2)
 1003f7c:	11000104 	addi	r4,r2,4
 1003f80:	e0bffe17 	ldw	r2,-8(fp)
 1003f84:	10800817 	ldw	r2,32(r2)
 1003f88:	10810014 	ori	r2,r2,1024
 1003f8c:	1007883a 	mov	r3,r2
 1003f90:	2005883a 	mov	r2,r4
 1003f94:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1003f98:	e0bffe17 	ldw	r2,-8(fp)
 1003f9c:	10000915 	stw	zero,36(r2)
 1003fa0:	00000a06 	br	1003fcc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1003fa4:	e0bffe17 	ldw	r2,-8(fp)
 1003fa8:	10c00917 	ldw	r3,36(r2)
 1003fac:	00a00034 	movhi	r2,32768
 1003fb0:	10bfff04 	addi	r2,r2,-4
 1003fb4:	10c00536 	bltu	r2,r3,1003fcc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1003fb8:	e0bffe17 	ldw	r2,-8(fp)
 1003fbc:	10800917 	ldw	r2,36(r2)
 1003fc0:	10c00044 	addi	r3,r2,1
 1003fc4:	e0bffe17 	ldw	r2,-8(fp)
 1003fc8:	10c00915 	stw	r3,36(r2)
 1003fcc:	00804074 	movhi	r2,257
 1003fd0:	10a98b04 	addi	r2,r2,-22996
 1003fd4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1003fd8:	e037883a 	mov	sp,fp
 1003fdc:	df000017 	ldw	fp,0(sp)
 1003fe0:	dec00104 	addi	sp,sp,4
 1003fe4:	f800283a 	ret

01003fe8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1003fe8:	defffc04 	addi	sp,sp,-16
 1003fec:	df000315 	stw	fp,12(sp)
 1003ff0:	df000304 	addi	fp,sp,12
 1003ff4:	e13ffd15 	stw	r4,-12(fp)
 1003ff8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003ffc:	00000706 	br	100401c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1004000:	e0bffe17 	ldw	r2,-8(fp)
 1004004:	1090000c 	andi	r2,r2,16384
 1004008:	1005003a 	cmpeq	r2,r2,zero
 100400c:	1000031e 	bne	r2,zero,100401c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1004010:	00bffd44 	movi	r2,-11
 1004014:	e0bfff15 	stw	r2,-4(fp)
 1004018:	00000b06 	br	1004048 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100401c:	e0bffd17 	ldw	r2,-12(fp)
 1004020:	10c00d17 	ldw	r3,52(r2)
 1004024:	e0bffd17 	ldw	r2,-12(fp)
 1004028:	10800c17 	ldw	r2,48(r2)
 100402c:	18800526 	beq	r3,r2,1004044 <altera_avalon_jtag_uart_close+0x5c>
 1004030:	e0bffd17 	ldw	r2,-12(fp)
 1004034:	10c00917 	ldw	r3,36(r2)
 1004038:	e0bffd17 	ldw	r2,-12(fp)
 100403c:	10800117 	ldw	r2,4(r2)
 1004040:	18bfef36 	bltu	r3,r2,1004000 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004044:	e03fff15 	stw	zero,-4(fp)
 1004048:	e0bfff17 	ldw	r2,-4(fp)
}
 100404c:	e037883a 	mov	sp,fp
 1004050:	df000017 	ldw	fp,0(sp)
 1004054:	dec00104 	addi	sp,sp,4
 1004058:	f800283a 	ret

0100405c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100405c:	defff804 	addi	sp,sp,-32
 1004060:	df000715 	stw	fp,28(sp)
 1004064:	df000704 	addi	fp,sp,28
 1004068:	e13ffb15 	stw	r4,-20(fp)
 100406c:	e17ffc15 	stw	r5,-16(fp)
 1004070:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1004074:	00bff9c4 	movi	r2,-25
 1004078:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100407c:	e0bffc17 	ldw	r2,-16(fp)
 1004080:	e0bfff15 	stw	r2,-4(fp)
 1004084:	e0ffff17 	ldw	r3,-4(fp)
 1004088:	189a8060 	cmpeqi	r2,r3,27137
 100408c:	1000041e 	bne	r2,zero,10040a0 <altera_avalon_jtag_uart_ioctl+0x44>
 1004090:	e0ffff17 	ldw	r3,-4(fp)
 1004094:	189a80a0 	cmpeqi	r2,r3,27138
 1004098:	10001b1e 	bne	r2,zero,1004108 <altera_avalon_jtag_uart_ioctl+0xac>
 100409c:	00002706 	br	100413c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10040a0:	e0bffb17 	ldw	r2,-20(fp)
 10040a4:	10c00117 	ldw	r3,4(r2)
 10040a8:	00a00034 	movhi	r2,32768
 10040ac:	10bfffc4 	addi	r2,r2,-1
 10040b0:	18802226 	beq	r3,r2,100413c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10040b4:	e0bffd17 	ldw	r2,-12(fp)
 10040b8:	10800017 	ldw	r2,0(r2)
 10040bc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10040c0:	e0bff917 	ldw	r2,-28(fp)
 10040c4:	10800090 	cmplti	r2,r2,2
 10040c8:	1000071e 	bne	r2,zero,10040e8 <altera_avalon_jtag_uart_ioctl+0x8c>
 10040cc:	e0fff917 	ldw	r3,-28(fp)
 10040d0:	00a00034 	movhi	r2,32768
 10040d4:	10bfffc4 	addi	r2,r2,-1
 10040d8:	18800326 	beq	r3,r2,10040e8 <altera_avalon_jtag_uart_ioctl+0x8c>
 10040dc:	e0bff917 	ldw	r2,-28(fp)
 10040e0:	e0bffe15 	stw	r2,-8(fp)
 10040e4:	00000306 	br	10040f4 <altera_avalon_jtag_uart_ioctl+0x98>
 10040e8:	00e00034 	movhi	r3,32768
 10040ec:	18ffff84 	addi	r3,r3,-2
 10040f0:	e0fffe15 	stw	r3,-8(fp)
 10040f4:	e0bffb17 	ldw	r2,-20(fp)
 10040f8:	e0fffe17 	ldw	r3,-8(fp)
 10040fc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1004100:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1004104:	00000d06 	br	100413c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1004108:	e0bffb17 	ldw	r2,-20(fp)
 100410c:	10c00117 	ldw	r3,4(r2)
 1004110:	00a00034 	movhi	r2,32768
 1004114:	10bfffc4 	addi	r2,r2,-1
 1004118:	18800826 	beq	r3,r2,100413c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100411c:	e13ffd17 	ldw	r4,-12(fp)
 1004120:	e0bffb17 	ldw	r2,-20(fp)
 1004124:	10c00917 	ldw	r3,36(r2)
 1004128:	e0bffb17 	ldw	r2,-20(fp)
 100412c:	10800117 	ldw	r2,4(r2)
 1004130:	1885803a 	cmpltu	r2,r3,r2
 1004134:	20800015 	stw	r2,0(r4)
      rc = 0;
 1004138:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100413c:	e0bffa17 	ldw	r2,-24(fp)
}
 1004140:	e037883a 	mov	sp,fp
 1004144:	df000017 	ldw	fp,0(sp)
 1004148:	dec00104 	addi	sp,sp,4
 100414c:	f800283a 	ret

01004150 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1004150:	defff204 	addi	sp,sp,-56
 1004154:	dfc00d15 	stw	ra,52(sp)
 1004158:	df000c15 	stw	fp,48(sp)
 100415c:	df000c04 	addi	fp,sp,48
 1004160:	e13ffb15 	stw	r4,-20(fp)
 1004164:	e17ffc15 	stw	r5,-16(fp)
 1004168:	e1bffd15 	stw	r6,-12(fp)
 100416c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1004170:	e0bffc17 	ldw	r2,-16(fp)
 1004174:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004178:	00004806 	br	100429c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100417c:	e0bffb17 	ldw	r2,-20(fp)
 1004180:	10800a17 	ldw	r2,40(r2)
 1004184:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004188:	e0bffb17 	ldw	r2,-20(fp)
 100418c:	10800b17 	ldw	r2,44(r2)
 1004190:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1004194:	e0fff717 	ldw	r3,-36(fp)
 1004198:	e0bff617 	ldw	r2,-40(fp)
 100419c:	18800536 	bltu	r3,r2,10041b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10041a0:	e0bff717 	ldw	r2,-36(fp)
 10041a4:	e0fff617 	ldw	r3,-40(fp)
 10041a8:	10c5c83a 	sub	r2,r2,r3
 10041ac:	e0bff815 	stw	r2,-32(fp)
 10041b0:	00000406 	br	10041c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10041b4:	00820004 	movi	r2,2048
 10041b8:	e0fff617 	ldw	r3,-40(fp)
 10041bc:	10c5c83a 	sub	r2,r2,r3
 10041c0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10041c4:	e0bff817 	ldw	r2,-32(fp)
 10041c8:	1005003a 	cmpeq	r2,r2,zero
 10041cc:	10001f1e 	bne	r2,zero,100424c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10041d0:	e0fffd17 	ldw	r3,-12(fp)
 10041d4:	e0bff817 	ldw	r2,-32(fp)
 10041d8:	1880022e 	bgeu	r3,r2,10041e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10041dc:	e0bffd17 	ldw	r2,-12(fp)
 10041e0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10041e4:	e0bffb17 	ldw	r2,-20(fp)
 10041e8:	10c00e04 	addi	r3,r2,56
 10041ec:	e0bff617 	ldw	r2,-40(fp)
 10041f0:	1887883a 	add	r3,r3,r2
 10041f4:	e0bffa17 	ldw	r2,-24(fp)
 10041f8:	1009883a 	mov	r4,r2
 10041fc:	180b883a 	mov	r5,r3
 1004200:	e1bff817 	ldw	r6,-32(fp)
 1004204:	10011200 	call	1001120 <memcpy>
      ptr   += n;
 1004208:	e0fff817 	ldw	r3,-32(fp)
 100420c:	e0bffa17 	ldw	r2,-24(fp)
 1004210:	10c5883a 	add	r2,r2,r3
 1004214:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1004218:	e0fffd17 	ldw	r3,-12(fp)
 100421c:	e0bff817 	ldw	r2,-32(fp)
 1004220:	1885c83a 	sub	r2,r3,r2
 1004224:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004228:	e0fff617 	ldw	r3,-40(fp)
 100422c:	e0bff817 	ldw	r2,-32(fp)
 1004230:	1885883a 	add	r2,r3,r2
 1004234:	10c1ffcc 	andi	r3,r2,2047
 1004238:	e0bffb17 	ldw	r2,-20(fp)
 100423c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1004240:	e0bffd17 	ldw	r2,-12(fp)
 1004244:	10800048 	cmpgei	r2,r2,1
 1004248:	103fcc1e 	bne	r2,zero,100417c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100424c:	e0fffa17 	ldw	r3,-24(fp)
 1004250:	e0bffc17 	ldw	r2,-16(fp)
 1004254:	1880141e 	bne	r3,r2,10042a8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004258:	e0bffe17 	ldw	r2,-8(fp)
 100425c:	1090000c 	andi	r2,r2,16384
 1004260:	1004c03a 	cmpne	r2,r2,zero
 1004264:	1000101e 	bne	r2,zero,10042a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1004268:	e0bffb17 	ldw	r2,-20(fp)
 100426c:	10c00a17 	ldw	r3,40(r2)
 1004270:	e0bff717 	ldw	r2,-36(fp)
 1004274:	1880051e 	bne	r3,r2,100428c <altera_avalon_jtag_uart_read+0x13c>
 1004278:	e0bffb17 	ldw	r2,-20(fp)
 100427c:	10c00917 	ldw	r3,36(r2)
 1004280:	e0bffb17 	ldw	r2,-20(fp)
 1004284:	10800117 	ldw	r2,4(r2)
 1004288:	18bff736 	bltu	r3,r2,1004268 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100428c:	e0bffb17 	ldw	r2,-20(fp)
 1004290:	10c00a17 	ldw	r3,40(r2)
 1004294:	e0bff717 	ldw	r2,-36(fp)
 1004298:	18800326 	beq	r3,r2,10042a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100429c:	e0bffd17 	ldw	r2,-12(fp)
 10042a0:	10800048 	cmpgei	r2,r2,1
 10042a4:	103fb51e 	bne	r2,zero,100417c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10042a8:	e0fffa17 	ldw	r3,-24(fp)
 10042ac:	e0bffc17 	ldw	r2,-16(fp)
 10042b0:	18801926 	beq	r3,r2,1004318 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10042b4:	0005303a 	rdctl	r2,status
 10042b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10042bc:	e0fff517 	ldw	r3,-44(fp)
 10042c0:	00bfff84 	movi	r2,-2
 10042c4:	1884703a 	and	r2,r3,r2
 10042c8:	1001703a 	wrctl	status,r2
  
  return context;
 10042cc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10042d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10042d4:	e0bffb17 	ldw	r2,-20(fp)
 10042d8:	10800817 	ldw	r2,32(r2)
 10042dc:	10c00054 	ori	r3,r2,1
 10042e0:	e0bffb17 	ldw	r2,-20(fp)
 10042e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10042e8:	e0bffb17 	ldw	r2,-20(fp)
 10042ec:	10800017 	ldw	r2,0(r2)
 10042f0:	11000104 	addi	r4,r2,4
 10042f4:	e0bffb17 	ldw	r2,-20(fp)
 10042f8:	10800817 	ldw	r2,32(r2)
 10042fc:	1007883a 	mov	r3,r2
 1004300:	2005883a 	mov	r2,r4
 1004304:	10c00035 	stwio	r3,0(r2)
 1004308:	e0bff917 	ldw	r2,-28(fp)
 100430c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004310:	e0bff417 	ldw	r2,-48(fp)
 1004314:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004318:	e0fffa17 	ldw	r3,-24(fp)
 100431c:	e0bffc17 	ldw	r2,-16(fp)
 1004320:	18800526 	beq	r3,r2,1004338 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1004324:	e0fffa17 	ldw	r3,-24(fp)
 1004328:	e0bffc17 	ldw	r2,-16(fp)
 100432c:	1887c83a 	sub	r3,r3,r2
 1004330:	e0ffff15 	stw	r3,-4(fp)
 1004334:	00000906 	br	100435c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1004338:	e0bffe17 	ldw	r2,-8(fp)
 100433c:	1090000c 	andi	r2,r2,16384
 1004340:	1005003a 	cmpeq	r2,r2,zero
 1004344:	1000031e 	bne	r2,zero,1004354 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004348:	00bffd44 	movi	r2,-11
 100434c:	e0bfff15 	stw	r2,-4(fp)
 1004350:	00000206 	br	100435c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1004354:	00bffec4 	movi	r2,-5
 1004358:	e0bfff15 	stw	r2,-4(fp)
 100435c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004360:	e037883a 	mov	sp,fp
 1004364:	dfc00117 	ldw	ra,4(sp)
 1004368:	df000017 	ldw	fp,0(sp)
 100436c:	dec00204 	addi	sp,sp,8
 1004370:	f800283a 	ret

01004374 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004374:	defff204 	addi	sp,sp,-56
 1004378:	dfc00d15 	stw	ra,52(sp)
 100437c:	df000c15 	stw	fp,48(sp)
 1004380:	df000c04 	addi	fp,sp,48
 1004384:	e13ffb15 	stw	r4,-20(fp)
 1004388:	e17ffc15 	stw	r5,-16(fp)
 100438c:	e1bffd15 	stw	r6,-12(fp)
 1004390:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004394:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1004398:	e0bffc17 	ldw	r2,-16(fp)
 100439c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10043a0:	00003a06 	br	100448c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10043a4:	e0bffb17 	ldw	r2,-20(fp)
 10043a8:	10800c17 	ldw	r2,48(r2)
 10043ac:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10043b0:	e0bffb17 	ldw	r2,-20(fp)
 10043b4:	10800d17 	ldw	r2,52(r2)
 10043b8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10043bc:	e0fffa17 	ldw	r3,-24(fp)
 10043c0:	e0bff917 	ldw	r2,-28(fp)
 10043c4:	1880062e 	bgeu	r3,r2,10043e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10043c8:	e0fff917 	ldw	r3,-28(fp)
 10043cc:	e0bffa17 	ldw	r2,-24(fp)
 10043d0:	1885c83a 	sub	r2,r3,r2
 10043d4:	10bfffc4 	addi	r2,r2,-1
 10043d8:	e0bff815 	stw	r2,-32(fp)
 10043dc:	00000c06 	br	1004410 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10043e0:	e0bff917 	ldw	r2,-28(fp)
 10043e4:	1005003a 	cmpeq	r2,r2,zero
 10043e8:	1000051e 	bne	r2,zero,1004400 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10043ec:	00820004 	movi	r2,2048
 10043f0:	e0fffa17 	ldw	r3,-24(fp)
 10043f4:	10c5c83a 	sub	r2,r2,r3
 10043f8:	e0bff815 	stw	r2,-32(fp)
 10043fc:	00000406 	br	1004410 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004400:	0081ffc4 	movi	r2,2047
 1004404:	e0fffa17 	ldw	r3,-24(fp)
 1004408:	10c5c83a 	sub	r2,r2,r3
 100440c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004410:	e0bff817 	ldw	r2,-32(fp)
 1004414:	1005003a 	cmpeq	r2,r2,zero
 1004418:	10001f1e 	bne	r2,zero,1004498 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100441c:	e0fffd17 	ldw	r3,-12(fp)
 1004420:	e0bff817 	ldw	r2,-32(fp)
 1004424:	1880022e 	bgeu	r3,r2,1004430 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1004428:	e0bffd17 	ldw	r2,-12(fp)
 100442c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1004430:	e0bffb17 	ldw	r2,-20(fp)
 1004434:	10c20e04 	addi	r3,r2,2104
 1004438:	e0bffa17 	ldw	r2,-24(fp)
 100443c:	1885883a 	add	r2,r3,r2
 1004440:	e0fffc17 	ldw	r3,-16(fp)
 1004444:	1009883a 	mov	r4,r2
 1004448:	180b883a 	mov	r5,r3
 100444c:	e1bff817 	ldw	r6,-32(fp)
 1004450:	10011200 	call	1001120 <memcpy>
      ptr   += n;
 1004454:	e0fff817 	ldw	r3,-32(fp)
 1004458:	e0bffc17 	ldw	r2,-16(fp)
 100445c:	10c5883a 	add	r2,r2,r3
 1004460:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1004464:	e0fffd17 	ldw	r3,-12(fp)
 1004468:	e0bff817 	ldw	r2,-32(fp)
 100446c:	1885c83a 	sub	r2,r3,r2
 1004470:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004474:	e0fffa17 	ldw	r3,-24(fp)
 1004478:	e0bff817 	ldw	r2,-32(fp)
 100447c:	1885883a 	add	r2,r3,r2
 1004480:	10c1ffcc 	andi	r3,r2,2047
 1004484:	e0bffb17 	ldw	r2,-20(fp)
 1004488:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100448c:	e0bffd17 	ldw	r2,-12(fp)
 1004490:	10800048 	cmpgei	r2,r2,1
 1004494:	103fc31e 	bne	r2,zero,10043a4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004498:	0005303a 	rdctl	r2,status
 100449c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10044a0:	e0fff517 	ldw	r3,-44(fp)
 10044a4:	00bfff84 	movi	r2,-2
 10044a8:	1884703a 	and	r2,r3,r2
 10044ac:	1001703a 	wrctl	status,r2
  
  return context;
 10044b0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10044b4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10044b8:	e0bffb17 	ldw	r2,-20(fp)
 10044bc:	10800817 	ldw	r2,32(r2)
 10044c0:	10c00094 	ori	r3,r2,2
 10044c4:	e0bffb17 	ldw	r2,-20(fp)
 10044c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10044cc:	e0bffb17 	ldw	r2,-20(fp)
 10044d0:	10800017 	ldw	r2,0(r2)
 10044d4:	11000104 	addi	r4,r2,4
 10044d8:	e0bffb17 	ldw	r2,-20(fp)
 10044dc:	10800817 	ldw	r2,32(r2)
 10044e0:	1007883a 	mov	r3,r2
 10044e4:	2005883a 	mov	r2,r4
 10044e8:	10c00035 	stwio	r3,0(r2)
 10044ec:	e0bff717 	ldw	r2,-36(fp)
 10044f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10044f4:	e0bff417 	ldw	r2,-48(fp)
 10044f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10044fc:	e0bffd17 	ldw	r2,-12(fp)
 1004500:	10800050 	cmplti	r2,r2,1
 1004504:	1000111e 	bne	r2,zero,100454c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1004508:	e0bffe17 	ldw	r2,-8(fp)
 100450c:	1090000c 	andi	r2,r2,16384
 1004510:	1004c03a 	cmpne	r2,r2,zero
 1004514:	1000101e 	bne	r2,zero,1004558 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1004518:	e0bffb17 	ldw	r2,-20(fp)
 100451c:	10c00d17 	ldw	r3,52(r2)
 1004520:	e0bff917 	ldw	r2,-28(fp)
 1004524:	1880051e 	bne	r3,r2,100453c <altera_avalon_jtag_uart_write+0x1c8>
 1004528:	e0bffb17 	ldw	r2,-20(fp)
 100452c:	10c00917 	ldw	r3,36(r2)
 1004530:	e0bffb17 	ldw	r2,-20(fp)
 1004534:	10800117 	ldw	r2,4(r2)
 1004538:	18bff736 	bltu	r3,r2,1004518 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100453c:	e0bffb17 	ldw	r2,-20(fp)
 1004540:	10c00d17 	ldw	r3,52(r2)
 1004544:	e0bff917 	ldw	r2,-28(fp)
 1004548:	18800326 	beq	r3,r2,1004558 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100454c:	e0bffd17 	ldw	r2,-12(fp)
 1004550:	10800048 	cmpgei	r2,r2,1
 1004554:	103fcd1e 	bne	r2,zero,100448c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1004558:	e0fffc17 	ldw	r3,-16(fp)
 100455c:	e0bff617 	ldw	r2,-40(fp)
 1004560:	18800526 	beq	r3,r2,1004578 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1004564:	e0fffc17 	ldw	r3,-16(fp)
 1004568:	e0bff617 	ldw	r2,-40(fp)
 100456c:	1887c83a 	sub	r3,r3,r2
 1004570:	e0ffff15 	stw	r3,-4(fp)
 1004574:	00000906 	br	100459c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1004578:	e0bffe17 	ldw	r2,-8(fp)
 100457c:	1090000c 	andi	r2,r2,16384
 1004580:	1005003a 	cmpeq	r2,r2,zero
 1004584:	1000031e 	bne	r2,zero,1004594 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1004588:	00bffd44 	movi	r2,-11
 100458c:	e0bfff15 	stw	r2,-4(fp)
 1004590:	00000206 	br	100459c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 1004594:	00bffec4 	movi	r2,-5
 1004598:	e0bfff15 	stw	r2,-4(fp)
 100459c:	e0bfff17 	ldw	r2,-4(fp)
}
 10045a0:	e037883a 	mov	sp,fp
 10045a4:	dfc00117 	ldw	ra,4(sp)
 10045a8:	df000017 	ldw	fp,0(sp)
 10045ac:	dec00204 	addi	sp,sp,8
 10045b0:	f800283a 	ret

010045b4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10045b4:	defff904 	addi	sp,sp,-28
 10045b8:	dfc00615 	stw	ra,24(sp)
 10045bc:	df000515 	stw	fp,20(sp)
 10045c0:	df000504 	addi	fp,sp,20
 10045c4:	e13ffe15 	stw	r4,-8(fp)
 10045c8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10045cc:	e0bffe17 	ldw	r2,-8(fp)
 10045d0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10045d4:	e0bffe17 	ldw	r2,-8(fp)
 10045d8:	10800104 	addi	r2,r2,4
 10045dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10045e0:	0005303a 	rdctl	r2,status
 10045e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10045e8:	e0fffc17 	ldw	r3,-16(fp)
 10045ec:	00bfff84 	movi	r2,-2
 10045f0:	1884703a 	and	r2,r3,r2
 10045f4:	1001703a 	wrctl	status,r2
  
  return context;
 10045f8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10045fc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1004600:	100640c0 	call	100640c <alt_tick>
 1004604:	e0bffd17 	ldw	r2,-12(fp)
 1004608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100460c:	e0bffb17 	ldw	r2,-20(fp)
 1004610:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1004614:	e037883a 	mov	sp,fp
 1004618:	dfc00117 	ldw	ra,4(sp)
 100461c:	df000017 	ldw	fp,0(sp)
 1004620:	dec00204 	addi	sp,sp,8
 1004624:	f800283a 	ret

01004628 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1004628:	defff904 	addi	sp,sp,-28
 100462c:	dfc00615 	stw	ra,24(sp)
 1004630:	df000515 	stw	fp,20(sp)
 1004634:	df000504 	addi	fp,sp,20
 1004638:	e13ffc15 	stw	r4,-16(fp)
 100463c:	e17ffd15 	stw	r5,-12(fp)
 1004640:	e1bffe15 	stw	r6,-8(fp)
 1004644:	e1ffff15 	stw	r7,-4(fp)
 1004648:	e0bfff17 	ldw	r2,-4(fp)
 100464c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1004650:	00804074 	movhi	r2,257
 1004654:	10a98b04 	addi	r2,r2,-22996
 1004658:	10800017 	ldw	r2,0(r2)
 100465c:	1004c03a 	cmpne	r2,r2,zero
 1004660:	1000041e 	bne	r2,zero,1004674 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1004664:	00c04074 	movhi	r3,257
 1004668:	18e98b04 	addi	r3,r3,-22996
 100466c:	e0bffb17 	ldw	r2,-20(fp)
 1004670:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004674:	e0bffc17 	ldw	r2,-16(fp)
 1004678:	10800104 	addi	r2,r2,4
 100467c:	1007883a 	mov	r3,r2
 1004680:	008001c4 	movi	r2,7
 1004684:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1004688:	e13ffe17 	ldw	r4,-8(fp)
 100468c:	e17ffc17 	ldw	r5,-16(fp)
 1004690:	01804034 	movhi	r6,256
 1004694:	31916d04 	addi	r6,r6,17844
 1004698:	1005ef00 	call	1005ef0 <alt_irq_register>
#endif  
}
 100469c:	e037883a 	mov	sp,fp
 10046a0:	dfc00117 	ldw	ra,4(sp)
 10046a4:	df000017 	ldw	fp,0(sp)
 10046a8:	dec00204 	addi	sp,sp,8
 10046ac:	f800283a 	ret

010046b0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 10046b0:	defffc04 	addi	sp,sp,-16
 10046b4:	df000315 	stw	fp,12(sp)
 10046b8:	df000304 	addi	fp,sp,12
 10046bc:	e13ffe15 	stw	r4,-8(fp)
 10046c0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 10046c4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 10046c8:	e0bfff17 	ldw	r2,-4(fp)
 10046cc:	1004c03a 	cmpne	r2,r2,zero
 10046d0:	1000061e 	bne	r2,zero,10046ec <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 10046d4:	e0bffe17 	ldw	r2,-8(fp)
 10046d8:	1007883a 	mov	r3,r2
 10046dc:	e0bffd03 	ldbu	r2,-12(fp)
 10046e0:	10c4b03a 	or	r2,r2,r3
 10046e4:	e0bffd05 	stb	r2,-12(fp)
 10046e8:	00000806 	br	100470c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10046ec:	e0bffe17 	ldw	r2,-8(fp)
 10046f0:	1007883a 	mov	r3,r2
 10046f4:	e0bffd03 	ldbu	r2,-12(fp)
 10046f8:	10c4b03a 	or	r2,r2,r3
 10046fc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1004700:	e0bffd03 	ldbu	r2,-12(fp)
 1004704:	10801014 	ori	r2,r2,64
 1004708:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100470c:	e0fffd03 	ldbu	r3,-12(fp)
 1004710:	00bfe004 	movi	r2,-128
 1004714:	1884b03a 	or	r2,r3,r2
 1004718:	10803fcc 	andi	r2,r2,255
}
 100471c:	e037883a 	mov	sp,fp
 1004720:	df000017 	ldw	fp,0(sp)
 1004724:	dec00104 	addi	sp,sp,4
 1004728:	f800283a 	ret

0100472c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100472c:	defffd04 	addi	sp,sp,-12
 1004730:	df000215 	stw	fp,8(sp)
 1004734:	df000204 	addi	fp,sp,8
 1004738:	e13ffe15 	stw	r4,-8(fp)
 100473c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1004740:	e0bffe17 	ldw	r2,-8(fp)
 1004744:	10800a17 	ldw	r2,40(r2)
 1004748:	e0ffff03 	ldbu	r3,-4(fp)
 100474c:	10c00025 	stbio	r3,0(r2)
}
 1004750:	e037883a 	mov	sp,fp
 1004754:	df000017 	ldw	fp,0(sp)
 1004758:	dec00104 	addi	sp,sp,4
 100475c:	f800283a 	ret

01004760 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1004760:	defffe04 	addi	sp,sp,-8
 1004764:	df000115 	stw	fp,4(sp)
 1004768:	df000104 	addi	fp,sp,4
 100476c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1004770:	e0bfff17 	ldw	r2,-4(fp)
 1004774:	10800a17 	ldw	r2,40(r2)
 1004778:	1007883a 	mov	r3,r2
 100477c:	00800044 	movi	r2,1
 1004780:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1004784:	e037883a 	mov	sp,fp
 1004788:	df000017 	ldw	fp,0(sp)
 100478c:	dec00104 	addi	sp,sp,4
 1004790:	f800283a 	ret

01004794 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1004794:	defffc04 	addi	sp,sp,-16
 1004798:	dfc00315 	stw	ra,12(sp)
 100479c:	df000215 	stw	fp,8(sp)
 10047a0:	df000204 	addi	fp,sp,8
 10047a4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 10047a8:	e13fff17 	ldw	r4,-4(fp)
 10047ac:	01404074 	movhi	r5,257
 10047b0:	29627004 	addi	r5,r5,-30272
 10047b4:	1005cf00 	call	1005cf0 <alt_find_dev>
 10047b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10047bc:	e0bffe17 	ldw	r2,-8(fp)
}
 10047c0:	e037883a 	mov	sp,fp
 10047c4:	dfc00117 	ldw	ra,4(sp)
 10047c8:	df000017 	ldw	fp,0(sp)
 10047cc:	dec00204 	addi	sp,sp,8
 10047d0:	f800283a 	ret

010047d4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10047d4:	defffb04 	addi	sp,sp,-20
 10047d8:	df000415 	stw	fp,16(sp)
 10047dc:	df000404 	addi	fp,sp,16
 10047e0:	e13ffd15 	stw	r4,-12(fp)
 10047e4:	e17ffe15 	stw	r5,-8(fp)
 10047e8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10047ec:	e03ffc15 	stw	zero,-16(fp)
 10047f0:	00000f06 	br	1004830 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10047f4:	e0bffd17 	ldw	r2,-12(fp)
 10047f8:	10800a17 	ldw	r2,40(r2)
 10047fc:	11000044 	addi	r4,r2,1
 1004800:	e0fffc17 	ldw	r3,-16(fp)
 1004804:	e0bffe17 	ldw	r2,-8(fp)
 1004808:	1885883a 	add	r2,r3,r2
 100480c:	10800003 	ldbu	r2,0(r2)
 1004810:	10c03fcc 	andi	r3,r2,255
 1004814:	18c0201c 	xori	r3,r3,128
 1004818:	18ffe004 	addi	r3,r3,-128
 100481c:	2005883a 	mov	r2,r4
 1004820:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1004824:	e0bffc17 	ldw	r2,-16(fp)
 1004828:	10800044 	addi	r2,r2,1
 100482c:	e0bffc15 	stw	r2,-16(fp)
 1004830:	e0fffc17 	ldw	r3,-16(fp)
 1004834:	e0bfff17 	ldw	r2,-4(fp)
 1004838:	18bfee36 	bltu	r3,r2,10047f4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100483c:	e037883a 	mov	sp,fp
 1004840:	df000017 	ldw	fp,0(sp)
 1004844:	dec00104 	addi	sp,sp,4
 1004848:	f800283a 	ret

0100484c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100484c:	defffd04 	addi	sp,sp,-12
 1004850:	df000215 	stw	fp,8(sp)
 1004854:	df000204 	addi	fp,sp,8
 1004858:	e13ffe15 	stw	r4,-8(fp)
 100485c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1004860:	00000d06 	br	1004898 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1004864:	e0bffe17 	ldw	r2,-8(fp)
 1004868:	10800a17 	ldw	r2,40(r2)
 100486c:	11000044 	addi	r4,r2,1
 1004870:	e0bfff17 	ldw	r2,-4(fp)
 1004874:	10800003 	ldbu	r2,0(r2)
 1004878:	10c03fcc 	andi	r3,r2,255
 100487c:	18c0201c 	xori	r3,r3,128
 1004880:	18ffe004 	addi	r3,r3,-128
 1004884:	2005883a 	mov	r2,r4
 1004888:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100488c:	e0bfff17 	ldw	r2,-4(fp)
 1004890:	10800044 	addi	r2,r2,1
 1004894:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1004898:	e0bfff17 	ldw	r2,-4(fp)
 100489c:	10800003 	ldbu	r2,0(r2)
 10048a0:	10803fcc 	andi	r2,r2,255
 10048a4:	1080201c 	xori	r2,r2,128
 10048a8:	10bfe004 	addi	r2,r2,-128
 10048ac:	1004c03a 	cmpne	r2,r2,zero
 10048b0:	103fec1e 	bne	r2,zero,1004864 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 10048b4:	e037883a 	mov	sp,fp
 10048b8:	df000017 	ldw	fp,0(sp)
 10048bc:	dec00104 	addi	sp,sp,4
 10048c0:	f800283a 	ret

010048c4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10048c4:	defffb04 	addi	sp,sp,-20
 10048c8:	dfc00415 	stw	ra,16(sp)
 10048cc:	df000315 	stw	fp,12(sp)
 10048d0:	df000304 	addi	fp,sp,12
 10048d4:	e13ffd15 	stw	r4,-12(fp)
 10048d8:	e17ffe15 	stw	r5,-8(fp)
 10048dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10048e0:	e0bffd17 	ldw	r2,-12(fp)
 10048e4:	10800017 	ldw	r2,0(r2)
 10048e8:	1009883a 	mov	r4,r2
 10048ec:	e1bfff17 	ldw	r6,-4(fp)
 10048f0:	e17ffe17 	ldw	r5,-8(fp)
 10048f4:	10047d40 	call	10047d4 <alt_up_character_lcd_write>
	return 0;
 10048f8:	0005883a 	mov	r2,zero
}
 10048fc:	e037883a 	mov	sp,fp
 1004900:	dfc00117 	ldw	ra,4(sp)
 1004904:	df000017 	ldw	fp,0(sp)
 1004908:	dec00204 	addi	sp,sp,8
 100490c:	f800283a 	ret

01004910 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1004910:	defff904 	addi	sp,sp,-28
 1004914:	dfc00615 	stw	ra,24(sp)
 1004918:	df000515 	stw	fp,20(sp)
 100491c:	df000504 	addi	fp,sp,20
 1004920:	e13ffc15 	stw	r4,-16(fp)
 1004924:	e17ffd15 	stw	r5,-12(fp)
 1004928:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100492c:	e0bffd17 	ldw	r2,-12(fp)
 1004930:	10800a28 	cmpgeui	r2,r2,40
 1004934:	1000031e 	bne	r2,zero,1004944 <alt_up_character_lcd_set_cursor_pos+0x34>
 1004938:	e0bffe17 	ldw	r2,-8(fp)
 100493c:	108000b0 	cmpltui	r2,r2,2
 1004940:	1000031e 	bne	r2,zero,1004950 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1004944:	00bfffc4 	movi	r2,-1
 1004948:	e0bfff15 	stw	r2,-4(fp)
 100494c:	00000806 	br	1004970 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1004950:	e13ffd17 	ldw	r4,-12(fp)
 1004954:	e17ffe17 	ldw	r5,-8(fp)
 1004958:	10046b00 	call	10046b0 <get_DDRAM_addr>
 100495c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1004960:	e17ffb03 	ldbu	r5,-20(fp)
 1004964:	e13ffc17 	ldw	r4,-16(fp)
 1004968:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
	return 0;
 100496c:	e03fff15 	stw	zero,-4(fp)
 1004970:	e0bfff17 	ldw	r2,-4(fp)
}
 1004974:	e037883a 	mov	sp,fp
 1004978:	dfc00117 	ldw	ra,4(sp)
 100497c:	df000017 	ldw	fp,0(sp)
 1004980:	dec00204 	addi	sp,sp,8
 1004984:	f800283a 	ret

01004988 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1004988:	defff904 	addi	sp,sp,-28
 100498c:	dfc00615 	stw	ra,24(sp)
 1004990:	df000515 	stw	fp,20(sp)
 1004994:	df000504 	addi	fp,sp,20
 1004998:	e13ffc15 	stw	r4,-16(fp)
 100499c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 10049a0:	e0bffd17 	ldw	r2,-12(fp)
 10049a4:	1005003a 	cmpeq	r2,r2,zero
 10049a8:	10001e1e 	bne	r2,zero,1004a24 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 10049ac:	e0bffd17 	ldw	r2,-12(fp)
 10049b0:	10800050 	cmplti	r2,r2,1
 10049b4:	1000031e 	bne	r2,zero,10049c4 <alt_up_character_lcd_shift_cursor+0x3c>
 10049b8:	00800504 	movi	r2,20
 10049bc:	e0bfff05 	stb	r2,-4(fp)
 10049c0:	00000206 	br	10049cc <alt_up_character_lcd_shift_cursor+0x44>
 10049c4:	00c00404 	movi	r3,16
 10049c8:	e0ffff05 	stb	r3,-4(fp)
 10049cc:	e0bfff03 	ldbu	r2,-4(fp)
 10049d0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10049d4:	e0fffd17 	ldw	r3,-12(fp)
 10049d8:	e0fffe15 	stw	r3,-8(fp)
 10049dc:	e0fffe17 	ldw	r3,-8(fp)
 10049e0:	1804403a 	cmpge	r2,r3,zero
 10049e4:	1000031e 	bne	r2,zero,10049f4 <alt_up_character_lcd_shift_cursor+0x6c>
 10049e8:	e0bffe17 	ldw	r2,-8(fp)
 10049ec:	0085c83a 	sub	r2,zero,r2
 10049f0:	e0bffe15 	stw	r2,-8(fp)
 10049f4:	e0fffe17 	ldw	r3,-8(fp)
 10049f8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10049fc:	00000306 	br	1004a0c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1004a00:	e17ffb43 	ldbu	r5,-19(fp)
 1004a04:	e13ffc17 	ldw	r4,-16(fp)
 1004a08:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1004a0c:	e0bffb03 	ldbu	r2,-20(fp)
 1004a10:	10bfffc4 	addi	r2,r2,-1
 1004a14:	e0bffb05 	stb	r2,-20(fp)
 1004a18:	e0bffb03 	ldbu	r2,-20(fp)
 1004a1c:	10803fd8 	cmpnei	r2,r2,255
 1004a20:	103ff71e 	bne	r2,zero,1004a00 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1004a24:	e037883a 	mov	sp,fp
 1004a28:	dfc00117 	ldw	ra,4(sp)
 1004a2c:	df000017 	ldw	fp,0(sp)
 1004a30:	dec00204 	addi	sp,sp,8
 1004a34:	f800283a 	ret

01004a38 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1004a38:	defff904 	addi	sp,sp,-28
 1004a3c:	dfc00615 	stw	ra,24(sp)
 1004a40:	df000515 	stw	fp,20(sp)
 1004a44:	df000504 	addi	fp,sp,20
 1004a48:	e13ffc15 	stw	r4,-16(fp)
 1004a4c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1004a50:	e0bffd17 	ldw	r2,-12(fp)
 1004a54:	1005003a 	cmpeq	r2,r2,zero
 1004a58:	10001e1e 	bne	r2,zero,1004ad4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1004a5c:	e0bffd17 	ldw	r2,-12(fp)
 1004a60:	10800050 	cmplti	r2,r2,1
 1004a64:	1000031e 	bne	r2,zero,1004a74 <alt_up_character_lcd_shift_display+0x3c>
 1004a68:	00800704 	movi	r2,28
 1004a6c:	e0bfff05 	stb	r2,-4(fp)
 1004a70:	00000206 	br	1004a7c <alt_up_character_lcd_shift_display+0x44>
 1004a74:	00c00604 	movi	r3,24
 1004a78:	e0ffff05 	stb	r3,-4(fp)
 1004a7c:	e0bfff03 	ldbu	r2,-4(fp)
 1004a80:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1004a84:	e0fffd17 	ldw	r3,-12(fp)
 1004a88:	e0fffe15 	stw	r3,-8(fp)
 1004a8c:	e0fffe17 	ldw	r3,-8(fp)
 1004a90:	1804403a 	cmpge	r2,r3,zero
 1004a94:	1000031e 	bne	r2,zero,1004aa4 <alt_up_character_lcd_shift_display+0x6c>
 1004a98:	e0bffe17 	ldw	r2,-8(fp)
 1004a9c:	0085c83a 	sub	r2,zero,r2
 1004aa0:	e0bffe15 	stw	r2,-8(fp)
 1004aa4:	e0fffe17 	ldw	r3,-8(fp)
 1004aa8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1004aac:	00000306 	br	1004abc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1004ab0:	e17ffb43 	ldbu	r5,-19(fp)
 1004ab4:	e13ffc17 	ldw	r4,-16(fp)
 1004ab8:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1004abc:	e0bffb03 	ldbu	r2,-20(fp)
 1004ac0:	10bfffc4 	addi	r2,r2,-1
 1004ac4:	e0bffb05 	stb	r2,-20(fp)
 1004ac8:	e0bffb03 	ldbu	r2,-20(fp)
 1004acc:	10803fd8 	cmpnei	r2,r2,255
 1004ad0:	103ff71e 	bne	r2,zero,1004ab0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1004ad4:	e037883a 	mov	sp,fp
 1004ad8:	dfc00117 	ldw	ra,4(sp)
 1004adc:	df000017 	ldw	fp,0(sp)
 1004ae0:	dec00204 	addi	sp,sp,8
 1004ae4:	f800283a 	ret

01004ae8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1004ae8:	defff904 	addi	sp,sp,-28
 1004aec:	dfc00615 	stw	ra,24(sp)
 1004af0:	df000515 	stw	fp,20(sp)
 1004af4:	df000504 	addi	fp,sp,20
 1004af8:	e13ffc15 	stw	r4,-16(fp)
 1004afc:	e17ffd15 	stw	r5,-12(fp)
 1004b00:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1004b04:	e0bffd17 	ldw	r2,-12(fp)
 1004b08:	10800a28 	cmpgeui	r2,r2,40
 1004b0c:	1000031e 	bne	r2,zero,1004b1c <alt_up_character_lcd_erase_pos+0x34>
 1004b10:	e0bffe17 	ldw	r2,-8(fp)
 1004b14:	108000b0 	cmpltui	r2,r2,2
 1004b18:	1000031e 	bne	r2,zero,1004b28 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1004b1c:	00bfffc4 	movi	r2,-1
 1004b20:	e0bfff15 	stw	r2,-4(fp)
 1004b24:	00000e06 	br	1004b60 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1004b28:	e13ffd17 	ldw	r4,-12(fp)
 1004b2c:	e17ffe17 	ldw	r5,-8(fp)
 1004b30:	10046b00 	call	10046b0 <get_DDRAM_addr>
 1004b34:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1004b38:	e17ffb03 	ldbu	r5,-20(fp)
 1004b3c:	e13ffc17 	ldw	r4,-16(fp)
 1004b40:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1004b44:	e0bffc17 	ldw	r2,-16(fp)
 1004b48:	10800a17 	ldw	r2,40(r2)
 1004b4c:	10800044 	addi	r2,r2,1
 1004b50:	1007883a 	mov	r3,r2
 1004b54:	00800084 	movi	r2,2
 1004b58:	18800025 	stbio	r2,0(r3)
	return 0;
 1004b5c:	e03fff15 	stw	zero,-4(fp)
 1004b60:	e0bfff17 	ldw	r2,-4(fp)
}
 1004b64:	e037883a 	mov	sp,fp
 1004b68:	dfc00117 	ldw	ra,4(sp)
 1004b6c:	df000017 	ldw	fp,0(sp)
 1004b70:	dec00204 	addi	sp,sp,8
 1004b74:	f800283a 	ret

01004b78 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1004b78:	defffd04 	addi	sp,sp,-12
 1004b7c:	dfc00215 	stw	ra,8(sp)
 1004b80:	df000115 	stw	fp,4(sp)
 1004b84:	df000104 	addi	fp,sp,4
 1004b88:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1004b8c:	e13fff17 	ldw	r4,-4(fp)
 1004b90:	01400304 	movi	r5,12
 1004b94:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
}
 1004b98:	e037883a 	mov	sp,fp
 1004b9c:	dfc00117 	ldw	ra,4(sp)
 1004ba0:	df000017 	ldw	fp,0(sp)
 1004ba4:	dec00204 	addi	sp,sp,8
 1004ba8:	f800283a 	ret

01004bac <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1004bac:	defffd04 	addi	sp,sp,-12
 1004bb0:	dfc00215 	stw	ra,8(sp)
 1004bb4:	df000115 	stw	fp,4(sp)
 1004bb8:	df000104 	addi	fp,sp,4
 1004bbc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1004bc0:	e13fff17 	ldw	r4,-4(fp)
 1004bc4:	014003c4 	movi	r5,15
 1004bc8:	100472c0 	call	100472c <alt_up_character_lcd_send_cmd>
}
 1004bcc:	e037883a 	mov	sp,fp
 1004bd0:	dfc00117 	ldw	ra,4(sp)
 1004bd4:	df000017 	ldw	fp,0(sp)
 1004bd8:	dec00204 	addi	sp,sp,8
 1004bdc:	f800283a 	ret

01004be0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 1004be0:	defffd04 	addi	sp,sp,-12
 1004be4:	df000215 	stw	fp,8(sp)
 1004be8:	df000204 	addi	fp,sp,8
 1004bec:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 1004bf0:	e0bfff17 	ldw	r2,-4(fp)
 1004bf4:	1080400c 	andi	r2,r2,256
 1004bf8:	1004d23a 	srli	r2,r2,8
 1004bfc:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 1004c00:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004c04:	e037883a 	mov	sp,fp
 1004c08:	df000017 	ldw	fp,0(sp)
 1004c0c:	dec00104 	addi	sp,sp,4
 1004c10:	f800283a 	ret

01004c14 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 1004c14:	defffd04 	addi	sp,sp,-12
 1004c18:	df000215 	stw	fp,8(sp)
 1004c1c:	df000204 	addi	fp,sp,8
 1004c20:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 1004c24:	e0bfff17 	ldw	r2,-4(fp)
 1004c28:	1080004c 	andi	r2,r2,1
 1004c2c:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1004c30:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004c34:	e037883a 	mov	sp,fp
 1004c38:	df000017 	ldw	fp,0(sp)
 1004c3c:	dec00104 	addi	sp,sp,4
 1004c40:	f800283a 	ret

01004c44 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 1004c44:	defffd04 	addi	sp,sp,-12
 1004c48:	df000215 	stw	fp,8(sp)
 1004c4c:	df000204 	addi	fp,sp,8
 1004c50:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 1004c54:	e0bfff17 	ldw	r2,-4(fp)
 1004c58:	1081000c 	andi	r2,r2,1024
 1004c5c:	1004d2ba 	srli	r2,r2,10
 1004c60:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1004c64:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004c68:	e037883a 	mov	sp,fp
 1004c6c:	df000017 	ldw	fp,0(sp)
 1004c70:	dec00104 	addi	sp,sp,4
 1004c74:	f800283a 	ret

01004c78 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 1004c78:	defffd04 	addi	sp,sp,-12
 1004c7c:	df000215 	stw	fp,8(sp)
 1004c80:	df000204 	addi	fp,sp,8
 1004c84:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 1004c88:	e0bfff17 	ldw	r2,-4(fp)
 1004c8c:	10bfffec 	andhi	r2,r2,65535
 1004c90:	1004d43a 	srli	r2,r2,16
 1004c94:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 1004c98:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1004c9c:	e037883a 	mov	sp,fp
 1004ca0:	df000017 	ldw	fp,0(sp)
 1004ca4:	dec00104 	addi	sp,sp,4
 1004ca8:	f800283a 	ret

01004cac <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 1004cac:	defffd04 	addi	sp,sp,-12
 1004cb0:	df000215 	stw	fp,8(sp)
 1004cb4:	df000204 	addi	fp,sp,8
 1004cb8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 1004cbc:	e0bfff17 	ldw	r2,-4(fp)
 1004cc0:	10a0000c 	andi	r2,r2,32768
 1004cc4:	1004d3fa 	srli	r2,r2,15
 1004cc8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 1004ccc:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004cd0:	e037883a 	mov	sp,fp
 1004cd4:	df000017 	ldw	fp,0(sp)
 1004cd8:	dec00104 	addi	sp,sp,4
 1004cdc:	f800283a 	ret

01004ce0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 1004ce0:	defffd04 	addi	sp,sp,-12
 1004ce4:	df000215 	stw	fp,8(sp)
 1004ce8:	df000204 	addi	fp,sp,8
 1004cec:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 1004cf0:	e0bfff17 	ldw	r2,-4(fp)
 1004cf4:	e0bffe05 	stb	r2,-8(fp)
	return data;
 1004cf8:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004cfc:	e037883a 	mov	sp,fp
 1004d00:	df000017 	ldw	fp,0(sp)
 1004d04:	dec00104 	addi	sp,sp,4
 1004d08:	f800283a 	ret

01004d0c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 1004d0c:	defffb04 	addi	sp,sp,-20
 1004d10:	dfc00415 	stw	ra,16(sp)
 1004d14:	df000315 	stw	fp,12(sp)
 1004d18:	df000304 	addi	fp,sp,12
 1004d1c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 1004d20:	e13fff17 	ldw	r4,-4(fp)
 1004d24:	01403fc4 	movi	r5,255
 1004d28:	1004f6c0 	call	1004f6c <alt_up_ps2_write_data_byte_with_ack>
 1004d2c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 1004d30:	e0bffd17 	ldw	r2,-12(fp)
 1004d34:	1004c03a 	cmpne	r2,r2,zero
 1004d38:	1000221e 	bne	r2,zero,1004dc4 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1004d3c:	e17ffe04 	addi	r5,fp,-8
 1004d40:	e13fff17 	ldw	r4,-4(fp)
 1004d44:	1004fd80 	call	1004fd8 <alt_up_ps2_read_data_byte_timeout>
 1004d48:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 1004d4c:	e0bffd17 	ldw	r2,-12(fp)
 1004d50:	1004c03a 	cmpne	r2,r2,zero
 1004d54:	10001b1e 	bne	r2,zero,1004dc4 <alt_up_ps2_init+0xb8>
 1004d58:	e0bffe03 	ldbu	r2,-8(fp)
 1004d5c:	10803fcc 	andi	r2,r2,255
 1004d60:	10802a98 	cmpnei	r2,r2,170
 1004d64:	1000171e 	bne	r2,zero,1004dc4 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1004d68:	e17ffe04 	addi	r5,fp,-8
 1004d6c:	e13fff17 	ldw	r4,-4(fp)
 1004d70:	1004fd80 	call	1004fd8 <alt_up_ps2_read_data_byte_timeout>
 1004d74:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 1004d78:	e0bffd17 	ldw	r2,-12(fp)
 1004d7c:	10bfe318 	cmpnei	r2,r2,-116
 1004d80:	1000041e 	bne	r2,zero,1004d94 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 1004d84:	e0ffff17 	ldw	r3,-4(fp)
 1004d88:	00800044 	movi	r2,1
 1004d8c:	18800d15 	stw	r2,52(r3)
 1004d90:	00000c06 	br	1004dc4 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 1004d94:	e0bffd17 	ldw	r2,-12(fp)
 1004d98:	1004c03a 	cmpne	r2,r2,zero
 1004d9c:	1000091e 	bne	r2,zero,1004dc4 <alt_up_ps2_init+0xb8>
 1004da0:	e0bffe03 	ldbu	r2,-8(fp)
 1004da4:	10803fcc 	andi	r2,r2,255
 1004da8:	1004c03a 	cmpne	r2,r2,zero
 1004dac:	1000051e 	bne	r2,zero,1004dc4 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 1004db0:	e0bfff17 	ldw	r2,-4(fp)
 1004db4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 1004db8:	e13fff17 	ldw	r4,-4(fp)
 1004dbc:	01403d04 	movi	r5,244
 1004dc0:	1004e840 	call	1004e84 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 1004dc4:	e037883a 	mov	sp,fp
 1004dc8:	dfc00117 	ldw	ra,4(sp)
 1004dcc:	df000017 	ldw	fp,0(sp)
 1004dd0:	dec00204 	addi	sp,sp,8
 1004dd4:	f800283a 	ret

01004dd8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1004dd8:	defffd04 	addi	sp,sp,-12
 1004ddc:	df000215 	stw	fp,8(sp)
 1004de0:	df000204 	addi	fp,sp,8
 1004de4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1004de8:	e0bfff17 	ldw	r2,-4(fp)
 1004dec:	10800a17 	ldw	r2,40(r2)
 1004df0:	10800104 	addi	r2,r2,4
 1004df4:	10800037 	ldwio	r2,0(r2)
 1004df8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1004dfc:	e0bffe17 	ldw	r2,-8(fp)
 1004e00:	10800054 	ori	r2,r2,1
 1004e04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1004e08:	e0bfff17 	ldw	r2,-4(fp)
 1004e0c:	10800a17 	ldw	r2,40(r2)
 1004e10:	10800104 	addi	r2,r2,4
 1004e14:	e0fffe17 	ldw	r3,-8(fp)
 1004e18:	10c00035 	stwio	r3,0(r2)
}
 1004e1c:	e037883a 	mov	sp,fp
 1004e20:	df000017 	ldw	fp,0(sp)
 1004e24:	dec00104 	addi	sp,sp,4
 1004e28:	f800283a 	ret

01004e2c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1004e2c:	defffd04 	addi	sp,sp,-12
 1004e30:	df000215 	stw	fp,8(sp)
 1004e34:	df000204 	addi	fp,sp,8
 1004e38:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1004e3c:	e0bfff17 	ldw	r2,-4(fp)
 1004e40:	10800a17 	ldw	r2,40(r2)
 1004e44:	10800104 	addi	r2,r2,4
 1004e48:	10800037 	ldwio	r2,0(r2)
 1004e4c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1004e50:	e0fffe17 	ldw	r3,-8(fp)
 1004e54:	00bfff84 	movi	r2,-2
 1004e58:	1884703a 	and	r2,r3,r2
 1004e5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1004e60:	e0bfff17 	ldw	r2,-4(fp)
 1004e64:	10800a17 	ldw	r2,40(r2)
 1004e68:	10800104 	addi	r2,r2,4
 1004e6c:	e0fffe17 	ldw	r3,-8(fp)
 1004e70:	10c00035 	stwio	r3,0(r2)
}
 1004e74:	e037883a 	mov	sp,fp
 1004e78:	df000017 	ldw	fp,0(sp)
 1004e7c:	dec00104 	addi	sp,sp,4
 1004e80:	f800283a 	ret

01004e84 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1004e84:	defffa04 	addi	sp,sp,-24
 1004e88:	dfc00515 	stw	ra,20(sp)
 1004e8c:	df000415 	stw	fp,16(sp)
 1004e90:	df000404 	addi	fp,sp,16
 1004e94:	e13ffd15 	stw	r4,-12(fp)
 1004e98:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 1004e9c:	e0bffd17 	ldw	r2,-12(fp)
 1004ea0:	10800a17 	ldw	r2,40(r2)
 1004ea4:	e0fffe03 	ldbu	r3,-8(fp)
 1004ea8:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 1004eac:	e0bffd17 	ldw	r2,-12(fp)
 1004eb0:	10800a17 	ldw	r2,40(r2)
 1004eb4:	10800104 	addi	r2,r2,4
 1004eb8:	10800037 	ldwio	r2,0(r2)
 1004ebc:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 1004ec0:	e13ffc17 	ldw	r4,-16(fp)
 1004ec4:	1004c440 	call	1004c44 <read_CE_bit>
 1004ec8:	10803fcc 	andi	r2,r2,255
 1004ecc:	1005003a 	cmpeq	r2,r2,zero
 1004ed0:	1000031e 	bne	r2,zero,1004ee0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 1004ed4:	00bffec4 	movi	r2,-5
 1004ed8:	e0bfff15 	stw	r2,-4(fp)
 1004edc:	00000106 	br	1004ee4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 1004ee0:	e03fff15 	stw	zero,-4(fp)
 1004ee4:	e0bfff17 	ldw	r2,-4(fp)
}
 1004ee8:	e037883a 	mov	sp,fp
 1004eec:	dfc00117 	ldw	ra,4(sp)
 1004ef0:	df000017 	ldw	fp,0(sp)
 1004ef4:	dec00204 	addi	sp,sp,8
 1004ef8:	f800283a 	ret

01004efc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 1004efc:	defffb04 	addi	sp,sp,-20
 1004f00:	dfc00415 	stw	ra,16(sp)
 1004f04:	df000315 	stw	fp,12(sp)
 1004f08:	df000304 	addi	fp,sp,12
 1004f0c:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 1004f10:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 1004f14:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 1004f18:	e17ffd44 	addi	r5,fp,-11
 1004f1c:	e13ffe17 	ldw	r4,-8(fp)
 1004f20:	1004fd80 	call	1004fd8 <alt_up_ps2_read_data_byte_timeout>
 1004f24:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 1004f28:	e0bffd03 	ldbu	r2,-12(fp)
 1004f2c:	1004c03a 	cmpne	r2,r2,zero
 1004f30:	1000061e 	bne	r2,zero,1004f4c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 1004f34:	e0bffd43 	ldbu	r2,-11(fp)
 1004f38:	10803fcc 	andi	r2,r2,255
 1004f3c:	10803e98 	cmpnei	r2,r2,250
 1004f40:	103ff51e 	bne	r2,zero,1004f18 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 1004f44:	e03fff15 	stw	zero,-4(fp)
 1004f48:	00000206 	br	1004f54 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 1004f4c:	e0bffd03 	ldbu	r2,-12(fp)
 1004f50:	e0bfff15 	stw	r2,-4(fp)
 1004f54:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 1004f58:	e037883a 	mov	sp,fp
 1004f5c:	dfc00117 	ldw	ra,4(sp)
 1004f60:	df000017 	ldw	fp,0(sp)
 1004f64:	dec00204 	addi	sp,sp,8
 1004f68:	f800283a 	ret

01004f6c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1004f6c:	defff904 	addi	sp,sp,-28
 1004f70:	dfc00615 	stw	ra,24(sp)
 1004f74:	df000515 	stw	fp,20(sp)
 1004f78:	df000504 	addi	fp,sp,20
 1004f7c:	e13ffd15 	stw	r4,-12(fp)
 1004f80:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 1004f84:	e17ffe03 	ldbu	r5,-8(fp)
 1004f88:	e13ffd17 	ldw	r4,-12(fp)
 1004f8c:	1004e840 	call	1004e84 <alt_up_ps2_write_data_byte>
 1004f90:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 1004f94:	e0bffc17 	ldw	r2,-16(fp)
 1004f98:	1005003a 	cmpeq	r2,r2,zero
 1004f9c:	1000031e 	bne	r2,zero,1004fac <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 1004fa0:	e0bffc17 	ldw	r2,-16(fp)
 1004fa4:	e0bfff15 	stw	r2,-4(fp)
 1004fa8:	00000506 	br	1004fc0 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 1004fac:	e13ffd17 	ldw	r4,-12(fp)
 1004fb0:	1004efc0 	call	1004efc <alt_up_ps2_wait_for_ack>
 1004fb4:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 1004fb8:	e0bffb17 	ldw	r2,-20(fp)
 1004fbc:	e0bfff15 	stw	r2,-4(fp)
 1004fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1004fc4:	e037883a 	mov	sp,fp
 1004fc8:	dfc00117 	ldw	ra,4(sp)
 1004fcc:	df000017 	ldw	fp,0(sp)
 1004fd0:	dec00204 	addi	sp,sp,8
 1004fd4:	f800283a 	ret

01004fd8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1004fd8:	defff904 	addi	sp,sp,-28
 1004fdc:	dfc00615 	stw	ra,24(sp)
 1004fe0:	df000515 	stw	fp,20(sp)
 1004fe4:	df000504 	addi	fp,sp,20
 1004fe8:	e13ffd15 	stw	r4,-12(fp)
 1004fec:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 1004ff0:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 1004ff4:	e03ffb15 	stw	zero,-20(fp)
 1004ff8:	00000006 	br	1004ffc <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 1004ffc:	e0bffb17 	ldw	r2,-20(fp)
 1005000:	10800044 	addi	r2,r2,1
 1005004:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1005008:	e0bffd17 	ldw	r2,-12(fp)
 100500c:	10800a17 	ldw	r2,40(r2)
 1005010:	10800037 	ldwio	r2,0(r2)
 1005014:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 1005018:	e13ffc17 	ldw	r4,-16(fp)
 100501c:	1004cac0 	call	1004cac <read_data_valid>
 1005020:	10803fcc 	andi	r2,r2,255
 1005024:	1005003a 	cmpeq	r2,r2,zero
 1005028:	1000071e 	bne	r2,zero,1005048 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 100502c:	e13ffc17 	ldw	r4,-16(fp)
 1005030:	1004ce00 	call	1004ce0 <read_data_byte>
 1005034:	1007883a 	mov	r3,r2
 1005038:	e0bffe17 	ldw	r2,-8(fp)
 100503c:	10c00005 	stb	r3,0(r2)
			return 0;
 1005040:	e03fff15 	stw	zero,-4(fp)
 1005044:	00000a06 	br	1005070 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 1005048:	e0bffd17 	ldw	r2,-12(fp)
 100504c:	10800c17 	ldw	r2,48(r2)
 1005050:	1005003a 	cmpeq	r2,r2,zero
 1005054:	103fe91e 	bne	r2,zero,1004ffc <alt_up_ps2_read_data_byte_timeout+0x24>
 1005058:	e0bffd17 	ldw	r2,-12(fp)
 100505c:	10c00c17 	ldw	r3,48(r2)
 1005060:	e0bffb17 	ldw	r2,-20(fp)
 1005064:	18bfe52e 	bgeu	r3,r2,1004ffc <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 1005068:	00bfe304 	movi	r2,-116
 100506c:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 1005070:	e0bfff17 	ldw	r2,-4(fp)
}
 1005074:	e037883a 	mov	sp,fp
 1005078:	dfc00117 	ldw	ra,4(sp)
 100507c:	df000017 	ldw	fp,0(sp)
 1005080:	dec00204 	addi	sp,sp,8
 1005084:	f800283a 	ret

01005088 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1005088:	defffa04 	addi	sp,sp,-24
 100508c:	dfc00515 	stw	ra,20(sp)
 1005090:	df000415 	stw	fp,16(sp)
 1005094:	df000404 	addi	fp,sp,16
 1005098:	e13ffd15 	stw	r4,-12(fp)
 100509c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 10050a0:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 10050a4:	e0bffd17 	ldw	r2,-12(fp)
 10050a8:	10800a17 	ldw	r2,40(r2)
 10050ac:	10800037 	ldwio	r2,0(r2)
 10050b0:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 10050b4:	e13ffc17 	ldw	r4,-16(fp)
 10050b8:	1004cac0 	call	1004cac <read_data_valid>
 10050bc:	10803fcc 	andi	r2,r2,255
 10050c0:	1005003a 	cmpeq	r2,r2,zero
 10050c4:	1000071e 	bne	r2,zero,10050e4 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 10050c8:	e13ffc17 	ldw	r4,-16(fp)
 10050cc:	1004ce00 	call	1004ce0 <read_data_byte>
 10050d0:	1007883a 	mov	r3,r2
 10050d4:	e0bffe17 	ldw	r2,-8(fp)
 10050d8:	10c00005 	stb	r3,0(r2)
		return 0;
 10050dc:	e03fff15 	stw	zero,-4(fp)
 10050e0:	00000206 	br	10050ec <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 10050e4:	00bfffc4 	movi	r2,-1
 10050e8:	e0bfff15 	stw	r2,-4(fp)
 10050ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10050f0:	e037883a 	mov	sp,fp
 10050f4:	dfc00117 	ldw	ra,4(sp)
 10050f8:	df000017 	ldw	fp,0(sp)
 10050fc:	dec00204 	addi	sp,sp,8
 1005100:	f800283a 	ret

01005104 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 1005104:	defffb04 	addi	sp,sp,-20
 1005108:	dfc00415 	stw	ra,16(sp)
 100510c:	df000315 	stw	fp,12(sp)
 1005110:	df000304 	addi	fp,sp,12
 1005114:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 1005118:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 100511c:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1005120:	e0bfff17 	ldw	r2,-4(fp)
 1005124:	10800a17 	ldw	r2,40(r2)
 1005128:	10800037 	ldwio	r2,0(r2)
 100512c:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 1005130:	e13ffd17 	ldw	r4,-12(fp)
 1005134:	1004c780 	call	1004c78 <read_num_bytes_available>
 1005138:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 100513c:	e0bffe0b 	ldhu	r2,-8(fp)
 1005140:	1004c03a 	cmpne	r2,r2,zero
 1005144:	103ff61e 	bne	r2,zero,1005120 <alt_up_ps2_clear_fifo+0x1c>
}
 1005148:	e037883a 	mov	sp,fp
 100514c:	dfc00117 	ldw	ra,4(sp)
 1005150:	df000017 	ldw	fp,0(sp)
 1005154:	dec00204 	addi	sp,sp,8
 1005158:	f800283a 	ret

0100515c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 100515c:	defff704 	addi	sp,sp,-36
 1005160:	dfc00815 	stw	ra,32(sp)
 1005164:	df000715 	stw	fp,28(sp)
 1005168:	df000704 	addi	fp,sp,28
 100516c:	e13ffc15 	stw	r4,-16(fp)
 1005170:	e17ffd15 	stw	r5,-12(fp)
 1005174:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 1005178:	e0bffc17 	ldw	r2,-16(fp)
 100517c:	10800017 	ldw	r2,0(r2)
 1005180:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 1005184:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 1005188:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 100518c:	e0fff917 	ldw	r3,-28(fp)
 1005190:	e0bffe17 	ldw	r2,-8(fp)
 1005194:	18bffd16 	blt	r3,r2,100518c <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 1005198:	e17ffd17 	ldw	r5,-12(fp)
 100519c:	e0bffd17 	ldw	r2,-12(fp)
 10051a0:	10800044 	addi	r2,r2,1
 10051a4:	e0bffd15 	stw	r2,-12(fp)
 10051a8:	e13ffb17 	ldw	r4,-20(fp)
 10051ac:	1004fd80 	call	1004fd8 <alt_up_ps2_read_data_byte_timeout>
 10051b0:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 10051b4:	e0bffa17 	ldw	r2,-24(fp)
 10051b8:	1005003a 	cmpeq	r2,r2,zero
 10051bc:	1000031e 	bne	r2,zero,10051cc <alt_up_ps2_read_fd+0x70>
			return count;
 10051c0:	e0bff917 	ldw	r2,-28(fp)
 10051c4:	e0bfff15 	stw	r2,-4(fp)
 10051c8:	00000506 	br	10051e0 <alt_up_ps2_read_fd+0x84>
		count++;
 10051cc:	e0bff917 	ldw	r2,-28(fp)
 10051d0:	10800044 	addi	r2,r2,1
 10051d4:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 10051d8:	e0bff917 	ldw	r2,-28(fp)
 10051dc:	e0bfff15 	stw	r2,-4(fp)
 10051e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10051e4:	e037883a 	mov	sp,fp
 10051e8:	dfc00117 	ldw	ra,4(sp)
 10051ec:	df000017 	ldw	fp,0(sp)
 10051f0:	dec00204 	addi	sp,sp,8
 10051f4:	f800283a 	ret

010051f8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 10051f8:	defff704 	addi	sp,sp,-36
 10051fc:	dfc00815 	stw	ra,32(sp)
 1005200:	df000715 	stw	fp,28(sp)
 1005204:	df000704 	addi	fp,sp,28
 1005208:	e13ffc15 	stw	r4,-16(fp)
 100520c:	e17ffd15 	stw	r5,-12(fp)
 1005210:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 1005214:	e0bffc17 	ldw	r2,-16(fp)
 1005218:	10800017 	ldw	r2,0(r2)
 100521c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 1005220:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 1005224:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 1005228:	00001206 	br	1005274 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 100522c:	e0bffd17 	ldw	r2,-12(fp)
 1005230:	10800003 	ldbu	r2,0(r2)
 1005234:	11403fcc 	andi	r5,r2,255
 1005238:	e0bffd17 	ldw	r2,-12(fp)
 100523c:	10800044 	addi	r2,r2,1
 1005240:	e0bffd15 	stw	r2,-12(fp)
 1005244:	e13ffb17 	ldw	r4,-20(fp)
 1005248:	1004e840 	call	1004e84 <alt_up_ps2_write_data_byte>
 100524c:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 1005250:	e0bffa17 	ldw	r2,-24(fp)
 1005254:	1005003a 	cmpeq	r2,r2,zero
 1005258:	1000031e 	bne	r2,zero,1005268 <alt_up_ps2_write_fd+0x70>
			return count;
 100525c:	e0bff917 	ldw	r2,-28(fp)
 1005260:	e0bfff15 	stw	r2,-4(fp)
 1005264:	00000806 	br	1005288 <alt_up_ps2_write_fd+0x90>
		count++;
 1005268:	e0bff917 	ldw	r2,-28(fp)
 100526c:	10800044 	addi	r2,r2,1
 1005270:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 1005274:	e0fff917 	ldw	r3,-28(fp)
 1005278:	e0bffe17 	ldw	r2,-8(fp)
 100527c:	18bfeb16 	blt	r3,r2,100522c <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 1005280:	e0bff917 	ldw	r2,-28(fp)
 1005284:	e0bfff15 	stw	r2,-4(fp)
 1005288:	e0bfff17 	ldw	r2,-4(fp)
}
 100528c:	e037883a 	mov	sp,fp
 1005290:	dfc00117 	ldw	ra,4(sp)
 1005294:	df000017 	ldw	fp,0(sp)
 1005298:	dec00204 	addi	sp,sp,8
 100529c:	f800283a 	ret

010052a0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 10052a0:	defffc04 	addi	sp,sp,-16
 10052a4:	dfc00315 	stw	ra,12(sp)
 10052a8:	df000215 	stw	fp,8(sp)
 10052ac:	df000204 	addi	fp,sp,8
 10052b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 10052b4:	e13fff17 	ldw	r4,-4(fp)
 10052b8:	01404074 	movhi	r5,257
 10052bc:	29627004 	addi	r5,r5,-30272
 10052c0:	1005cf00 	call	1005cf0 <alt_find_dev>
 10052c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10052c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10052cc:	e037883a 	mov	sp,fp
 10052d0:	dfc00117 	ldw	ra,4(sp)
 10052d4:	df000017 	ldw	fp,0(sp)
 10052d8:	dec00204 	addi	sp,sp,8
 10052dc:	f800283a 	ret

010052e0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10052e0:	defffd04 	addi	sp,sp,-12
 10052e4:	df000215 	stw	fp,8(sp)
 10052e8:	df000204 	addi	fp,sp,8
 10052ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10052f0:	e0bfff17 	ldw	r2,-4(fp)
 10052f4:	10800a17 	ldw	r2,40(r2)
 10052f8:	10800104 	addi	r2,r2,4
 10052fc:	10800037 	ldwio	r2,0(r2)
 1005300:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1005304:	e0bffe17 	ldw	r2,-8(fp)
 1005308:	10800054 	ori	r2,r2,1
 100530c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1005310:	e0bfff17 	ldw	r2,-4(fp)
 1005314:	10800a17 	ldw	r2,40(r2)
 1005318:	10800104 	addi	r2,r2,4
 100531c:	e0fffe17 	ldw	r3,-8(fp)
 1005320:	10c00035 	stwio	r3,0(r2)
}
 1005324:	e037883a 	mov	sp,fp
 1005328:	df000017 	ldw	fp,0(sp)
 100532c:	dec00104 	addi	sp,sp,4
 1005330:	f800283a 	ret

01005334 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1005334:	defffd04 	addi	sp,sp,-12
 1005338:	df000215 	stw	fp,8(sp)
 100533c:	df000204 	addi	fp,sp,8
 1005340:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1005344:	e0bfff17 	ldw	r2,-4(fp)
 1005348:	10800a17 	ldw	r2,40(r2)
 100534c:	10800104 	addi	r2,r2,4
 1005350:	10800037 	ldwio	r2,0(r2)
 1005354:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1005358:	e0fffe17 	ldw	r3,-8(fp)
 100535c:	00bfff84 	movi	r2,-2
 1005360:	1884703a 	and	r2,r3,r2
 1005364:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1005368:	e0bfff17 	ldw	r2,-4(fp)
 100536c:	10800a17 	ldw	r2,40(r2)
 1005370:	10800104 	addi	r2,r2,4
 1005374:	e0fffe17 	ldw	r3,-8(fp)
 1005378:	10c00035 	stwio	r3,0(r2)
}
 100537c:	e037883a 	mov	sp,fp
 1005380:	df000017 	ldw	fp,0(sp)
 1005384:	dec00104 	addi	sp,sp,4
 1005388:	f800283a 	ret

0100538c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 100538c:	defffd04 	addi	sp,sp,-12
 1005390:	df000215 	stw	fp,8(sp)
 1005394:	df000204 	addi	fp,sp,8
 1005398:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 100539c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 10053a0:	e0bfff17 	ldw	r2,-4(fp)
 10053a4:	10800a17 	ldw	r2,40(r2)
 10053a8:	10800084 	addi	r2,r2,2
 10053ac:	1080002b 	ldhuio	r2,0(r2)
 10053b0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 10053b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10053b8:	e037883a 	mov	sp,fp
 10053bc:	df000017 	ldw	fp,0(sp)
 10053c0:	dec00104 	addi	sp,sp,4
 10053c4:	f800283a 	ret

010053c8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 10053c8:	defffd04 	addi	sp,sp,-12
 10053cc:	df000215 	stw	fp,8(sp)
 10053d0:	df000204 	addi	fp,sp,8
 10053d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10053d8:	e0bfff17 	ldw	r2,-4(fp)
 10053dc:	10800a17 	ldw	r2,40(r2)
 10053e0:	10800104 	addi	r2,r2,4
 10053e4:	10800037 	ldwio	r2,0(r2)
 10053e8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 10053ec:	e0bffe17 	ldw	r2,-8(fp)
 10053f0:	10bfffec 	andhi	r2,r2,65535
 10053f4:	1004d43a 	srli	r2,r2,16
}
 10053f8:	e037883a 	mov	sp,fp
 10053fc:	df000017 	ldw	fp,0(sp)
 1005400:	dec00104 	addi	sp,sp,4
 1005404:	f800283a 	ret

01005408 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1005408:	defffc04 	addi	sp,sp,-16
 100540c:	df000315 	stw	fp,12(sp)
 1005410:	df000304 	addi	fp,sp,12
 1005414:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1005418:	e0bffe17 	ldw	r2,-8(fp)
 100541c:	1080800c 	andi	r2,r2,512
 1005420:	1004d27a 	srli	r2,r2,9
 1005424:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1005428:	e0bffd17 	ldw	r2,-12(fp)
 100542c:	1005003a 	cmpeq	r2,r2,zero
 1005430:	1000031e 	bne	r2,zero,1005440 <alt_up_rs232_check_parity+0x38>
 1005434:	00bfffc4 	movi	r2,-1
 1005438:	e0bfff15 	stw	r2,-4(fp)
 100543c:	00000106 	br	1005444 <alt_up_rs232_check_parity+0x3c>
 1005440:	e03fff15 	stw	zero,-4(fp)
 1005444:	e0bfff17 	ldw	r2,-4(fp)
}
 1005448:	e037883a 	mov	sp,fp
 100544c:	df000017 	ldw	fp,0(sp)
 1005450:	dec00104 	addi	sp,sp,4
 1005454:	f800283a 	ret

01005458 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1005458:	defffc04 	addi	sp,sp,-16
 100545c:	df000315 	stw	fp,12(sp)
 1005460:	df000304 	addi	fp,sp,12
 1005464:	e13ffe15 	stw	r4,-8(fp)
 1005468:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 100546c:	e0bffe17 	ldw	r2,-8(fp)
 1005470:	10800a17 	ldw	r2,40(r2)
 1005474:	10800037 	ldwio	r2,0(r2)
 1005478:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 100547c:	e0bffe17 	ldw	r2,-8(fp)
 1005480:	10800a17 	ldw	r2,40(r2)
 1005484:	e0ffff03 	ldbu	r3,-4(fp)
 1005488:	10c00035 	stwio	r3,0(r2)
	return 0;
 100548c:	0005883a 	mov	r2,zero
}
 1005490:	e037883a 	mov	sp,fp
 1005494:	df000017 	ldw	fp,0(sp)
 1005498:	dec00104 	addi	sp,sp,4
 100549c:	f800283a 	ret

010054a0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 10054a0:	defffa04 	addi	sp,sp,-24
 10054a4:	dfc00515 	stw	ra,20(sp)
 10054a8:	df000415 	stw	fp,16(sp)
 10054ac:	df000404 	addi	fp,sp,16
 10054b0:	e13ffd15 	stw	r4,-12(fp)
 10054b4:	e17ffe15 	stw	r5,-8(fp)
 10054b8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 10054bc:	e0bffd17 	ldw	r2,-12(fp)
 10054c0:	10800a17 	ldw	r2,40(r2)
 10054c4:	10800037 	ldwio	r2,0(r2)
 10054c8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 10054cc:	e0bffc17 	ldw	r2,-16(fp)
 10054d0:	1007883a 	mov	r3,r2
 10054d4:	e0bffe17 	ldw	r2,-8(fp)
 10054d8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 10054dc:	e13ffc17 	ldw	r4,-16(fp)
 10054e0:	10054080 	call	1005408 <alt_up_rs232_check_parity>
 10054e4:	1007883a 	mov	r3,r2
 10054e8:	e0bfff17 	ldw	r2,-4(fp)
 10054ec:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 10054f0:	e0bffc17 	ldw	r2,-16(fp)
 10054f4:	10a0000c 	andi	r2,r2,32768
 10054f8:	1004d3fa 	srli	r2,r2,15
 10054fc:	10bfffc4 	addi	r2,r2,-1
}
 1005500:	e037883a 	mov	sp,fp
 1005504:	dfc00117 	ldw	ra,4(sp)
 1005508:	df000017 	ldw	fp,0(sp)
 100550c:	dec00204 	addi	sp,sp,8
 1005510:	f800283a 	ret

01005514 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1005514:	defff804 	addi	sp,sp,-32
 1005518:	dfc00715 	stw	ra,28(sp)
 100551c:	df000615 	stw	fp,24(sp)
 1005520:	df000604 	addi	fp,sp,24
 1005524:	e13ffd15 	stw	r4,-12(fp)
 1005528:	e17ffe15 	stw	r5,-8(fp)
 100552c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1005530:	e0bffd17 	ldw	r2,-12(fp)
 1005534:	10800017 	ldw	r2,0(r2)
 1005538:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 100553c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1005540:	00000c06 	br	1005574 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1005544:	e17ffe17 	ldw	r5,-8(fp)
 1005548:	e0bffe17 	ldw	r2,-8(fp)
 100554c:	10800044 	addi	r2,r2,1
 1005550:	e0bffe15 	stw	r2,-8(fp)
 1005554:	e1bffc04 	addi	r6,fp,-16
 1005558:	e13ffb17 	ldw	r4,-20(fp)
 100555c:	10054a00 	call	10054a0 <alt_up_rs232_read_data>
 1005560:	1004c03a 	cmpne	r2,r2,zero
 1005564:	1000091e 	bne	r2,zero,100558c <alt_up_rs232_read_fd+0x78>
			count++;
 1005568:	e0bffa17 	ldw	r2,-24(fp)
 100556c:	10800044 	addi	r2,r2,1
 1005570:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1005574:	e0bfff17 	ldw	r2,-4(fp)
 1005578:	10bfffc4 	addi	r2,r2,-1
 100557c:	e0bfff15 	stw	r2,-4(fp)
 1005580:	e0bfff17 	ldw	r2,-4(fp)
 1005584:	10bfffd8 	cmpnei	r2,r2,-1
 1005588:	103fee1e 	bne	r2,zero,1005544 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 100558c:	e0bffa17 	ldw	r2,-24(fp)
}
 1005590:	e037883a 	mov	sp,fp
 1005594:	dfc00117 	ldw	ra,4(sp)
 1005598:	df000017 	ldw	fp,0(sp)
 100559c:	dec00204 	addi	sp,sp,8
 10055a0:	f800283a 	ret

010055a4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 10055a4:	defff904 	addi	sp,sp,-28
 10055a8:	dfc00615 	stw	ra,24(sp)
 10055ac:	df000515 	stw	fp,20(sp)
 10055b0:	df000504 	addi	fp,sp,20
 10055b4:	e13ffd15 	stw	r4,-12(fp)
 10055b8:	e17ffe15 	stw	r5,-8(fp)
 10055bc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10055c0:	e0bffd17 	ldw	r2,-12(fp)
 10055c4:	10800017 	ldw	r2,0(r2)
 10055c8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 10055cc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 10055d0:	00000d06 	br	1005608 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 10055d4:	e0bffe17 	ldw	r2,-8(fp)
 10055d8:	10800003 	ldbu	r2,0(r2)
 10055dc:	11403fcc 	andi	r5,r2,255
 10055e0:	e13ffc17 	ldw	r4,-16(fp)
 10055e4:	10054580 	call	1005458 <alt_up_rs232_write_data>
 10055e8:	1004c03a 	cmpne	r2,r2,zero
 10055ec:	10000c1e 	bne	r2,zero,1005620 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 10055f0:	e0bffb17 	ldw	r2,-20(fp)
 10055f4:	10800044 	addi	r2,r2,1
 10055f8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 10055fc:	e0bffe17 	ldw	r2,-8(fp)
 1005600:	10800044 	addi	r2,r2,1
 1005604:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1005608:	e0bfff17 	ldw	r2,-4(fp)
 100560c:	10bfffc4 	addi	r2,r2,-1
 1005610:	e0bfff15 	stw	r2,-4(fp)
 1005614:	e0bfff17 	ldw	r2,-4(fp)
 1005618:	10bfffd8 	cmpnei	r2,r2,-1
 100561c:	103fed1e 	bne	r2,zero,10055d4 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1005620:	e0bffb17 	ldw	r2,-20(fp)
}
 1005624:	e037883a 	mov	sp,fp
 1005628:	dfc00117 	ldw	ra,4(sp)
 100562c:	df000017 	ldw	fp,0(sp)
 1005630:	dec00204 	addi	sp,sp,8
 1005634:	f800283a 	ret

01005638 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1005638:	defffc04 	addi	sp,sp,-16
 100563c:	dfc00315 	stw	ra,12(sp)
 1005640:	df000215 	stw	fp,8(sp)
 1005644:	df000204 	addi	fp,sp,8
 1005648:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 100564c:	e13fff17 	ldw	r4,-4(fp)
 1005650:	01404074 	movhi	r5,257
 1005654:	29627004 	addi	r5,r5,-30272
 1005658:	1005cf00 	call	1005cf0 <alt_find_dev>
 100565c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1005660:	e0bffe17 	ldw	r2,-8(fp)
}
 1005664:	e037883a 	mov	sp,fp
 1005668:	dfc00117 	ldw	ra,4(sp)
 100566c:	df000017 	ldw	fp,0(sp)
 1005670:	dec00204 	addi	sp,sp,8
 1005674:	f800283a 	ret

01005678 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 1005678:	defffc04 	addi	sp,sp,-16
 100567c:	dfc00315 	stw	ra,12(sp)
 1005680:	df000215 	stw	fp,8(sp)
 1005684:	df000204 	addi	fp,sp,8
 1005688:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 100568c:	e0bfff17 	ldw	r2,-4(fp)
 1005690:	10800217 	ldw	r2,8(r2)
 1005694:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 1005698:	00000c06 	br	10056cc <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 100569c:	e13ffe17 	ldw	r4,-8(fp)
 10056a0:	01404034 	movhi	r5,256
 10056a4:	295b6604 	addi	r5,r5,28056
 10056a8:	10068600 	call	1006860 <strcmp>
 10056ac:	1004c03a 	cmpne	r2,r2,zero
 10056b0:	1000031e 	bne	r2,zero,10056c0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 10056b4:	e0bffe17 	ldw	r2,-8(fp)
 10056b8:	10000005 	stb	zero,0(r2)
			break;
 10056bc:	00000a06 	br	10056e8 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 10056c0:	e0bffe17 	ldw	r2,-8(fp)
 10056c4:	10800044 	addi	r2,r2,1
 10056c8:	e0bffe15 	stw	r2,-8(fp)
 10056cc:	e0bffe17 	ldw	r2,-8(fp)
 10056d0:	10800003 	ldbu	r2,0(r2)
 10056d4:	10803fcc 	andi	r2,r2,255
 10056d8:	1080201c 	xori	r2,r2,128
 10056dc:	10bfe004 	addi	r2,r2,-128
 10056e0:	1004c03a 	cmpne	r2,r2,zero
 10056e4:	103fed1e 	bne	r2,zero,100569c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 10056e8:	e037883a 	mov	sp,fp
 10056ec:	dfc00117 	ldw	ra,4(sp)
 10056f0:	df000017 	ldw	fp,0(sp)
 10056f4:	dec00204 	addi	sp,sp,8
 10056f8:	f800283a 	ret

010056fc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 10056fc:	defffc04 	addi	sp,sp,-16
 1005700:	dfc00315 	stw	ra,12(sp)
 1005704:	df000215 	stw	fp,8(sp)
 1005708:	df000204 	addi	fp,sp,8
 100570c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 1005710:	e13fff17 	ldw	r4,-4(fp)
 1005714:	01404074 	movhi	r5,257
 1005718:	29627004 	addi	r5,r5,-30272
 100571c:	1005cf00 	call	1005cf0 <alt_find_dev>
 1005720:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1005724:	e0bffe17 	ldw	r2,-8(fp)
}
 1005728:	e037883a 	mov	sp,fp
 100572c:	dfc00117 	ldw	ra,4(sp)
 1005730:	df000017 	ldw	fp,0(sp)
 1005734:	dec00204 	addi	sp,sp,8
 1005738:	f800283a 	ret

0100573c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 100573c:	defff904 	addi	sp,sp,-28
 1005740:	df000615 	stw	fp,24(sp)
 1005744:	df000604 	addi	fp,sp,24
 1005748:	e13ffb15 	stw	r4,-20(fp)
 100574c:	e1bffd15 	stw	r6,-12(fp)
 1005750:	e1fffe15 	stw	r7,-8(fp)
 1005754:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1005758:	e0bffb17 	ldw	r2,-20(fp)
 100575c:	10c00c17 	ldw	r3,48(r2)
 1005760:	e0bffd17 	ldw	r2,-12(fp)
 1005764:	10c0042e 	bgeu	r2,r3,1005778 <alt_up_char_buffer_draw+0x3c>
 1005768:	e0bffb17 	ldw	r2,-20(fp)
 100576c:	10c00d17 	ldw	r3,52(r2)
 1005770:	e0bffe17 	ldw	r2,-8(fp)
 1005774:	10c00336 	bltu	r2,r3,1005784 <alt_up_char_buffer_draw+0x48>
		return -1;
 1005778:	00bfffc4 	movi	r2,-1
 100577c:	e0bfff15 	stw	r2,-4(fp)
 1005780:	00001d06 	br	10057f8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1005784:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1005788:	e0bffb17 	ldw	r2,-20(fp)
 100578c:	10c00f17 	ldw	r3,60(r2)
 1005790:	e0bffd17 	ldw	r2,-12(fp)
 1005794:	1886703a 	and	r3,r3,r2
 1005798:	e0bffb17 	ldw	r2,-20(fp)
 100579c:	10800e17 	ldw	r2,56(r2)
 10057a0:	1886983a 	sll	r3,r3,r2
 10057a4:	e0bffa17 	ldw	r2,-24(fp)
 10057a8:	10c4b03a 	or	r2,r2,r3
 10057ac:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 10057b0:	e0bffb17 	ldw	r2,-20(fp)
 10057b4:	10c01117 	ldw	r3,68(r2)
 10057b8:	e0bffe17 	ldw	r2,-8(fp)
 10057bc:	1886703a 	and	r3,r3,r2
 10057c0:	e0bffb17 	ldw	r2,-20(fp)
 10057c4:	10801017 	ldw	r2,64(r2)
 10057c8:	1886983a 	sll	r3,r3,r2
 10057cc:	e0bffa17 	ldw	r2,-24(fp)
 10057d0:	10c4b03a 	or	r2,r2,r3
 10057d4:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 10057d8:	e0bffb17 	ldw	r2,-20(fp)
 10057dc:	10800b17 	ldw	r2,44(r2)
 10057e0:	1007883a 	mov	r3,r2
 10057e4:	e0bffa17 	ldw	r2,-24(fp)
 10057e8:	1885883a 	add	r2,r3,r2
 10057ec:	e0fffc03 	ldbu	r3,-16(fp)
 10057f0:	10c00025 	stbio	r3,0(r2)

	return 0;
 10057f4:	e03fff15 	stw	zero,-4(fp)
 10057f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10057fc:	e037883a 	mov	sp,fp
 1005800:	df000017 	ldw	fp,0(sp)
 1005804:	dec00104 	addi	sp,sp,4
 1005808:	f800283a 	ret

0100580c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 100580c:	defff904 	addi	sp,sp,-28
 1005810:	df000615 	stw	fp,24(sp)
 1005814:	df000604 	addi	fp,sp,24
 1005818:	e13ffb15 	stw	r4,-20(fp)
 100581c:	e17ffc15 	stw	r5,-16(fp)
 1005820:	e1bffd15 	stw	r6,-12(fp)
 1005824:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1005828:	e0bffb17 	ldw	r2,-20(fp)
 100582c:	10c00c17 	ldw	r3,48(r2)
 1005830:	e0bffd17 	ldw	r2,-12(fp)
 1005834:	10c0042e 	bgeu	r2,r3,1005848 <alt_up_char_buffer_string+0x3c>
 1005838:	e0bffb17 	ldw	r2,-20(fp)
 100583c:	10c00d17 	ldw	r3,52(r2)
 1005840:	e0bffe17 	ldw	r2,-8(fp)
 1005844:	10c00336 	bltu	r2,r3,1005854 <alt_up_char_buffer_string+0x48>
		return -1;
 1005848:	00bfffc4 	movi	r2,-1
 100584c:	e0bfff15 	stw	r2,-4(fp)
 1005850:	00002e06 	br	100590c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1005854:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 1005858:	e0bffb17 	ldw	r2,-20(fp)
 100585c:	10801017 	ldw	r2,64(r2)
 1005860:	1007883a 	mov	r3,r2
 1005864:	e0bffe17 	ldw	r2,-8(fp)
 1005868:	10c6983a 	sll	r3,r2,r3
 100586c:	e0bffd17 	ldw	r2,-12(fp)
 1005870:	1885883a 	add	r2,r3,r2
 1005874:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 1005878:	00001c06 	br	10058ec <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 100587c:	e0bffb17 	ldw	r2,-20(fp)
 1005880:	10800b17 	ldw	r2,44(r2)
 1005884:	1007883a 	mov	r3,r2
 1005888:	e0bffa17 	ldw	r2,-24(fp)
 100588c:	1889883a 	add	r4,r3,r2
 1005890:	e0bffc17 	ldw	r2,-16(fp)
 1005894:	10800003 	ldbu	r2,0(r2)
 1005898:	10c03fcc 	andi	r3,r2,255
 100589c:	18c0201c 	xori	r3,r3,128
 10058a0:	18ffe004 	addi	r3,r3,-128
 10058a4:	2005883a 	mov	r2,r4
 10058a8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10058ac:	e0bffc17 	ldw	r2,-16(fp)
 10058b0:	10800044 	addi	r2,r2,1
 10058b4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 10058b8:	e0bffd17 	ldw	r2,-12(fp)
 10058bc:	10800044 	addi	r2,r2,1
 10058c0:	e0bffd15 	stw	r2,-12(fp)
 10058c4:	e0bffb17 	ldw	r2,-20(fp)
 10058c8:	10c00c17 	ldw	r3,48(r2)
 10058cc:	e0bffd17 	ldw	r2,-12(fp)
 10058d0:	10c00336 	bltu	r2,r3,10058e0 <alt_up_char_buffer_string+0xd4>
			return -1;
 10058d4:	00bfffc4 	movi	r2,-1
 10058d8:	e0bfff15 	stw	r2,-4(fp)
 10058dc:	00000b06 	br	100590c <alt_up_char_buffer_string+0x100>
		++offset;
 10058e0:	e0bffa17 	ldw	r2,-24(fp)
 10058e4:	10800044 	addi	r2,r2,1
 10058e8:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 10058ec:	e0bffc17 	ldw	r2,-16(fp)
 10058f0:	10800003 	ldbu	r2,0(r2)
 10058f4:	10803fcc 	andi	r2,r2,255
 10058f8:	1080201c 	xori	r2,r2,128
 10058fc:	10bfe004 	addi	r2,r2,-128
 1005900:	1004c03a 	cmpne	r2,r2,zero
 1005904:	103fdd1e 	bne	r2,zero,100587c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1005908:	e03fff15 	stw	zero,-4(fp)
 100590c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005910:	e037883a 	mov	sp,fp
 1005914:	df000017 	ldw	fp,0(sp)
 1005918:	dec00104 	addi	sp,sp,4
 100591c:	f800283a 	ret

01005920 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 1005920:	defffe04 	addi	sp,sp,-8
 1005924:	df000115 	stw	fp,4(sp)
 1005928:	df000104 	addi	fp,sp,4
 100592c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 1005930:	e0bfff17 	ldw	r2,-4(fp)
 1005934:	10800a17 	ldw	r2,40(r2)
 1005938:	10800084 	addi	r2,r2,2
 100593c:	1007883a 	mov	r3,r2
 1005940:	00800044 	movi	r2,1
 1005944:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 1005948:	e0bfff17 	ldw	r2,-4(fp)
 100594c:	10800a17 	ldw	r2,40(r2)
 1005950:	10800084 	addi	r2,r2,2
 1005954:	10800023 	ldbuio	r2,0(r2)
 1005958:	1080004c 	andi	r2,r2,1
 100595c:	10803fcc 	andi	r2,r2,255
 1005960:	1004c03a 	cmpne	r2,r2,zero
 1005964:	103ff81e 	bne	r2,zero,1005948 <alt_up_char_buffer_clear+0x28>
	return 0;
 1005968:	0005883a 	mov	r2,zero
}
 100596c:	e037883a 	mov	sp,fp
 1005970:	df000017 	ldw	fp,0(sp)
 1005974:	dec00104 	addi	sp,sp,4
 1005978:	f800283a 	ret

0100597c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100597c:	defff404 	addi	sp,sp,-48
 1005980:	df000b15 	stw	fp,44(sp)
 1005984:	df000b04 	addi	fp,sp,44
 1005988:	e13ffb15 	stw	r4,-20(fp)
 100598c:	e17ffc15 	stw	r5,-16(fp)
 1005990:	e1bffd15 	stw	r6,-12(fp)
 1005994:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1005998:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100599c:	00804074 	movhi	r2,257
 10059a0:	10a98b04 	addi	r2,r2,-22996
 10059a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10059a8:	1005003a 	cmpeq	r2,r2,zero
 10059ac:	1000411e 	bne	r2,zero,1005ab4 <alt_alarm_start+0x138>
  {
    if (alarm)
 10059b0:	e0bffb17 	ldw	r2,-20(fp)
 10059b4:	1005003a 	cmpeq	r2,r2,zero
 10059b8:	10003b1e 	bne	r2,zero,1005aa8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10059bc:	e0fffb17 	ldw	r3,-20(fp)
 10059c0:	e0bffd17 	ldw	r2,-12(fp)
 10059c4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10059c8:	e0fffb17 	ldw	r3,-20(fp)
 10059cc:	e0bffe17 	ldw	r2,-8(fp)
 10059d0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10059d4:	0005303a 	rdctl	r2,status
 10059d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10059dc:	e0fff817 	ldw	r3,-32(fp)
 10059e0:	00bfff84 	movi	r2,-2
 10059e4:	1884703a 	and	r2,r3,r2
 10059e8:	1001703a 	wrctl	status,r2
  
  return context;
 10059ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10059f0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10059f4:	00804074 	movhi	r2,257
 10059f8:	10a98c04 	addi	r2,r2,-22992
 10059fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1005a00:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1005a04:	e0fffc17 	ldw	r3,-16(fp)
 1005a08:	e0bff917 	ldw	r2,-28(fp)
 1005a0c:	1885883a 	add	r2,r3,r2
 1005a10:	10c00044 	addi	r3,r2,1
 1005a14:	e0bffb17 	ldw	r2,-20(fp)
 1005a18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1005a1c:	e0bffb17 	ldw	r2,-20(fp)
 1005a20:	10c00217 	ldw	r3,8(r2)
 1005a24:	e0bff917 	ldw	r2,-28(fp)
 1005a28:	1880042e 	bgeu	r3,r2,1005a3c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1005a2c:	e0fffb17 	ldw	r3,-20(fp)
 1005a30:	00800044 	movi	r2,1
 1005a34:	18800405 	stb	r2,16(r3)
 1005a38:	00000206 	br	1005a44 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1005a3c:	e0bffb17 	ldw	r2,-20(fp)
 1005a40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1005a44:	e0fffb17 	ldw	r3,-20(fp)
 1005a48:	00804074 	movhi	r2,257
 1005a4c:	10a27604 	addi	r2,r2,-30248
 1005a50:	e0bff615 	stw	r2,-40(fp)
 1005a54:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1005a58:	e0fff717 	ldw	r3,-36(fp)
 1005a5c:	e0bff617 	ldw	r2,-40(fp)
 1005a60:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1005a64:	e0bff617 	ldw	r2,-40(fp)
 1005a68:	10c00017 	ldw	r3,0(r2)
 1005a6c:	e0bff717 	ldw	r2,-36(fp)
 1005a70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1005a74:	e0bff617 	ldw	r2,-40(fp)
 1005a78:	10c00017 	ldw	r3,0(r2)
 1005a7c:	e0bff717 	ldw	r2,-36(fp)
 1005a80:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1005a84:	e0fff617 	ldw	r3,-40(fp)
 1005a88:	e0bff717 	ldw	r2,-36(fp)
 1005a8c:	18800015 	stw	r2,0(r3)
 1005a90:	e0bffa17 	ldw	r2,-24(fp)
 1005a94:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005a98:	e0bff517 	ldw	r2,-44(fp)
 1005a9c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1005aa0:	e03fff15 	stw	zero,-4(fp)
 1005aa4:	00000506 	br	1005abc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1005aa8:	00bffa84 	movi	r2,-22
 1005aac:	e0bfff15 	stw	r2,-4(fp)
 1005ab0:	00000206 	br	1005abc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1005ab4:	00bfde84 	movi	r2,-134
 1005ab8:	e0bfff15 	stw	r2,-4(fp)
 1005abc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1005ac0:	e037883a 	mov	sp,fp
 1005ac4:	df000017 	ldw	fp,0(sp)
 1005ac8:	dec00104 	addi	sp,sp,4
 1005acc:	f800283a 	ret

01005ad0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1005ad0:	defffe04 	addi	sp,sp,-8
 1005ad4:	df000115 	stw	fp,4(sp)
 1005ad8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1005adc:	e03fff15 	stw	zero,-4(fp)
 1005ae0:	00000506 	br	1005af8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1005ae4:	e0bfff17 	ldw	r2,-4(fp)
 1005ae8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1005aec:	e0bfff17 	ldw	r2,-4(fp)
 1005af0:	10800804 	addi	r2,r2,32
 1005af4:	e0bfff15 	stw	r2,-4(fp)
 1005af8:	e0bfff17 	ldw	r2,-4(fp)
 1005afc:	10820030 	cmpltui	r2,r2,2048
 1005b00:	103ff81e 	bne	r2,zero,1005ae4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1005b04:	e037883a 	mov	sp,fp
 1005b08:	df000017 	ldw	fp,0(sp)
 1005b0c:	dec00104 	addi	sp,sp,4
 1005b10:	f800283a 	ret

01005b14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1005b14:	defff904 	addi	sp,sp,-28
 1005b18:	dfc00615 	stw	ra,24(sp)
 1005b1c:	df000515 	stw	fp,20(sp)
 1005b20:	df000504 	addi	fp,sp,20
 1005b24:	e13ffd15 	stw	r4,-12(fp)
 1005b28:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1005b2c:	e0bffd17 	ldw	r2,-12(fp)
 1005b30:	1005003a 	cmpeq	r2,r2,zero
 1005b34:	1000041e 	bne	r2,zero,1005b48 <alt_dev_llist_insert+0x34>
 1005b38:	e0bffd17 	ldw	r2,-12(fp)
 1005b3c:	10800217 	ldw	r2,8(r2)
 1005b40:	1004c03a 	cmpne	r2,r2,zero
 1005b44:	1000071e 	bne	r2,zero,1005b64 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1005b48:	1005bc80 	call	1005bc8 <alt_get_errno>
 1005b4c:	1007883a 	mov	r3,r2
 1005b50:	00800584 	movi	r2,22
 1005b54:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1005b58:	00bffa84 	movi	r2,-22
 1005b5c:	e0bfff15 	stw	r2,-4(fp)
 1005b60:	00001306 	br	1005bb0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1005b64:	e0fffd17 	ldw	r3,-12(fp)
 1005b68:	e0bffe17 	ldw	r2,-8(fp)
 1005b6c:	e0bffb15 	stw	r2,-20(fp)
 1005b70:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1005b74:	e0fffc17 	ldw	r3,-16(fp)
 1005b78:	e0bffb17 	ldw	r2,-20(fp)
 1005b7c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1005b80:	e0bffb17 	ldw	r2,-20(fp)
 1005b84:	10c00017 	ldw	r3,0(r2)
 1005b88:	e0bffc17 	ldw	r2,-16(fp)
 1005b8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1005b90:	e0bffb17 	ldw	r2,-20(fp)
 1005b94:	10c00017 	ldw	r3,0(r2)
 1005b98:	e0bffc17 	ldw	r2,-16(fp)
 1005b9c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1005ba0:	e0fffb17 	ldw	r3,-20(fp)
 1005ba4:	e0bffc17 	ldw	r2,-16(fp)
 1005ba8:	18800015 	stw	r2,0(r3)

  return 0;  
 1005bac:	e03fff15 	stw	zero,-4(fp)
 1005bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1005bb4:	e037883a 	mov	sp,fp
 1005bb8:	dfc00117 	ldw	ra,4(sp)
 1005bbc:	df000017 	ldw	fp,0(sp)
 1005bc0:	dec00204 	addi	sp,sp,8
 1005bc4:	f800283a 	ret

01005bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005bc8:	defffd04 	addi	sp,sp,-12
 1005bcc:	dfc00215 	stw	ra,8(sp)
 1005bd0:	df000115 	stw	fp,4(sp)
 1005bd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005bd8:	00804074 	movhi	r2,257
 1005bdc:	10a27304 	addi	r2,r2,-30260
 1005be0:	10800017 	ldw	r2,0(r2)
 1005be4:	1005003a 	cmpeq	r2,r2,zero
 1005be8:	1000061e 	bne	r2,zero,1005c04 <alt_get_errno+0x3c>
 1005bec:	00804074 	movhi	r2,257
 1005bf0:	10a27304 	addi	r2,r2,-30260
 1005bf4:	10800017 	ldw	r2,0(r2)
 1005bf8:	103ee83a 	callr	r2
 1005bfc:	e0bfff15 	stw	r2,-4(fp)
 1005c00:	00000306 	br	1005c10 <alt_get_errno+0x48>
 1005c04:	00804074 	movhi	r2,257
 1005c08:	10a98604 	addi	r2,r2,-23016
 1005c0c:	e0bfff15 	stw	r2,-4(fp)
 1005c10:	e0bfff17 	ldw	r2,-4(fp)
}
 1005c14:	e037883a 	mov	sp,fp
 1005c18:	dfc00117 	ldw	ra,4(sp)
 1005c1c:	df000017 	ldw	fp,0(sp)
 1005c20:	dec00204 	addi	sp,sp,8
 1005c24:	f800283a 	ret

01005c28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1005c28:	defffd04 	addi	sp,sp,-12
 1005c2c:	dfc00215 	stw	ra,8(sp)
 1005c30:	df000115 	stw	fp,4(sp)
 1005c34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1005c38:	00bfff04 	movi	r2,-4
 1005c3c:	00c04034 	movhi	r3,256
 1005c40:	18db1a04 	addi	r3,r3,27752
 1005c44:	1885883a 	add	r2,r3,r2
 1005c48:	e0bfff15 	stw	r2,-4(fp)
 1005c4c:	00000606 	br	1005c68 <_do_ctors+0x40>
        (*ctor) (); 
 1005c50:	e0bfff17 	ldw	r2,-4(fp)
 1005c54:	10800017 	ldw	r2,0(r2)
 1005c58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1005c5c:	e0bfff17 	ldw	r2,-4(fp)
 1005c60:	10bfff04 	addi	r2,r2,-4
 1005c64:	e0bfff15 	stw	r2,-4(fp)
 1005c68:	e0ffff17 	ldw	r3,-4(fp)
 1005c6c:	00804034 	movhi	r2,256
 1005c70:	109b1904 	addi	r2,r2,27748
 1005c74:	18bff62e 	bgeu	r3,r2,1005c50 <_do_ctors+0x28>
        (*ctor) (); 
}
 1005c78:	e037883a 	mov	sp,fp
 1005c7c:	dfc00117 	ldw	ra,4(sp)
 1005c80:	df000017 	ldw	fp,0(sp)
 1005c84:	dec00204 	addi	sp,sp,8
 1005c88:	f800283a 	ret

01005c8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1005c8c:	defffd04 	addi	sp,sp,-12
 1005c90:	dfc00215 	stw	ra,8(sp)
 1005c94:	df000115 	stw	fp,4(sp)
 1005c98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1005c9c:	00bfff04 	movi	r2,-4
 1005ca0:	00c04034 	movhi	r3,256
 1005ca4:	18db1a04 	addi	r3,r3,27752
 1005ca8:	1885883a 	add	r2,r3,r2
 1005cac:	e0bfff15 	stw	r2,-4(fp)
 1005cb0:	00000606 	br	1005ccc <_do_dtors+0x40>
        (*dtor) (); 
 1005cb4:	e0bfff17 	ldw	r2,-4(fp)
 1005cb8:	10800017 	ldw	r2,0(r2)
 1005cbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1005cc0:	e0bfff17 	ldw	r2,-4(fp)
 1005cc4:	10bfff04 	addi	r2,r2,-4
 1005cc8:	e0bfff15 	stw	r2,-4(fp)
 1005ccc:	e0ffff17 	ldw	r3,-4(fp)
 1005cd0:	00804034 	movhi	r2,256
 1005cd4:	109b1a04 	addi	r2,r2,27752
 1005cd8:	18bff62e 	bgeu	r3,r2,1005cb4 <_do_dtors+0x28>
        (*dtor) (); 
}
 1005cdc:	e037883a 	mov	sp,fp
 1005ce0:	dfc00117 	ldw	ra,4(sp)
 1005ce4:	df000017 	ldw	fp,0(sp)
 1005ce8:	dec00204 	addi	sp,sp,8
 1005cec:	f800283a 	ret

01005cf0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1005cf0:	defff904 	addi	sp,sp,-28
 1005cf4:	dfc00615 	stw	ra,24(sp)
 1005cf8:	df000515 	stw	fp,20(sp)
 1005cfc:	df000504 	addi	fp,sp,20
 1005d00:	e13ffd15 	stw	r4,-12(fp)
 1005d04:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1005d08:	e0bffe17 	ldw	r2,-8(fp)
 1005d0c:	10800017 	ldw	r2,0(r2)
 1005d10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1005d14:	e13ffd17 	ldw	r4,-12(fp)
 1005d18:	10003ec0 	call	10003ec <strlen>
 1005d1c:	10800044 	addi	r2,r2,1
 1005d20:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005d24:	00000d06 	br	1005d5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1005d28:	e0bffc17 	ldw	r2,-16(fp)
 1005d2c:	11000217 	ldw	r4,8(r2)
 1005d30:	e1bffb17 	ldw	r6,-20(fp)
 1005d34:	e17ffd17 	ldw	r5,-12(fp)
 1005d38:	10067ec0 	call	10067ec <memcmp>
 1005d3c:	1004c03a 	cmpne	r2,r2,zero
 1005d40:	1000031e 	bne	r2,zero,1005d50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1005d44:	e0bffc17 	ldw	r2,-16(fp)
 1005d48:	e0bfff15 	stw	r2,-4(fp)
 1005d4c:	00000706 	br	1005d6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1005d50:	e0bffc17 	ldw	r2,-16(fp)
 1005d54:	10800017 	ldw	r2,0(r2)
 1005d58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005d5c:	e0fffe17 	ldw	r3,-8(fp)
 1005d60:	e0bffc17 	ldw	r2,-16(fp)
 1005d64:	10fff01e 	bne	r2,r3,1005d28 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1005d68:	e03fff15 	stw	zero,-4(fp)
 1005d6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005d70:	e037883a 	mov	sp,fp
 1005d74:	dfc00117 	ldw	ra,4(sp)
 1005d78:	df000017 	ldw	fp,0(sp)
 1005d7c:	dec00204 	addi	sp,sp,8
 1005d80:	f800283a 	ret

01005d84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1005d84:	defffe04 	addi	sp,sp,-8
 1005d88:	dfc00115 	stw	ra,4(sp)
 1005d8c:	df000015 	stw	fp,0(sp)
 1005d90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1005d94:	0009883a 	mov	r4,zero
 1005d98:	01440004 	movi	r5,4096
 1005d9c:	10067100 	call	1006710 <alt_icache_flush>
#endif
}
 1005da0:	e037883a 	mov	sp,fp
 1005da4:	dfc00117 	ldw	ra,4(sp)
 1005da8:	df000017 	ldw	fp,0(sp)
 1005dac:	dec00204 	addi	sp,sp,8
 1005db0:	f800283a 	ret

01005db4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1005db4:	defff904 	addi	sp,sp,-28
 1005db8:	dfc00615 	stw	ra,24(sp)
 1005dbc:	df000515 	stw	fp,20(sp)
 1005dc0:	df000504 	addi	fp,sp,20
 1005dc4:	e13ffc15 	stw	r4,-16(fp)
 1005dc8:	e17ffd15 	stw	r5,-12(fp)
 1005dcc:	e1bffe15 	stw	r6,-8(fp)
 1005dd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1005dd4:	e13ffd17 	ldw	r4,-12(fp)
 1005dd8:	e17ffe17 	ldw	r5,-8(fp)
 1005ddc:	e1bfff17 	ldw	r6,-4(fp)
 1005de0:	100618c0 	call	100618c <open>
 1005de4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1005de8:	e0bffb17 	ldw	r2,-20(fp)
 1005dec:	1004803a 	cmplt	r2,r2,zero
 1005df0:	10001c1e 	bne	r2,zero,1005e64 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1005df4:	e0bffb17 	ldw	r2,-20(fp)
 1005df8:	00c04034 	movhi	r3,256
 1005dfc:	18dd7904 	addi	r3,r3,30180
 1005e00:	10800324 	muli	r2,r2,12
 1005e04:	10c5883a 	add	r2,r2,r3
 1005e08:	10c00017 	ldw	r3,0(r2)
 1005e0c:	e0bffc17 	ldw	r2,-16(fp)
 1005e10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1005e14:	e0bffb17 	ldw	r2,-20(fp)
 1005e18:	00c04034 	movhi	r3,256
 1005e1c:	18dd7904 	addi	r3,r3,30180
 1005e20:	10800324 	muli	r2,r2,12
 1005e24:	10c5883a 	add	r2,r2,r3
 1005e28:	10800104 	addi	r2,r2,4
 1005e2c:	10c00017 	ldw	r3,0(r2)
 1005e30:	e0bffc17 	ldw	r2,-16(fp)
 1005e34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1005e38:	e0bffb17 	ldw	r2,-20(fp)
 1005e3c:	00c04034 	movhi	r3,256
 1005e40:	18dd7904 	addi	r3,r3,30180
 1005e44:	10800324 	muli	r2,r2,12
 1005e48:	10c5883a 	add	r2,r2,r3
 1005e4c:	10800204 	addi	r2,r2,8
 1005e50:	10c00017 	ldw	r3,0(r2)
 1005e54:	e0bffc17 	ldw	r2,-16(fp)
 1005e58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1005e5c:	e13ffb17 	ldw	r4,-20(fp)
 1005e60:	100348c0 	call	100348c <alt_release_fd>
  }
} 
 1005e64:	e037883a 	mov	sp,fp
 1005e68:	dfc00117 	ldw	ra,4(sp)
 1005e6c:	df000017 	ldw	fp,0(sp)
 1005e70:	dec00204 	addi	sp,sp,8
 1005e74:	f800283a 	ret

01005e78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1005e78:	defffb04 	addi	sp,sp,-20
 1005e7c:	dfc00415 	stw	ra,16(sp)
 1005e80:	df000315 	stw	fp,12(sp)
 1005e84:	df000304 	addi	fp,sp,12
 1005e88:	e13ffd15 	stw	r4,-12(fp)
 1005e8c:	e17ffe15 	stw	r5,-8(fp)
 1005e90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1005e94:	01004034 	movhi	r4,256
 1005e98:	211d7c04 	addi	r4,r4,30192
 1005e9c:	e17ffd17 	ldw	r5,-12(fp)
 1005ea0:	01800044 	movi	r6,1
 1005ea4:	01c07fc4 	movi	r7,511
 1005ea8:	1005db40 	call	1005db4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1005eac:	01004034 	movhi	r4,256
 1005eb0:	211d7904 	addi	r4,r4,30180
 1005eb4:	e17ffe17 	ldw	r5,-8(fp)
 1005eb8:	000d883a 	mov	r6,zero
 1005ebc:	01c07fc4 	movi	r7,511
 1005ec0:	1005db40 	call	1005db4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1005ec4:	01004034 	movhi	r4,256
 1005ec8:	211d7f04 	addi	r4,r4,30204
 1005ecc:	e17fff17 	ldw	r5,-4(fp)
 1005ed0:	01800044 	movi	r6,1
 1005ed4:	01c07fc4 	movi	r7,511
 1005ed8:	1005db40 	call	1005db4 <alt_open_fd>
}  
 1005edc:	e037883a 	mov	sp,fp
 1005ee0:	dfc00117 	ldw	ra,4(sp)
 1005ee4:	df000017 	ldw	fp,0(sp)
 1005ee8:	dec00204 	addi	sp,sp,8
 1005eec:	f800283a 	ret

01005ef0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1005ef0:	deffef04 	addi	sp,sp,-68
 1005ef4:	df001015 	stw	fp,64(sp)
 1005ef8:	df001004 	addi	fp,sp,64
 1005efc:	e13ffc15 	stw	r4,-16(fp)
 1005f00:	e17ffd15 	stw	r5,-12(fp)
 1005f04:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1005f08:	00bffa84 	movi	r2,-22
 1005f0c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1005f10:	e0bffc17 	ldw	r2,-16(fp)
 1005f14:	10800828 	cmpgeui	r2,r2,32
 1005f18:	1000601e 	bne	r2,zero,100609c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005f1c:	0005303a 	rdctl	r2,status
 1005f20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005f24:	e0fff917 	ldw	r3,-28(fp)
 1005f28:	00bfff84 	movi	r2,-2
 1005f2c:	1884703a 	and	r2,r3,r2
 1005f30:	1001703a 	wrctl	status,r2
  
  return context;
 1005f34:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1005f38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1005f3c:	e0bffc17 	ldw	r2,-16(fp)
 1005f40:	00c04074 	movhi	r3,257
 1005f44:	18e99704 	addi	r3,r3,-22948
 1005f48:	100490fa 	slli	r2,r2,3
 1005f4c:	10c7883a 	add	r3,r2,r3
 1005f50:	e0bffe17 	ldw	r2,-8(fp)
 1005f54:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1005f58:	e0bffc17 	ldw	r2,-16(fp)
 1005f5c:	00c04074 	movhi	r3,257
 1005f60:	18e99704 	addi	r3,r3,-22948
 1005f64:	100490fa 	slli	r2,r2,3
 1005f68:	10c5883a 	add	r2,r2,r3
 1005f6c:	10c00104 	addi	r3,r2,4
 1005f70:	e0bffd17 	ldw	r2,-12(fp)
 1005f74:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1005f78:	e0bffe17 	ldw	r2,-8(fp)
 1005f7c:	1005003a 	cmpeq	r2,r2,zero
 1005f80:	1000201e 	bne	r2,zero,1006004 <alt_irq_register+0x114>
 1005f84:	e0bffc17 	ldw	r2,-16(fp)
 1005f88:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005f8c:	0005303a 	rdctl	r2,status
 1005f90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005f94:	e0fff617 	ldw	r3,-40(fp)
 1005f98:	00bfff84 	movi	r2,-2
 1005f9c:	1884703a 	and	r2,r3,r2
 1005fa0:	1001703a 	wrctl	status,r2
  
  return context;
 1005fa4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1005fa8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1005fac:	e0fff717 	ldw	r3,-36(fp)
 1005fb0:	00800044 	movi	r2,1
 1005fb4:	10c4983a 	sll	r2,r2,r3
 1005fb8:	1007883a 	mov	r3,r2
 1005fbc:	00804074 	movhi	r2,257
 1005fc0:	10a98a04 	addi	r2,r2,-23000
 1005fc4:	10800017 	ldw	r2,0(r2)
 1005fc8:	1886b03a 	or	r3,r3,r2
 1005fcc:	00804074 	movhi	r2,257
 1005fd0:	10a98a04 	addi	r2,r2,-23000
 1005fd4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1005fd8:	00804074 	movhi	r2,257
 1005fdc:	10a98a04 	addi	r2,r2,-23000
 1005fe0:	10800017 	ldw	r2,0(r2)
 1005fe4:	100170fa 	wrctl	ienable,r2
 1005fe8:	e0bff817 	ldw	r2,-32(fp)
 1005fec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005ff0:	e0bff517 	ldw	r2,-44(fp)
 1005ff4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1005ff8:	0005883a 	mov	r2,zero
 1005ffc:	e0bfff15 	stw	r2,-4(fp)
 1006000:	00002006 	br	1006084 <alt_irq_register+0x194>
 1006004:	e0bffc17 	ldw	r2,-16(fp)
 1006008:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100600c:	0005303a 	rdctl	r2,status
 1006010:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006014:	e0fff217 	ldw	r3,-56(fp)
 1006018:	00bfff84 	movi	r2,-2
 100601c:	1884703a 	and	r2,r3,r2
 1006020:	1001703a 	wrctl	status,r2
  
  return context;
 1006024:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1006028:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100602c:	e0fff317 	ldw	r3,-52(fp)
 1006030:	00800044 	movi	r2,1
 1006034:	10c4983a 	sll	r2,r2,r3
 1006038:	0084303a 	nor	r2,zero,r2
 100603c:	1007883a 	mov	r3,r2
 1006040:	00804074 	movhi	r2,257
 1006044:	10a98a04 	addi	r2,r2,-23000
 1006048:	10800017 	ldw	r2,0(r2)
 100604c:	1886703a 	and	r3,r3,r2
 1006050:	00804074 	movhi	r2,257
 1006054:	10a98a04 	addi	r2,r2,-23000
 1006058:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100605c:	00804074 	movhi	r2,257
 1006060:	10a98a04 	addi	r2,r2,-23000
 1006064:	10800017 	ldw	r2,0(r2)
 1006068:	100170fa 	wrctl	ienable,r2
 100606c:	e0bff417 	ldw	r2,-48(fp)
 1006070:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006074:	e0bff117 	ldw	r2,-60(fp)
 1006078:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100607c:	0005883a 	mov	r2,zero
 1006080:	e0bfff15 	stw	r2,-4(fp)
 1006084:	e0bfff17 	ldw	r2,-4(fp)
 1006088:	e0bffb15 	stw	r2,-20(fp)
 100608c:	e0bffa17 	ldw	r2,-24(fp)
 1006090:	e0bff015 	stw	r2,-64(fp)
 1006094:	e0bff017 	ldw	r2,-64(fp)
 1006098:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100609c:	e0bffb17 	ldw	r2,-20(fp)
}
 10060a0:	e037883a 	mov	sp,fp
 10060a4:	df000017 	ldw	fp,0(sp)
 10060a8:	dec00104 	addi	sp,sp,4
 10060ac:	f800283a 	ret

010060b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10060b0:	defffc04 	addi	sp,sp,-16
 10060b4:	df000315 	stw	fp,12(sp)
 10060b8:	df000304 	addi	fp,sp,12
 10060bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10060c0:	e0bffe17 	ldw	r2,-8(fp)
 10060c4:	10800217 	ldw	r2,8(r2)
 10060c8:	10d00034 	orhi	r3,r2,16384
 10060cc:	e0bffe17 	ldw	r2,-8(fp)
 10060d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10060d4:	e03ffd15 	stw	zero,-12(fp)
 10060d8:	00002006 	br	100615c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10060dc:	e0bffd17 	ldw	r2,-12(fp)
 10060e0:	00c04034 	movhi	r3,256
 10060e4:	18dd7904 	addi	r3,r3,30180
 10060e8:	10800324 	muli	r2,r2,12
 10060ec:	10c5883a 	add	r2,r2,r3
 10060f0:	10c00017 	ldw	r3,0(r2)
 10060f4:	e0bffe17 	ldw	r2,-8(fp)
 10060f8:	10800017 	ldw	r2,0(r2)
 10060fc:	1880141e 	bne	r3,r2,1006150 <alt_file_locked+0xa0>
 1006100:	e0bffd17 	ldw	r2,-12(fp)
 1006104:	00c04034 	movhi	r3,256
 1006108:	18dd7904 	addi	r3,r3,30180
 100610c:	10800324 	muli	r2,r2,12
 1006110:	10c5883a 	add	r2,r2,r3
 1006114:	10800204 	addi	r2,r2,8
 1006118:	10800017 	ldw	r2,0(r2)
 100611c:	1004403a 	cmpge	r2,r2,zero
 1006120:	10000b1e 	bne	r2,zero,1006150 <alt_file_locked+0xa0>
 1006124:	e0bffd17 	ldw	r2,-12(fp)
 1006128:	10800324 	muli	r2,r2,12
 100612c:	1007883a 	mov	r3,r2
 1006130:	00804034 	movhi	r2,256
 1006134:	109d7904 	addi	r2,r2,30180
 1006138:	1887883a 	add	r3,r3,r2
 100613c:	e0bffe17 	ldw	r2,-8(fp)
 1006140:	18800326 	beq	r3,r2,1006150 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1006144:	00bffcc4 	movi	r2,-13
 1006148:	e0bfff15 	stw	r2,-4(fp)
 100614c:	00000a06 	br	1006178 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1006150:	e0bffd17 	ldw	r2,-12(fp)
 1006154:	10800044 	addi	r2,r2,1
 1006158:	e0bffd15 	stw	r2,-12(fp)
 100615c:	00804074 	movhi	r2,257
 1006160:	10a27204 	addi	r2,r2,-30264
 1006164:	10800017 	ldw	r2,0(r2)
 1006168:	1007883a 	mov	r3,r2
 100616c:	e0bffd17 	ldw	r2,-12(fp)
 1006170:	18bfda2e 	bgeu	r3,r2,10060dc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1006174:	e03fff15 	stw	zero,-4(fp)
 1006178:	e0bfff17 	ldw	r2,-4(fp)
}
 100617c:	e037883a 	mov	sp,fp
 1006180:	df000017 	ldw	fp,0(sp)
 1006184:	dec00104 	addi	sp,sp,4
 1006188:	f800283a 	ret

0100618c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100618c:	defff404 	addi	sp,sp,-48
 1006190:	dfc00b15 	stw	ra,44(sp)
 1006194:	df000a15 	stw	fp,40(sp)
 1006198:	df000a04 	addi	fp,sp,40
 100619c:	e13ffb15 	stw	r4,-20(fp)
 10061a0:	e17ffc15 	stw	r5,-16(fp)
 10061a4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10061a8:	00bfffc4 	movi	r2,-1
 10061ac:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10061b0:	00bffb44 	movi	r2,-19
 10061b4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10061b8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10061bc:	e13ffb17 	ldw	r4,-20(fp)
 10061c0:	01404074 	movhi	r5,257
 10061c4:	29627004 	addi	r5,r5,-30272
 10061c8:	1005cf00 	call	1005cf0 <alt_find_dev>
 10061cc:	e0bffa15 	stw	r2,-24(fp)
 10061d0:	e0bffa17 	ldw	r2,-24(fp)
 10061d4:	1004c03a 	cmpne	r2,r2,zero
 10061d8:	1000051e 	bne	r2,zero,10061f0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10061dc:	e13ffb17 	ldw	r4,-20(fp)
 10061e0:	10065380 	call	1006538 <alt_find_file>
 10061e4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10061e8:	00800044 	movi	r2,1
 10061ec:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10061f0:	e0bffa17 	ldw	r2,-24(fp)
 10061f4:	1005003a 	cmpeq	r2,r2,zero
 10061f8:	1000301e 	bne	r2,zero,10062bc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10061fc:	e13ffa17 	ldw	r4,-24(fp)
 1006200:	10066580 	call	1006658 <alt_get_fd>
 1006204:	e0bff815 	stw	r2,-32(fp)
 1006208:	e0bff817 	ldw	r2,-32(fp)
 100620c:	1004403a 	cmpge	r2,r2,zero
 1006210:	1000031e 	bne	r2,zero,1006220 <open+0x94>
    {
      status = index;
 1006214:	e0bff817 	ldw	r2,-32(fp)
 1006218:	e0bff715 	stw	r2,-36(fp)
 100621c:	00002906 	br	10062c4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1006220:	e0bff817 	ldw	r2,-32(fp)
 1006224:	10800324 	muli	r2,r2,12
 1006228:	1007883a 	mov	r3,r2
 100622c:	00804034 	movhi	r2,256
 1006230:	109d7904 	addi	r2,r2,30180
 1006234:	1885883a 	add	r2,r3,r2
 1006238:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100623c:	e0fffc17 	ldw	r3,-16(fp)
 1006240:	00900034 	movhi	r2,16384
 1006244:	10bfffc4 	addi	r2,r2,-1
 1006248:	1886703a 	and	r3,r3,r2
 100624c:	e0bff917 	ldw	r2,-28(fp)
 1006250:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1006254:	e0bff617 	ldw	r2,-40(fp)
 1006258:	1004c03a 	cmpne	r2,r2,zero
 100625c:	1000061e 	bne	r2,zero,1006278 <open+0xec>
 1006260:	e13ff917 	ldw	r4,-28(fp)
 1006264:	10060b00 	call	10060b0 <alt_file_locked>
 1006268:	e0bff715 	stw	r2,-36(fp)
 100626c:	e0bff717 	ldw	r2,-36(fp)
 1006270:	1004803a 	cmplt	r2,r2,zero
 1006274:	1000131e 	bne	r2,zero,10062c4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1006278:	e0bffa17 	ldw	r2,-24(fp)
 100627c:	10800317 	ldw	r2,12(r2)
 1006280:	1005003a 	cmpeq	r2,r2,zero
 1006284:	1000091e 	bne	r2,zero,10062ac <open+0x120>
 1006288:	e0bffa17 	ldw	r2,-24(fp)
 100628c:	10800317 	ldw	r2,12(r2)
 1006290:	e13ff917 	ldw	r4,-28(fp)
 1006294:	e17ffb17 	ldw	r5,-20(fp)
 1006298:	e1bffc17 	ldw	r6,-16(fp)
 100629c:	e1fffd17 	ldw	r7,-12(fp)
 10062a0:	103ee83a 	callr	r2
 10062a4:	e0bfff15 	stw	r2,-4(fp)
 10062a8:	00000106 	br	10062b0 <open+0x124>
 10062ac:	e03fff15 	stw	zero,-4(fp)
 10062b0:	e0bfff17 	ldw	r2,-4(fp)
 10062b4:	e0bff715 	stw	r2,-36(fp)
 10062b8:	00000206 	br	10062c4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10062bc:	00bffb44 	movi	r2,-19
 10062c0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10062c4:	e0bff717 	ldw	r2,-36(fp)
 10062c8:	1004403a 	cmpge	r2,r2,zero
 10062cc:	1000091e 	bne	r2,zero,10062f4 <open+0x168>
  {
    alt_release_fd (index);  
 10062d0:	e13ff817 	ldw	r4,-32(fp)
 10062d4:	100348c0 	call	100348c <alt_release_fd>
    ALT_ERRNO = -status;
 10062d8:	10063140 	call	1006314 <alt_get_errno>
 10062dc:	e0fff717 	ldw	r3,-36(fp)
 10062e0:	00c7c83a 	sub	r3,zero,r3
 10062e4:	10c00015 	stw	r3,0(r2)
    return -1;
 10062e8:	00bfffc4 	movi	r2,-1
 10062ec:	e0bffe15 	stw	r2,-8(fp)
 10062f0:	00000206 	br	10062fc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 10062f4:	e0bff817 	ldw	r2,-32(fp)
 10062f8:	e0bffe15 	stw	r2,-8(fp)
 10062fc:	e0bffe17 	ldw	r2,-8(fp)
}
 1006300:	e037883a 	mov	sp,fp
 1006304:	dfc00117 	ldw	ra,4(sp)
 1006308:	df000017 	ldw	fp,0(sp)
 100630c:	dec00204 	addi	sp,sp,8
 1006310:	f800283a 	ret

01006314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1006314:	defffd04 	addi	sp,sp,-12
 1006318:	dfc00215 	stw	ra,8(sp)
 100631c:	df000115 	stw	fp,4(sp)
 1006320:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1006324:	00804074 	movhi	r2,257
 1006328:	10a27304 	addi	r2,r2,-30260
 100632c:	10800017 	ldw	r2,0(r2)
 1006330:	1005003a 	cmpeq	r2,r2,zero
 1006334:	1000061e 	bne	r2,zero,1006350 <alt_get_errno+0x3c>
 1006338:	00804074 	movhi	r2,257
 100633c:	10a27304 	addi	r2,r2,-30260
 1006340:	10800017 	ldw	r2,0(r2)
 1006344:	103ee83a 	callr	r2
 1006348:	e0bfff15 	stw	r2,-4(fp)
 100634c:	00000306 	br	100635c <alt_get_errno+0x48>
 1006350:	00804074 	movhi	r2,257
 1006354:	10a98604 	addi	r2,r2,-23016
 1006358:	e0bfff15 	stw	r2,-4(fp)
 100635c:	e0bfff17 	ldw	r2,-4(fp)
}
 1006360:	e037883a 	mov	sp,fp
 1006364:	dfc00117 	ldw	ra,4(sp)
 1006368:	df000017 	ldw	fp,0(sp)
 100636c:	dec00204 	addi	sp,sp,8
 1006370:	f800283a 	ret

01006374 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1006374:	defffa04 	addi	sp,sp,-24
 1006378:	df000515 	stw	fp,20(sp)
 100637c:	df000504 	addi	fp,sp,20
 1006380:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006384:	0005303a 	rdctl	r2,status
 1006388:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100638c:	e0fffd17 	ldw	r3,-12(fp)
 1006390:	00bfff84 	movi	r2,-2
 1006394:	1884703a 	and	r2,r3,r2
 1006398:	1001703a 	wrctl	status,r2
  
  return context;
 100639c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10063a0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10063a4:	e0bfff17 	ldw	r2,-4(fp)
 10063a8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10063ac:	e0bffc17 	ldw	r2,-16(fp)
 10063b0:	10c00017 	ldw	r3,0(r2)
 10063b4:	e0bffc17 	ldw	r2,-16(fp)
 10063b8:	10800117 	ldw	r2,4(r2)
 10063bc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10063c0:	e0bffc17 	ldw	r2,-16(fp)
 10063c4:	10c00117 	ldw	r3,4(r2)
 10063c8:	e0bffc17 	ldw	r2,-16(fp)
 10063cc:	10800017 	ldw	r2,0(r2)
 10063d0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10063d4:	e0fffc17 	ldw	r3,-16(fp)
 10063d8:	e0bffc17 	ldw	r2,-16(fp)
 10063dc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10063e0:	e0fffc17 	ldw	r3,-16(fp)
 10063e4:	e0bffc17 	ldw	r2,-16(fp)
 10063e8:	18800015 	stw	r2,0(r3)
 10063ec:	e0bffe17 	ldw	r2,-8(fp)
 10063f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10063f4:	e0bffb17 	ldw	r2,-20(fp)
 10063f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10063fc:	e037883a 	mov	sp,fp
 1006400:	df000017 	ldw	fp,0(sp)
 1006404:	dec00104 	addi	sp,sp,4
 1006408:	f800283a 	ret

0100640c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100640c:	defffb04 	addi	sp,sp,-20
 1006410:	dfc00415 	stw	ra,16(sp)
 1006414:	df000315 	stw	fp,12(sp)
 1006418:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100641c:	d0a00c17 	ldw	r2,-32720(gp)
 1006420:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1006424:	d0a72217 	ldw	r2,-25464(gp)
 1006428:	10800044 	addi	r2,r2,1
 100642c:	d0a72215 	stw	r2,-25464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1006430:	00003106 	br	10064f8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1006434:	e0bffe17 	ldw	r2,-8(fp)
 1006438:	10800017 	ldw	r2,0(r2)
 100643c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1006440:	e0bffe17 	ldw	r2,-8(fp)
 1006444:	10800403 	ldbu	r2,16(r2)
 1006448:	10803fcc 	andi	r2,r2,255
 100644c:	1005003a 	cmpeq	r2,r2,zero
 1006450:	1000051e 	bne	r2,zero,1006468 <alt_tick+0x5c>
 1006454:	d0a72217 	ldw	r2,-25464(gp)
 1006458:	1004c03a 	cmpne	r2,r2,zero
 100645c:	1000021e 	bne	r2,zero,1006468 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1006460:	e0bffe17 	ldw	r2,-8(fp)
 1006464:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1006468:	e0bffe17 	ldw	r2,-8(fp)
 100646c:	10c00217 	ldw	r3,8(r2)
 1006470:	d0a72217 	ldw	r2,-25464(gp)
 1006474:	10c01e36 	bltu	r2,r3,10064f0 <alt_tick+0xe4>
 1006478:	e0bffe17 	ldw	r2,-8(fp)
 100647c:	10800403 	ldbu	r2,16(r2)
 1006480:	10803fcc 	andi	r2,r2,255
 1006484:	1004c03a 	cmpne	r2,r2,zero
 1006488:	1000191e 	bne	r2,zero,10064f0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100648c:	e0bffe17 	ldw	r2,-8(fp)
 1006490:	10c00317 	ldw	r3,12(r2)
 1006494:	e0bffe17 	ldw	r2,-8(fp)
 1006498:	11000517 	ldw	r4,20(r2)
 100649c:	183ee83a 	callr	r3
 10064a0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10064a4:	e0bffd17 	ldw	r2,-12(fp)
 10064a8:	1004c03a 	cmpne	r2,r2,zero
 10064ac:	1000031e 	bne	r2,zero,10064bc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10064b0:	e13ffe17 	ldw	r4,-8(fp)
 10064b4:	10063740 	call	1006374 <alt_alarm_stop>
 10064b8:	00000d06 	br	10064f0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10064bc:	e0bffe17 	ldw	r2,-8(fp)
 10064c0:	10c00217 	ldw	r3,8(r2)
 10064c4:	e0bffd17 	ldw	r2,-12(fp)
 10064c8:	1887883a 	add	r3,r3,r2
 10064cc:	e0bffe17 	ldw	r2,-8(fp)
 10064d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10064d4:	e0bffe17 	ldw	r2,-8(fp)
 10064d8:	10c00217 	ldw	r3,8(r2)
 10064dc:	d0a72217 	ldw	r2,-25464(gp)
 10064e0:	1880032e 	bgeu	r3,r2,10064f0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10064e4:	e0fffe17 	ldw	r3,-8(fp)
 10064e8:	00800044 	movi	r2,1
 10064ec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10064f0:	e0bfff17 	ldw	r2,-4(fp)
 10064f4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10064f8:	d0e00c04 	addi	r3,gp,-32720
 10064fc:	e0bffe17 	ldw	r2,-8(fp)
 1006500:	10ffcc1e 	bne	r2,r3,1006434 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1006504:	e037883a 	mov	sp,fp
 1006508:	dfc00117 	ldw	ra,4(sp)
 100650c:	df000017 	ldw	fp,0(sp)
 1006510:	dec00204 	addi	sp,sp,8
 1006514:	f800283a 	ret

01006518 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1006518:	deffff04 	addi	sp,sp,-4
 100651c:	df000015 	stw	fp,0(sp)
 1006520:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1006524:	000170fa 	wrctl	ienable,zero
}
 1006528:	e037883a 	mov	sp,fp
 100652c:	df000017 	ldw	fp,0(sp)
 1006530:	dec00104 	addi	sp,sp,4
 1006534:	f800283a 	ret

01006538 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1006538:	defffa04 	addi	sp,sp,-24
 100653c:	dfc00515 	stw	ra,20(sp)
 1006540:	df000415 	stw	fp,16(sp)
 1006544:	df000404 	addi	fp,sp,16
 1006548:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100654c:	00804074 	movhi	r2,257
 1006550:	10a26e04 	addi	r2,r2,-30280
 1006554:	10800017 	ldw	r2,0(r2)
 1006558:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100655c:	00003306 	br	100662c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1006560:	e0bffd17 	ldw	r2,-12(fp)
 1006564:	11000217 	ldw	r4,8(r2)
 1006568:	10003ec0 	call	10003ec <strlen>
 100656c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1006570:	e0bffd17 	ldw	r2,-12(fp)
 1006574:	10c00217 	ldw	r3,8(r2)
 1006578:	e0bffc17 	ldw	r2,-16(fp)
 100657c:	1885883a 	add	r2,r3,r2
 1006580:	10bfffc4 	addi	r2,r2,-1
 1006584:	10800003 	ldbu	r2,0(r2)
 1006588:	10803fcc 	andi	r2,r2,255
 100658c:	1080201c 	xori	r2,r2,128
 1006590:	10bfe004 	addi	r2,r2,-128
 1006594:	10800bd8 	cmpnei	r2,r2,47
 1006598:	1000031e 	bne	r2,zero,10065a8 <alt_find_file+0x70>
    {
      len -= 1;
 100659c:	e0bffc17 	ldw	r2,-16(fp)
 10065a0:	10bfffc4 	addi	r2,r2,-1
 10065a4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10065a8:	e0bffc17 	ldw	r2,-16(fp)
 10065ac:	1007883a 	mov	r3,r2
 10065b0:	e0bffe17 	ldw	r2,-8(fp)
 10065b4:	1885883a 	add	r2,r3,r2
 10065b8:	10800003 	ldbu	r2,0(r2)
 10065bc:	10803fcc 	andi	r2,r2,255
 10065c0:	1080201c 	xori	r2,r2,128
 10065c4:	10bfe004 	addi	r2,r2,-128
 10065c8:	10800be0 	cmpeqi	r2,r2,47
 10065cc:	10000a1e 	bne	r2,zero,10065f8 <alt_find_file+0xc0>
 10065d0:	e0bffc17 	ldw	r2,-16(fp)
 10065d4:	1007883a 	mov	r3,r2
 10065d8:	e0bffe17 	ldw	r2,-8(fp)
 10065dc:	1885883a 	add	r2,r3,r2
 10065e0:	10800003 	ldbu	r2,0(r2)
 10065e4:	10803fcc 	andi	r2,r2,255
 10065e8:	1080201c 	xori	r2,r2,128
 10065ec:	10bfe004 	addi	r2,r2,-128
 10065f0:	1004c03a 	cmpne	r2,r2,zero
 10065f4:	10000a1e 	bne	r2,zero,1006620 <alt_find_file+0xe8>
 10065f8:	e0bffd17 	ldw	r2,-12(fp)
 10065fc:	11000217 	ldw	r4,8(r2)
 1006600:	e1bffc17 	ldw	r6,-16(fp)
 1006604:	e17ffe17 	ldw	r5,-8(fp)
 1006608:	10067ec0 	call	10067ec <memcmp>
 100660c:	1004c03a 	cmpne	r2,r2,zero
 1006610:	1000031e 	bne	r2,zero,1006620 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1006614:	e0bffd17 	ldw	r2,-12(fp)
 1006618:	e0bfff15 	stw	r2,-4(fp)
 100661c:	00000806 	br	1006640 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1006620:	e0bffd17 	ldw	r2,-12(fp)
 1006624:	10800017 	ldw	r2,0(r2)
 1006628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100662c:	00c04074 	movhi	r3,257
 1006630:	18e26e04 	addi	r3,r3,-30280
 1006634:	e0bffd17 	ldw	r2,-12(fp)
 1006638:	10ffc91e 	bne	r2,r3,1006560 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100663c:	e03fff15 	stw	zero,-4(fp)
 1006640:	e0bfff17 	ldw	r2,-4(fp)
}
 1006644:	e037883a 	mov	sp,fp
 1006648:	dfc00117 	ldw	ra,4(sp)
 100664c:	df000017 	ldw	fp,0(sp)
 1006650:	dec00204 	addi	sp,sp,8
 1006654:	f800283a 	ret

01006658 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1006658:	defffc04 	addi	sp,sp,-16
 100665c:	df000315 	stw	fp,12(sp)
 1006660:	df000304 	addi	fp,sp,12
 1006664:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1006668:	00bffa04 	movi	r2,-24
 100666c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1006670:	e03ffe15 	stw	zero,-8(fp)
 1006674:	00001e06 	br	10066f0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1006678:	e0bffe17 	ldw	r2,-8(fp)
 100667c:	00c04034 	movhi	r3,256
 1006680:	18dd7904 	addi	r3,r3,30180
 1006684:	10800324 	muli	r2,r2,12
 1006688:	10c5883a 	add	r2,r2,r3
 100668c:	10800017 	ldw	r2,0(r2)
 1006690:	1004c03a 	cmpne	r2,r2,zero
 1006694:	1000131e 	bne	r2,zero,10066e4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1006698:	e0bffe17 	ldw	r2,-8(fp)
 100669c:	00c04034 	movhi	r3,256
 10066a0:	18dd7904 	addi	r3,r3,30180
 10066a4:	10800324 	muli	r2,r2,12
 10066a8:	10c7883a 	add	r3,r2,r3
 10066ac:	e0bfff17 	ldw	r2,-4(fp)
 10066b0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10066b4:	00804074 	movhi	r2,257
 10066b8:	10a27204 	addi	r2,r2,-30264
 10066bc:	10c00017 	ldw	r3,0(r2)
 10066c0:	e0bffe17 	ldw	r2,-8(fp)
 10066c4:	1880040e 	bge	r3,r2,10066d8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 10066c8:	00c04074 	movhi	r3,257
 10066cc:	18e27204 	addi	r3,r3,-30264
 10066d0:	e0bffe17 	ldw	r2,-8(fp)
 10066d4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10066d8:	e0bffe17 	ldw	r2,-8(fp)
 10066dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10066e0:	00000606 	br	10066fc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10066e4:	e0bffe17 	ldw	r2,-8(fp)
 10066e8:	10800044 	addi	r2,r2,1
 10066ec:	e0bffe15 	stw	r2,-8(fp)
 10066f0:	e0bffe17 	ldw	r2,-8(fp)
 10066f4:	10800810 	cmplti	r2,r2,32
 10066f8:	103fdf1e 	bne	r2,zero,1006678 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10066fc:	e0bffd17 	ldw	r2,-12(fp)
}
 1006700:	e037883a 	mov	sp,fp
 1006704:	df000017 	ldw	fp,0(sp)
 1006708:	dec00104 	addi	sp,sp,4
 100670c:	f800283a 	ret

01006710 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1006710:	defffb04 	addi	sp,sp,-20
 1006714:	df000415 	stw	fp,16(sp)
 1006718:	df000404 	addi	fp,sp,16
 100671c:	e13ffe15 	stw	r4,-8(fp)
 1006720:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1006724:	e0bfff17 	ldw	r2,-4(fp)
 1006728:	10840070 	cmpltui	r2,r2,4097
 100672c:	1000021e 	bne	r2,zero,1006738 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1006730:	00840004 	movi	r2,4096
 1006734:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1006738:	e0fffe17 	ldw	r3,-8(fp)
 100673c:	e0bfff17 	ldw	r2,-4(fp)
 1006740:	1885883a 	add	r2,r3,r2
 1006744:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1006748:	e0bffe17 	ldw	r2,-8(fp)
 100674c:	e0bffd15 	stw	r2,-12(fp)
 1006750:	00000506 	br	1006768 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1006754:	e0bffd17 	ldw	r2,-12(fp)
 1006758:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100675c:	e0bffd17 	ldw	r2,-12(fp)
 1006760:	10800804 	addi	r2,r2,32
 1006764:	e0bffd15 	stw	r2,-12(fp)
 1006768:	e0fffd17 	ldw	r3,-12(fp)
 100676c:	e0bffc17 	ldw	r2,-16(fp)
 1006770:	18bff836 	bltu	r3,r2,1006754 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1006774:	e0bffe17 	ldw	r2,-8(fp)
 1006778:	108007cc 	andi	r2,r2,31
 100677c:	1005003a 	cmpeq	r2,r2,zero
 1006780:	1000021e 	bne	r2,zero,100678c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1006784:	e0bffd17 	ldw	r2,-12(fp)
 1006788:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100678c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1006790:	e037883a 	mov	sp,fp
 1006794:	df000017 	ldw	fp,0(sp)
 1006798:	dec00104 	addi	sp,sp,4
 100679c:	f800283a 	ret

010067a0 <atexit>:
 10067a0:	200b883a 	mov	r5,r4
 10067a4:	000d883a 	mov	r6,zero
 10067a8:	0009883a 	mov	r4,zero
 10067ac:	000f883a 	mov	r7,zero
 10067b0:	100691c1 	jmpi	100691c <__register_exitproc>

010067b4 <exit>:
 10067b4:	defffe04 	addi	sp,sp,-8
 10067b8:	000b883a 	mov	r5,zero
 10067bc:	dc000015 	stw	r16,0(sp)
 10067c0:	dfc00115 	stw	ra,4(sp)
 10067c4:	2021883a 	mov	r16,r4
 10067c8:	1006a540 	call	1006a54 <__call_exitprocs>
 10067cc:	00804074 	movhi	r2,257
 10067d0:	10a26b04 	addi	r2,r2,-30292
 10067d4:	11000017 	ldw	r4,0(r2)
 10067d8:	20800f17 	ldw	r2,60(r4)
 10067dc:	10000126 	beq	r2,zero,10067e4 <exit+0x30>
 10067e0:	103ee83a 	callr	r2
 10067e4:	8009883a 	mov	r4,r16
 10067e8:	1006c440 	call	1006c44 <_exit>

010067ec <memcmp>:
 10067ec:	00c000c4 	movi	r3,3
 10067f0:	1980032e 	bgeu	r3,r6,1006800 <memcmp+0x14>
 10067f4:	2144b03a 	or	r2,r4,r5
 10067f8:	10c4703a 	and	r2,r2,r3
 10067fc:	10000f26 	beq	r2,zero,100683c <memcmp+0x50>
 1006800:	31ffffc4 	addi	r7,r6,-1
 1006804:	3000061e 	bne	r6,zero,1006820 <memcmp+0x34>
 1006808:	00000a06 	br	1006834 <memcmp+0x48>
 100680c:	39ffffc4 	addi	r7,r7,-1
 1006810:	00bfffc4 	movi	r2,-1
 1006814:	21000044 	addi	r4,r4,1
 1006818:	29400044 	addi	r5,r5,1
 100681c:	38800526 	beq	r7,r2,1006834 <memcmp+0x48>
 1006820:	20c00003 	ldbu	r3,0(r4)
 1006824:	28800003 	ldbu	r2,0(r5)
 1006828:	18bff826 	beq	r3,r2,100680c <memcmp+0x20>
 100682c:	1885c83a 	sub	r2,r3,r2
 1006830:	f800283a 	ret
 1006834:	0005883a 	mov	r2,zero
 1006838:	f800283a 	ret
 100683c:	180f883a 	mov	r7,r3
 1006840:	20c00017 	ldw	r3,0(r4)
 1006844:	28800017 	ldw	r2,0(r5)
 1006848:	18bfed1e 	bne	r3,r2,1006800 <memcmp+0x14>
 100684c:	31bfff04 	addi	r6,r6,-4
 1006850:	21000104 	addi	r4,r4,4
 1006854:	29400104 	addi	r5,r5,4
 1006858:	39bff936 	bltu	r7,r6,1006840 <memcmp+0x54>
 100685c:	003fe806 	br	1006800 <memcmp+0x14>

01006860 <strcmp>:
 1006860:	2144b03a 	or	r2,r4,r5
 1006864:	108000cc 	andi	r2,r2,3
 1006868:	10001d1e 	bne	r2,zero,10068e0 <strcmp+0x80>
 100686c:	200f883a 	mov	r7,r4
 1006870:	28800017 	ldw	r2,0(r5)
 1006874:	21000017 	ldw	r4,0(r4)
 1006878:	280d883a 	mov	r6,r5
 100687c:	2080161e 	bne	r4,r2,10068d8 <strcmp+0x78>
 1006880:	023fbff4 	movhi	r8,65279
 1006884:	423fbfc4 	addi	r8,r8,-257
 1006888:	2207883a 	add	r3,r4,r8
 100688c:	01602074 	movhi	r5,32897
 1006890:	29602004 	addi	r5,r5,-32640
 1006894:	1946703a 	and	r3,r3,r5
 1006898:	0104303a 	nor	r2,zero,r4
 100689c:	10c4703a 	and	r2,r2,r3
 10068a0:	10001c1e 	bne	r2,zero,1006914 <strcmp+0xb4>
 10068a4:	4013883a 	mov	r9,r8
 10068a8:	2811883a 	mov	r8,r5
 10068ac:	00000106 	br	10068b4 <strcmp+0x54>
 10068b0:	1800181e 	bne	r3,zero,1006914 <strcmp+0xb4>
 10068b4:	39c00104 	addi	r7,r7,4
 10068b8:	39000017 	ldw	r4,0(r7)
 10068bc:	31800104 	addi	r6,r6,4
 10068c0:	31400017 	ldw	r5,0(r6)
 10068c4:	2245883a 	add	r2,r4,r9
 10068c8:	1204703a 	and	r2,r2,r8
 10068cc:	0106303a 	nor	r3,zero,r4
 10068d0:	1886703a 	and	r3,r3,r2
 10068d4:	217ff626 	beq	r4,r5,10068b0 <strcmp+0x50>
 10068d8:	3809883a 	mov	r4,r7
 10068dc:	300b883a 	mov	r5,r6
 10068e0:	20c00007 	ldb	r3,0(r4)
 10068e4:	1800051e 	bne	r3,zero,10068fc <strcmp+0x9c>
 10068e8:	00000606 	br	1006904 <strcmp+0xa4>
 10068ec:	21000044 	addi	r4,r4,1
 10068f0:	20c00007 	ldb	r3,0(r4)
 10068f4:	29400044 	addi	r5,r5,1
 10068f8:	18000226 	beq	r3,zero,1006904 <strcmp+0xa4>
 10068fc:	28800007 	ldb	r2,0(r5)
 1006900:	18bffa26 	beq	r3,r2,10068ec <strcmp+0x8c>
 1006904:	20c00003 	ldbu	r3,0(r4)
 1006908:	28800003 	ldbu	r2,0(r5)
 100690c:	1885c83a 	sub	r2,r3,r2
 1006910:	f800283a 	ret
 1006914:	0005883a 	mov	r2,zero
 1006918:	f800283a 	ret

0100691c <__register_exitproc>:
 100691c:	defffa04 	addi	sp,sp,-24
 1006920:	00804074 	movhi	r2,257
 1006924:	10a26b04 	addi	r2,r2,-30292
 1006928:	dc000015 	stw	r16,0(sp)
 100692c:	14000017 	ldw	r16,0(r2)
 1006930:	dd000415 	stw	r20,16(sp)
 1006934:	2829883a 	mov	r20,r5
 1006938:	81405217 	ldw	r5,328(r16)
 100693c:	dcc00315 	stw	r19,12(sp)
 1006940:	dc800215 	stw	r18,8(sp)
 1006944:	dc400115 	stw	r17,4(sp)
 1006948:	dfc00515 	stw	ra,20(sp)
 100694c:	2023883a 	mov	r17,r4
 1006950:	3027883a 	mov	r19,r6
 1006954:	3825883a 	mov	r18,r7
 1006958:	28002526 	beq	r5,zero,10069f0 <__register_exitproc+0xd4>
 100695c:	29000117 	ldw	r4,4(r5)
 1006960:	008007c4 	movi	r2,31
 1006964:	11002716 	blt	r2,r4,1006a04 <__register_exitproc+0xe8>
 1006968:	8800101e 	bne	r17,zero,10069ac <__register_exitproc+0x90>
 100696c:	2105883a 	add	r2,r4,r4
 1006970:	1085883a 	add	r2,r2,r2
 1006974:	20c00044 	addi	r3,r4,1
 1006978:	1145883a 	add	r2,r2,r5
 100697c:	0009883a 	mov	r4,zero
 1006980:	15000215 	stw	r20,8(r2)
 1006984:	28c00115 	stw	r3,4(r5)
 1006988:	2005883a 	mov	r2,r4
 100698c:	dfc00517 	ldw	ra,20(sp)
 1006990:	dd000417 	ldw	r20,16(sp)
 1006994:	dcc00317 	ldw	r19,12(sp)
 1006998:	dc800217 	ldw	r18,8(sp)
 100699c:	dc400117 	ldw	r17,4(sp)
 10069a0:	dc000017 	ldw	r16,0(sp)
 10069a4:	dec00604 	addi	sp,sp,24
 10069a8:	f800283a 	ret
 10069ac:	29802204 	addi	r6,r5,136
 10069b0:	00800044 	movi	r2,1
 10069b4:	110e983a 	sll	r7,r2,r4
 10069b8:	30c04017 	ldw	r3,256(r6)
 10069bc:	2105883a 	add	r2,r4,r4
 10069c0:	1085883a 	add	r2,r2,r2
 10069c4:	1185883a 	add	r2,r2,r6
 10069c8:	19c6b03a 	or	r3,r3,r7
 10069cc:	14802015 	stw	r18,128(r2)
 10069d0:	14c00015 	stw	r19,0(r2)
 10069d4:	00800084 	movi	r2,2
 10069d8:	30c04015 	stw	r3,256(r6)
 10069dc:	88bfe31e 	bne	r17,r2,100696c <__register_exitproc+0x50>
 10069e0:	30804117 	ldw	r2,260(r6)
 10069e4:	11c4b03a 	or	r2,r2,r7
 10069e8:	30804115 	stw	r2,260(r6)
 10069ec:	003fdf06 	br	100696c <__register_exitproc+0x50>
 10069f0:	00804074 	movhi	r2,257
 10069f4:	10a9d704 	addi	r2,r2,-22692
 10069f8:	100b883a 	mov	r5,r2
 10069fc:	80805215 	stw	r2,328(r16)
 1006a00:	003fd606 	br	100695c <__register_exitproc+0x40>
 1006a04:	00800034 	movhi	r2,0
 1006a08:	10800004 	addi	r2,r2,0
 1006a0c:	1000021e 	bne	r2,zero,1006a18 <__register_exitproc+0xfc>
 1006a10:	013fffc4 	movi	r4,-1
 1006a14:	003fdc06 	br	1006988 <__register_exitproc+0x6c>
 1006a18:	01006404 	movi	r4,400
 1006a1c:	103ee83a 	callr	r2
 1006a20:	1007883a 	mov	r3,r2
 1006a24:	103ffa26 	beq	r2,zero,1006a10 <__register_exitproc+0xf4>
 1006a28:	80805217 	ldw	r2,328(r16)
 1006a2c:	180b883a 	mov	r5,r3
 1006a30:	18000115 	stw	zero,4(r3)
 1006a34:	18800015 	stw	r2,0(r3)
 1006a38:	80c05215 	stw	r3,328(r16)
 1006a3c:	18006215 	stw	zero,392(r3)
 1006a40:	18006315 	stw	zero,396(r3)
 1006a44:	0009883a 	mov	r4,zero
 1006a48:	883fc826 	beq	r17,zero,100696c <__register_exitproc+0x50>
 1006a4c:	003fd706 	br	10069ac <__register_exitproc+0x90>

01006a50 <register_fini>:
 1006a50:	f800283a 	ret

01006a54 <__call_exitprocs>:
 1006a54:	00804074 	movhi	r2,257
 1006a58:	10a26b04 	addi	r2,r2,-30292
 1006a5c:	10800017 	ldw	r2,0(r2)
 1006a60:	defff304 	addi	sp,sp,-52
 1006a64:	df000b15 	stw	fp,44(sp)
 1006a68:	d8800115 	stw	r2,4(sp)
 1006a6c:	00800034 	movhi	r2,0
 1006a70:	10800004 	addi	r2,r2,0
 1006a74:	1005003a 	cmpeq	r2,r2,zero
 1006a78:	d8800215 	stw	r2,8(sp)
 1006a7c:	d8800117 	ldw	r2,4(sp)
 1006a80:	dd400815 	stw	r21,32(sp)
 1006a84:	dd000715 	stw	r20,28(sp)
 1006a88:	10805204 	addi	r2,r2,328
 1006a8c:	dfc00c15 	stw	ra,48(sp)
 1006a90:	ddc00a15 	stw	r23,40(sp)
 1006a94:	dd800915 	stw	r22,36(sp)
 1006a98:	dcc00615 	stw	r19,24(sp)
 1006a9c:	dc800515 	stw	r18,20(sp)
 1006aa0:	dc400415 	stw	r17,16(sp)
 1006aa4:	dc000315 	stw	r16,12(sp)
 1006aa8:	282b883a 	mov	r21,r5
 1006aac:	2039883a 	mov	fp,r4
 1006ab0:	d8800015 	stw	r2,0(sp)
 1006ab4:	2829003a 	cmpeq	r20,r5,zero
 1006ab8:	d8800117 	ldw	r2,4(sp)
 1006abc:	14405217 	ldw	r17,328(r2)
 1006ac0:	88001026 	beq	r17,zero,1006b04 <__call_exitprocs+0xb0>
 1006ac4:	ddc00017 	ldw	r23,0(sp)
 1006ac8:	88800117 	ldw	r2,4(r17)
 1006acc:	8c802204 	addi	r18,r17,136
 1006ad0:	143fffc4 	addi	r16,r2,-1
 1006ad4:	80000916 	blt	r16,zero,1006afc <__call_exitprocs+0xa8>
 1006ad8:	05bfffc4 	movi	r22,-1
 1006adc:	a000151e 	bne	r20,zero,1006b34 <__call_exitprocs+0xe0>
 1006ae0:	8409883a 	add	r4,r16,r16
 1006ae4:	2105883a 	add	r2,r4,r4
 1006ae8:	1485883a 	add	r2,r2,r18
 1006aec:	10c02017 	ldw	r3,128(r2)
 1006af0:	a8c01126 	beq	r21,r3,1006b38 <__call_exitprocs+0xe4>
 1006af4:	843fffc4 	addi	r16,r16,-1
 1006af8:	85bff81e 	bne	r16,r22,1006adc <__call_exitprocs+0x88>
 1006afc:	d8800217 	ldw	r2,8(sp)
 1006b00:	10003126 	beq	r2,zero,1006bc8 <__call_exitprocs+0x174>
 1006b04:	dfc00c17 	ldw	ra,48(sp)
 1006b08:	df000b17 	ldw	fp,44(sp)
 1006b0c:	ddc00a17 	ldw	r23,40(sp)
 1006b10:	dd800917 	ldw	r22,36(sp)
 1006b14:	dd400817 	ldw	r21,32(sp)
 1006b18:	dd000717 	ldw	r20,28(sp)
 1006b1c:	dcc00617 	ldw	r19,24(sp)
 1006b20:	dc800517 	ldw	r18,20(sp)
 1006b24:	dc400417 	ldw	r17,16(sp)
 1006b28:	dc000317 	ldw	r16,12(sp)
 1006b2c:	dec00d04 	addi	sp,sp,52
 1006b30:	f800283a 	ret
 1006b34:	8409883a 	add	r4,r16,r16
 1006b38:	88c00117 	ldw	r3,4(r17)
 1006b3c:	2105883a 	add	r2,r4,r4
 1006b40:	1445883a 	add	r2,r2,r17
 1006b44:	18ffffc4 	addi	r3,r3,-1
 1006b48:	11800217 	ldw	r6,8(r2)
 1006b4c:	1c001526 	beq	r3,r16,1006ba4 <__call_exitprocs+0x150>
 1006b50:	10000215 	stw	zero,8(r2)
 1006b54:	303fe726 	beq	r6,zero,1006af4 <__call_exitprocs+0xa0>
 1006b58:	00c00044 	movi	r3,1
 1006b5c:	1c06983a 	sll	r3,r3,r16
 1006b60:	90804017 	ldw	r2,256(r18)
 1006b64:	8cc00117 	ldw	r19,4(r17)
 1006b68:	1884703a 	and	r2,r3,r2
 1006b6c:	10001426 	beq	r2,zero,1006bc0 <__call_exitprocs+0x16c>
 1006b70:	90804117 	ldw	r2,260(r18)
 1006b74:	1884703a 	and	r2,r3,r2
 1006b78:	10000c1e 	bne	r2,zero,1006bac <__call_exitprocs+0x158>
 1006b7c:	2105883a 	add	r2,r4,r4
 1006b80:	1485883a 	add	r2,r2,r18
 1006b84:	11400017 	ldw	r5,0(r2)
 1006b88:	e009883a 	mov	r4,fp
 1006b8c:	303ee83a 	callr	r6
 1006b90:	88800117 	ldw	r2,4(r17)
 1006b94:	98bfc81e 	bne	r19,r2,1006ab8 <__call_exitprocs+0x64>
 1006b98:	b8800017 	ldw	r2,0(r23)
 1006b9c:	147fd526 	beq	r2,r17,1006af4 <__call_exitprocs+0xa0>
 1006ba0:	003fc506 	br	1006ab8 <__call_exitprocs+0x64>
 1006ba4:	8c000115 	stw	r16,4(r17)
 1006ba8:	003fea06 	br	1006b54 <__call_exitprocs+0x100>
 1006bac:	2105883a 	add	r2,r4,r4
 1006bb0:	1485883a 	add	r2,r2,r18
 1006bb4:	11000017 	ldw	r4,0(r2)
 1006bb8:	303ee83a 	callr	r6
 1006bbc:	003ff406 	br	1006b90 <__call_exitprocs+0x13c>
 1006bc0:	303ee83a 	callr	r6
 1006bc4:	003ff206 	br	1006b90 <__call_exitprocs+0x13c>
 1006bc8:	88800117 	ldw	r2,4(r17)
 1006bcc:	1000081e 	bne	r2,zero,1006bf0 <__call_exitprocs+0x19c>
 1006bd0:	89000017 	ldw	r4,0(r17)
 1006bd4:	20000726 	beq	r4,zero,1006bf4 <__call_exitprocs+0x1a0>
 1006bd8:	b9000015 	stw	r4,0(r23)
 1006bdc:	8809883a 	mov	r4,r17
 1006be0:	00000000 	call	0 <__alt_mem_onchip_memory>
 1006be4:	bc400017 	ldw	r17,0(r23)
 1006be8:	883fb71e 	bne	r17,zero,1006ac8 <__call_exitprocs+0x74>
 1006bec:	003fc506 	br	1006b04 <__call_exitprocs+0xb0>
 1006bf0:	89000017 	ldw	r4,0(r17)
 1006bf4:	882f883a 	mov	r23,r17
 1006bf8:	2023883a 	mov	r17,r4
 1006bfc:	883fb21e 	bne	r17,zero,1006ac8 <__call_exitprocs+0x74>
 1006c00:	003fc006 	br	1006b04 <__call_exitprocs+0xb0>

01006c04 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1006c04:	defffd04 	addi	sp,sp,-12
 1006c08:	df000215 	stw	fp,8(sp)
 1006c0c:	df000204 	addi	fp,sp,8
 1006c10:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1006c14:	e0bfff17 	ldw	r2,-4(fp)
 1006c18:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1006c1c:	e0bffe17 	ldw	r2,-8(fp)
 1006c20:	1005003a 	cmpeq	r2,r2,zero
 1006c24:	1000021e 	bne	r2,zero,1006c30 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1006c28:	002af070 	cmpltui	zero,zero,43969
 1006c2c:	00000106 	br	1006c34 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1006c30:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1006c34:	e037883a 	mov	sp,fp
 1006c38:	df000017 	ldw	fp,0(sp)
 1006c3c:	dec00104 	addi	sp,sp,4
 1006c40:	f800283a 	ret

01006c44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1006c44:	defffd04 	addi	sp,sp,-12
 1006c48:	dfc00215 	stw	ra,8(sp)
 1006c4c:	df000115 	stw	fp,4(sp)
 1006c50:	df000104 	addi	fp,sp,4
 1006c54:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1006c58:	e13fff17 	ldw	r4,-4(fp)
 1006c5c:	1006c040 	call	1006c04 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1006c60:	003fff06 	br	1006c60 <_exit+0x1c>
 1006c64:	01006a50 	cmplti	r4,zero,425
